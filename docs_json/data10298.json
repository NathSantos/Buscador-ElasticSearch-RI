{"add": {"doc": {"field": [{"@name": "docid", "#text": "BR-TU.14596"}, {"@name": "filename", "#text": "20955_TCC%2bArtigo.pdf"}, {"@name": "filetype", "#text": "PDF"}, {"@name": "text", "#text": "UNIVERSIDADE FEDERAL DE SANTA CATARINA\nCurso Superior de Ci\u00eancias da Computa\u00e7\u00e3o\n\nINTEGRA\u00c7\u00c3O ENTRE HTML5 E JSF 2.0\nEM APLICA\u00c7\u00d5ES WEB OFFLINE\n\nROBERTO JORGE HADDOCK LOBO FILHO\n\nFlorian\u00f3polis - SC, 2010.\n\n\n\nUNIVERSIDADE FEDERAL DE SANTA CATARINA\nDEPARTAMENTO DE INFORM\u00c1TICA E ESTAT\u00cdSTICA\n\nCurso Superior de Ci\u00eancias da Computa\u00e7\u00e3o\n\nINTEGRA\u00c7\u00c3O ENTRE HTML5 E JSF 2.0\nEM APLICA\u00c7\u00d5ES WEB OFFLINE\n\nROBERTO JORGE HADDOCK LOBO FILHO\n\nTrabalho de Conclus\u00e3o de Curso\napresentado \u00e0 UFSC como parte dos\nrequisitos para obter grau de Bacharel em\nCi\u00eancias da Computa\u00e7\u00e3o.\n\nOrientador: Leandro Jos\u00e9 Komosinski.\n\nFlorian\u00f3polis \u2013 SC, junho de 2010.\n\n\n\n3\n\nROBERTO JORGE HADDOCK LOBO FILHO\n\nINTEGRA\u00c7\u00c3O ENTRE HTML5 E JSF 2.0\nEM APLICA\u00c7\u00d5ES WEB OFFLINE\n\nTrabalho de Conclus\u00e3o de Curso\napresentado \u00e0 UFSC como parte dos\nrequisitos para obter grau de Bacharel em\nCi\u00eancias da Computa\u00e7\u00e3o.\n\nOrientador:\n\n___________________________________________\nLeandro Jos\u00e9 Komosinski\n\nBanca Examinadora:\n\n___________________________________________\nRodrigo Carvalho Machado\n\n___________________________________________\nFrank Augusto Siqueira\n\n\n\nAGRADECIMENTOS\n\nMeus profundos agradecimentos ao meu pai e minha m\u00e3e pelo suporte nos\nmais diversos aspectos durante toda a minha vida contribuindo para que eu\nchegasse at\u00e9 aqui.\n\nAo professor Leandro Jos\u00e9 Komosinski por ter aceitado, mesmo com o pouco\ntempo dispon\u00edvel, orientar este trabalho.\n\nAo meu chefe e colega de trabalho Rodrigo Carvalho Machado e ao professor\nFrank Augusto Siqueira, por aceitarem participar da banca examinadora.\n\nA todos os professores e demais colaboradores da UFSC que se esfor\u00e7am em\npropiciar o ensino com excel\u00eancia.\n\nAos amigos e colegas com quem tamb\u00e9m aprendi e que deixar\u00e3o saudades.\nOfere\u00e7o tamb\u00e9m um agradecimento especial aos conhecidos e an\u00f4nimos que\n\ncontribu\u00edram de alguma forma para o fornecimento de fontes de pesquisa e materiais\nbibliogr\u00e1ficos para o desenvolvimento deste trabalho.\n\n\n\nResumo\n\nA constante concep\u00e7\u00e3o de novas tecnologias e conceitos de desenvolvimento de\nsoftware e de sua compatibilidade com as tecnologias j\u00e1 existentes \u00e9 um dos\ngrandes desafios na \u00e1rea de ci\u00eancias da computa\u00e7\u00e3o. Neste contexto, a utiliza\u00e7\u00e3o\nda WEB \u2013 que originalmente foi concebida com a inten\u00e7\u00e3o e capacidade de exibi\u00e7\u00e3o\nde documentos hipertextos \u2013 como interface gr\u00e1fica ao usu\u00e1rio de sistemas online\nt\u00eam gerado grandes dificuldades e limita\u00e7\u00f5es. Objetiva-se com este trabalho\ndesenvolver uma pesquisa sobre as possibilidades de compatibiliza\u00e7\u00e3o entre duas\ntecnologias modernas relacionadas ao desenvolvimento destes sistemas, tendo\ncomo estudo a cria\u00e7\u00e3o de aplica\u00e7\u00f5es web utilizando implementa\u00e7\u00f5es  provenientes\nda especifica\u00e7\u00e3o JSF 2.0 \u2013 tecnologia padr\u00e3o do JavaEE \u2013 que possam ser\ndisponibilizadas em modo offline \u2013 sem que o usu\u00e1rio necessite estar conectado \u00e0\ninternet - de acordo com as novas funcionalidades oferecidas pelo HTML 5,\nassumindo toda complexidade de comportamentos e intera\u00e7\u00f5es que estas interfaces\ngr\u00e1ficas abrangem.\n\nPalavras-chave: Desenvolvimento WEB. JSF. Aplica\u00e7\u00f5es offline.\n\n\n\nAbstract\n\nThe constant conception of new technologies and concepts of development of\nsoftware and its compatibility with the existing technologies is one of the great\nchallenges in the area of computer sciences. In this context, the WEB interface - that\noriginally was conceived with the intention of handling hipertext documents \u2013 being\nused as graphical interface to the user of systems online has generated great\ndifficulties and limitations. This work objective is to develop a research on the\ncompatibility possibilities between two modern technologies related to the\ndevelopment of such interfaces: the creation of web applications using\nimplementations proceeding from the JSF 2.0 specification - standard JavaEE\ntechnology - that could be accessed offline - without the need of an internet\nconnection - in accordance with the new functionalities offered for HTML 5, assuming\nall complexity of behaviors and interactions that these graphical interfaces enclose.\n\nKeywords: WEB Development. JSF. Offline applications.\n\n\n\nLista de Ilustra\u00e7\u00f5es\n\nFigura 1: Modelo Cliente-Servidor.................................................................... 19\n\nFigura 2: Modelo Cliente Servidor. ................................................................... 20\n\nFigura 3: Particionamento entre cliente e servidor. .......................................... 28\n\nFigura 4: Diagrama de sequ\u00eancia ilustrando os diferentes poss\u00edveis\n\ncomportamentos para diferentes requisi\u00e7\u00f5es. .......................................................... 41\n\nFigura 5: Fases do tratamento padr\u00e3o de requisi\u00e7\u00f5es pelo JSF 2.0. ............... 42\n\nFigura 6: Aplica\u00e7\u00e3o web JSF 2.0 segundo arquitetura proposta pela\n\nespecifica\u00e7\u00e3o JavaEE............................................................................................... 49\n\nFigura 7: Aplica\u00e7\u00e3o web offline com o JSF 2.0 no cliente. ............................... 50\n\nFigura 8: L\u00f3gica espec\u00edfica da aplica\u00e7\u00e3o. ........................................................ 51\n\nFigura 9: Separa\u00e7\u00e3o de l\u00f3gica da aplica\u00e7\u00e3o, representando as por\u00e7\u00f5es de\n\nl\u00f3gica executadas no servidor e no cliente offline..................................................... 52\n\nFigura 10: Duas diferentes implementa\u00e7\u00f5es para a interface dos servi\u00e7os\n\noferecidos por um EJB, uma pelos processamentos no servidor e a outra pelas\n\na\u00e7\u00f5es a serem realizadas no cliente quando offline. ................................................ 54\n\nFigura 11: Acesso e armazenamento de dados necess\u00e1rio tamb\u00e9m pelo cliente\n\noffline. ....................................................................................................................... 55\n\nFigura 12: Utiliza\u00e7\u00e3o de plug-in para execu\u00e7\u00e3o de c\u00f3digo Java do cliente offline.\n\n.................................................................................................................................. 58\n\nFigura 13: Utiliza\u00e7\u00e3o de Applet Java para execu\u00e7\u00e3o de c\u00f3digo Java do cliente\n\noffline. ....................................................................................................................... 60\n\nFigura 14: Motor de sincroniza\u00e7\u00e3o de dados. .................................................. 62\n\nFigura 15: Impacto de processamentos relacionados \u00e0 l\u00f3gica de neg\u00f3cio sobre\n\ndados de uma aplica\u00e7\u00e3o........................................................................................... 63\n\nFigura 16: A n\u00e3o equival\u00eancia de dados armazenados no cliente e no servidor,\n\ndemonstrando a necessidade de armazenamento no cliente de dados j\u00e1\n\nprocessados no servidor e da execu\u00e7\u00e3o de processamentos no servidor relativos\n\naos dados coletados no cliente. ............................................................................... 65\n\n\n\nSum\u00e1rio\n\nRESUMO ........................................................................................................... 5\nABSTRACT ....................................................................................................... 6\nLISTA DE ILUSTRA\u00c7\u00d5ES ................................................................................ 7\n1 \u2013 INTRODU\u00c7\u00c3O ........................................................................................... 11\n\n1.1 APRESENTA\u00c7\u00c3O DO TEMA.....................................................................................................12\n\n1.2 MOTIVA\u00c7\u00c3O DA PESQUISA.....................................................................................................14\n\n1.3 OBJETIVOS ..........................................................................................................................15\n\n1.4 METODOLOGIA E PROCEDIMENTOS........................................................................................16\n\n1.4.1 Pesquisa bibliogr\u00e1fica ................................................................................................16\n\n1.4.2 Levantamento das caracter\u00edsticas relevantes para solu\u00e7\u00e3o do problema.................17\n\n1.4.3 An\u00e1lise da viabilidade da compatibiliza\u00e7\u00e3o das tecnologias .....................................17\n\n1.4.4 Desenvolvimento de prot\u00f3tipos de teste ....................................................................17\n\n1.4.5 An\u00e1lise dos resultados ...............................................................................................17\n\n1.5 Estrutura do Texto.........................................................................................................17\n\n2 \u2013 DESENVOLVIMENTO DE APLICA\u00c7\u00d5ES WEB........................................ 18\n\n2.1 MODELO CLIENTE-SERVIDOR ................................................................................................19\n\n2.1.1 Considera\u00e7\u00f5es do modelo cliente-servidor ................................................................20\n\n2.2 CLIENT-SIDE SCRIPTING........................................................................................................21\n\n2.3 COMUNICA\u00c7\u00c3O CLIENTE-SERVIDOR .......................................................................................22\n\n2.3.1 Comunica\u00e7\u00e3o s\u00edncrona ..............................................................................................22\n\n2.3.2 Comunica\u00e7\u00e3o ass\u00edncrona...........................................................................................22\n\n2.3.3 AJAX ..........................................................................................................................23\n\n2.3.4 Considera\u00e7\u00f5es da comunica\u00e7\u00e3o entre cliente e servidor ..........................................23\n\n2.4 PARTICIONAMENTO DE APLICA\u00c7\u00d5ES ENTRE CLIENTE E SERVIDOR............................................23\n\n2.4.1 Mandat\u00f3rio ao servidor ..............................................................................................25\n\n2.4.2 Considera\u00e7\u00f5es para o servidor ..................................................................................26\n\n2.4.3 Considera\u00e7\u00f5es para o cliente.....................................................................................27\n\n2.5 APLICA\u00c7\u00d5ES WEB OFFLINE....................................................................................................28\n\n2.5.1 Requisitos para disponibiliza\u00e7\u00e3o offline de uma aplica\u00e7\u00e3o web ................................29\n\n3 \u2013 HTML5 ....................................................................................................... 31\n\n3.1 HIST\u00d3RIA DO HTML .............................................................................................................31\n\n3.2 O HTML5 E O DESENVOLVIMENTO DE APLICA\u00c7\u00d5ES WEB.......................................................32\n\n\n\n9\n\n3.2.1 Funcionalidades b\u00e1sicas abordadas pelo HTML5 .....................................................33\n\n3.3 DESENVOLVIMENTO DE APLICA\u00c7\u00d5ES WEB OFFLINE COM O HTML5..........................................34\n\n3.4 CACHEAMENTO DE RECURSOS ..............................................................................................34\n\n3.4.1 Manifesto....................................................................................................................35\n\n3.4.2 Eventos do cacheamento...........................................................................................35\n\n3.4.3 Caches de aplica\u00e7\u00e3o ..................................................................................................35\n\n3.4.4 Grupos de caches de aplica\u00e7\u00e3o.................................................................................36\n\n3.5 WEB STORAGE ....................................................................................................................37\n\n3.5.1 O atributo sessionStorage..........................................................................................37\n\n3.5.2 O atributo localStorage ..............................................................................................37\n\n3.5.3 A interface Storage ....................................................................................................37\n\n3.6 WEB SQL DATABASE ...........................................................................................................38\n\n3.6.1 Bases de dados .........................................................................................................38\n\n3.6.2 M\u00e9todos de acesso ....................................................................................................38\n\n3.7 COMPATIBILIDADE DO HTML5 ..............................................................................................38\n\n4 \u2013 JSF 2.0....................................................................................................... 39\n\n4.1 CICLO DE VIDA DE PROCESSAMENTO DE REQUISI\u00c7\u00d5ES ...........................................................40\n\n4.2 CEN\u00c1RIOS DE PROCESSAMENTO DE REQUISI\u00c7\u00d5ES .................................................................40\n\n4.2.1 Requisi\u00e7\u00e3o N\u00e3o-Faces gera Resposta Faces ...........................................................41\n\n4.2.2 Requisi\u00e7\u00e3o Faces gera Resposta Faces ...................................................................42\n\n4.2.3 Requisi\u00e7\u00e3o Faces gera Resposta N\u00e3o-Faces ...........................................................43\n\n4.3 FASES DO CICLO DE VIDA DO PROCESSAMENTO DE REQUISI\u00c7\u00c3O .............................................43\n\n4.3.1 Restaura\u00e7\u00e3o da visualiza\u00e7\u00e3o .....................................................................................43\n\n4.3.2 Aplica\u00e7\u00e3o dos valores da requisi\u00e7\u00e3o..........................................................................43\n\n4.3.3 Valida\u00e7\u00e3o do processamento.....................................................................................44\n\n4.3.4 Atualiza\u00e7\u00e3o dos valores do modelo ...........................................................................44\n\n4.3.5 Invoca\u00e7\u00e3o da aplica\u00e7\u00e3o..............................................................................................44\n\n4.3.6 Renderiza\u00e7\u00e3o da resposta .........................................................................................45\n\n4.4 PROCESSAMENTO DE EVENTOS ............................................................................................45\n\n4.5 CONCEITOS QUE IMPACTAM NAS FASES DO CICLO DE VIDA......................................................45\n\n4.5.1 AJAX ..........................................................................................................................46\n\n4.5.2 Comportamento de componentes..............................................................................46\n\n5 \u2013 INTEGRA\u00c7\u00c3O DO JSF 2 E HTML5 OFFLINE.......................................... 47\n\n\n\n10\n\n5.1 DESAFIOS INERENTES \u00c0S TECNOLOGIAS EM QUEST\u00c3O ............................................................47\n\n5.1.1 Relativos ao HTML5 e aos navegadores web ...........................................................47\n\n5.1.2 Relativos ao JSF 2.0 e ao modelo cliente-servidor da web.......................................48\n\n5.1.3 Problem\u00e1tica da compatibiliza\u00e7\u00e3o .............................................................................48\n\n5.2 C\u00d3DIGO NECESS\u00c1RIO PARA EXECU\u00c7\u00c3O OFFLINE NO CLIENTE ..................................................48\n\n5.2.1 JavaServer Faces ......................................................................................................49\n\n5.2.2 Particionamento da l\u00f3gica de neg\u00f3cios entre cliente e servidor................................50\n\n5.2.3 C\u00f3digo de l\u00f3gica de neg\u00f3cios plaus\u00edvel ao cliente ....................................................53\n\n5.2.4 Dados da aplica\u00e7\u00e3o....................................................................................................54\n\n5.3 EXECU\u00c7\u00c3O DE C\u00d3DIGO INDEPENDENTE DO SERVIDOR NO CLIENTE ..........................................56\n\n5.3.1 Interface gr\u00e1fica e o cacheamento de recursos.........................................................56\n\n5.3.2 C\u00f3digo Java da aplica\u00e7\u00e3o ..........................................................................................57\n\n5.3.3 Plug-ins para navegadores ........................................................................................57\n\n5.3.4 Java Applets...............................................................................................................59\n\n5.3.5 JavaScript...................................................................................................................61\n\n5.4 INTEGRIDADE E SINCRONIZA\u00c7\u00c3O DE DADOS ...........................................................................62\n\n6 \u2013 CONCLUS\u00d5ES .......................................................................................... 66\n\n6.1 INCOER\u00caNCIA COM CULTURA DE ALTA DISPONIBILIDADE DE SERVI\u00c7OS .....................................67\n\n6.1.1 Inflexibilidade no particionamento de l\u00f3gica ..............................................................67\n\n6.1.2 Desafios inerentes \u00e0s tarefas de sincroniza\u00e7\u00e3o ........................................................68\n\n6.2 NECESSIDADE DE COMPLEXOS MECANISMOS ESPEC\u00cdFICOS A CADA APLICA\u00c7\u00c3O........................68\n\n6.3 DEPEND\u00caNCIAS NA M\u00c1QUINA DO CLIENTE ..............................................................................69\n\n6.4 N\u00c3O ATENDIMENTO NATIVO A RIA .........................................................................................70\n\n6.5 CONSIDERA\u00c7\u00d5ES FINAIS .......................................................................................................71\n\n6.6 TRABALHOS FUTUROS..........................................................................................................72\n\n7 \u2013 REFER\u00caNCIAS.......................................................................................... 73\nAP\u00caNDICE A - ARTIGO .................................................................................. 75\n\n\n\n1 \u2013 INTRODU\u00c7\u00c3O\n\nO desenvolvimento de aplica\u00e7\u00f5es web avan\u00e7a lado a lado com a evolu\u00e7\u00e3o\n\ndos conceitos que prop\u00f5em novas abordagens de utiliza\u00e7\u00e3o das tecnologias\n\nexistentes, novas demandas de uso e novos desafios origin\u00e1rios da utiliza\u00e7\u00e3o do\n\nque j\u00e1 existe como base tecnol\u00f3gica e conceitual para idealiza\u00e7\u00e3o de novas\n\nsolu\u00e7\u00f5es.\n\nA constante concep\u00e7\u00e3o de novas solu\u00e7\u00f5es permite que novos patamares de\n\ncomplexidade sejam aos poucos simplificados e estabelecidos, possibilitando a\n\namplia\u00e7\u00e3o dos limites das tecnologias existentes e abrindo caminho para a\n\nnecessidade de cria\u00e7\u00e3o de novos patamares. A web, por si, foi originalmente\n\nconcebida para a exibi\u00e7\u00e3o, organiza\u00e7\u00e3o e compartilhamento de documentos\n\nhipertexto e, com sua ampla ado\u00e7\u00e3o, junto ao crescimento da internet, gerou-se a\n\ndemanda de sua evolu\u00e7\u00e3o.\n\nAo que uma funda\u00e7\u00e3o tecnol\u00f3gica \u00e9 concebida como plataforma, permiti-se a\n\nutiliza\u00e7\u00e3o desta para a resolu\u00e7\u00e3o de problemas de maior complexidade. Do simples\n\nfornecimento de p\u00e1ginas est\u00e1ticas, a web abriu espa\u00e7o, inicialmente, para ger\u00eancia\n\nde conte\u00fado dinamicamente gerado, seguidamente provendo a oportunidade de\n\ncria\u00e7\u00e3o de aplica\u00e7\u00f5es simples, exibidas estaticamente no cliente, n\u00e3o diferindo de\n\np\u00e1ginas HTML simples. A demanda, ent\u00e3o, pelo desenvolvimento de aplica\u00e7\u00f5es RIA\n\n(Aplica\u00e7\u00f5es ricas ao usu\u00e1rio), ou seja, que provessem funcionalidades avan\u00e7adas e\n\nrica experi\u00eancia de uso, naturalmente estabeleceu-se, sem possuir nenhuma\n\nfunda\u00e7\u00e3o tecnol\u00f3gica madura, gerando ent\u00e3o a necessidade de cria\u00e7\u00e3o de novas\n\nsolu\u00e7\u00f5es. Este processo traz a cria\u00e7\u00e3o de novas tecnologias, por\u00e9m, surge uma\n\ngrande problem\u00e1tica ligada a quest\u00f5es de compatibilidade. Cada problema atacado\n\nestabelece um n\u00famero de solu\u00e7\u00f5es que s\u00e3o naturalmente selecionadas com o\n\ntempo e filtradas principalmente de acordo com a aceita\u00e7\u00e3o e ado\u00e7\u00e3o de seu uso.\n\nMudan\u00e7as de paradigmas decorrentes da adapta\u00e7\u00e3o de novos conceitos e\n\ndemandas geram novas necessidades que nem sempre podem ser atendidas com\n\numa base tecnol\u00f3gica j\u00e1 existente. Estas bifurca\u00e7\u00f5es entre as solu\u00e7\u00f5es conceituais\n\nde uma tecnologia e novas necessidades e demandas exige um estudo para\n\ndeterminar a possibilidade de um trabalho de compatibiliza\u00e7\u00e3o. Ao levar em\n\nconsidera\u00e7\u00e3o o fato de que solu\u00e7\u00f5es propostas podem naturalmente divergir em\n\nm\u00faltiplas vertentes tecnol\u00f3gicas, o problema de compatibiliza\u00e7\u00e3o se estende ainda\n\n\n\n12\n\nmais. De um ponto de vista mercadol\u00f3gico, a sobreviv\u00eancia de uma solu\u00e7\u00e3o n\u00e3o\n\nsomente pode ser diretamente atrelada \u00e0 sua capacidade de simplifica\u00e7\u00e3o do\n\nproblema que a mesma se prop\u00f5e a resolver - de acordo com a mitiga\u00e7\u00e3o das\n\nnecessidades e requisitos que o problema imp\u00f5e \u2013 mas tamb\u00e9m \u00e0 sua ado\u00e7\u00e3o. Isto\n\nsignifica que, assim como a compatibilidade entre diferentes vers\u00f5es de uma\n\nsolu\u00e7\u00e3o \u00e9 importante, a capacidade de adapta\u00e7\u00e3o de uma tecnologia para o\n\natendimento de novas necessidades mercadol\u00f3gicas pode \u2013 mesmo que\n\nindiretamente \u2013 ser fundamental para sua continuidade.\n\n1.1 Apresenta\u00e7\u00e3o do tema\n\nA WEB (tamb\u00e9m conhecida como World Wide Web ou WWW) \u00e9 um sistema\n\nde documentos em hiperm\u00eddia que s\u00e3o interligados e executados na Internet.\n\nSegundo BERNERS-LEE (1989), o intento original do desenvolvimento da web foi\n\ntornar mais f\u00e1cil o compartilhamento de documentos de pesquisas. Inicialmente, o\n\nservi\u00e7o oferecido pela Web disponibilizava hipertextos e a possibilidade da\n\nrealiza\u00e7\u00e3o de liga\u00e7\u00f5es unidirecionais, na forma de refer\u00eancias.\n\nNa \u00e9poca, a maior parte dos sistemas de informa\u00e7\u00e3o prevalentes utilizava\n\numa estrutura hier\u00e1rquica fixa para organizar informa\u00e7\u00e3o, como por exemplo nos\n\ngrupos de noticias Usenet (do ingl\u00eas Unix User Network). Tim Berners-Lee descreu,\n\nem sua proposta inicial do sistema que viria a se tornar a web, a exist\u00eancia de\n\ndiversos problemas quanto \u00e0 perda de informa\u00e7\u00f5es e quanto \u00e0 falta de flexibilidade\n\nde um modelo hier\u00e1rquico para a organiza\u00e7\u00e3o de dados para a modelagem do\n\nmundo real.\n\nDesde a concep\u00e7\u00e3o da web, dada publicamente e oficialmente em 6 de\n\nagosto de 1991, sua popularidade cresce aceleradamente acompanhando o\n\ncrescimento da internet. Seu r\u00e1pido crescimento, que se mant\u00e9m continuamente\n\nacelerando, age como um meio global de transforma\u00e7\u00e3o da economia, da veicula\u00e7\u00e3o\n\nde informa\u00e7\u00e3o e de comercializa\u00e7\u00e3o de bens e servi\u00e7os. Segundo (NETO, 2001), a\n\nimport\u00e2ncia econ\u00f4mica da web cresce junto \u00e0 sua popularidade.\n\nAtendendo \u00e0 demanda gerada pela populariza\u00e7\u00e3o da web - e por sua\n\ncrescente import\u00e2ncia econ\u00f4mica \u2013 a gera\u00e7\u00e3o de p\u00e1ginas web de conte\u00fado\n\n\n\n13\n\ndin\u00e2mico se tornou uma necessidade, criando p\u00e1ginas web que podem ser\n\ncustomizadas de acordo com cada cliente e com o contexto da navega\u00e7\u00e3o. Com\n\nisso, a capacidade de gera\u00e7\u00e3o de p\u00e1ginas dinamicamente no servidor permitiu que\n\nsistemas pudessem ser criados e que a web seja utilizada como uma interface\n\ngr\u00e1fica, e a possibilidade de execu\u00e7\u00e3o de linguagens de script no cliente juntos ao\n\ndesenvolvimento de m\u00e9todos de comunica\u00e7\u00e3o ass\u00edncrona com o servidor permitiram\n\nque estas interfaces gr\u00e1ficas deixassem de ser simples seq\u00fc\u00eancias de p\u00e1ginas\n\nest\u00e1ticas.\n\nOs primeiros sistemas web de gera\u00e7\u00e3o de conte\u00fado din\u00e2mico geralmente\n\nobjetivavam a simplifica\u00e7\u00e3o da manutenibilidade e expansibilidade de grandes\n\nsistemas de informa\u00e7\u00e3o. A evolu\u00e7\u00e3o destes conceitos \u2013 e das tecnologias envolvidas\n\n\u2013 permite que aplica\u00e7\u00f5es web tenham cada vez mais capacidade de realizar as\n\nmesmas funcionalidades que aplica\u00e7\u00f5es desktop nativas.\n\nNeste contexto, diversos frameworks foram criados para facilitar e possibilitar\n\no desenvolvimento de aplica\u00e7\u00f5es web, cada um utilizando um conjunto de\n\nabordagens para simplificar as complexidades provenientes da adapta\u00e7\u00e3o da web \u2013\n\nque inicialmente foi concebida com outros prop\u00f3sitos \u2013 para as novas demandas e\n\nnovos requisitos funcionais. O conseq\u00fcente amadurecimento do desenvolvimento de\n\naplica\u00e7\u00f5es web possibilita a migra\u00e7\u00e3o de servi\u00e7os para a web, tornando o conceito\n\nde instala\u00e7\u00e3o de software em uma m\u00e1quina desktop obsoleto neste contexto. Esta\n\nmudan\u00e7a de paradigma permite que o acesso a servi\u00e7os e seus respectivos dados\n\nseja independente de um computador espec\u00edfico.\n\nO JavaServer Faces 2.0 \u00e9 a \u00faltima vers\u00e3o do mais maduro framework de\n\ndesenvolvimento de aplica\u00e7\u00f5es web contido na especifica\u00e7\u00e3o Java EE 6 (Java\n\nEnterprise Edition). Ele \u00e9 projetado para aliviar significativamente o encargo de\n\nescrita e manuten\u00e7\u00e3o de interfaces gr\u00e1ficas de aplicativos que rodam em um\n\nservidor de aplicativos Java e que geram suas interfaces de usu\u00e1rio dinamicamente\n\npara um cliente-alvo.\n\nA busca da continuidade da expans\u00e3o das capacidades de aplica\u00e7\u00f5es web\n\ntem, por\u00e9m, uma grande limita\u00e7\u00e3o em compara\u00e7\u00e3o a aplica\u00e7\u00f5es web. A utiliza\u00e7\u00e3o\n\npura da web como plataforma para aplica\u00e7\u00f5es requer que o acesso \u00e0 internet esteja\n\ndispon\u00edvel para que o usu\u00e1rio possa acessar uma aplica\u00e7\u00e3o, de acordo com as\n\n\n\n14\n\npr\u00f3prias caracter\u00edsticas da web. Usu\u00e1rios de aplica\u00e7\u00f5es web t\u00edpicas s\u00e3o capazes de\n\nutilizar estas aplica\u00e7\u00f5es somente quando conectados \u00e0 internet.\n\nA especifica\u00e7\u00e3o do HTML5, linguagem de marca\u00e7\u00e3o utilizada para produ\u00e7\u00e3o\n\nde p\u00e1ginas web, prop\u00f5e uma das abordagens que est\u00e3o sendo desenvolvidas para\n\ndiminuir esta limita\u00e7\u00e3o, visando permitir a cria\u00e7\u00e3o de aplica\u00e7\u00f5es web que forne\u00e7am a\n\ncapacidade de execu\u00e7\u00e3o \u2013 pelo menos parcial \u2013 enquanto offline, sem a\n\nnecessidade de uma conex\u00e3o com a internet.\n\nEste trabalho busca, diante deste contexto, estudar a possibilidade de\n\ncompatibiliza\u00e7\u00e3o do JSF 2.0 \u2013 framework de desenvolvimento de aplica\u00e7\u00f5es web\n\ncuja grande parte de seu processamento ocorre no servidor \u2013 com as facilita\u00e7\u00f5es\n\noferecidas pela especifica\u00e7\u00e3o do HTML5 de cria\u00e7\u00e3o aplica\u00e7\u00e3o web offline \u2013 que\n\nrequer execu\u00e7\u00e3o no cliente do c\u00f3digo disponibilizado.\n\nAnte a esta proposta, surgem alguns questionamentos: a compatibiliza\u00e7\u00e3o\n\ndestas tecnologias \u00e9 poss\u00edvel? Quais s\u00e3o as poss\u00edveis alternativas para possibilitar a\n\nexecu\u00e7\u00e3o no cliente de por\u00e7\u00f5es de c\u00f3digo que no JSF s\u00e3o originalmente\n\nprocessados no servidor? Quais seriam os processamentos do servidor cuja\n\nexecu\u00e7\u00e3o seria necess\u00e1ria no cliente para que uma aplica\u00e7\u00e3o desenvolvida com a\n\nutiliza\u00e7\u00e3o do JSF pudesse ser executada independentemente do servidor? Como\n\ndefinir e isolar a por\u00e7\u00e3o de l\u00f3gica de neg\u00f3cio da aplica\u00e7\u00e3o contida no servidor \u2013\n\nlevando-se em considera\u00e7\u00e3o que existem obriga\u00e7\u00f5es do servidor cujo isolamento\n\nn\u00e3o \u00e9 poss\u00edvel - que deveria ser trazida ao cliente?\n\n1.2 Motiva\u00e7\u00e3o da pesquisa\n\nAnte uma acelerada evolu\u00e7\u00e3o de conceitos de utiliza\u00e7\u00e3o da web e de\n\ndiferentes t\u00e9cnicas de desenvolvimento de aplica\u00e7\u00f5es neste contexto, junto a seu\n\ncrescente mercado mundial e import\u00e2ncia econ\u00f4mica, necessita-se um estudo e\n\nan\u00e1lise sobre as possibilidades de compatibiliza\u00e7\u00e3o entre os diversos conceitos e\n\nabordagens a fim de divulg\u00e1-las, incentivando a pesquisa e inova\u00e7\u00e3o nesta \u00e1rea.\n\nMuito h\u00e1 a ser explorado na \u00e1rea de desenvolvimento de software para a web.\n\nProblemas como a adapta\u00e7\u00e3o das tecnologias existentes decorrentes do\n\ndesenvolvimento da web para ampliar a capacidade dos sistemas que podem ser\n\ncriados neste ambiente, a necessidade de que a compatibilidade das mesmas seja\n\n\n\n15\n\nmantida, tanto em rela\u00e7\u00e3o \u00e0s vers\u00f5es anteriores quanto \u00e0s novas necessidades da\n\nind\u00fastria de desenvolvimento e dos usu\u00e1rios em geral e a simplifica\u00e7\u00e3o dos\n\nprocessos e dificuldades envolvidos despertam a grande necessidade de um maior\n\nestudo nesta \u00e1rea, que vem revolucionando o mundo empresarial e a pr\u00f3pria\n\ninternet.\n\nA cria\u00e7\u00e3o de aplica\u00e7\u00f5es web desencadeou uma s\u00e9rie de mudan\u00e7as de\n\nparadigmas na computa\u00e7\u00e3o, trazendo funcionalidades que originalmente eram\n\ndispon\u00edveis somente em aplica\u00e7\u00f5es desktop tradicionais para a plataforma web na\n\nforma de servi\u00e7os descentralizados acess\u00edveis de qualquer dispositivo que tenha\n\ncapacidade de navega\u00e7\u00e3o na web. Agora, outra mudan\u00e7a de paradigma prop\u00f5e a\n\ndisponibiliza\u00e7\u00e3o de aplica\u00e7\u00f5es web em determinados computadores, atrav\u00e9s de\n\narmazenamento local de ambos o c\u00f3digo de execu\u00e7\u00e3o e os dados do usu\u00e1rio,\n\npermitindo sua utiliza\u00e7\u00e3o - ao menos parcial - independentemente da exist\u00eancia de\n\numa conex\u00e3o com a internet.\n\nA busca por meios para compatibilizar a \u00faltima vers\u00e3o do JavaServer Faces \u2013\n\numa importante framework de desenvolvimento de aplica\u00e7\u00f5es web \u2013 com as\n\ncapacidades oferecidas pela especifica\u00e7\u00e3o do HTML5 de disponibiliza\u00e7\u00e3o de\n\naplica\u00e7\u00f5es quando offline, ou seja, em ambientes em que o usu\u00e1rio esteja privado\n\nda possibilidade de acesso a internet, pode obter resultados significativos nesta \u00e1rea\n\nque ainda se encontra em fase longe da matura\u00e7\u00e3o.\n\nH\u00e1 ent\u00e3o a necessidade da pesquisa, an\u00e1lise e compara\u00e7\u00e3o da possibilidade\n\nde compatibiliza\u00e7\u00e3o entre estas tecnologias e conceitos, em termos da viabilidade\n\nsegundo os princ\u00edpios b\u00e1sicos do funcionamento do JSF, de complexidade, dos\n\nposs\u00edveis impactos e requisitos ao usu\u00e1rio, e dos benef\u00edcios em rela\u00e7\u00e3o \u00e0s\n\ndiferentes poss\u00edveis solu\u00e7\u00f5es.\n\n1.3 Objetivos\n\nEste trabalho tem como principal objetivo a pesquisa sobre a aplicabilidade e\n\nviabilidade da compatibiliza\u00e7\u00e3o entre o framework JSF 2.0, devido \u00e0 sua import\u00e2ncia\n\nno desenvolvimento de aplica\u00e7\u00f5es web atrav\u00e9s da linguagem Java, e as\n\nfuncionalidades propostas pelo HTML5 de armazenamento local de dados de\n\n\n\n16\n\nexecu\u00e7\u00e3o e de usu\u00e1rio, para permitir a cria\u00e7\u00e3o de aplica\u00e7\u00f5es web que possam ser\n\ndisponibilizadas e executadas mesmo quando o usu\u00e1rio estiver offline.\n\nSeus objetivos espec\u00edficos compreendem:\n\nDefinir as caracter\u00edsticas compat\u00edveis e incompat\u00edveis do funcionamento do\n\nframework JSF em rela\u00e7\u00e3o ao modelo de disponibiliza\u00e7\u00e3o de aplica\u00e7\u00f5es web offline\n\ndefinidos pelas funcionalidades oferecidas pelo HTML5;\n\nAnalisar o grau de independ\u00eancia poss\u00edvel entre a aplica\u00e7\u00e3o cliente em\n\nrela\u00e7\u00e3o ao servidor, definindo os requisitos para a possibilita\u00e7\u00e3o de que aplica\u00e7\u00f5es\n\nweb tradicionais possam ser utilizadas offline junto as obriga\u00e7\u00f5es;\n\nDefinir o conjunto de poss\u00edveis medidas e solu\u00e7\u00f5es para a compatibiliza\u00e7\u00e3o\n\ndestas tecnologias;\n\nAnalisar os impactos e a viabilidade das poss\u00edveis diferentes alternativas de\n\ncompatibiliza\u00e7\u00e3o;\n\nImplementar prot\u00f3tipos realizando a prova de conceito sobre a melhor solu\u00e7\u00e3o\n\nencontrada;\n\n1.4 Metodologia e procedimentos\n\nAs etapas de realiza\u00e7\u00e3o do projeto compreendem:\n\nPesquisa bibliogr\u00e1fica;\n\nLevantamento das caracter\u00edsticas relevantes para solu\u00e7\u00e3o do problema;\n\nAn\u00e1lise da viabilidade da compatibiliza\u00e7\u00e3o das tecnologias;\n\nDesenvolvimento de prot\u00f3tipos de teste;\n\nAn\u00e1lise dos resultados.\n\n1.4.1 Pesquisa bibliogr\u00e1fica\n\nEsta etapa compreende o levantamento de informa\u00e7\u00f5es necess\u00e1rias para a\n\ncompreens\u00e3o dos problemas relacionados ao desenvolvimento de aplica\u00e7\u00f5es para a\n\nweb e relacionados \u00e0 disponibiliza\u00e7\u00e3o das mesmas em modo offline, assim como o\n\nestudo do funcionamento e das caracter\u00edsticas do HTML5 e do JSF 2.0 \u2013 e outras\n\ntecnologias envolvidas \u2013 com o objetivo de viabilizar o estudo proposto por este\n\ntrabalho.\n\n\n\n17\n\n1.4.2 Levantamento das caracter\u00edsticas relevantes para solu\u00e7\u00e3o do\nproblema\n\nO levantamento das caracter\u00edsticas relevantes ao problema \u00e9 realizado a fim\n\nde determinar as possibilidades, as limita\u00e7\u00f5es e os desafios estabelecidos pela\n\nutiliza\u00e7\u00e3o das tecnologias escolhidas, ou seja, a fim de determinar o cen\u00e1rio e as\n\nposs\u00edveis abordagens para viabiliza\u00e7\u00e3o da compatibiliza\u00e7\u00e3o proposta.\n\n1.4.3 An\u00e1lise da viabilidade da compatibiliza\u00e7\u00e3o das tecnologias\n\nCompreende a an\u00e1lise da viabilidade pr\u00e1tica de compatibiliza\u00e7\u00e3o do JSF 2.0\n\npara a possibilita\u00e7\u00e3o da cria\u00e7\u00e3o de aplica\u00e7\u00f5es web offline de acordo com as\n\nlimita\u00e7\u00f5es tecnol\u00f3gicas impostas pelas caracter\u00edsticas do problema e as poss\u00edveis\n\nabordagens para resolu\u00e7\u00e3o dos desafios existentes.\n\n1.4.4 Desenvolvimento de prot\u00f3tipos de teste\n\nO desenvolvimento de prot\u00f3tipos de teste \u00e9 feito a fim de validar a possibilidade\n\nde adapta\u00e7\u00e3o das tecnologias estudadas para a resolu\u00e7\u00e3o do problema.\n\n1.4.5 An\u00e1lise dos resultados\n\nOs resultados s\u00e3o analisados e interpretados, para a documenta\u00e7\u00e3o dos\n\nmesmos.\n\n1.5 Estrutura do Texto\n\nOs subseq\u00fcentes cap\u00edtulos deste trabalho compreendem os assuntos\n\nrelacionados ao desenvolvimento de aplica\u00e7\u00f5es web, ao HTML 5 e as suas\n\nfuncionalidades especificadas para a viabiliza\u00e7\u00e3o de cria\u00e7\u00e3o de aplica\u00e7\u00f5es web\n\noffline, o framework JavaServer Faces 2.0, a problem\u00e1tica e as poss\u00edveis\n\nabordagens de integra\u00e7\u00e3o entre estas tecnologias e as conclus\u00f5es deste estudo.\n\n\n\n2 \u2013 DESENVOLVIMENTO DE APLICA\u00c7\u00d5ES WEB\n\nAplica\u00e7\u00f5es web \u00e9 um vago termo que descreve aplica\u00e7\u00f5es cuja utiliza\u00e7\u00e3o \u00e9\n\ndispon\u00edvel atrav\u00e9s da web, seja atrav\u00e9s de uma rede - como a Internet ou uma\n\nIntranet - ou por acesso local. O termo inclui tamb\u00e9m qualquer software que \u00e9\n\napresentado em um ambiente controlado por um navegador web, ou codificado em\n\nlinguagens e tecnologias suportadas por estes navegadores.\n\nA demanda do desenvolvimento de aplica\u00e7\u00f5es web vem crescendo e\n\nacelerando constantemente, conseq\u00fcentemente criando uma alta demanda de\n\nviabiliza\u00e7\u00e3o e matura\u00e7\u00e3o de tecnologias para suporte a este processo. Muitos dos\n\ndesafios existentes na \u00e1rea prov\u00eam do fato que o ambiente web n\u00e3o foi concebido\n\ncom o intuito de prover base tecnol\u00f3gica alguma para aplica\u00e7\u00f5es e para o seu\n\ndesenvolvimento.\n\nA web foi originalmente concebida com o intento de facilitar o\n\ncompartilhamento de documentos de pesquisas. O conceito de aplica\u00e7\u00f5es com sua\n\nexecu\u00e7\u00e3o integral ou parcial em um cliente web \u00e9 extremamente recente. A web por\n\nsi teve sua concep\u00e7\u00e3o em 1990, a primeira linguagem que permitiu que algum\n\nc\u00f3digo fosse executado no cliente foi criada em 1995, e somente em 2005 o termo\n\nAJAX foi cunhado e seu conceito popularizado. A plataforma web ainda \u00e9 um\n\nconceito muito abstrato.\n\nEste modelo cliente-servidor ainda est\u00e1 em fase de matura\u00e7\u00e3o e levanta\n\nconstantemente novos questionamentos arquiteturais, tecnol\u00f3gicos e conceituais. As\n\npossibilidades criadas com sua viabiliza\u00e7\u00e3o e os pr\u00f3prios conceitos necess\u00e1rios que\n\nisto seja poss\u00edvel ainda est\u00e3o sendo moldados, e na verdade, muitos deles\n\ncertamente ainda nem foram idealizados. Como deve ser realizada e mantida a\n\ncomunica\u00e7\u00e3o entre cliente e servidor? Quais as poss\u00edveis abordagens para que\n\nnovas tecnologias possam ampliar as capacidades de defini\u00e7\u00e3o e renderiza\u00e7\u00e3o de\n\ninterfaces gr\u00e1ficas de aplica\u00e7\u00f5es web, mantendo a compatibilidade entre\n\nnavegadores e suas vers\u00f5es antigas? Quais s\u00e3o as conseq\u00fc\u00eancias de longo prazo\n\nnos processos de desenvolvimento quanto \u00e0s diferentes abordagens de\n\nparticionamento do c\u00f3digo entre o cliente e o servidor?\n\nDiferentes abordagens tecnol\u00f3gicas e conceituais desenvolvidas na forma de\n\nframeworks prop\u00f5em respostas \u00e0s limita\u00e7\u00f5es e aos desafios existentes devido \u00e0\n\nfalta de uma base bem definida para desenvolvimento de software para a web.\n\n\n\n19\n\nNeste contexto, tanto os problemas existentes quanto as solu\u00e7\u00f5es propostas s\u00e3o\n\nmuito recentes. Ao contr\u00e1rio do desenvolvimento de softwares nativos, n\u00e3o existem\n\nabordagens padronizadas quanto ao desenvolvimento para a web.\n\n\"Desenvolvimento web\" \u00e9 um termo amplo que faz referencia a qualquer\n\natividade de desenvolvimento que envolve a web. O termo pode abranger desde a\n\ncria\u00e7\u00e3o de p\u00e1ginas est\u00e1ticas simples de texto plano at\u00e9 o desenvolvimento de\n\ncomplexas aplica\u00e7\u00f5es e servi\u00e7os baseados na web.\n\n2.1 Modelo cliente-servidor\n\nO modelo cliente-servidor descreve a rela\u00e7\u00e3o entre dois programas de\n\ncomputador em que um programa - o cliente - faz uma solicita\u00e7\u00e3o de servi\u00e7o de\n\noutro programa - o servidor - que responde o pedido. Os clientes, por conseguinte,\n\niniciam sess\u00f5es de comunica\u00e7\u00e3o com os servidores que aguardam e escutam as\n\nrequisi\u00e7\u00f5es de entrada.\n\nFigura 1: Modelo Cliente-Servidor.\n\nA web foi concebida utilizando a arquitetura cliente servidor. O cliente,\n\ncomumente chamado de Navegador Web ou browser, interage com um ou mais\n\nServidor\n\nCliente\nCliente\n\nCliente\n\n\n\n20\n\nservidores atrav\u00e9s do protocolo HTTP (HyperText Transfer Protocol) realizando\n\nrequisi\u00e7\u00f5es de recursos e dados. Servidores web, que normalmente \u2013 mas n\u00e3o\n\nnecessariamente - operam sobre uma rede em hardware separado do cliente, ao\n\nreceberem uma requisi\u00e7\u00e3o de recurso, ou devolvem um recurso est\u00e1tico ou geram a\n\nresposta dinamicamente. Sob a perspectiva do cliente, n\u00e3o existe diferencia\u00e7\u00e3o\n\nentre ambos os casos, e a resposta ser\u00e1 tratada da mesma maneira, ou seja, ser\u00e1\n\nrenderizada diretamente no cliente ou processada por algum script executado no\n\nnavegador.\n\nFigura 2: Modelo Cliente Servidor.\n\n2.1.1 Considera\u00e7\u00f5es do modelo cliente-servidor\n\nA utiliza\u00e7\u00e3o do modelo cliente servidor sobre a qual a web atua traz consigo\n\nalgumas considera\u00e7\u00f5es que impactam na arquitetura de uma aplica\u00e7\u00e3o.\n\nNa maioria dos casos, uma arquitetura cliente servidor permite que os pap\u00e9is e\n\nas responsabilidades de um sistema de computa\u00e7\u00e3o possam ser distribu\u00eddos entre\n\nv\u00e1rios computadores independentes que s\u00e3o conhecidos por si s\u00f3 atrav\u00e9s de uma\n\nrede. Isso cria uma vantagem adicional para esta arquitetura: uma maior facilidade\n\n20\n\nservidores atrav\u00e9s do protocolo HTTP (HyperText Transfer Protocol) realizando\n\nrequisi\u00e7\u00f5es de recursos e dados. Servidores web, que normalmente \u2013 mas n\u00e3o\n\nnecessariamente - operam sobre uma rede em hardware separado do cliente, ao\n\nreceberem uma requisi\u00e7\u00e3o de recurso, ou devolvem um recurso est\u00e1tico ou geram a\n\nresposta dinamicamente. Sob a perspectiva do cliente, n\u00e3o existe diferencia\u00e7\u00e3o\n\nentre ambos os casos, e a resposta ser\u00e1 tratada da mesma maneira, ou seja, ser\u00e1\n\nrenderizada diretamente no cliente ou processada por algum script executado no\n\nnavegador.\n\nFigura 2: Modelo Cliente Servidor.\n\n2.1.1 Considera\u00e7\u00f5es do modelo cliente-servidor\n\nA utiliza\u00e7\u00e3o do modelo cliente servidor sobre a qual a web atua traz consigo\n\nalgumas considera\u00e7\u00f5es que impactam na arquitetura de uma aplica\u00e7\u00e3o.\n\nNa maioria dos casos, uma arquitetura cliente servidor permite que os pap\u00e9is e\n\nas responsabilidades de um sistema de computa\u00e7\u00e3o possam ser distribu\u00eddos entre\n\nv\u00e1rios computadores independentes que s\u00e3o conhecidos por si s\u00f3 atrav\u00e9s de uma\n\nrede. Isso cria uma vantagem adicional para esta arquitetura: uma maior facilidade\n\n20\n\nservidores atrav\u00e9s do protocolo HTTP (HyperText Transfer Protocol) realizando\n\nrequisi\u00e7\u00f5es de recursos e dados. Servidores web, que normalmente \u2013 mas n\u00e3o\n\nnecessariamente - operam sobre uma rede em hardware separado do cliente, ao\n\nreceberem uma requisi\u00e7\u00e3o de recurso, ou devolvem um recurso est\u00e1tico ou geram a\n\nresposta dinamicamente. Sob a perspectiva do cliente, n\u00e3o existe diferencia\u00e7\u00e3o\n\nentre ambos os casos, e a resposta ser\u00e1 tratada da mesma maneira, ou seja, ser\u00e1\n\nrenderizada diretamente no cliente ou processada por algum script executado no\n\nnavegador.\n\nFigura 2: Modelo Cliente Servidor.\n\n2.1.1 Considera\u00e7\u00f5es do modelo cliente-servidor\n\nA utiliza\u00e7\u00e3o do modelo cliente servidor sobre a qual a web atua traz consigo\n\nalgumas considera\u00e7\u00f5es que impactam na arquitetura de uma aplica\u00e7\u00e3o.\n\nNa maioria dos casos, uma arquitetura cliente servidor permite que os pap\u00e9is e\n\nas responsabilidades de um sistema de computa\u00e7\u00e3o possam ser distribu\u00eddos entre\n\nv\u00e1rios computadores independentes que s\u00e3o conhecidos por si s\u00f3 atrav\u00e9s de uma\n\nrede. Isso cria uma vantagem adicional para esta arquitetura: uma maior facilidade\n\n\n\n21\n\nde manuten\u00e7\u00e3o. Por exemplo, de acordo com o grau de independ\u00eancia de um\n\ncliente, \u00e9 poss\u00edvel substituir, reparar, atualizar ou mesmo realocar um servidor\n\nenquanto seus clientes continuam tanto sem a consci\u00eancia da manuten\u00e7\u00e3o e sem\n\nserem afetados por essa mudan\u00e7a. Para isto, por\u00e9m, o cliente tem que ser mais do\n\nque um simples exibidor de conte\u00fado gerado pelo servidor.\n\nO armazenamento de dados \u00e9 realizado nos servidores, o que geralmente\n\ngarante maiores n\u00edveis de seguran\u00e7a, dado que este cen\u00e1rio oferece controles de\n\nseguran\u00e7a ao acesso de recursos, garantindo que apenas os clientes, com as\n\npermiss\u00f5es adequadas possam acessar e alterar dados pertinentes ao seu contexto.\n\nA centraliza\u00e7\u00e3o do armazenamento de dados tamb\u00e9m facilita a administra\u00e7\u00e3o e\n\natualiza\u00e7\u00e3o de dados compartilhados comparativamente \u00e0 utiliza\u00e7\u00e3o de outros\n\nparadigmas de comunica\u00e7\u00e3o de rede, como por exemplo o P2P, mas tamb\u00e9m\n\nrestringe o grau de independ\u00eancia poss\u00edvel de um cliente, amarrando o acesso a\n\nestes dados \u00e0 condi\u00e7\u00e3o de acesso ao servidor.\n\n2.2 Client-side scripting\n\nClient-side scripting se refere \u00e0 classe de programas de computador na web\n\nque s\u00e3o executados no lado do cliente, pelo navegador do usu\u00e1rio da web, em vez\n\ndo lado do servidor (no servidor web). Este tipo de programa\u00e7\u00e3o de computadores \u00e9\n\numa parte importante do conceito de HTML din\u00e2mico (DHTML), permitindo que as\n\np\u00e1ginas da web possam executar scripts, ou seja, possam produzir e alterar o seu\n\nconte\u00fado dependendo da entrada do usu\u00e1rio, das respostas do servidor, e de outras\n\nvari\u00e1veis, de acordo com seu estado interno.\n\nA execu\u00e7\u00e3o de scripts no cliente \u00e9 fundamental para a cria\u00e7\u00e3o de aplica\u00e7\u00f5es\n\nweb que exer\u00e7am mais fun\u00e7\u00f5es do que simplesmente a exibi\u00e7\u00e3o de p\u00e1ginas geradas\n\nno servidor, pois permite uma maior interatividade com o usu\u00e1rio, o processamento\n\ne valida\u00e7\u00e3o de dados, o estabelecimento de troca destes dados com o servidor e a\n\ncria\u00e7\u00e3o de estruturas l\u00f3gicas espec\u00edficas ao dom\u00ednio da aplica\u00e7\u00e3o.\n\nDentre as diferentes linguagens de script que podem ser executadas em um\n\nnavegador web, a linguagem mais estabelecida - compat\u00edvel entre diferentes\n\nnavegadores - e utilizada \u00e9 o JavaScript, um dialeto do padr\u00e3o ECMAScript que \u00e9\n\n\n\n22\n\ncaracterizada como uma linguagem din\u00e2mica e funcional, imperativa e estruturada,\n\nfracamente tipada e orientada a objetos baseada em prot\u00f3tipos.\n\n2.3 Comunica\u00e7\u00e3o cliente-servidor\n\nO HTTP (Hypertext Transfer Protocol) \u00e9 o protocolo de camada de aplica\u00e7\u00e3o\n\nque implementa a World Wide Web. Embora a web em si possua muitas facetas\n\ndiferentes, o HTTP endere\u00e7a apenas uma fun\u00e7\u00e3o b\u00e1sica: a transfer\u00eancia de\n\ndocumentos hipertexto e outros arquivos de servidores web para clientes web. Em\n\ntermos reais de comunica\u00e7\u00e3o, os clientes est\u00e3o principalmente interessados em\n\nfazer requisi\u00e7\u00f5es para os servidores, que por sua vez respondem a esses pedidos.\n\n2.3.1 Comunica\u00e7\u00e3o s\u00edncrona\n\nTradicionalmente, a comunica\u00e7\u00e3o entre cliente e servidor na web \u00e9\n\nimplementada utilizando uma abordagem s\u00edncrona, ou seja, at\u00e9 que a resposta de\n\numa requisi\u00e7\u00e3o seja retornada, qualquer processamento no navegador web ou\n\nintera\u00e7\u00e3o com o usu\u00e1rio do mesmo n\u00e3o podem ser realizados. No contexto de\n\naplica\u00e7\u00f5es web, interfaces gr\u00e1ficas de usu\u00e1rio s\u00edncronas lan\u00e7am uma requisi\u00e7\u00e3o e\n\ncongelam at\u00e9 que os dados de resposta sejam eventualmente recebidos.\n\nNeste processo, quando os dados s\u00e3o recebidos, a p\u00e1gina inteira \u00e9\n\nrecarregada exibindo uma nova tela cheia. A utiliza\u00e7\u00e3o deste processo em todas as\n\ndiferentes comunica\u00e7\u00f5es com o servidor gera diversas limita\u00e7\u00f5es, pois diminui a\n\ninteratividade do usu\u00e1rio, n\u00e3o permitindo um fluxo de execu\u00e7\u00e3o da interface gr\u00e1fica\n\ncontinuo e gradual.\n\n2.3.2 Comunica\u00e7\u00e3o ass\u00edncrona\n\nComunica\u00e7\u00e3o ass\u00edncrona \u00e9 uma forma de comunica\u00e7\u00e3o mediada em que\n\nambos o emissor e o receptor n\u00e3o est\u00e3o simultaneamente envolvidos na\n\ncomunica\u00e7\u00e3o. Utilizando tecnologias ass\u00edncronas de comunica\u00e7\u00e3o, uma aplica\u00e7\u00e3o\n\ncliente pode realizar uma requisi\u00e7\u00e3o e continuar seu fluxo de execu\u00e7\u00e3o\n\nnormalmente, sem interromper a responsividade de sua interface gr\u00e1fica, atrav\u00e9s do\n\nestabelecimento de um m\u00e9todo para o tratamento da resposta.\n\n\n\n23\n\n2.3.3 AJAX\n\nMuito da possibilita\u00e7\u00e3o do desenvolvimento de aplica\u00e7\u00f5es web interativas, que\n\nrealizam mais que somente a exibi\u00e7\u00e3o de um conte\u00fado gerado no servidor, \u00e9 devido\n\n\u00e0 ampla adapta\u00e7\u00e3o de tecnologias ass\u00edncronas. Nesta abordagem, clientes\n\nrequisitam dados do servidor de forma ass\u00edncrona. Quando a resposta chega, o\n\ncliente pode atualizar apenas as partes da p\u00e1gina que realmente apresentam os\n\ndados.\n\nO primeiro prot\u00f3tipo de tecnologia para comunica\u00e7\u00e3o ass\u00edncrona para a web foi\n\ncriado em 1998, pela empresa Microsoft, por\u00e9m s\u00f3 em meados de 2004 a utiliza\u00e7\u00e3o\n\ndeste conceito tecnol\u00f3gico foi popularizado em aplica\u00e7\u00f5es web, e atualmente o\n\nAJAX \u00e9 a t\u00e9cnica dominante para a implementa\u00e7\u00e3o de servi\u00e7os ass\u00edncronos na web.\n\nO AJAX, no entanto, n\u00e3o \u00e9 uma tecnologia \u00fanica, mas sim um termo gen\u00e9rico\n\nque cobre v\u00e1rias tecnologias existentes e referencia a maneira como eles s\u00e3o\n\nusados em conjunto. O termo AJAX significa JavaScript e XML ass\u00edncrono, e como o\n\nnome sugere, permite a troca de dados de c\u00f3digo e de dom\u00ednio com o servidor,\n\nassim possibilitando \u2013 em conjunto com a execu\u00e7\u00e3o de scripts no cliente \u2013 a\n\natualiza\u00e7\u00e3o din\u00e2mica de p\u00e1ginas e seu conte\u00fado em aplica\u00e7\u00f5es Web.\n\n2.3.4 Considera\u00e7\u00f5es da comunica\u00e7\u00e3o entre cliente e servidor\n\nA fim de manter a capacidade de resposta de um aplicativo, no contexto de\n\ndesenvolvimento para a web, a comunica\u00e7\u00e3o com o servidor deve ser minimizada o\n\ntanto quanto poss\u00edvel, e quando necess\u00e1ria, deve ser realizada de forma ass\u00edncrona.\n\nIsto significa que para que a lat\u00eancia resultante da troca de dados seja minimamente\n\npercept\u00edvel, a troca deve ser realizada de forma a n\u00e3o travar o funcionamento do\n\ncliente at\u00e9 a chegada de uma resposta, e que mesmo assim - de acordo com o\n\ncontexto da aplica\u00e7\u00e3o - a quantidade de vezes em que se \u00e9 necess\u00e1rio estabelecer\n\ncomunica\u00e7\u00e3o deve ser m\u00ednima.\n\n2.4 Particionamento de aplica\u00e7\u00f5es entre cliente e servidor\n\nO desenvolvimento de aplica\u00e7\u00f5es web est\u00e1 no meio de uma mudan\u00e7a de\n\nparadigma. Usu\u00e1rios est\u00e3o se acostumando com aplica\u00e7\u00f5es web com conte\u00fado\n\ndin\u00e2mico e experi\u00eancia mais interativa do usu\u00e1rio. Interfaces gr\u00e1ficas n\u00e3o mais est\u00e3o\n\n\n\n24\n\npresas \u00e0 necessidade de atualizar telas inteiras de uma vez, e servidores s\u00e3o\n\ncapazes de alimentar os dados a elas espontaneamente.\n\nDo ponto de vista dos utilizadores, as aplica\u00e7\u00f5es web est\u00e3o, portanto, se\n\ntornando mais e mais como aplica\u00e7\u00f5es desktop tradicionais, mas enquanto as\n\ninterfaces gr\u00e1ficas de aplica\u00e7\u00f5es web est\u00e3o se tornando mais us\u00e1veis, os padr\u00f5es e\n\nprotocolos subjacentes n\u00e3o est\u00e3o evoluindo no mesmo ritmo. As tecnologias\n\nexistentes assim est\u00e3o sendo levadas ao seus limites, e as aplica\u00e7\u00f5es web se\n\ntornam cada vez mais complexas de serem constru\u00eddas.\n\nExistem centenas de ferramentas e frameworks que aliviar a carga de\n\ncomplexidade para os desenvolvedores, por\u00e9m todas elas trabalham sobre um n\u00edvel\n\nde abstra\u00e7\u00e3o cujos objetivos originais de concep\u00e7\u00e3o n\u00e3o vislumbravam mais que a\n\nexibi\u00e7\u00e3o de documentos de hipertexto. Qualquer uma destas abordagens, portanto,\n\ndepende de adapta\u00e7\u00f5es para o seu correto funcionamento.\n\nA maioria dos atuais frameworks web focam na simplifica\u00e7\u00e3o da\n\nimplementa\u00e7\u00e3o e manuten\u00e7\u00e3o de aplica\u00e7\u00f5es web atrav\u00e9s do fornecimento de um\n\nconjunto de ferramentas e conven\u00e7\u00f5es para os desenvolvedores. Isso ajuda os\n\ndesenvolvedores a organizar e implementar o seu c\u00f3digo fonte, arquivos bin\u00e1rios e\n\narquivos de recursos, mas eles realmente n\u00e3o melhoram a tecnologia por tr\u00e1s deles.\n\nO layout produzido da aplica\u00e7\u00e3o ainda \u00e9 praticamente o mesmo se tivesse sido feito\n\nmanualmente. At\u00e9 ent\u00e3o, as interfaces gr\u00e1ficas ainda s\u00e3o rederizadas na tela\n\nusando HTML4, CSS e JavaScript, enquanto o servidor fornece as funda\u00e7\u00f5es para\n\nos processamentos principais, lidando com todos os pedidos e gerando respostas\n\nem HTML, JSON, ou XML. No entanto, conven\u00e7\u00f5es bem estabelecidas para o\n\nparticionamento da l\u00f3gica da aplica\u00e7\u00e3o entre o cliente e o servidor ainda n\u00e3o\n\nexistem, al\u00e9m da abordagem em que tudo \u00e9 executado no servidor e em que o\n\ncliente simplesmente exibe os dados.\n\nO particionamento da l\u00f3gica de neg\u00f3cio entre cliente e servidor, ou seja, a\n\ndefini\u00e7\u00e3o da por\u00e7\u00e3o de c\u00f3digo que ficar\u00e1 em cada uma das distintas camadas de\n\numa aplica\u00e7\u00e3o, influencia diretamente a depend\u00eancia entre o grau de interatividade\n\nde uma interface gr\u00e1fica web e o modo em que a comunica\u00e7\u00e3o das duas partes deve\n\nser feita. As decis\u00f5es de particionamento de c\u00f3digo, portanto, definem a\n\ndepend\u00eancia do cliente para com o servidor, o que significa que conseq\u00fcentemente\n\n\n\n25\n\ndefinem tamb\u00e9m as possibilidades de que uma aplica\u00e7\u00e3o possa ser executada em\n\nmodo offline - sem conex\u00e3o com o servidor.\n\nNo contexto do desenvolvimento de uma aplica\u00e7\u00e3o web complexa, na qual s\u00e3o\n\ndesejados uma grande interatividade com o usu\u00e1rio e o m\u00ednimo de depend\u00eancia com\n\no servidor - at\u00e9 talvez com o intuito de disponibiliza\u00e7\u00e3o do funcionamento parcial da\n\naplica\u00e7\u00e3o em situa\u00e7\u00f5es em que o usu\u00e1rio n\u00e3o possui conex\u00e3o com a internet -\n\ntemos como requisito indireto que a cria\u00e7\u00e3o da camada de implementa\u00e7\u00e3o do cliente\n\ndeve poder lidar com eventos do usu\u00e1rio o tanto quanto poss\u00edvel no cliente.\n\nNeste cen\u00e1rio estabelecido, isto significa que serial ideal que o cliente\n\npossu\u00edsse o m\u00e1ximo controle poss\u00edvel sobre a execu\u00e7\u00e3o da l\u00f3gica de uma aplica\u00e7\u00e3o.\n\nTal abordagem n\u00e3o s\u00f3 aumenta a capacidade de resposta e robustez da interface do\n\nusu\u00e1rio, mas tamb\u00e9m torna o desenvolvimento muito mais simples, pois resultaria\n\nem um n\u00famero reduzido de requisi\u00e7\u00f5es necess\u00e1rias ao servidor - e o conseq\u00fcente\n\ntempo de lat\u00eancia relacionado a cada uma delas - garantindo assim maior\n\nindepend\u00eancia e flu\u00eancia da interface de usu\u00e1rio.\n\nA utiliza\u00e7\u00e3o de uma \u00fanica linguagem comum para toda a aplica\u00e7\u00e3o, com a\n\naplica\u00e7\u00e3o transparente de um gateway para comunica\u00e7\u00e3o entre o servidor e o\n\ncliente, poderia facilitar o processo de desenvolvimento, aproximando-o ao\n\ndesenvolvimento de aplica\u00e7\u00f5es tradicionais. Al\u00e9m disto, esta estrat\u00e9gia tamb\u00e9m\n\npermitiria f\u00e1cil balanceamento de c\u00f3digo entre o cliente e servidor - sem a\n\nnecessidade de grande retrabalho - ampliando a flexibilidade da aplica\u00e7\u00e3o e a sua\n\nmanutenibilidade.\n\n2.4.1 Mandat\u00f3rio ao servidor\n\nExistem determinadas opera\u00e7\u00f5es que aplica\u00e7\u00f5es web n\u00e3o pode realizar sem o\n\nservidor, independentemente de como a aplica\u00e7\u00e3o foi particionada entre cliente e o\n\nservidor. Com o suporte da linguagem HTML5 e dos navegadores que a suportam,\n\nou com a ajuda de ferramentas como o Google Gears, pode-se possibilitar a\n\nconstru\u00e7\u00e3o de aplica\u00e7\u00f5es web que possam ser executadas em modo offline. Mesmo\n\nassim, para muitas aplica\u00e7\u00f5es, n\u00e3o h\u00e1 possibilidade de eliminar todas as\n\ndepend\u00eancias com o servidor.\n\nSeguem abaixo as mais comuns responsabilidades inerentes do servidor:\n\n\n\n26\n\n? Persist\u00eancia - Refere-se aos dados que n\u00e3o s\u00e3o apagados no\n\nencerramento da execu\u00e7\u00e3o do programa que o criou. Embora em\n\nnavegadores modernos seguindo a especifica\u00e7\u00e3o HTML5 seja poss\u00edvel\n\no salvamento de dados localmente, muitas vezes existe tamb\u00e9m a\n\nnecessidade de que estes dados estejam dispon\u00edveis tamb\u00e9m para\n\noutros computadores na rede.\n\n? Comunica\u00e7\u00e3o cliente-cliente - Ocorre entre uma ou mais aplica\u00e7\u00f5es web\n\nrodado em diferentes clientes. Por quest\u00f5es de seguran\u00e7a - para\n\nprevenir ataques Cross-site Scripting - nos navegadores o JavaScript\n\nsegue a pol\u00edtica de mesma origem, o que impede clientes de evitar\n\ndados a destinos diferentes do servidor em que o cliente tenha sido\n\ncarregado inicialmente.\n\n? Dados compartilhados - Significa que dados necessitam estar acess\u00edveis\n\na mais de um cliente simultaneamente. O servidor \u00e9 utilizado para prover\n\numa base de dados centralizada e compartilhada entre diferentes\n\nclientes.\n\n? Tarefas agendadas - Pode-se existir a necessidade da execu\u00e7\u00e3o de\n\ntarefas e processamentos durante o per\u00edodo em que n\u00e3o exista garantia\n\nque o cliente esteja sendo executado.\n\n2.4.2 Considera\u00e7\u00f5es para o servidor\n\nDe acordo com a natureza da aplica\u00e7\u00e3o, a execu\u00e7\u00e3o de algumas tarefas e\n\nprocessamentos no servidor pode ser desej\u00e1vel, vantajosa ou at\u00e9 necess\u00e1ria.\n\nEnquanto as tend\u00eancias da evolu\u00e7\u00e3o da web em rela\u00e7\u00e3o \u00e0 execu\u00e7\u00e3o de aplicativos\n\ninterativos e din\u00e2micos d\u00e1 prefer\u00eancia a (\u00e9 coerente com) um modelo no qual o\n\ncliente possa lidar, na medida do poss\u00edvel, com os eventos gerados na interface\n\ngr\u00e1fica, o contexto de regras de neg\u00f3cio da aplica\u00e7\u00e3o deve ser sempre levado em\n\nconsidera\u00e7\u00e3o.\n\n? Navega\u00e7\u00e3o - o modo na qual a navega\u00e7\u00e3o de documentos na web\n\nevoluiu permite que o usu\u00e1rio utilize bot\u00f5es para avan\u00e7ar e retroceder\n\nentre o conjunto de p\u00e1ginas acessadas. Usu\u00e1rios est\u00e3o acostumados a\n\naplica\u00e7\u00f5es web simples nas quais se pode navegar com seguran\u00e7a\n\n\n\n27\n\nmesmo quando utilizadas estas fun\u00e7\u00f5es. Esta caracter\u00edstica \u00e9 perdida\n\nquando uma aplica\u00e7\u00e3o inteira \u00e9 implementada como uma \u00fanica p\u00e1gina\n\ndin\u00e2mica. Solu\u00e7\u00f5es para este problema envolvem uma abordagem\n\nhibrida em que diferentes URLs identifiquem diferentes partes de uma\n\naplica\u00e7\u00e3o ao mesmo tempo em que estas transi\u00e7\u00f5es de estado possam\n\nser realizadas de forma din\u00e2mica e parcial, ou seja, atrav\u00e9s da\n\nadapta\u00e7\u00e3o do conte\u00fado entre diferentes estados sem a necessidade de\n\num recarregamento total da aplica\u00e7\u00e3o.\n\n? C\u00e1lculos pesados - ou outras opera\u00e7\u00f5es de uso intensivo da CPU\n\npodem ser, em alguns casos, melhor executados no servidor devido ao\n\nfato deste poder ser um ambiente um pouco mais controlado onde se\n\npossui conhecimento do hardware utilizado e sua capacidade. A\n\nexecu\u00e7\u00e3o de c\u00f3digo no servidor tamb\u00e9m possibilita o uso de linguagens\n\nmais poderosas para certos dom\u00ednios, como por exemplo o de c\u00e1lculos\n\nl\u00f3gicos ou matem\u00e1ticos.\n\n? Seguran\u00e7a - devido ao fato de que o c\u00f3digo executado no cliente pode\n\nser acessado e modificado, existem certas opera\u00e7\u00f5es cuja a execu\u00e7\u00e3o\n\npossa ser obrigat\u00f3ria no servidor. Um exemplo inclui a necessidade de\n\nvalida\u00e7\u00e3o de dados fornecidos pelo usu\u00e1rio, que pode ser facilmente\n\nburlada por um usu\u00e1rio mais experiente.\n\n? Confiabilidade - pode ser aumentada atrav\u00e9s da execu\u00e7\u00e3o de opera\u00e7\u00f5es\n\nno servidor. Por exemplo, usu\u00e1rios podem fechar seus navegadores da\n\nweb durante uma opera\u00e7\u00e3o, ou no caso de opera\u00e7\u00f5es dependentes de\n\nhor\u00e1rio, comportamentos inv\u00e1lidos podem ocorrer devido \u00e0 m\u00e1\n\nconfigura\u00e7\u00e3o do rel\u00f3gio do cliente.\n\n2.4.3 Considera\u00e7\u00f5es para o cliente\n\nA natureza da plataforma web, de acordo com a sua evolu\u00e7\u00e3o, se deu de tal\n\nforma na qual os clientes mais simples de uma aplica\u00e7\u00e3o s\u00e3o basicamente\n\nconstitu\u00eddos da exibi\u00e7\u00e3o de uma interface gr\u00e1fica simples e est\u00e1tica, praticamente\n\nsem a execu\u00e7\u00e3o de nenhuma l\u00f3gica. A cria\u00e7\u00e3o de clientes mais complexos vem\n\nsendo um desafio que aos poucos \u00e9 possibilitado pelas abstra\u00e7\u00f5es tecnol\u00f3gicas\n\n\n\n28\n\nfornecidas por frameworks e ferramentas de desenvolvimento, para facilitar a cria\u00e7\u00e3o\n\nde interfaces din\u00e2micas, que proporcionem uma maior interatividade com o usu\u00e1rio e\n\nmaior poder em termos de capacidades que uma aplica\u00e7\u00e3o web pode apresentar.\n\nA disponibiliza\u00e7\u00e3o de dinamicidade e de funcionalidades no software cliente\n\nrequer ou que o mesmo possua l\u00f3gica em termos de ambos regras de neg\u00f3cio e\n\nintegra\u00e7\u00e3o entre os componentes da visualiza\u00e7\u00e3o de acordo com o dom\u00ednio da\n\naplica\u00e7\u00e3o ou que uma comunica\u00e7\u00e3o extremamente ativa com o servidor seja\n\nestabelecida para que o servidor possa determinar os detalhes de como o cliente\n\ndeve responder a cada evento. Em outros termos, para a cria\u00e7\u00e3o de aplica\u00e7\u00f5es web,\n\n\u00e9 necess\u00e1rio \u2013 proporcionalmente a sua complexidade - ou trazer parte da sua\n\nl\u00f3gica ao cliente ou aumentar a depend\u00eancia da comunica\u00e7\u00e3o de um cliente simples\n\ne \u201cburro\u201d com o servidor. Esta dualidade estabelece claramente duas diferentes \u2013 e\n\nquase opostas \u2013 abordagens, uma propondo a utiliza\u00e7\u00e3o de um cliente fino e\n\nsimples administrado pelo servidor e outra propondo a cria\u00e7\u00e3o de um cliente mais\n\nespecializado contendo parte da l\u00f3gica da aplica\u00e7\u00e3o. A figura 3 exp\u00f5e as principais\n\ncaracter\u00edsticas de cada abordagem.\n\nCliente fino Cliente grosso\n\nDepend\u00eancia do servidor pelo cliente Grande Baixa\nDepend\u00eancia da interatividade pela lat\u00eancia de rede Grande Baixa\nControle do servidor sobre o estado do cliente Grande Baixo\nCarga e demanda sobre o servidor Grande Baixo\nTrabalho no desenvolvimento do cliente Pequeno \u2013 a UI pode\n\nser gerada\n\nGrande \u2013 a UI tem\n\nque ser criada\n\nespecificamente de\n\nacordo com o cliente.\n\nFigura 3: Particionamento entre cliente e servidor.\n\n2.5 Aplica\u00e7\u00f5es web offline\n\nO progresso do desenvolvimento de aplica\u00e7\u00f5es para a web vem permitindo que\n\neste tipo de aplica\u00e7\u00f5es tenha um crescente alcance em termos do que pode ser feito\n\nneste ambiente, trazendo para a plataforma web n\u00e3o s\u00f3 servi\u00e7os e funcionalidades\n\nque originalmente eram dispon\u00edveis somente em aplica\u00e7\u00f5es desktop tradicionais,\n\n\n\n29\n\nmas tamb\u00e9m novas capacidades que s\u00e3o somente poss\u00edveis em um modelo que\n\npode centralizar informa\u00e7\u00f5es pertinentes referentes a uma massa cr\u00edtica de\n\nusu\u00e1rios, ou seja, dados n\u00e3o dispon\u00edveis no contexto das aplica\u00e7\u00f5es desktop, no\n\nqual o uso \u00e9 relativamente isolado entre diferentes inst\u00e2ncias de um software. Ao\n\nmesmo tempo, este modelo de computa\u00e7\u00e3o em nuvem oferecido pela plataforma\n\nweb tamb\u00e9m oferece limita\u00e7\u00f5es aos usu\u00e1rios, dentre as quais se pode ressaltar a\n\nnecessidade quase incondicional de um meio de acesso \u00e0 internet pelo usu\u00e1rio para\n\nque este possa ter acesso a estes servi\u00e7os. A utiliza\u00e7\u00e3o da web tem como requisito\n\nfundamental a presen\u00e7a de uma conex\u00e3o \u00e0 internet.\n\nA cria\u00e7\u00e3o de mecanismos para o desenvolvimento de aplicativos web offline\n\ntem como intuito mitigar a limita\u00e7\u00e3o - a qual muitas aplica\u00e7\u00f5es desktop n\u00e3o possuem\n\n\u2013 imposta pela necessidade de uma conex\u00e3o \u00e0 internet. O esfor\u00e7o da cria\u00e7\u00e3o de\n\naplica\u00e7\u00f5es web offline tem como intento garantir que usu\u00e1rios tenham acesso b\u00e1sico\n\na funcionalidades e dados, seja a aplica\u00e7\u00e3o, por exemplo, desde um cliente de e-\n\nmail at\u00e9 uma agenda de compromissos. O acesso offline cria uma camada a mais de\n\nconfiabilidade, estende o alcance de aplica\u00e7\u00f5es web e pode melhorar o seu\n\ndesempenho movendo parte dos dados para mais perto de seus usu\u00e1rios.\n\n2.5.1 Requisitos para disponibiliza\u00e7\u00e3o offline de uma aplica\u00e7\u00e3o web\n\nOs requisitos m\u00ednimos necess\u00e1rios para que uma aplica\u00e7\u00e3o web possa ser\n\ndisponibilizada offline podem ser sintetizados e classificados em duas categorias\n\nb\u00e1sicas:\n\n? Armazenagem de recursos da aplica\u00e7\u00e3o \u2013 que implica em um\n\nmecanismo de armazenamento local de c\u00f3digo da aplica\u00e7\u00e3o, junto a\n\nqualquer l\u00f3gica e a outros recursos que esta venha a necessitar para o\n\nseu funcionamento. Este mecanismo deve tamb\u00e9m deslumbrar uma\n\nmaneira de direcionar qualquer requisi\u00e7\u00e3o da aplica\u00e7\u00e3o para os\n\nrespectivos recursos armazenados localmente caso n\u00e3o exista acesso\n\naos recursos reais na internet. Al\u00e9m disso, \u00e9 necess\u00e1rio o\n\nestabelecimento de um meio para a determina\u00e7\u00e3o de todos os recursos\n\nque devem ser salvos localmente.\n\n\n\n30\n\n? Armazenagem de dados do usu\u00e1rio, relativos ao uso da aplica\u00e7\u00e3o \u2013\n\nindica mecanismos de armazenamento local de quaisquer tipos de\n\ndados poss\u00edveis gerados pela aplica\u00e7\u00e3o que necessitam ser salvos para\n\nposterior utiliza\u00e7\u00e3o, seja para sincroniza\u00e7\u00e3o posterior com o servidor,\n\npara o uso local do usu\u00e1rio ou para ambos.\n\n\n\n3 \u2013 HTML5\nO HTML foi concebido essencialmente como uma linguagem para descrever\n\nsemanticamente documentos cient\u00edficos, embora a sua concep\u00e7\u00e3o geral e\n\nadapta\u00e7\u00f5es ao longo dos anos t\u00eam-lhe permitido ser usado para descrever uma\n\ns\u00e9rie de outros tipos de documentos. A principal \u00e1rea que n\u00e3o foi devidamente\n\ntratada por HTML \u00e9 um vago assunto denominado \u201cWeb Applications\u201d (aplica\u00e7\u00f5es\n\nweb).\n\n3.1 Hist\u00f3ria do HTML\n\nPor seus cinco primeiros anos (1990-1995), o HTML passou por uma s\u00e9rie de\n\nrevis\u00f5es e experimentou uma s\u00e9rie de extens\u00f5es, principalmente hospedado\n\nprimeiro no CERN, e depois no IETF. Com a cria\u00e7\u00e3o do W3C, o desenvolvimento do\n\nHTML foi alavancado por uma s\u00e9rie de amplia\u00e7\u00f5es de sua especifica\u00e7\u00e3o at\u00e9 a\n\nvers\u00e3o 4, conclu\u00edda em 1998.\n\nAt\u00e9 ent\u00e3o estas especifica\u00e7\u00f5es eram principalmente voltadas \u00e0 defini\u00e7\u00e3o de\n\ndocumentos de hiperm\u00eddia e o avan\u00e7o de outras tecnologias parecia muito mais\n\npromissora quanto \u00e0 facilita\u00e7\u00e3o do desenvolvimento de recursos mais avan\u00e7ados\n\npara a cria\u00e7\u00e3o de interfaces de aplica\u00e7\u00f5es na web. O interesse na evolu\u00e7\u00e3o da\n\nespecifica\u00e7\u00e3o do HTML perdeu for\u00e7a com a descren\u00e7a de seu potencial em solu\u00e7\u00f5es\n\nprofissionais, mas devido a sua grande difus\u00e3o, seu uso continuou a ser explorado e\n\nexpandido nestas pr\u00e1ticas.\n\nEm torno do tempo em que a evolu\u00e7\u00e3o do HTML foi interrompida, em 1998,\n\npartes da API para HTML desenvolvidas por fabricantes de navegadores foram\n\nespecificadas e publicadas sob o nome de DOM1 (em 1998) e DOM2 Core e DOM2\n\nHTML (a partir de 2000 e culminando em 2003). Esses esfor\u00e7os foram em seguida\n\ndepreciados com a publica\u00e7\u00e3o de algumas especifica\u00e7\u00f5es do DOM3 em 2004 que,\n\npor\u00e9m, nunca foram conclu\u00eddas.\n\nProvas de conceito demonstrando que era poss\u00edvel estender HTML4 de forma\n\na fornecer muitas das caracter\u00edsticas de outras tecnologias propostas, como o\n\nXForms, foram com o tempo  introduzidas. Tais provas de conceito demonstraram\n\ntamb\u00e9m que estas amplia\u00e7\u00f5es eram poss\u00edveis sem a necessidade da\n\nimplementa\u00e7\u00e3o de \"motores\" de renderiza\u00e7\u00e3o incompat\u00edveis com as atuais p\u00e1ginas\n\nda Web em HTML.\n\n\n\n32\n\nA id\u00e9ia de que a evolu\u00e7\u00e3o do HTML deveria ser reaberta foi testada em um\n\nworkshop do W3C, em 2004, onde alguns dos princ\u00edpios que fundamentam o\n\nHTML5 foram apresentados, conjuntamente pela Mozilla e Opera. Por\u00e9m, com o\n\nfundamento de que a proposta entrava em conflito com a dire\u00e7\u00e3o previamente\n\nescolhida para a evolu\u00e7\u00e3o da Web, a proposta foi rejeitada pela equipe do W3C.\n\nPouco tempo depois, a Apple, Mozilla e Opera em conjunto anunciaram sua\n\ninten\u00e7\u00e3o de continuar trabalhando no esfor\u00e7o sob a \u00e9gide de uma nova institui\u00e7\u00e3o\n\nchamada WHATWG. A lista de discuss\u00e3o p\u00fablica foi criada, bem como o projeto foi\n\ntransferido para o site WHATWG.\n\nO WHATWG foi baseado em v\u00e1rios princ\u00edpios fundamentais, em sumo\n\ndeterminando que \u00e9 necess\u00e1rio que novas tecnologias sejam compat\u00edveis com\n\nvers\u00f5es anteriores, que as especifica\u00e7\u00f5es e implementa\u00e7\u00f5es necessitar estar em\n\nsincronia mesmo que isso signifique mudar a especifica\u00e7\u00e3o em vez das\n\nimplementa\u00e7\u00f5es, e que as especifica\u00e7\u00f5es devem ser detalhadas o suficiente para\n\nque as implementa\u00e7\u00f5es possam atingir interoperabilidade completa sem a\n\nengenharia reversa de outra.\n\nO \u00faltimo requisito exigido em particular requeria que o escopo da especifica\u00e7\u00e3o\n\nHTML5 inclu\u00edsse o que tinha sido previamente especificado em tr\u00eas documentos\n\ndistintos: HTML4, XHTML1 e DOM2 HTML. Isto tamb\u00e9m significou a inclus\u00e3o de um\n\ndetalhamento significativamente mais completo do que anteriormente tinha sido\n\nconsiderado a norma.\n\nEm 2006, o W3C manifestou interesse em participar no desenvolvimento do\n\nHTML5, e em 2007 se juntou definitivamente ao grupo de trabalho da especifica\u00e7\u00e3o\n\ndo HTML5.\n\n3.2 O HTML5 e o Desenvolvimento de Aplica\u00e7\u00f5es Web\n\nA popularidade da web quanto ao desenvolvimento de aplica\u00e7\u00f5es cresce\n\ncontinuamente e, para que este progresso seja poss\u00edvel, diferentes sistemas e\n\nframeworks v\u00eam ganhando grande complexidade na tentativa de simplifica\u00e7\u00e3o do\n\ndesenvolvimento e na mitiga\u00e7\u00e3o dos desafios envolvidos.\n\nAt\u00e9 a vers\u00e3o 4 do HTML, sua especifica\u00e7\u00e3o era voltada essencialmente na\n\ncria\u00e7\u00e3o e exibi\u00e7\u00e3o de documentos diversos, e n\u00e3o visava praticamente nenhum\n\n\n\n33\n\nsuporte a aplica\u00e7\u00f5es para a web. Todas as solu\u00e7\u00f5es criadas remediam esta situa\u00e7\u00e3o\n\ncriando seus pr\u00f3prios \"blocos b\u00e1sicos\" necess\u00e1rios ao desenvolvimento de\n\naplica\u00e7\u00f5es, lidando com uma grande falta de congru\u00eancia entre especifica\u00e7\u00f5es e\n\nsuas respectivas implementa\u00e7\u00f5es, e tamb\u00e9m entre diferentes implementa\u00e7\u00f5es.\n\nA falta de padroniza\u00e7\u00e3o e de garantia de que um mesmo sistema se\n\ncomportaria da mesma maneira em diferentes navegadores web \u00e9 um dos maiores\n\ndesafios encontrados no desenvolvimento de software da plataforma web. Existe\n\numa crescente preocupa\u00e7\u00e3o com a maneira pela qual os sistemas baseados na Web\n\ns\u00e3o concebidos, principalmente quanto \u00e0 sua qualidade, integridade e manuten\u00e7\u00e3o.\n\nA cria\u00e7\u00e3o do HTML 5 tem sua motiva\u00e7\u00e3o na falta de uma base mais s\u00f3lida na\n\nweb no qual softwares possam se estabelecer. Sua especifica\u00e7\u00e3o visa mitigar a falta\n\nde padroniza\u00e7\u00e3o entre diferentes implementa\u00e7\u00f5es, aumentar o grau de fidelidade\n\nentre os resultados desejados e obtidos na exibi\u00e7\u00e3o e comportamento de\n\ncomponentes de software, e por fim, visa tamb\u00e9m fornecer os recursos e\n\nfuncionalidades b\u00e1sicas necess\u00e1rias para que aplicativos web possam cada vez\n\nmais ter as mesmas capacidades de aplica\u00e7\u00f5es nativas.\n\n3.2.1 Funcionalidades b\u00e1sicas abordadas pelo HTML5\n\nCom o in\u00edcio da disponibiliza\u00e7\u00e3o e utiliza\u00e7\u00e3o pr\u00e1tica do HTML 5 nos\n\nnavegadores web, as diferentes abordagens para cria\u00e7\u00e3o de software podem\n\npotencialmente ser simplificadas com a utiliza\u00e7\u00e3o de recursos mais est\u00e1veis e bem\n\ndefinidos. A disponibiliza\u00e7\u00e3o de recursos e capacidades oferecidos \"nativamente\"\n\nnos navegadores, ou seja, em um n\u00edvel mais baixo de abstra\u00e7\u00e3o, elimina tamb\u00e9m a\n\nnecessidade de solu\u00e7\u00f5es secund\u00e1rias e artimanhas.\n\nDentre as solu\u00e7\u00f5es propostas pelo HTML5 podemos destacar algumas adi\u00e7\u00f5es\n\nde grande import\u00e2ncia e impacto sobre o desenvolvimento de aplica\u00e7\u00f5es web.\n\n? Capacidades gr\u00e1ficas ampliadas - com suporte ao canvas, um elemento\n\nque representa uma \u00e1rea baseada em pixels, e a gr\u00e1ficos vetoriais\n\nescal\u00e1veis;\n\n? Exibi\u00e7\u00e3o de v\u00eddeos e anima\u00e7\u00f5es - sem a necessidade de plug-ins\n\nexternos;\n\n\n\n34\n\n? Localiza\u00e7\u00e3o - a capacidade de relacionar informa\u00e7\u00f5es de localiza\u00e7\u00e3o\n\ngeogr\u00e1fica a aplica\u00e7\u00f5es;\n\n? Workers - possibilidade de execu\u00e7\u00e3o de scripts em plano de fundo;\n\n? Web sockets - possibilita essencialmente a cria\u00e7\u00e3o de canais\n\nbidirecionais de comunica\u00e7\u00e3o entre o cliente e o servidor. Estabelece e\n\ngarante uma maneira padronizada para o que o servidor envie dados ao\n\ncliente sem a necessidade de t\u00e9cnicas de polling.\n\n? Cacheamento de arquivos - permitindo o cacheamento local controlado\n\nde recursos e arquivos de aplica\u00e7\u00e3o;\n\n? Base de dados relacional local - possibilidade de armazenamento local\n\nde dados para seu uso em aplica\u00e7\u00f5es, tanto online quanto offline,\n\noferecido na forma de uma base de dados relacional.\n\n? Armazenamento de dados local \u2013 oferecendo o armazenamento local de\n\ndados para seu uso em aplica\u00e7\u00f5es, tanto online quanto offline;\n\n3.3 Desenvolvimento de aplica\u00e7\u00f5es web offline com o HTML5\n\nO HTML5 contempla todas as funcionalidades e APIs necess\u00e1rias para\n\ncomportar os requisitos m\u00ednimos para a disponibiliza\u00e7\u00e3o de aplica\u00e7\u00f5es web em um\n\ncontexto offline. Sua especifica\u00e7\u00e3o estabelece dois mecanismos de cacheamento de\n\nrecursos que podem ser programaticamente configurados - de maneira semelhante\n\naos cookies de sess\u00e3o HTTP - para o armazenamento de dados estruturados no\n\ncliente, e um conjunto de APIs para a manipula\u00e7\u00e3o e armazenamento no cliente de\n\nbases de dados relacionais atrav\u00e9s do uso de SQL.\n\n3.4 Cacheamento de recursos\n\nA fim de permitir que documentos, aplicativos da web e seus respectivos\n\nrecursos, como imagens, folhas de estilo CSS e scripts, possam ser disponibilizados,\n\nmesmo quando uma conex\u00e3o de rede n\u00e3o est\u00e1 dispon\u00edvel, o HTML5 especifica um\n\nmanifesto \u2013 cuja responsabilidade de interpreta\u00e7\u00e3o e execu\u00e7\u00e3o \u00e9 do navegador - no\n\nqual \u00e9 poss\u00edvel declarar uma lista de arquivos dos quais o navegador do usu\u00e1rio\n\ndeve manter uma c\u00f3pia para uso offline.\n\n\n\n35\n\n3.4.1 Manifesto\n\nUm manifesto \u00e9 constitu\u00eddo de um arquivo simples, que deve ser servido pelo\n\nservidor como \u201ctext/cache-manifest\u201d, listando todas as informa\u00e7\u00f5es sobre os outros\n\nrecursos necess\u00e1rios. Sua declara\u00e7\u00e3o \u00e9 ligada a documentos HTML atrav\u00e9s de um\n\natributo \u201cmanifest\u201d no elemento \u201chtml\u201d, e a partir do primeiro acesso de um usu\u00e1rio a\n\nesta p\u00e1gina, o seu navegador realizar\u00e1 automaticamente o cacheamento dos\n\narquivos e os tornar\u00e1 dispon\u00edveis para quando o usu\u00e1rio estiver offline, garantindo\n\ntamb\u00e9m que nenhum dos recursos expirar\u00e1 at\u00e9 que o manifesto seja atualizado, ou\n\nseja, exceto pela requisi\u00e7\u00e3o do usu\u00e1rio ou da aplica\u00e7\u00e3o.\n\n3.4.2 Eventos do cacheamento\n\nNo momento em que uma p\u00e1gina - que declara um manifesto de cacheamento\n\n- \u00e9 visitada por um usu\u00e1rio, o navegador inicia um processo com objetivo de\n\natualiza\u00e7\u00e3o do cache. Isto \u00e9 realizado atrav\u00e9s da obten\u00e7\u00e3o de uma c\u00f3pia do\n\nmanifesto, seguida de uma compara\u00e7\u00e3o entre o estado proposto e o estado atual do\n\ncache. Caso alguma mudan\u00e7a seja detectada, o navegador requisita e armazena\n\numa nova c\u00f3pia de todos os arquivos declarados. Durante todo este processo, existe\n\numa seq\u00fc\u00eancia de eventos que podem ser disparados, cuja finalidade \u00e9 prover \u00e0\n\naplica\u00e7\u00e3o uma sinaliza\u00e7\u00e3o de todo o percurso deste processo e seus resultados.\n\nCom o lan\u00e7amento destes eventos, a aplica\u00e7\u00e3o pode n\u00e3o somente indicar o\n\nestado da sincroniza\u00e7\u00e3o e realiza\u00e7\u00e3o do cacheamento, mas tamb\u00e9m pode tomar\n\natitudes e realizar a\u00e7\u00f5es de acordo. A API especificada tamb\u00e9m permite a checagem\n\ndo estado atual do cache da aplica\u00e7\u00e3o e a chamada de fun\u00e7\u00f5es relacionadas, como\n\npor exemplo, a re-checagem da validade do cache atual. A exist\u00eancia destes\n\nm\u00e9todos e eventos prov\u00ea todo o controle sobre o processo realizado pelo navegador\n\nnecess\u00e1rio para que uma aplica\u00e7\u00e3o possa programaticamente estabelecer sua\n\nl\u00f3gica.\n\n3.4.3 Caches de aplica\u00e7\u00e3o\n\nUm cache de aplica\u00e7\u00e3o \u00e9 um conjunto de recursos armazenados que \u00e9\n\nconstitu\u00eddo de:\n\n\n\n36\n\n? Um ou mais recursos, identificados por URLs, nos quais cada recurso\n\npode ser enquadrado em uma das seguintes categorias:\n\no Entradas principais - documentos que foram adicionados ao\ncache porque um contexto de navega\u00e7\u00e3o foi \"navegado\" em\n\nalgum documento que declarava um manifesto. O documento que\n\ndeclara um manifesto, mesmo que n\u00e3o seja declarado neste\n\nmanifesto, \u00e9 sempre adicionado ao cache.\n\no O manifesto - o recurso referido por um atributo \"manifest\" em\numa entrada principal correspondente \u00e0 URL de origem. Todas as\n\nentradas principais t\u00eam a mesma origem que o seu manifesto.\n\no Entradas expl\u00edcitas - s\u00e3o os recursos que tiveram seu\ncacheamento explicitamente declarados em um manifesto.\n\nEntradas expl\u00edcitas tamb\u00e9m podem ser marcadas como foreign,\n\npalavra-chave que estabelece que no conte\u00fado do manifesto\n\nexiste a declara\u00e7\u00e3o de outros manifesto, fazendo a declara\u00e7\u00e3o de\n\nmais recursos.\n\no Entradas indiretas - s\u00e3o recursos que foram listados no manifesto\ndo cache em uma sess\u00e3o de fallback.\n\n? Zero ou mais namespaces de fallback (entradas indiretas) - URLs,\n\nusadas como padr\u00f5es de correspond\u00eancia de prefixos, cada uma\n\nmapeada a uma entrada indireta.\n\n? Zero ou mais URLs que formam uma lista de namespaces permitidos\n\nquando online.\n\n3.4.4 Grupos de caches de aplica\u00e7\u00e3o\n\nUm grupo de chaches da aplica\u00e7\u00e3o \u00e9 o conjunto de caches de aplica\u00e7\u00e3o\n\nidentificados pela URL absoluta de um manifesto de recursos. Cada grupo tem um\n\npr\u00f3prio indicador de estado do processo de atualiza\u00e7\u00e3o, que pode ser idle, checking\n\nou downloading. M\u00faltiplos caches de aplica\u00e7\u00e3o em diferentes grupos podem conter\n\nos mesmos recursos, por exemplo quando mais de um manifesto referencia o\n\nmesmo recurso.\n\n\n\n37\n\n3.5 Web Storage\n\nA especifica\u00e7\u00e3o do Web Storage define uma API no cliente para o\n\narmazenamento persistente de dados baseados em pares de chave-valor. Dois\n\nmecanismos relacionados s\u00e3o introduzidos, ambos voltados ao armazenamento de\n\ndados estruturados.\n\n3.5.1 O atributo sessionStorage\n\nO atributo sessionStorage foi planejado para quando o usu\u00e1rio est\u00e1 conduzindo\n\numa transa\u00e7\u00e3o \u00fanica, mas poderia estar conduzindo - ao mesmo tempo - m\u00faltiplas\n\ntransa\u00e7\u00f5es em diferentes janelas. Neste cen\u00e1rio, a utiliza\u00e7\u00e3o de cookies n\u00e3o difere\n\nos diferentes contextos de sess\u00e3o, e como o processamento dos dados pode ocorrer\n\ndiretamente no cliente \u2013 sem a interfer\u00eancia do servidor como meio centralizador \u2013\n\nos dados provenientes das m\u00faltiplas inst\u00e2ncias n\u00e3o se distinguiriam. Endere\u00e7ando\n\neste problema, o atributo sessionStorage permite que dados sejam salvos e\n\ncarregados separadamente de acordo com as diferentes sess\u00f5es no cliente.\n\n3.5.2 O atributo localStorage\n\nO atributo localStorage foi criado para guardar dados globais de uma aplica\u00e7\u00e3o,\n\ndisponibilizando-os entre todas as diferentes sess\u00f5es, mesmo ap\u00f3s o encerramento\n\ndas mesmas. Este mecanismo tem como principal finalidade o armazenamento de\n\ndados n\u00e3o limitados em tamanho, ou seja, dados que podem alcan\u00e7ar a magnitude\n\nde dezenas de Megabytes, espec\u00edficos de um dom\u00ednio. Mais uma vez, a utiliza\u00e7\u00e3o\n\nde cookies neste cen\u00e1rio tamb\u00e9m n\u00e3o \u00e9 recomendada, pois cookies necessitam ser\n\nenviados ao servidor a cada requisi\u00e7\u00e3o de recurso.\n\n3.5.3 A interface Storage\n\nAmbos os mecanismos, o armazenamento de sess\u00e3o e o armazenamento local\n\ncompartilhado, implementam a mesma interface b\u00e1sica Storage. Cada objeto\n\nStorage prov\u00ea acesso a uma lista de pares chave-valor, no qual qualquer string \u00e9\n\numa chave v\u00e1lida (incluindo a string vazia) utilizada para referenciar e mapear\n\nqualquer estrutura de dados clon\u00e1vel.\n\n\n\n38\n\n3.6 Web SQL Database\n\nO HTML5 oferece tamb\u00e9m um conjunto de APIs para a manipula\u00e7\u00e3o e\n\narmazenamento no cliente de bases de dados atrav\u00e9s do uso de um dialeto pr\u00f3prio\n\nde SQL. A especifica\u00e7\u00e3o destas APIs tem como objetivo facilitar a ger\u00eancia de dados\n\nrelacionais e possibilitar o uso de fun\u00e7\u00f5es de busca e filtragem dos mesmos no lado\n\ndo cliente.\n\n3.6.1 Bases de dados\n\nCada origem, ou seja, dom\u00ednio de aplica\u00e7\u00e3o, pode possuir um conjunto de\n\nbases de dados isoladas. Aplica\u00e7\u00f5es de diferentes dom\u00ednios n\u00e3o possuem acesso\n\nalgum \u00e0s bases de dados de outras aplica\u00e7\u00f5es. Cada base de dados possui um\n\nvalor de vers\u00e3o, para que a aplica\u00e7\u00e3o possa ter controle sobre as poss\u00edveis\n\natualiza\u00e7\u00f5es na estrutura de tabelas de diferentes clientes, eliminando erros devido\n\n\u00e0 eventual exist\u00eancia de bases desatualizadas.\n\n3.6.2 M\u00e9todos de acesso\n\nAs bases de dados podem ser acessadas de modo s\u00edncrono ou ass\u00edncrono.\n\nDevido \u00e0 maneira na qual os scripts s\u00e3o executados no navegador, e \u00e0s\n\ncaracter\u00edsticas de tais linguagens de scripting, o acesso ass\u00edncrono \u00e9 o mais\n\nrecomendado, mantendo a interatividade da aplica\u00e7\u00e3o e evitando o congelamento da\n\nresponsividade da sua interface gr\u00e1fica durante o processamento requisitado.\n\n3.7 Compatibilidade do HTML5\n\nA especifica\u00e7\u00e3o do HTML5 ainda est\u00e1 em desenvolvimento, e nenhum\n\nnavegador atualmente implementa totalmente a sua vers\u00e3o corrente. As\n\nfuncionalidades propostas pelo HTML5 est\u00e3o sendo gradualmente implementadas\n\nem diversos navegadores diferentes, segundo a prioridade dos respons\u00e1veis por\n\ncada um deles, por\u00e9m, as fun\u00e7\u00f5es necess\u00e1rias para a disponibiliza\u00e7\u00e3o de um\n\ndocumento ou aplica\u00e7\u00e3o em modo offline j\u00e1 est\u00e1 completa na maior parte dos\n\nnavegadores mais utilizados, como o Internet Explorer 8, e as mais recentes vers\u00f5es\n\ndo Mozilla Firefox e do Google Chrome.\n\n\n\n4 \u2013 JSF 2.0\n\nO JavaServer Faces \u00e9 o principal framework de interface gr\u00e1fica ao usu\u00e1rio\n\npara aplica\u00e7\u00f5es Java web na especifica\u00e7\u00e3o do JavaEE 6 . O JSF \u00e9 uma framework\n\nMVC orientada a requisi\u00e7\u00f5es, fundamentado no modelo de design de interfaces\n\ngr\u00e1ficas baseadas em componentes, atrav\u00e9s da utiliza\u00e7\u00e3o de arquivos XML\n\nchamados de view templates (templates de visualiza\u00e7\u00e3o) ou Facelet views. O\n\nframework gera o conte\u00fado para o cliente (geralmente em HTML) e realiza o\n\nprocessamento das subseq\u00fcentes requisi\u00e7\u00f5es.\n\nRequisi\u00e7\u00f5es s\u00e3o processadas pelo FacesServlet que, em resumo, carrega o\n\ntemplate de visualiza\u00e7\u00e3o apropriado, monta a sua \u00e1rvore de componentes, processa\n\neventos e renderiza a resposta para o cliente. A arquitetura do JSF estabelece um\n\nmodelo em que quase a totalidade dos processamentos da aplica\u00e7\u00e3o s\u00e3o\n\nexecutados no servidor, n\u00e3o somente incluindo as fun\u00e7\u00f5es de gerenciamento\n\nnecess\u00e1rias, mas incentivando que a l\u00f3gica de neg\u00f3cio da aplica\u00e7\u00e3o n\u00e3o seja\n\nlevados ao cliente. Esta abordagem promove o cliente como uma camada fina e\n\ndelega ao servidor toda a ger\u00eancia das responsabilidades e funcionalidades do\n\nframework. Algumas das responsabilidades e funcionalidades assumidas pelo JSF\n\nincluem:\n\n? Gerenciamento do estado dos componentes da UI entre requisi\u00e7\u00f5es;\n\n? Suporte do processamento de formul\u00e1rios, incluindo de m\u00faltiplas\n\np\u00e1ginas e tamb\u00e9m de mais de um por p\u00e1gina;\n\n? Um modelo de eventos fortemente tipado que permite a cria\u00e7\u00e3o de\n\ntratadores personalizados no lado do servidor para lidar com eventos\n\ngerados no cliente;\n\n? Valida\u00e7\u00e3o de dados de requisi\u00e7\u00f5es provendo um mecanismo para\n\nrela\u00e7\u00e3o de erros;\n\n? Permite a convers\u00e3o de tipos entre os valores definidos em markup e os\n\nobjetos de dados da aplica\u00e7\u00e3o;\n\n? Gerenciamento de erros e exce\u00e7\u00f5es, permitindo que os mesmos sejam\n\nreportados de forma intelig\u00edvel ao usu\u00e1rio da aplica\u00e7\u00e3o na UI;\n\n? Manipula\u00e7\u00e3o de navega\u00e7\u00e3o p\u00e1gina-a-p\u00e1gina em resposta a eventos da\n\nUI e das intera\u00e7\u00f5es do modelo;\n\n\n\n40\n\n4.1 Ciclo de vida de processamento de requisi\u00e7\u00f5es\n\nInterfaces gr\u00e1ficas web de usu\u00e1rio geralmente seguem um padr\u00e3o no qual o\n\nagente do usu\u00e1rio envia um ou mais requisi\u00e7\u00f5es ao servidor, com o intuito de\n\nexibi\u00e7\u00e3o da UI. No caso dos navegadores web, uma requisi\u00e7\u00e3o inicial HTTP GET ou\n\nPOST \u00e9 realizado ao servidor, que responde com um documento que \u00e9 ent\u00e3o\n\ninterpretado pelo navegador automaticamente gerando subseq\u00fcentes requisi\u00e7\u00f5es.\n\nCada uma das respectivas respostas representa recursos, como imagens, arquivos\n\nde script, folhas de estilo e outros artefatos que fazem parte do documento original.\n\nO JSF trata cada requisi\u00e7\u00e3o com um ciclo de vida de processamento bem definido,\n\nconstitu\u00eddo por diferentes fases, para a gera\u00e7\u00e3o da resposta equivalente \u00e0 intera\u00e7\u00e3o\n\ndos valores passados com o modelo e l\u00f3gica da aplica\u00e7\u00e3o.\n\n4.2 Cen\u00e1rios de processamento de requisi\u00e7\u00f5es\n\nNo contexto de aplica\u00e7\u00f5es desenvolvidas utilizando o JavaServer Faces,\n\nexistem quatro diferentes cen\u00e1rios poss\u00edveis quanto ao tratamento de uma\n\nrequisi\u00e7\u00e3o em uma resposta. Considerando que uma Resposta Faces seja uma\n\nresposta criada pela execu\u00e7\u00e3o da fase de renderiza\u00e7\u00e3o de resposta do ciclo de vida\n\ndo JSF, e que uma Requisi\u00e7\u00e3o Faces seja uma requisi\u00e7\u00e3o enviada a partir do\n\nconte\u00fado de uma Resposta Faces previamente gerada, existem tr\u00eas cen\u00e1rios que\n\nnecessitam ser considerados, e um que pode ser desconsiderado. O processamento\n\nde uma Requisi\u00e7\u00e3o N\u00e3o-Faces para a gera\u00e7\u00e3o de uma Resposta N\u00e3o-Faces n\u00e3o\n\nrepresenta nenhum processamento no escopo do JSF.\n\n\n\n41\n\nFigura 4: Diagrama de sequ\u00eancia ilustrando os diferentes poss\u00edveis comportamentos\n\npara diferentes requisi\u00e7\u00f5es.\n\n4.2.1 Requisi\u00e7\u00e3o N\u00e3o-Faces gera Resposta Faces\n\nNo caso em que uma requisi\u00e7\u00e3o \u00e9 enviada a um componente da aplica\u00e7\u00e3o \u2013\n\ncomo, por exemplo, um servlet ou uma p\u00e1gina JSP - ao inv\u00e9s de diretamente \u00e0 view\n\ndo Faces, a aplica\u00e7\u00e3o tem como responsabilidade criar uma nova view e a\n\n\n\n42\n\nconfigur\u00e1-la no contexto correto, permitindo a execu\u00e7\u00e3o do fluxo normal do ciclo de\n\nvida de processamento de requisi\u00e7\u00f5es do JSF para a gera\u00e7\u00e3o da resposta\n\napropriada.\n\n4.2.2 Requisi\u00e7\u00e3o Faces gera Resposta Faces\n\nO mais comum ciclo de vida \u00e9 o caso no qual uma Resposta Faces inclui\n\ncontroles de UI que podem submeter requisi\u00e7\u00f5es subseq\u00fcentes de volta \u00e0 aplica\u00e7\u00e3o,\n\nutilizando uma URI que est\u00e1 mapeada para o controlador da implementa\u00e7\u00e3o do JSF\n\nem uso. O framework ent\u00e3o gerencia todo o processamento da requisi\u00e7\u00e3o em\n\nresposta, invocando quando necess\u00e1rio os mecanismos de tratamento de eventos,\n\nde valida\u00e7\u00e3o e a pr\u00f3pria l\u00f3gica da aplica\u00e7\u00e3o, quando necess\u00e1rio.\n\nFigura 5: Fases do tratamento padr\u00e3o de requisi\u00e7\u00f5es pelo JSF 2.0.\n\n\n\n43\n\n4.2.3 Requisi\u00e7\u00e3o Faces gera Resposta N\u00e3o-Faces\n\nRequisi\u00e7\u00f5es de recursos s\u00e3o tratadas de forma transparente pelo JSF. Causa\n\na gera\u00e7\u00e3o de uma resposta servindo os bytes de um recurso, como uma imagem,\n\num arquivo ou at\u00e9 recursos produzidos com outra tecnologia (como um servlet).\n\n4.3 Fases do ciclo de vida do processamento de requisi\u00e7\u00e3o\n\n4.3.1 Restaura\u00e7\u00e3o da visualiza\u00e7\u00e3o\n\nO JavaServer Faces armazena todas as informa\u00e7\u00f5es relativas ao\n\nestado de uma interface gr\u00e1fica gerada por seus mecanismos, chamada de\n\nvisualiza\u00e7\u00e3o, para possibilitar o futuro processamento de requisi\u00e7\u00f5es subseq\u00fcentes.\n\nA primeira fase do ciclo de vida \u00e9 respons\u00e1vel pela recupera\u00e7\u00e3o das informa\u00e7\u00f5es\n\nque refletem as configura\u00e7\u00f5es salvas pela visualiza\u00e7\u00e3o gerada pela \u00faltima resposta\n\nFaces, ou pela cria\u00e7\u00e3o de uma nova visualiza\u00e7\u00e3o criada para esta sess\u00e3o, no caso\n\nda n\u00e3o exist\u00eancia de uma resposta precedente.\n\nDentre as informa\u00e7\u00f5es recuperadas, se pode destacar a estrutura de\n\n\u00e1rvore de componentes que originou e reflete o estado atual da interface gr\u00e1fica,\n\nutilizada para processamento das requisi\u00e7\u00f5es geradas a partir da mesma.\n\n4.3.2 Aplica\u00e7\u00e3o dos valores da requisi\u00e7\u00e3o\n\nO prop\u00f3sito da fase de aplica\u00e7\u00e3o dos valores da requisi\u00e7\u00e3o \u00e9 fornecer uma\n\noportunidade de atualiza\u00e7\u00e3o do estado atual a cada componente da visualiza\u00e7\u00e3o, de\n\nacordo com as informa\u00e7\u00f5es disponibilizadas pela requisi\u00e7\u00e3o corrente. Nesta ocasi\u00e3o,\n\nassim que novas informa\u00e7\u00f5es s\u00e3o examinadas por um componente para a\n\natualiza\u00e7\u00e3o de seu estado, o componente as armazena como \u201cvalores locais\u201d.\n\nNeste momento do processamento, componentes que implementem\n\nActionSource, ou seja, que possam gerar a\u00e7\u00f5es no sistema, que reconhe\u00e7am sua\n\nativa\u00e7\u00e3o, registram a execu\u00e7\u00e3o de uma a\u00e7\u00e3o. O registro da execu\u00e7\u00e3o de a\u00e7\u00f5es \u00e9\n\nfeita atrav\u00e9s de eventos que, de acordo com suas propriedades, podem ser\n\nefetuadas em diferentes pontos do ciclo de vida.\n\n\n\n44\n\n4.3.3 Valida\u00e7\u00e3o do processamento\n\nA fase de valida\u00e7\u00e3o do processamento realiza a valida\u00e7\u00e3o do novo estado\n\nproposto pela requisi\u00e7\u00e3o. Como parte da cria\u00e7\u00e3o ou recupera\u00e7\u00e3o da visualiza\u00e7\u00e3o\n\nrelativa \u00e0 atual requisi\u00e7\u00e3o, zero ou mais inst\u00e2ncias de validadores podem ter sido\n\nregistradas para cada componente - de acordo com a defini\u00e7\u00e3o da interface gr\u00e1fica\n\npelos desenvolvedores da mesma. Al\u00e9m disto, cada componente pode tamb\u00e9m\n\nimplementar suas pr\u00f3prias l\u00f3gicas de valida\u00e7\u00e3o.\n\nDe forma recursiva, a valida\u00e7\u00e3o de cada componente da visualiza\u00e7\u00e3o \u00e9\n\nrealizada, utilizando seus respectivos \u201cvalores locais\u201d. Erros de valida\u00e7\u00e3o podem\n\ntanto gerar mensagens para sinaliza\u00e7\u00e3o de um problema sem interromper o fluxo\n\nnormal de processamento, quanto podem indicar a necessidade da gera\u00e7\u00e3o de uma\n\nresposta sem a continua\u00e7\u00e3o do ciclo de vida.\n\n4.3.4 Atualiza\u00e7\u00e3o dos valores do modelo\n\nCaso esta fase do ciclo de vida do processamento da requisi\u00e7\u00e3o seja atingida,\n\n\u00e9 assumido que o valor local de cada componente foi atualizado, que a requisi\u00e7\u00e3o\n\nseja v\u00e1lida (de acordo com as valida\u00e7\u00f5es feitas) sintaticamente e semanticamente e\n\nque \u00e9 apropriado atualizar o modelo de dados da aplica\u00e7\u00e3o, preparando-a para a\n\nexecu\u00e7\u00e3o dos eventos da aplica\u00e7\u00e3o registrados na fase de aplica\u00e7\u00e3o dos valores da\n\nrequisi\u00e7\u00e3o. A ocorr\u00eancia de algum erro durante a atualiza\u00e7\u00e3o dos valores do modelo\n\nou durante a execu\u00e7\u00e3o dos eventos da aplica\u00e7\u00e3o pode tamb\u00e9m gerar a interrup\u00e7\u00e3o\n\ndo fluxo normal de processamento.\n\n4.3.5 Invoca\u00e7\u00e3o da aplica\u00e7\u00e3o\n\nA invoca\u00e7\u00e3o da aplica\u00e7\u00e3o \u00e9 realizada atrav\u00e9s da distribui\u00e7\u00e3o e processamento\n\nno sistema de todo e qualquer evento criado que ainda n\u00e3o tenha sido tratado.\n\nAssim como nas fases do ciclo de vida precedentes, erros durante esta fase pode\n\ninterromper o fluxo normal de processamento.\n\n\n\n45\n\n4.3.6 Renderiza\u00e7\u00e3o da resposta\n\nA gera\u00e7\u00e3o da resposta \u00e9 a \u00faltima fase do ciclo de vida de processamento de\n\numa requisi\u00e7\u00e3o Faces, e possui como responsabilidades, respectivamente, a\n\nrenderiza\u00e7\u00e3o de uma resposta ao cliente e o salvamento do estado da resposta,\n\npossibilitando o processamento de requisi\u00e7\u00f5es subseq\u00fcentes.\n\nA implementa\u00e7\u00e3o de diferentes abordagens para a cria\u00e7\u00e3o de uma resposta \u00e9\n\nsuportada pelo JSF, possibilitando a gera\u00e7\u00e3o de respostas customizadas. \u00c9 poss\u00edvel\n\ncriar RenderKits especializados que intercalem os resultados da codifica\u00e7\u00e3o dos\n\ncomponentes com conte\u00fado dinamicamente gerado ou pela l\u00f3gica da aplica\u00e7\u00e3o ou\n\npor um template est\u00e1tico.\n\n4.4 Processamento de eventos\n\nO JSF implementa um modelo para notifica\u00e7\u00e3o de eventos e de registro de\n\ntratadores dos mesmos baseado nos padr\u00f5es de design da especifica\u00e7\u00e3o\n\nJavaBeans. Eventos podem ser emitidos denotando mudan\u00e7as de estado\n\nsignificantes. Cada um destes eventos s\u00e3o ent\u00e3o difundidos entre os tratadores que\n\nregistraram interesse no recebimento de um tipo indicado pela classe que\n\nimplementa cada evento. Existe tamb\u00e9m a possibilidade de que os pr\u00f3prios\n\ntratadores de eventos lancem outros eventos ao sistema.\n\nDurante a execu\u00e7\u00e3o das diversas fases do ciclo de vida de processamento de\n\nrequisi\u00e7\u00f5es existe a possibilidade de que eventos sejam lan\u00e7ados influenciando\n\ndiretamente o processamento e a resposta gerada. Neste contexto, eventos podem,\n\npor exemplo, indicar erros diversos - como de valida\u00e7\u00e3o ou de convers\u00e3o de valores\n\n\u2013 resultando em at\u00e9 a pr\u00f3pria finaliza\u00e7\u00e3o do processamento da requisi\u00e7\u00e3o \u2013 caso\n\nesta se fa\u00e7a necess\u00e1ria \u2013 indicando a gera\u00e7\u00e3o de uma resposta conforme a\n\nsitua\u00e7\u00e3o.\n\n4.5 Conceitos que impactam nas fases do ciclo de vida\n\nUma s\u00e9rie de diferentes conceitos internos do modelo definido pelo JSF\n\npodem exercer influ\u00eancia sobre o processamento de uma requisi\u00e7\u00e3o Faces,\n\n\n\n46\n\npodendo inclusive modificar a ordem padr\u00e3o do fluxo de processamento. Todas as\n\nfases relacionadas \u00e0 manipula\u00e7\u00e3o de valores de uma requisi\u00e7\u00e3o podem, por\n\nexemplo, ser antecipadas, de acordo com propriedades configuradas nos\n\ncomponentes utilizados para a gera\u00e7\u00e3o da interface gr\u00e1fica de uma aplica\u00e7\u00e3o. Do\n\nmesmo modo, a ger\u00eancia de estado, o tratamento de recursos e os comportamentos\n\nde componentes podem todos sofrer customiza\u00e7\u00f5es. Quest\u00f5es relacionadas \u00e0\n\ninternacionaliza\u00e7\u00e3o e localiza\u00e7\u00e3o de software tamb\u00e9m influem no conte\u00fado utilizado\n\npara gera\u00e7\u00e3o de uma resposta.\n\n4.5.1 AJAX\n\nO JSF 2.0 introduz a utiliza\u00e7\u00e3o de requisi\u00e7\u00f5es AJAX \u00e0 especifica\u00e7\u00e3o. Por\n\nalguns anos o JSF e t\u00e9cnicas de AJAX t\u00eam sido aplicados juntos atrav\u00e9s de\n\nframeworks complementares, cada uma destas contribuindo para uma experi\u00eancia\n\nmais din\u00e2mica a intera\u00e7\u00e3o do usu\u00e1rio atrav\u00e9s de diferentes abordagens.\n\nAs varia\u00e7\u00f5es entre as diferentes maneiras em que estes frameworks operam\n\npodem ocasionalmente causar problemas de compatibilidade de componentes em\n\numa aplica\u00e7\u00e3o. A especifica\u00e7\u00e3o 2 do JSF ent\u00e3o, a partir de conceitos provindos de\n\numa variedade de frameworks AJAX para JSF, padroniza a utiliza\u00e7\u00e3o destas\n\nt\u00e9cnicas, definindo uma biblioteca Javascript respons\u00e1vel pelas opera\u00e7\u00f5es b\u00e1sicas\n\nAJAX, como o envio de requisi\u00e7\u00f5es e o processamento das respostas\n\nconseq\u00fcentes.\n\nAl\u00e9m de, neste contexto, padronizar os aspectos relacionados ao cliente, o\n\nJSF 2 tamb\u00e9m padroniza os aspectos relacionados ao servidor, tratando requisi\u00e7\u00f5es\n\nutilizando o ciclo de vida padr\u00e3o de processamento de requisi\u00e7\u00f5es JSF.\n\n4.5.2 Comportamento de componentes\n\nOs comportamentos de componentes desempenham um papel similar aos\n\nvalidadores e conversores do JSF, por\u00e9m tamb\u00e9m podem ter impacto no cliente, na\n\nforma de scripts que podem ser anexados \u00e0 \u00e1rvore de tratamento de eventos DOM.\n\n\n\n5 \u2013 INTEGRA\u00c7\u00c3O DO JSF 2 E HTML5 OFFLINE\nEste cap\u00edtulo trata da compatibiliza\u00e7\u00e3o do JavaServer Faces 2.0 com as\n\ncapacidades de cria\u00e7\u00e3o de aplica\u00e7\u00f5es offline oferecidas pelo HTML5, segundo as\n\ncaracter\u00edsticas definidas nos cap\u00edtulos 3 e 4, analisando em termos da viabilidade a\n\nproblem\u00e1tica envolvida, as poss\u00edveis solu\u00e7\u00f5es e seus requisitos e impactos ao\n\nusu\u00e1rio.\n\n5.1 Desafios inerentes \u00e0s tecnologias em quest\u00e3o\n\n5.1.1 Relativos ao HTML5 e aos navegadores web\n\nO HTML5 \u00e9 a primeira especifica\u00e7\u00e3o desta tecnologia que padroniza e define\n\nmecanismos e recursos b\u00e1sicos diretamente visando \u00e0 cria\u00e7\u00e3o de aplicativos sobre\n\na plataforma web. Dentre outros mecanismos, esta especifica\u00e7\u00e3o determina meios\n\npara solucionar todas as necessidades para disponibiliza\u00e7\u00e3o de aplica\u00e7\u00f5es sem a\n\nnecessidade de comunica\u00e7\u00e3o com o servidor, ou seja, sem acesso a internet. Todas\n\nestas solu\u00e7\u00f5es, por\u00e9m, n\u00e3o endere\u00e7am quest\u00f5es relacionadas \u00e0 execu\u00e7\u00e3o de\n\nc\u00f3digo em linguagens de programa\u00e7\u00e3o que os navegadores atuais n\u00e3o possuem\n\ncapacidade de processar, como o Java, linguagem na qual o JavaServer Faces \u00e9\n\nimplementado e executado. Isto significa que n\u00e3o existe nenhuma maneira\n\npadronizada entre os diferentes navegadores web que permita \u2013 ou mesmo\n\nvislumbre - a execu\u00e7\u00e3o de c\u00f3digo Java relacionado \u00e0s especifica\u00e7\u00f5es existentes do\n\nJSF para a supervis\u00e3o da aplica\u00e7\u00e3o quando offline.\n\nO JavaScript \u00e9 \u2013 devido \u00e0 sua popularidade e difus\u00e3o entre diferentes\n\nimplementa\u00e7\u00f5es dos navegadores atuais - a principal linguagem existente para\n\nexecu\u00e7\u00e3o de processamentos no lado do cliente de uma aplica\u00e7\u00e3o (client side\n\nscripting). Isto implica que, para que uma aplica\u00e7\u00e3o web desenvolvida com o JSF\n\npossa ser executada em modo offline de modo padr\u00e3o entre navegadores modernos\n\nque suportam o HTML5, seus processamentos e sua l\u00f3gica de neg\u00f3cio devam ser\n\nexecutados em JavaScript. Apesar disto, tamb\u00e9m existem alternativas \u2013 n\u00e3o\n\npadronizadas na plataforma web \u2013 em que navegadores podem executar c\u00f3digos\n\nem diferentes linguagens.\n\n\n\n48\n\n5.1.2 Relativos ao JSF 2.0 e ao modelo cliente-servidor da web\n\nA arquitetura determinada pela especifica\u00e7\u00e3o do JSF 2.0, por sua vez,\n\nestabelece um modelo em que o servidor assume toda a responsabilidade sobre o\n\ncontrole e sobre a l\u00f3gica de neg\u00f3cio da aplica\u00e7\u00e3o. \u00c9 estabelecida, assim, uma\n\nestrutura r\u00edgida que for\u00e7a que todas as fun\u00e7\u00f5es de gerenciamento de uma aplica\u00e7\u00e3o,\n\ndesde a ger\u00eancia do estado da interface gr\u00e1fica e do modelo at\u00e9 o processamento e\n\nmanipula\u00e7\u00e3o de valores, sua valida\u00e7\u00e3o, e a gera\u00e7\u00e3o de uma resposta, sejam\n\nexecutadas no lado do servidor.\n\nComo conseq\u00fc\u00eancia, o cliente da aplica\u00e7\u00e3o age como uma camada fina\n\nrepresentando somente uma interface gr\u00e1fica, sem intelig\u00eancia e auto-sufici\u00eancia,\n\ncom alta depend\u00eancia sobre a rede para acesso ao servidor.\n\n5.1.3 Problem\u00e1tica da compatibiliza\u00e7\u00e3o\n\nDe acordo com os requisitos propostos por este trabalho - relativos aos\n\ndesafios pertinentes \u00e0 compatibiliza\u00e7\u00e3o do HTML5 e do JSF 2.0 \u2013 algumas\n\nimportantes quest\u00f5es devem ser respondidas para a determina\u00e7\u00e3o das poss\u00edveis\n\nsolu\u00e7\u00f5es e suas respectivas viabilidades: Como trazer c\u00f3digo do servidor para\n\nexecu\u00e7\u00e3o no cliente? Qual a por\u00e7\u00e3o de c\u00f3digo que deve ser trazida ao cliente?\n\nComo sincronizar dados e processamentos entre o cliente e o servidor, garantindo a\n\nintegridade dos dados e opera\u00e7\u00f5es?\n\n5.2 C\u00f3digo necess\u00e1rio para execu\u00e7\u00e3o offline no cliente\n\nA primeira problem\u00e1tica a ser trabalhada, no contexto de compatibiliza\u00e7\u00e3o de\n\naplica\u00e7\u00f5es web desenvolvidas utilizando-se o JSF junto aos mecanismos de\n\ndisponibiliza\u00e7\u00e3o offline oferecida por mecanismos do HTML5, refere-se \u00e0\n\ndetermina\u00e7\u00e3o do c\u00f3digo da aplica\u00e7\u00e3o necess\u00e1rio para que seja poss\u00edvel a execu\u00e7\u00e3o\n\noffline no cliente de forma independente.\n\nOs requisitos m\u00ednimos para disponibiliza\u00e7\u00e3o offline de uma aplica\u00e7\u00e3o web,\n\nabordados anteriormente neste trabalho, estipulam a necessidade do\n\narmazenamento local dos recursos da aplica\u00e7\u00e3o, que incluem o c\u00f3digo e recursos\n\n\n\n49\n\nda interface gr\u00e1fica, c\u00f3digo base de gerenciamento da aplica\u00e7\u00e3o, c\u00f3digo contendo\n\nl\u00f3gica de neg\u00f3cio e os dados relativos ao dom\u00ednio.\n\nFigura 6: Aplica\u00e7\u00e3o web JSF 2.0 segundo arquitetura proposta pela especifica\u00e7\u00e3o\n\nJavaEE.\n\n5.2.1 JavaServer Faces\n\nAs responsabilidades do JSF englobam grande parte da gera\u00e7\u00e3o da interface\n\ngr\u00e1fica e seu gerenciamento, fornecendo uma porta de entrada ao resto do sistema.\n\nO ciclo de vida de processamento e tratamento de requisi\u00e7\u00f5es, junto \u00e0 gera\u00e7\u00e3o de\n\nrespostas, pode ser definido como o principal processo do framework, regendo todo\n\no seu funcionamento. Todas as suas fazes realizam pap\u00e9is importantes de acordo\n\n\n\n50\n\ncom este contexto, sendo respons\u00e1veis pela renderiza\u00e7\u00e3o de toda a interface\n\ngr\u00e1fica, pela ger\u00eancia do estado da aplica\u00e7\u00e3o, valida\u00e7\u00e3o e atualiza\u00e7\u00e3o de novos\n\nvalores de entrada e tamb\u00e9m pela invoca\u00e7\u00e3o da aplica\u00e7\u00e3o. Assim sendo, a\n\nexecu\u00e7\u00e3o de cada uma destas fases \u00e9 absolutamente necess\u00e1ria em um contexto\n\noffline, diretamente e indiretamente implicando na depend\u00eancia de praticamente\n\ntodo o resto do framework.\n\nFigura 7: Aplica\u00e7\u00e3o web offline com o JSF 2.0 no cliente.\n\n5.2.2 Particionamento da l\u00f3gica de neg\u00f3cios entre cliente e servidor\n\nNo particionamento de aplica\u00e7\u00f5es web entre cliente e servidor, como\n\nanteriormente estabelecido no cap\u00edtulo 2 (p\u00e1gina 23), pode ser invi\u00e1vel a execu\u00e7\u00e3o\n\nintegral dos processamentos relativos ao servidor no cliente, pois existe uma s\u00e9rie\n\nde responsabilidades inerentes do servidor que podem n\u00e3o ser realizadas de modo\n\nindependente pelo cliente, de acordo com a natureza da aplica\u00e7\u00e3o.\n\n\n\n51\n\nFigura 8: L\u00f3gica espec\u00edfica da aplica\u00e7\u00e3o.\n\nAssim como qualquer outro software web offline que possua sua l\u00f3gica\n\nparticionada, e que quando online se comunique com o servidor, se faz necess\u00e1rio\n\num mecanismo que possibilite a separa\u00e7\u00e3o de l\u00f3gica de neg\u00f3cio, aqui referido como\n\nServer-mock, determinando assim as a\u00e7\u00f5es a serem tomadas desde quando\n\nopera\u00e7\u00f5es e dados n\u00e3o estiverem dispon\u00edveis at\u00e9 quando n\u00e3o possam ser\n\ndelegados.\n\n\n\n52\n\nFigura 9: Separa\u00e7\u00e3o de l\u00f3gica da aplica\u00e7\u00e3o, representando as por\u00e7\u00f5es de l\u00f3gica executadas no\n\nservidor e no cliente offline.\n\n\u00c9 importante ressaltar que uma vez definidas as caracter\u00edsticas deste\n\nmecanismo, bem como suas necessidades e todas as tecnologias de suporte as\n\nquais a mesma teria acesso, sua implementa\u00e7\u00e3o seria de inteira responsabilidade\n\ndos desenvolvedores do cliente web offline, de acordo com a natureza da aplica\u00e7\u00e3o,\n\nsua l\u00f3gica e peculiaridades.\n\n\n\n53\n\n5.2.3 C\u00f3digo de l\u00f3gica de neg\u00f3cios plaus\u00edvel ao cliente\n\nA determina\u00e7\u00e3o da por\u00e7\u00e3o de c\u00f3digo de l\u00f3gica de neg\u00f3cio de uma aplica\u00e7\u00e3o\n\nnecess\u00e1rio - e cab\u00edvel - ao cliente de uma aplica\u00e7\u00e3o web \u00e9 um problema de grande\n\ncomplexidade, pois - de acordo com decis\u00f5es arquiteturais - seu c\u00f3digo pode estar\n\ndistribu\u00eddo das mais diferentes maneiras, nas mais diversas partes de um software.\n\nMesmo assim, esta tarefa de delimita\u00e7\u00e3o \u00e9 de fundamental import\u00e2ncia e deve ser\n\nrealizada de maneira clara e objetiva, de modo a n\u00e3o inviabilizar a compatibiliza\u00e7\u00e3o\n\nproposta.\n\nDurante o processamento de uma requisi\u00e7\u00e3o, seguindo o contexto deste\n\ntrabalho, o JSF depende de pontos de entrada de invoca\u00e7\u00e3o a aplica\u00e7\u00e3o,\n\nnormalmente referidos como Managed Beans. Sua principal responsabilidade\n\nresume-se em intermediar a comunica\u00e7\u00e3o entre as p\u00e1ginas da interface gr\u00e1fica web\n\n(componentes do JSF) e o modelo da aplica\u00e7\u00e3o, fornecendo uma fachada de acesso\n\na dados, escutando eventos, validando entradas e delegando a\u00e7\u00f5es e informa\u00e7\u00f5es \u00e0\n\ncamada de neg\u00f3cios, assim tamb\u00e9m representando fun\u00e7\u00e3o essencial em um cliente\n\noffline.\n\nA camada de neg\u00f3cio, por sua vez, re\u00fane \u2013 por concep\u00e7\u00e3o - a maior parte da\n\nl\u00f3gica de neg\u00f3cio e, segundo os padr\u00f5es propostos pelo JavaEE, deve ser\n\nimplementada de forma totalmente independente da camada de visualiza\u00e7\u00e3o,\n\ncomumente atrav\u00e9s do EJB. Devido a isto, esta camada deve n\u00e3o ser inclu\u00edda em\n\nc\u00f3digo levado ao cliente, no navegador do usu\u00e1rio, tanto porque pode conter l\u00f3gica,\n\ndepend\u00eancias, refer\u00eancia de acesso a outros servi\u00e7os online, e outros\n\nprocessamentos de execu\u00e7\u00e3o ou mandat\u00f3ria no servidor ou n\u00e3o poss\u00edvel no cliente,\n\nquanto para manter coes\u00e3o e coer\u00eancia de design do software impostos pelos\n\npadr\u00f5es existentes.\n\nEstabelece-se assim, que a por\u00e7\u00e3o de c\u00f3digo de l\u00f3gica que deve ser trazida\n\nao cliente pode ser delimitada pela separa\u00e7\u00e3o entre a camada de visualiza\u00e7\u00e3o e a\n\ncamada de l\u00f3gica de neg\u00f3cios de uma aplica\u00e7\u00e3o JSF, determinando as fachadas de\n\nservi\u00e7os EJB acess\u00edveis a este c\u00f3digo como as interfaces a serem tratadas pelo\n\nmecanismo respons\u00e1vel, o Server-mock, conforme a figura 10.\n\n\n\n54\n\nFigura 10: Duas diferentes implementa\u00e7\u00f5es para a interface dos servi\u00e7os oferecidos por um\n\nEJB, uma pelos processamentos no servidor e a outra pelas a\u00e7\u00f5es a serem realizadas no\n\ncliente quando offline.\n\n5.2.4 Dados da aplica\u00e7\u00e3o\n\nO particionamento de c\u00f3digo entre servidor e cliente tamb\u00e9m implica na\n\ncar\u00eancia de processamentos e dados - normalmente disponibilizados pelo conjunto\n\nde servi\u00e7os do servidor - n\u00e3o acess\u00edveis pelo cliente offline, que podem comumente\n\nrepresentar fundamental import\u00e2ncia para o funcionamento da aplica\u00e7\u00e3o. Assim, a\n\nimplementa\u00e7\u00e3o alternativa dos servi\u00e7os indispon\u00edveis, ou seja, o Server-mock, deve\n\nser respons\u00e1vel pelo acesso de - ao menos - todo o conjunto de dados\n\nfundamentais, e para que tal fun\u00e7\u00e3o seja poss\u00edvel, os mesmos devem estar\n\narmazenados e dispon\u00edveis de alguma maneira, em contexto offline.\n\nDo mesmo modo, todo o conjunto de dados gerados pelo cliente offline, bem\n\ncomo informa\u00e7\u00f5es de representa\u00e7\u00e3o de todos os processamentos requisitados, deve\n\nser armazenado, para que possam ser posteriormente atualizados e executados no\n\nservidor, de modo a manter a pertin\u00eancia e integridade do estado da aplica\u00e7\u00e3o como\n\num todo. Ambas a disponibiliza\u00e7\u00e3o dos dados da aplica\u00e7\u00e3o em ambientes offline e a\n\natualiza\u00e7\u00e3o do servidor segundo qualquer mudan\u00e7a depende da exist\u00eancia de um\n\n\n\n55\n\nmecanismo respons\u00e1vel pela sincroniza\u00e7\u00e3o bilateral de dados entre cliente e\n\nservidor, assim como dependem de meios para o armazenamento e acesso a dados\n\npersistentes no cliente.\n\nFigura 11: Acesso e armazenamento de dados necess\u00e1rio tamb\u00e9m pelo cliente offline.\n\nO HTML5, segundo sua especifica\u00e7\u00e3o, fornece dois mecanismos distintos\n\nprim\u00e1rios para o armazenamento de dados de uma aplica\u00e7\u00e3o, disponibilizando seu\n\nacesso tanto quando online quanto quando offline, como descrito em detalhe\n\nanteriormente neste trabalho, no cap\u00edtulo 3. Ambos os mecanismos s\u00e3o acess\u00edveis\n\ndiretamente pelo navegador e atrav\u00e9s do uso de JavaScript, provendo acesso a um\n\nconjunto de APIs para a manipula\u00e7\u00e3o de bases de dados relacionais no cliente e\n\npara o armazenamento - e acesso \u2013 persistente de dados baseados em pares de\n\nchaves-valor.\n\nEm conjunto, as duas tecnologias viabilizam o armazenamento - para acesso\n\nfuturo - de todos os tipos de dados da aplica\u00e7\u00e3o que podem vir a ser necess\u00e1rios\n\nneste cen\u00e1rio, incluindo dados salvos durante acesso online, para acesso posterior\n\n\n\n56\n\noffline, e dados salvos durante a utiliza\u00e7\u00e3o offline do software, que necessitem ser\n\nposteriormente disponibilizados para o servidor.\n\n5.3 Execu\u00e7\u00e3o de c\u00f3digo independente do servidor no cliente\n\nO ambiente web foi concebido com a finalidade de representa\u00e7\u00e3o e exibi\u00e7\u00e3o\n\nde documentos, e embora esteja tomando novos rumos, ainda prov\u00ea muitos desafios\n\nao desenvolvimento de aplica\u00e7\u00f5es. Uma vez delimitadas as por\u00e7\u00f5es de c\u00f3digo nos\n\nquais as execu\u00e7\u00f5es se fazem necess\u00e1rias em clientes offline, \u00e9 preciso determinar\n\nos meios para que sua execu\u00e7\u00e3o seja poss\u00edvel. Cada diferente tecnologia utilizada\n\nna compatibiliza\u00e7\u00e3o do HTML5 com o JSF 2.0 requer diferentes solu\u00e7\u00f5es. \u00c9\n\nnecess\u00e1rio viabilizar o armazenamento e processamento de c\u00f3digo em linguagem\n\nJava, da interface gr\u00e1fica e de recursos diversos.\n\n5.3.1 Interface gr\u00e1fica e o cacheamento de recursos\n\nA interface gr\u00e1fica de aplica\u00e7\u00f5es web JSF j\u00e1 \u00e9 naturalmente gerada para\n\nexibi\u00e7\u00e3o nos navegadores modernos, e atrav\u00e9s do uso do mecanismo de\n\ncacheamento de recursos do HTML5, poderia ser cacheada junto a seus recursos\n\natrav\u00e9s da disponibiliza\u00e7\u00e3o de um manifesto.\n\n\u00c9 importante, por\u00e9m, notar que - deste modo - se faz necess\u00e1rio o\n\nestabelecimento pr\u00e9vio de todas as p\u00e1ginas e recursos a serem salvos para\n\nposterior uso. Conseq\u00fcentemente, nesta abordagem, quaisquer recursos que devam\n\nser gerados dinamicamente tornam-se est\u00e1ticos, ou seja, toda e qualquer p\u00e1gina\n\nweb JSF - que fa\u00e7a uso de dados vari\u00e1veis ou relacionados \u00e0 execu\u00e7\u00e3o de uma\n\nl\u00f3gica - seria armazenada de acordo com o seu estado no momento em que o\n\ncacheamento de recursos fosse realizado.\n\nEsta restri\u00e7\u00e3o, que em uma an\u00e1lise superficial pode aparentar um baixo\n\nimpacto na compatibiliza\u00e7\u00e3o de uma aplica\u00e7\u00e3o, ent\u00e3o representa, segundo os\n\nconceitos arquiteturais do JSF e a fina camada de interface gr\u00e1fica conseguinte, a\n\nimpraticabilidade do cacheamento da totalidade de p\u00e1ginas de interfaces gr\u00e1ficas\n\nJSF. Isto ocorre, pois mesmo que - com restri\u00e7\u00f5es - seja poss\u00edvel armazenar\n\nalgumas p\u00e1ginas geradas por repostas Faces, a exibi\u00e7\u00e3o de respostas decorrentes\n\n\n\n57\n\ndo processamento de subseq\u00fcentes requisi\u00e7\u00f5es Faces depende diretamente da\n\ngera\u00e7\u00e3o de novos conte\u00fados, ou seja, conte\u00fados din\u00e2micos. Por mais que em\n\nexperimentos o cacheamento de p\u00e1ginas JSF tenha sido poss\u00edvel, verificou-se que a\n\ndepend\u00eancia nos dados relacionados \u00e0s p\u00e1ginas de resposta, necessita\n\nexplicitamente da gera\u00e7\u00e3o din\u00e2mica do conte\u00fado e impossibilita qualquer tentativa\n\nde cacheamento de recursos n\u00e3o est\u00e1ticos.\n\nAssim sendo, estabelecendo-se a exist\u00eancia de depend\u00eancia de gera\u00e7\u00e3o\n\ndin\u00e2mica de conte\u00fado junto \u00e0 execu\u00e7\u00e3o dos processamentos do JSF e regras de\n\nneg\u00f3cio envolvidas, se faz desnecess\u00e1rio o cacheamento parcial de respostas\n\nFaces de forma est\u00e1tica. Todos outros recursos, como figuras e outros arquivos\n\nest\u00e1ticos podem perfeitamente utilizar estes mecanismos de armazenamento\n\nfornecidos pelo HTML5.\n\n5.3.2 C\u00f3digo Java da aplica\u00e7\u00e3o\n\nO JavaServer Faces \u00e9, bem como comumente tamb\u00e9m \u00e9 toda a l\u00f3gica de\n\nneg\u00f3cio em projetos JEE, implementado em Java e, como abordado previamente,\n\nn\u00e3o existe nenhum m\u00e9todo padronizado para execu\u00e7\u00e3o de c\u00f3digo desta linguagem\n\nem navegadores web. Por\u00e9m, existem algumas alternativas n\u00e3o triviais que\n\npoderiam viabilizar a solu\u00e7\u00e3o deste problema: a utiliza\u00e7\u00e3o de Java Applets para\n\ndisponibiliza\u00e7\u00e3o de c\u00f3digo Java no cliente junto \u00e0 cria\u00e7\u00e3o de Render Kits do JSF\n\nespecializados na cria\u00e7\u00e3o de p\u00e1ginas web offline que utilizem o Applet ao inv\u00e9s do\n\nservidor; a cria\u00e7\u00e3o de plug-ins para navegadores web que executem o c\u00f3digo Java\n\nnecess\u00e1rio quando offline, interceptando chamadas feitas por p\u00e1ginas da aplica\u00e7\u00e3o;\n\ne a compila\u00e7\u00e3o de c\u00f3digo Java para JavaScript, junto \u00e0 cria\u00e7\u00e3o de mecanismos de\n\ncontrole simplificados do framework, possibilitando a utiliza\u00e7\u00e3o do cacheamento de\n\nrecursos para o armazenamento de c\u00f3digos equivalentes ao processamento de\n\nrequisi\u00e7\u00f5es e gera\u00e7\u00e3o de respostas Faces.\n\n5.3.3 Plug-ins para navegadores\n\nTodos os navegadores modernos, que tamb\u00e9m suportam o HTML5, fornecem\n\nmecanismos para a cria\u00e7\u00e3o e uso de plug-ins, permitindo assim a extens\u00e3o de suas\n\n\n\n58\n\ncapacidades, modificando funcionalidades existentes ou adicionando novos\n\ncomportamentos a sua l\u00f3gica. Esta caracter\u00edstica viabiliza \u2013 dentre outras coisas - o\n\ntratamento de novos tipos de conte\u00fado, a intercepta\u00e7\u00e3o de chamadas HTTP a\n\nservidores e a execu\u00e7\u00e3o de c\u00f3digo Java.\n\nAtrav\u00e9s do desenvolvimento de provas de conceito, pode-se estabelecer que\n\na cria\u00e7\u00e3o de plug-ins para o suporte a aplica\u00e7\u00f5es offline desenvolvidas com o\n\nJavaServer Faces poderia prover todo o apoio necess\u00e1rio ao funcionamento das\n\nmesmas. Cada aplica\u00e7\u00e3o necessitaria um plug-in espec\u00edfico contendo o c\u00f3digo\n\nnecess\u00e1rio para seu funcionamento, incluindo, atrav\u00e9s da realiza\u00e7\u00e3o de detec\u00e7\u00e3o da\n\nindisponibilidade de acesso ao servidor, a intercepta\u00e7\u00e3o de chamadas destinadas ao\n\nservidor, permitindo a execu\u00e7\u00e3o do ciclo de vida de processamento de requisi\u00e7\u00f5es\n\nFaces, dos respectivos c\u00f3digos de l\u00f3gica de neg\u00f3cio e da gera\u00e7\u00e3o da resposta\n\nequivalente.\n\nFigura 12: Utiliza\u00e7\u00e3o de plug-in para execu\u00e7\u00e3o de c\u00f3digo Java do cliente offline.\n\nContudo, a aplica\u00e7\u00e3o desta abordagem levantou algumas conseq\u00fc\u00eancias que\n\nimpactam negativamente a sua viabilidade, dentre as quais se pode citar:\n\n\n\n59\n\n? Necessidade de cria\u00e7\u00e3o de plug-ins espec\u00edficos para cada navegador,\n\ndevido \u00e0s disparidades entre suas implementa\u00e7\u00f5es, principalmente\n\nrelacionadas \u00e0s tecnologias e mecanismos suportados para a\n\nutiliza\u00e7\u00e3o de plug-ins.\n\n? Impossibilidade de cria\u00e7\u00e3o de um \u00fanico plug-in - por navegador - n\u00e3o\n\nespec\u00edfico a uma \u00fanica aplica\u00e7\u00e3o, decorrente das configura\u00e7\u00f5es e da\n\nl\u00f3gica de neg\u00f3cio particulares de cada problema.\n\n? Grande dificuldade relacionada \u00e0 automatiza\u00e7\u00e3o da confec\u00e7\u00e3o de cada\n\nplug-in necess\u00e1rio, tarefa n\u00e3o trivial que necessitaria ser realizada a\n\ncada modifica\u00e7\u00e3o, tanto no ambiente de produ\u00e7\u00e3o quanto na aplica\u00e7\u00e3o\n\nem si.\n\n? Tamanho demasiadamente grande de cada plug-in, considerando os\n\npadr\u00f5es de velocidade de transfer\u00eancia de arquivos na internet em\n\nrela\u00e7\u00e3o ao tamanho das bibliotecas que seriam necess\u00e1rias, como o\n\nJSF, que possui \u2013 de acordo com suas diferentes implementa\u00e7\u00f5es \u2013\n\nentre seis e nove Megabytes, se levando em conta tamb\u00e9m a\n\nnecessidade de download, pelo sistema do cliente, a cada nova\n\nvers\u00e3o, para armazenamento em seu computador.\n\n? Possui como pr\u00e9-requisito e condi\u00e7\u00e3o b\u00e1sica a depend\u00eancia de uma\n\nJVM (Java Virtual Machine) compat\u00edvel na maquina cliente.\n\n5.3.4 Java Applets\n\nUm Applet \u00e9 um programa escrito na linguagem Java que pode ser inclu\u00eddo\n\nem uma p\u00e1gina HTML, de maneira muito semelhante a que uma imagem pode ser\n\ninclu\u00edda e, segundo sua documenta\u00e7\u00e3o, s\u00e3o pass\u00edveis de cacheamento - podendo\n\nser armazenados no navegador - para utiliza\u00e7\u00e3o posterior quando offline. Os applets\n\nt\u00eam a capacidade de intera\u00e7\u00e3o bidirecional com JavaScript e tamb\u00e9m permitem a\n\ninclus\u00e3o de depend\u00eancias empacotadas como arquivos JAR.\n\nSua utiliza\u00e7\u00e3o, no contexto da problem\u00e1tica abordada por este trabalho,\n\npermitiria a execu\u00e7\u00e3o da por\u00e7\u00e3o de c\u00f3digo Java levada ao cliente na pr\u00f3pria p\u00e1gina\n\nweb. Para que tal abordagem seja poss\u00edvel, dadas as caracter\u00edsticas e desafios do\n\n\n\n60\n\nproblema, seria necess\u00e1rio o desenvolvimento de alguns m\u00f3dulos de ger\u00eancia e\n\nintegra\u00e7\u00e3o das tecnologias envolvidas, assim como adapta\u00e7\u00f5es ao framework JSF.\n\nFigura 13: Utiliza\u00e7\u00e3o de Applet Java para execu\u00e7\u00e3o de c\u00f3digo Java do cliente offline.\n\nConforme representado pela figura 13, far-se-ia preciso o cacheamento de\n\numa s\u00e9rie de p\u00e1ginas provendo o acesso inicial \u2013 de acordo com a requisi\u00e7\u00e3o feita\n\npelo usu\u00e1rio - ao mecanismo de controle offline, um applet cuja fun\u00e7\u00e3o seria a\n\nexecu\u00e7\u00e3o do c\u00f3digo Java necess\u00e1rio para processamento das requisi\u00e7\u00f5es e\n\nrenderiza\u00e7\u00e3o das p\u00e1ginas requisitadas, implementando uma fachada de acesso ao\n\nJSF alternativa \u00e0 existente - que faz uso de servlets. Um mecanismo de integra\u00e7\u00e3o\n\nentre o JavaScript e o Applet Java realizaria a comunica\u00e7\u00e3o entre ambas as\n\n\n\n61\n\ntecnologias, repassando os dados equivalentes de cada requisi\u00e7\u00e3o ao applet e\n\naplicando a resposta ao estado atual da interface gr\u00e1fica.\n\nTamb\u00e9m seria imprescind\u00edvel, dando suporte a este processo, a\n\ncustomiza\u00e7\u00e3o da renderiza\u00e7\u00e3o de respostas, atrav\u00e9s da cria\u00e7\u00e3o de um RenderKit\n\nespecializado, para que requisi\u00e7\u00f5es n\u00e3o fossem destinadas ao servidor, mas sim ao\n\nmecanismo de tratamento correspondente.\n\nA utiliza\u00e7\u00e3o de Java Applets como alternativa para execu\u00e7\u00e3o da por\u00e7\u00e3o de\n\nc\u00f3digo Java dos processamentos necess\u00e1rios no cliente possui as seguintes\n\nconsidera\u00e7\u00f5es e implica\u00e7\u00f5es:\n\n? Cria\u00e7\u00e3o de um applet por aplica\u00e7\u00e3o, contendo configura\u00e7\u00f5es e da\n\nl\u00f3gica de neg\u00f3cio particulares da mesma, sendo que, um \u00fanico applet\n\npode ser utilizado em diferentes navegadores.\n\n? Necessidade de automatiza\u00e7\u00e3o da confec\u00e7\u00e3o de cada applet de\n\nsuporte a aplica\u00e7\u00e3o offline, tarefa n\u00e3o trivial que necessitaria ser\n\nrealizada a cada modifica\u00e7\u00e3o da aplica\u00e7\u00e3o.\n\n? Applets teriam relativamente grande tamanho, pois teriam que\n\narmazenar c\u00f3digo relativo ao JSF, l\u00f3gica de neg\u00f3cios da aplica\u00e7\u00e3o e\n\noutros m\u00f3dulos complementares. De acordo com uma estimativa\n\ngrossa teriam no m\u00ednimo seis Megabytes e necessitariam ser baixados\n\nno sistema do cliente a cada nova vers\u00e3o.\n\n? Possui como pr\u00e9-requisito e condi\u00e7\u00e3o b\u00e1sica a depend\u00eancia de uma\n\nJVM (Java Virtual Machine) compat\u00edvel na maquina cliente.\n\n5.3.5 JavaScript\n\nA utiliza\u00e7\u00e3o de JavaScript, a linguagem padr\u00e3o para execu\u00e7\u00e3o de c\u00f3digo no\n\ncliente, suportada por todos os navegadores modernos, implicaria na cria\u00e7\u00e3o de uma\n\nsolu\u00e7\u00e3o que reimplementasse os processamentos relativos ao JSF, que incluem o\n\nciclo de vida de processamento de requisi\u00e7\u00f5es Faces, e conseq\u00fcentemente,\n\nnecessitaria a implementa\u00e7\u00e3o de seus componentes, tratamentos, valida\u00e7\u00f5es e\n\nl\u00f3gica. Esta alternativa \u00e9 invi\u00e1vel devido \u00e0 alta complexidade envolvida em todos\n\nestes requisitos, mesmo que se fizesse poss\u00edvel a compila\u00e7\u00e3o de c\u00f3digo de l\u00f3gica\n\nde neg\u00f3cio de Java para JavaScript \u2013 problema abordado por diferentes projetos.\n\n\n\n62\n\n5.4 Integridade e sincroniza\u00e7\u00e3o de dados\n\nA cria\u00e7\u00e3o de aplica\u00e7\u00f5es web que possuam capacidade de funcionamento\n\ntamb\u00e9m quando offline, sem o acesso ao servidor, implica no desenvolvimento de\n\nclientes que possam ser executados de forma independente de rede.\n\nConseq\u00fcentemente, estes clientes offline necessitam formas alternativas para o\n\nacesso a dados requeridos para seu funcionamento \u2013 que normalmente seriam\n\ndisponibilizados pelos servi\u00e7os oferecidos pelo servidor \u2013 e para o armazenamento\n\nde dados que devem posteriormente ser atualizados no servidor, permitindo que\n\nsess\u00f5es de uso offline por usu\u00e1rios se fa\u00e7am v\u00e1lidas no contexto dos servi\u00e7os do\n\npr\u00f3prio servidor.\n\nFaz-se necess\u00e1rio, ent\u00e3o, um mecanismo que realize todos os m\u00e9todos de\n\nsincroniza\u00e7\u00e3o de dados entre cliente e servidor, sendo respons\u00e1vel pela\n\nmanuten\u00e7\u00e3o da integridade do estado da aplica\u00e7\u00e3o, disponibiliza\u00e7\u00e3o de dados de\n\nservidor a clientes e realizando a execu\u00e7\u00e3o de servi\u00e7os do servidor de acordo com\n\nas a\u00e7\u00f5es requisitadas por usu\u00e1rios.\n\nFigura 14: Motor de sincroniza\u00e7\u00e3o de dados.\n\n\n\n63\n\nProcessos de sincroniza\u00e7\u00e3o s\u00e3o diretamente dependentes do dom\u00ednio da\n\naplica\u00e7\u00e3o, seus servi\u00e7os e das decis\u00f5es arquiteturas do software no particionamento\n\nda aplica\u00e7\u00e3o. A simples divis\u00e3o de processamentos entre cliente e servidor exerce\n\ninflu\u00eancia na implementa\u00e7\u00e3o da sincroniza\u00e7\u00e3o de dados. Processamentos t\u00eam como\n\npr\u00e9-condi\u00e7\u00e3o a manipula\u00e7\u00e3o e transforma\u00e7\u00e3o de dados e, por conseguinte, a n\u00e3o\n\ndisponibiliza\u00e7\u00e3o integral da l\u00f3gica de uma aplica\u00e7\u00e3o em um cliente offline - e as\n\npr\u00f3prias escolhas de particionamento da mesma \u2013 determinam a necessidade de\n\ngerenciamento de um conjunto de dados intermedi\u00e1rios, ou seja, dados equivalentes\n\n\u00e0s entradas e retornos dos processamentos dispon\u00edveis somente no servidor.\n\nA concep\u00e7\u00e3o deste mecanismo de sincroniza\u00e7\u00e3o bilateral entre cliente e\n\nservidor \u00e9, portanto, uma tarefa dependente da natureza da aplica\u00e7\u00e3o na qual o\n\nmesmo dever\u00e1 atuar, n\u00e3o sendo poss\u00edvel que sua implementa\u00e7\u00e3o seja realizada de\n\nforma gen\u00e9rica, para diferentes aplica\u00e7\u00f5es.\n\nFigura 15: Impacto de processamentos relacionados \u00e0 l\u00f3gica de neg\u00f3cio sobre dados de uma\n\naplica\u00e7\u00e3o.\n\n\n\n64\n\nTarefas de sincroniza\u00e7\u00e3o devem tamb\u00e9m ser desenvolvidas prevendo\n\nconflitos decorrentes da limitada camada de l\u00f3gica dispon\u00edvel no cliente e, tamb\u00e9m\n\npor conta disto, das restri\u00e7\u00f5es impostas aos dados que podem ser processados.\n\nConsiderando que a ordem de uma s\u00e9rie de processamentos pode exercer\n\ninflu\u00eancia no resultado final de uma transa\u00e7\u00e3o, tem-se que a execu\u00e7\u00e3o de m\u00e9todos\n\nde implementa\u00e7\u00e3o alternativos de processamentos do servidor - respons\u00e1veis pela\n\ndetermina\u00e7\u00e3o das a\u00e7\u00f5es a serem executadas durante a aus\u00eancia do acesso aos\n\nprocessantes originais \u2013 deve ser refletida no servidor de forma seq\u00fcencial. Como\n\nresultado, temos que a simples exist\u00eancia de conflitos na execu\u00e7\u00e3o de qualquer uma\n\ndestas opera\u00e7\u00f5es de sincroniza\u00e7\u00e3o pode, ent\u00e3o, resultar na inconsist\u00eancia do estado\n\ndo cliente, ou seja, inviabilizar todo o trabalho realizado em um cliente durante uma\n\nsess\u00e3o offline, impossibilitando a realiza\u00e7\u00e3o de sincroniza\u00e7\u00e3o.\n\nDa mesma maneira, temos que a utiliza\u00e7\u00e3o do Server-mock para\n\nimplementa\u00e7\u00e3o alternativa de processamentos simplificados pode dificultar o\n\nprocesso de sincroniza\u00e7\u00e3o, pois a realiza\u00e7\u00e3o de processamentos parciais\n\naumentaria a chance de inconsist\u00eancia de estado da aplica\u00e7\u00e3o. Esta pratica \u00e9,\n\nent\u00e3o, n\u00e3o recomendada, e caso necess\u00e1ria, ocasiona na necessidade de cria\u00e7\u00e3o\n\nde processos capazes de \u201ctradu\u00e7\u00e3o\u201d dos resultados destes processamentos\n\nsimplificados nos resultados equivalentes aos processamentos reais.\n\n\n\n65\n\nFigura 16: A n\u00e3o equival\u00eancia de dados armazenados no cliente e no servidor, demonstrando a\n\nnecessidade de armazenamento no cliente de dados j\u00e1 processados no servidor e da execu\u00e7\u00e3o\n\nde processamentos no servidor relativos aos dados coletados no cliente.\n\n\u00c9, tamb\u00e9m, plaus\u00edvel estabelecer que possam existir modifica\u00e7\u00f5es de dados\n\nem mais de uma das partes envolvidas entre a realiza\u00e7\u00e3o de opera\u00e7\u00f5es de\n\nsincroniza\u00e7\u00e3o. Cada software deve determinar previamente, se poss\u00edvel, um\n\nconjunto de regras para o tratamento de erros causados por diferen\u00e7as de conjuntos\n\nde dados como, por exemplo, em casos em que processamentos requisitados em\n\nclientes offline utilizem dados n\u00e3o atuais ou n\u00e3o mais existentes.\n\nA disponibilidade limitada de l\u00f3gica no cliente agrava ainda mais este\n\nproblema. A pr\u00f3pria possibilidade de diferen\u00e7a entre os tipos de dados passiveis de\n\nmanipula\u00e7\u00e3o e armazenamento em um cliente e no servidor, como demonstrado na\n\nfigura 16, gera grande complexidade na ger\u00eancia de processos de sincroniza\u00e7\u00e3o, em\n\nalguns casos, de acordo com a natureza e complexidade da aplica\u00e7\u00e3o, pode tornar\n\nimposs\u00edvel a detec\u00e7\u00e3o e tratamento de conflitos.\n\n\n\n6 \u2013 CONCLUS\u00d5ES\nAtrav\u00e9s do estudo das possibilidades de compatibiliza\u00e7\u00e3o de aplica\u00e7\u00f5es web\n\ndesenvolvidas utilizando-se o framework JavaServer Faces 2.0 com as facilita\u00e7\u00f5es\n\nde disponibiliza\u00e7\u00e3o de aplica\u00e7\u00f5es offline oferecidas pelo HTML5, junto \u00e0\n\nimplementa\u00e7\u00e3o de diversas provas de conceito, foi poss\u00edvel concluir que a efetiva\u00e7\u00e3o\n\ndos fins contemplados pelo estudo realizado por este trabalho \u00e9 poss\u00edvel, por\u00e9m,\n\nsomente apresentando resultados extremamente limitados e demandando enorme\n\nesfor\u00e7o, n\u00e3o gerando, portanto, grande valor, ou seja, que a integra\u00e7\u00e3o das\n\ntecnologias \u00e9 tecnicamente fact\u00edvel por\u00e9m invi\u00e1vel em sua pr\u00e1tica.\n\nDurante a realiza\u00e7\u00e3o deste trabalho, p\u00f4de-se determinar o conjunto de desafios\n\ne de solu\u00e7\u00f5es relativos \u00e0 integra\u00e7\u00e3o das tecnologias propostas. Neste processo,\n\natrav\u00e9s da cria\u00e7\u00e3o de experimentos pr\u00e1ticos, cada solu\u00e7\u00e3o p\u00f4de ser validada e\n\nestudada, assim n\u00e3o s\u00f3 realizando-se a prova das conjecturas te\u00f3ricas feitas ao\n\nlongo deste trabalho, mas tamb\u00e9m permitindo que cada abordagem pudesse ter\n\nsuas caracter\u00edsticas e conseq\u00fc\u00eancias elencadas e avaliadas, determinando-se as\n\nvantagens e desvantagens de cada elemento da solu\u00e7\u00e3o.\n\nA integra\u00e7\u00e3o das tecnologias propostas implica em um conjunto de limita\u00e7\u00f5es\n\nrelacionado \u00e0 necessidade de adapta\u00e7\u00e3o do pr\u00f3prio framework JSF 2, da\n\nespecifica\u00e7\u00e3o e cria\u00e7\u00e3o de uma s\u00e9rie de complexos mecanismos de suporte \u00e0s\n\nfuncionalidades fornecidas pelo HTML5 de acordo com os desafios existentes no\n\nproblema de compatibiliza\u00e7\u00e3o, da impossibilidade de realiza\u00e7\u00e3o de escolhas de\n\nparticionamento da l\u00f3gica de neg\u00f3cio da aplica\u00e7\u00e3o e, principalmente, da quebra dos\n\npadr\u00f5es estabelecidos pelo JEE e da enorme complexidade para sincroniza\u00e7\u00e3o que\n\nseriam resultantes da implementa\u00e7\u00e3o de qualquer l\u00f3gica n\u00e3o trivial no cliente da\n\naplica\u00e7\u00e3o.\n\nAssim, a cria\u00e7\u00e3o de uma aplica\u00e7\u00e3o JSF offline poderia prover poucas\n\nfuncionalidades e uma pobre experi\u00eancia ao usu\u00e1rio em rela\u00e7\u00e3o ao alto custo para\n\nseu desenvolvimento, o que faz com que a sua pr\u00f3pria concep\u00e7\u00e3o deva ser\n\nquestionada: a da cria\u00e7\u00e3o de aplica\u00e7\u00f5es web offline pode n\u00e3o fazer sentido quando\n\nos pr\u00f3prios servi\u00e7os que justificariam a sua cria\u00e7\u00e3o seriam limitados a pobres\n\nimplementa\u00e7\u00f5es.\n\n\n\n67\n\nDentre os fatores que desfavorecem a utiliza\u00e7\u00e3o do JSF como tecnologia Web\n\ncliente, executando em conjunto com navegadores ao inv\u00e9s de com containers web\n\nno servidor, pode-se ressaltar:\n\n? Incoer\u00eancia com a cultura de alta disponibilidade de servi\u00e7os;\n\n? Necessidade de implementa\u00e7\u00e3o de complexos mecanismos espec\u00edficos\n\nao modelo de dados e servi\u00e7os oferecidos por cada aplica\u00e7\u00e3o;\n\n? Depend\u00eancias na m\u00e1quina do cliente;\n\n? N\u00e3o atendimento nativo a RIA (Rich Internet Applications);\n\n6.1 Incoer\u00eancia com cultura de alta disponibilidade de servi\u00e7os\n\nA cultura de utiliza\u00e7\u00e3o do JSF promove alto acoplamento entre as camadas de\n\nvisualiza\u00e7\u00e3o e de servi\u00e7os. Este acoplamento torna praticamente intang\u00edvel a\n\nexecu\u00e7\u00e3o de uma aplica\u00e7\u00e3o JSF concebida para ser executada no servidor como\n\ncliente offline e, mesmo que poss\u00edvel diante do emprego de restri\u00e7\u00f5es, a\n\nindisponibilidade de servi\u00e7os ocasionaria em estorvos para a experi\u00eancia do usu\u00e1rio,\n\ninclusive em aplica\u00e7\u00f5es simples.\n\n6.1.1 Inflexibilidade no particionamento de l\u00f3gica\n\nDe acordo com as caracter\u00edsticas impostas pelo JSF, o particionamento de\n\nc\u00f3digo entre cliente e servidor - conforme estabelecido previamente pelo item 5.2.3\n\n(p\u00e1gina 53) \u2013 define a inviabilidade de execu\u00e7\u00e3o de maior parte da l\u00f3gica de neg\u00f3cio\n\nde uma aplica\u00e7\u00e3o em clientes web, implicando na impossibilidade de execu\u00e7\u00e3o de\n\nquaisquer servi\u00e7os e processamentos n\u00e3o implementados ou na camada de\n\nvisualiza\u00e7\u00e3o.\n\nEstas limita\u00e7\u00f5es dos clientes offline n\u00e3o somente estabelecem restri\u00e7\u00f5es ao\n\nn\u00famero de processamentos dispon\u00edveis, mas tamb\u00e9m sua poss\u00edvel complexidade,\n\ntornando impratic\u00e1vel o desenvolvimento de aplica\u00e7\u00f5es JSF sofisticadas para\n\nambientes offline.\n\n\n\n68\n\n6.1.2 Desafios inerentes \u00e0s tarefas de sincroniza\u00e7\u00e3o\n\nO alto acoplamento de camadas promovido pelo JSF tamb\u00e9m tem como\n\nconseq\u00fc\u00eancia in\u00fameros problemas de alta complexidade relacionados \u00e0\n\nsincroniza\u00e7\u00e3o de dados e processamentos.\n\nA arquitetura de software, encorajada pela separa\u00e7\u00e3o de camadas ditada pelas\n\nconven\u00e7\u00f5es do JavaEE e do JSF, estabelece grande depend\u00eancia da visualiza\u00e7\u00e3o\n\naos servi\u00e7os da camada de l\u00f3gica da aplica\u00e7\u00e3o para o acesso a dados e realiza\u00e7\u00e3o\n\nde processamentos. Em um ambiente offline, para que exista a possibilidade de\n\natualiza\u00e7\u00e3o posterior do estado do servidor, se faz necess\u00e1rio o armazenamento e\n\nsincroniza\u00e7\u00e3o de toda e qualquer opera\u00e7\u00e3o realizada na visualiza\u00e7\u00e3o durante uma\n\nsess\u00e3o. Para garantir a consist\u00eancia do estado de uma aplica\u00e7\u00e3o durante a\n\nconsuma\u00e7\u00e3o destes processos, determinam-se tamb\u00e9m depend\u00eancias relacionadas\n\n\u00e0 ordem de execu\u00e7\u00e3o de processamentos e da congru\u00eancia dos dados resultantes\n\nentre servi\u00e7os no cliente e no servidor.\n\nComo conseq\u00fc\u00eancia, temos que uma grande complexidade surge devido \u00e0s\n\npossibilidades de diverg\u00eancia entre a realiza\u00e7\u00e3o de opera\u00e7\u00f5es em um ambiente\n\noffline e no servidor, que podem ser ocasionados por uma ampla diversidade de\n\nsitua\u00e7\u00f5es comuns. Como exemplo, pode-se citar como causa de conflitos a comum\n\npossibilidade de que dados mantidos em um cache n\u00e3o estejam atualizados e a n\u00e3o\n\ndisponibiliza\u00e7\u00e3o, simula\u00e7\u00e3o ou at\u00e9 previs\u00e3o de resultados de servi\u00e7os e\n\nprocessamentos no cliente. Esta problem\u00e1tica \u00e9 t\u00e3o critica que, de acordo com os\n\nrequisitos estabelecidos, a simples ocorr\u00eancia de conflito, erro ou discrep\u00e2ncia de\n\nresultados de processamentos durante a execu\u00e7\u00e3o de tarefas de sincroniza\u00e7\u00e3o,\n\ncausaria a perda da sess\u00e3o offline ou, se n\u00e3o tratado, na inconsist\u00eancia do modelo\n\nde dados da aplica\u00e7\u00e3o.\n\n6.2 Necessidade de complexos mecanismos espec\u00edficos a cada\naplica\u00e7\u00e3o\n\nA integra\u00e7\u00e3o de aplica\u00e7\u00f5es web JSF com ambientes web offline tamb\u00e9m tem\n\ncomo requisito a implementa\u00e7\u00e3o de uma s\u00e9rie de mecanismos com a finalidade de\n\nsuporte aos diferentes aspectos de compatibiliza\u00e7\u00e3o. Al\u00e9m das necessidades\n\nimpl\u00edcitas da ado\u00e7\u00e3o de qualquer uma das abordagens estudadas para execu\u00e7\u00e3o de\n\n\n\n69\n\nc\u00f3digo Java no cliente, faz-se necess\u00e1rio tamb\u00e9m implementar complexos\n\nmecanismos diretamente dependentes da natureza de cada aplica\u00e7\u00e3o.\n\nO motor de sincroniza\u00e7\u00e3o, por exemplo, possui rela\u00e7\u00e3o intr\u00ednseca com a l\u00f3gica\n\nde neg\u00f3cios, o modelo de dados e com as decis\u00f5es arquiteturais de uma aplica\u00e7\u00e3o\n\ne, seu desenvolvimento, pode abranger grandes complexidades podendo at\u00e9 ser\n\nimposs\u00edvel, vide o item 5.4 na p\u00e1gina 62. Tamb\u00e9m dependente da natureza de cada\n\naplica\u00e7\u00e3o, temos que a implementa\u00e7\u00e3o do Server-mock, como referido no cap\u00edtulo 5,\n\ndeve ser desenvolvida de acordo com os servi\u00e7os oferecidos por um servidor,\n\nresponsabilizando-se, em suma, pela ger\u00eancia dos mecanismos de armazenamento\n\nde dados offline e pela execu\u00e7\u00e3o de simples processamentos para conten\u00e7\u00e3o da\n\nfalta de acesso a servi\u00e7os reais.\n\nAl\u00e9m disto, a viabiliza\u00e7\u00e3o de execu\u00e7\u00e3o do c\u00f3digo origin\u00e1rio do servidor em um\n\ncliente somente pode ser realizado, no contexto deste trabalho, atrav\u00e9s da cria\u00e7\u00e3o\n\nde plug-ins para navegadores ou de applets Java. A primeira alternativa requer a\n\ncria\u00e7\u00e3o de diferentes plug-ins espec\u00edficos para cada navegador web, cada um sendo\n\nrespons\u00e1vel por interceptar chamadas ao servidor indispon\u00edvel, reproduzir as\n\ncaracter\u00edsticas de um servidor de aplica\u00e7\u00f5es, provendo o suporte inclusive \u00e0\n\nutiliza\u00e7\u00e3o de servlets e a todos os requisitos necess\u00e1rios para a execu\u00e7\u00e3o do JSF. A\n\nutiliza\u00e7\u00e3o de Applets Java, por sua vez, requer adapta\u00e7\u00f5es ao framework\n\nJavaServer Faces e a implementa\u00e7\u00e3o de mecanismos que provenham comunica\u00e7\u00e3o\n\nentre c\u00f3digo JavaScript e Java da aplica\u00e7\u00e3o.\n\n6.3 Depend\u00eancias na m\u00e1quina do cliente\n\nTodas as duas abordagens vi\u00e1veis elencadas para a mitiga\u00e7\u00e3o da necessidade\n\nde execu\u00e7\u00e3o de c\u00f3digo Java no cliente possuem caracter\u00edsticas que impactam\n\nnegativamente sua aplicabilidade, em termos de requisitos \u00e0s m\u00e1quinas nas quais\n\nclientes offline seriam executados. Independentemente da alternativa selecionada\n\ncomo solu\u00e7\u00e3o para desenvolvimento de uma poss\u00edvel aplica\u00e7\u00e3o web offline, ou seja,\n\ndestacando a intersec\u00e7\u00e3o de requisitos dentre todas as abordagens, temos como\n\nnecessidade:\n\n? A disponibilidade de uma m\u00e1quina virtual Java (JVM) compat\u00edvel\n\ninstalada na m\u00e1quina do cliente.\n\n\n\n70\n\n? Download de um pacote de recursos - seja na forma de plug-in para\n\nnavegador ou de Applet Java - a cada mudan\u00e7a na aplica\u00e7\u00e3o,\n\nconsiderando-se o um grande tamanho devido \u00e0 necessidade de\n\nempacotamento de uma implementa\u00e7\u00e3o do JSF junto a todas as duas\n\ndepend\u00eancias, os mecanismos cuja cria\u00e7\u00e3o \u00e9 imperativa para execu\u00e7\u00e3o\n\ndo cliente offline e todos os recursos que devem ser cacheados.\n\n? Cria\u00e7\u00e3o de mecanismos de suporte.\n\nTodos estes requisitos imp\u00f5em barreiras no processo de ado\u00e7\u00e3o por usu\u00e1rios,\n\ntornando a utiliza\u00e7\u00e3o da aplica\u00e7\u00e3o web n\u00e3o natural, desfavorecendo-a. Dada a\n\npossibilidade de cria\u00e7\u00e3o de aplica\u00e7\u00f5es web offline atrav\u00e9s de outras tecnologias, que\n\nsob o ponto de vista do usu\u00e1rio necessitariam configura\u00e7\u00e3o zero para seu\n\nfuncionamento, o uso destas abordagens poderia ser considerado proibitivo, quando\n\no p\u00fablico alvo n\u00e3o for versado em tecnologia, de acordo com pontos de vista\n\nmercadol\u00f3gicos.\n\n6.4 N\u00e3o atendimento nativo a RIA\n\nA iniciativa de cria\u00e7\u00e3o de aplica\u00e7\u00f5es web, junto \u00e0 de disponibiliza\u00e7\u00e3o das\n\nmesmas em ambientes sem acesso \u00e0 internet, se deve \u00e0 possibilidade de cria\u00e7\u00e3o de\n\naplica\u00e7\u00f5es de internet ricas (RIAs), que permitem a execu\u00e7\u00e3o de funcionalidades\n\nequivalentes \u00e0s fornecidas por softwares tradicionais do tipo Desktop e/ou prov\u00eaem\n\numa experi\u00eancia rica ao usu\u00e1rio, seguindo a filosofia Web 2.0.\n\nA tecnologia JSF, por sua vez, foi criada para atender aplica\u00e7\u00f5es Web 1.0, nas\n\nquais toda a renderiza\u00e7\u00e3o das interfaces gr\u00e1ficas \u00e9 realizada no servidor, dada uma\n\nrequisi\u00e7\u00e3o HTTP. Atrav\u00e9s de grandes esfor\u00e7os, se fez poss\u00edvel a compatibiliza\u00e7\u00e3o\n\ndo JSF \u2013 pelo desenvolvimento de frameworks suplementares e, posteriormente,\n\npela cria\u00e7\u00e3o da especifica\u00e7\u00e3o 2.0 \u2013 para a viabiliza\u00e7\u00e3o de aplica\u00e7\u00f5es que pudessem\n\nprover experi\u00eancia de p\u00e1ginas din\u00e2micas ao usu\u00e1rio. Contudo, a filosofia de gera\u00e7\u00e3o\n\nclientes finos, gerenciados e renderizados pelo servidor, imp\u00f5e amplas limita\u00e7\u00f5es\n\npara com o dinamismo de interfaces gr\u00e1ficas.\n\nAssim, pode-se estabelecer que a compatibiliza\u00e7\u00e3o de aplica\u00e7\u00f5es JSF em\n\nambientes offline n\u00e3o pode, por si s\u00f3, atender a seus objetivos, n\u00e3o influenciando no\n\nfornecimento de experi\u00eancias ricas ao usu\u00e1rio. Considerando-se, ent\u00e3o, que a\n\n\n\n71\n\npr\u00f3pria compatibiliza\u00e7\u00e3o de aplica\u00e7\u00f5es JSF tamb\u00e9m se faz poss\u00edvel somente atrav\u00e9s\n\nde amplas e severas limita\u00e7\u00f5es em suas funcionalidades, pode-se finalmente\n\nconcluir que absolutamente n\u00e3o existem vantagens na realiza\u00e7\u00e3o da migra\u00e7\u00e3o desta\n\ntecnologia e que quaisquer esfor\u00e7os nesta dire\u00e7\u00e3o seriam improdutivos.\n\n6.5 Considera\u00e7\u00f5es finais\n\nA busca pelo estabelecimento de um patamar maduro para desenvolvimento\n\nde aplica\u00e7\u00f5es sobre a plataforma web permanece como um desafio constante para\n\ndesenvolvedores e cientistas da computa\u00e7\u00e3o em geral.\n\nEste trabalho procurou contribuir com esta busca incans\u00e1vel atrav\u00e9s da\n\ncompatibiliza\u00e7\u00e3o de uma tecnologia importante e bem estabelecida \u2013 o JSF \u2013 com o\n\nconceito de cria\u00e7\u00e3o de aplica\u00e7\u00f5es web offline. Todo o estudo foi realizado baseando-\n\nse nas caracter\u00edsticas impostas pelas tecnologias envolvidas, assim como pela\n\npr\u00f3pria plataforma web e das conseq\u00fc\u00eancias das poss\u00edveis alternativas de solu\u00e7\u00f5es\n\nrelacionadas ao escopo deste trabalho. Com base nas informa\u00e7\u00f5es coletadas, p\u00f4de-\n\nse estabelecer a inviabilidade pr\u00e1tica da cria\u00e7\u00e3o de aplica\u00e7\u00f5es JSF web offline, de\n\nacordo com os desafios elencados e de an\u00e1lises conceituais dos conceitos\n\ncorrelacionados.\n\nDe maneira geral, concluo que o JSF \u00e9 uma excelente tecnologia para Web\n\n1.0, fim para o qual foi projetada. As grandes vantagens da utiliza\u00e7\u00e3o desta\n\ntecnologia, por\u00e9m, desaparecem quando se est\u00e1 em ambiente cliente, pois mesmo\n\nque tecnicamente poss\u00edvel qualquer esfor\u00e7o na migra\u00e7\u00e3o desta tecnologia seria em\n\nv\u00e3o, visto que existem tecnologias muito mais maduras para entregar aplica\u00e7\u00f5es\n\nWeb 2.0.\n\nA demanda de desenvolvimento de aplica\u00e7\u00f5es para a internet cresce\n\ncontinuamente, assim como o nicho destas aplica\u00e7\u00f5es. Acredito, ent\u00e3o, que existe\n\nespa\u00e7o o suficiente para que mais de um framework de cria\u00e7\u00e3o de aplica\u00e7\u00f5es web\n\nseja utilizado pela especifica\u00e7\u00e3o JavaEE, ou que, pelo menos, n\u00e3o se cultive a\n\ncren\u00e7a de que a mesma determina as melhores tecnologias a serem utilizadas em\n\ntodo tipo de projeto.\n\n\n\n72\n\n6.6 Trabalhos Futuros\n\nUma proposta de continuidade para esta pesquisa \u00e9 o estudo em torno da\n\nproblem\u00e1tica de compatibiliza\u00e7\u00e3o dos mecanismos oferecidos pelo HTML5 para\n\ncria\u00e7\u00e3o de aplica\u00e7\u00f5es offline com outros frameworks de desenvolvimento de\n\naplica\u00e7\u00f5es para a web e, se poss\u00edvel, a cria\u00e7\u00e3o dos respectivos prot\u00f3tipos. O GWT\n\n(Google Web Toolkit), por exemplo, aparenta ser arquiteturalmente compat\u00edvel com\n\no modelo necess\u00e1rio para a cria\u00e7\u00e3o de aplica\u00e7\u00f5es cliente com grande independ\u00eancia\n\ndo servidor.\n\n\n\n7 \u2013 REFER\u00caNCIAS\n\nAPPLET Caching. Developer Resources for Java Technology. Disponivel\nem:<http://java.sun.com/javase/6/docs/technotes/guides/plugin/developer_guide/appl\n\net_caching.html>. Acesso em: 20 Mar\u00e7o 2010.\n\nBERNERS-LEE, T. Information Management: A Proposal. W3C, 1989.\nDisponivel em:&lt;http://www.w3.org/History/1989/proposal.html>. Acesso em: 2\n\nJaneiro 2010.\n\nBERNERS-LEE, T. WorldWideWeb: Proposal for a HyperText Project. W3C,\n1989. Disponivel em:&lt;http://www.w3.org/Proposal>. Acesso em: 05 jan. 2010.\n\nBURNS, E.; KITAIN, R. JavaServer Faces Specification. Sun Microsystems\nInc. Santa Clara. 2009.\n\nCLIENT-SIDE Scripting and HTML. W3C, 1997. Disponivel em:\n<http://www.w3.org/TR/WD-script-970314>. Acesso em: 05 jan. 2010.\n\nGINIGE, A.; MURUGESAN, S. Web Engineering: A Methodology for\n\nDeveloping Scalable, Maintainable Web Applications. Cutter IT Journal, Julho 2001.\n24-35.\n\nHICKSON, I. HTML5. W3C, 2010. Disponivel em:\n<http://dev.w3.org/html5/spec/>. Acesso em: 20 Fevereiro 2010.\n\nHOLDENER, A. Ajax: The Definitive Guide. 1 Edi\u00e7\u00e3o. ed. Sebastopol: O'Reilly,\n2008.\n\nhttp://java.sun.com/javase/6/docs/technotes/guides/plugin/developer_guide/appl\nhttp://www.w3.org/History/1989/proposal.html\nhttp://www.w3.org/Proposal\nhttp://www.w3.org/TR/WD-script-970314\nhttp://dev.w3.org/html5/spec/\n\n\n74\n\nKUUSKERU, J.; MIKKONEN, T. Partitioning Web Applications Between the\nServer and the Client. 2009 ACM symposium on Applied Computing. Honolulu,\nHawaii: ACM. 2009. p. 647-649.\n\nMIKKONEN, T.; TAIVALSAARI, A. Web applications: spaghetti code for the\n21st century. Sun Microsystems, Inc. Mountain View, p. 1-19. 2007.\n\nMURUGESAN, S.; DESHPANDE, Y. Web Engineering: Managing Diversity\nand Complexity of Web Application Development. Heidelberg: Springer-Verlag, v.\n\nLNCS 2016, 2001.\n\nNETO, J. C. C. The Economic and Social Importance od Digital Information\nNetworks as a Mean for Development and Commerce. Rio de Janeiro. 2001.\n\nTAIVALSAARI, A. et al. Web browser as an application platform: The Lively\nKernel Experience. Sun Microsystems, Inc. Technical Reports; Vol. SERIES13103.\nMenlo Park, p. 1-19. 2008. (SMLI TR-2008-175).\n\n\n\n75\n\nAP\u00caNDICE A - ARTIGO\n\n\n\nINTEGRA\u00c7\u00c3O ENTRE HTML5 E JSF 2.0 EM\nAPLICA\u00c7\u00d5ES WEB OFFLINE\n\nROBERTO JORGE HADDOCK LOBO FILHO1\n\n1UFSC \u2013 Universidade Federal de Santa Catarina\nINE \u2013 Departamento de Inform\u00e1tica e Estat\u00edstica\n\nFlorian\u00f3polis (SC), Brasil\nrhlobo+ufsc@gmail.com\n\nResumo: A constante concep\u00e7\u00e3o de novas tecnologias e conceitos de desenvolvimento de software e de\nsua compatibilidade com as tecnologias j\u00e1 existentes \u00e9 um dos grandes desafios na \u00e1rea de ci\u00eancias da\ncomputa\u00e7\u00e3o. Neste contexto, a utiliza\u00e7\u00e3o da WEB \u2013 que originalmente foi concebida com a inten\u00e7\u00e3o e\ncapacidade de exibi\u00e7\u00e3o de documentos hipertextos \u2013 como interface gr\u00e1fica ao usu\u00e1rio de sistemas\nonline t\u00eam gerado grandes dificuldades e limita\u00e7\u00f5es. Objetiva-se com este trabalho desenvolver uma\npesquisa sobre as possibilidades de compatibiliza\u00e7\u00e3o entre duas tecnologias modernas relacionadas ao\ndesenvolvimento destes sistemas, tendo como estudo a cria\u00e7\u00e3o de aplica\u00e7\u00f5es web utilizando\nimplementa\u00e7\u00f5es  provenientes da especifica\u00e7\u00e3o JSF 2.0 \u2013 tecnologia padr\u00e3o do JavaEE \u2013 que possam ser\ndisponibilizadas em modo offline \u2013 sem que o usu\u00e1rio necessite estar conectado \u00e0 internet - de acordo\ncom as novas funcionalidades oferecidas pelo HTML 5, assumindo toda complexidade de\ncomportamentos e intera\u00e7\u00f5es que estas interfaces gr\u00e1ficas abrangem.\nPalavras Chaves: Desenvolvimento WEB. JSF. Aplica\u00e7\u00f5es offline.\n\n1 Introdu\u00e7\u00e3o\nA WEB (tamb\u00e9m conhecida como World Wide Web ou\nWWW) \u00e9 um sistema de documentos em hiperm\u00eddia que\ns\u00e3o interligados e executados na Internet. Segundo\nBERNERS-LEE (1989), o intento original do\ndesenvolvimento da web foi tornar mais f\u00e1cil o\ncompartilhamento de documentos de pesquisas.\nContudo, sua ampla ado\u00e7\u00e3o, junto ao crescimento da\ninternet, gerou-se a demanda de sua utiliza\u00e7\u00e3o como\nplataforma para aplica\u00e7\u00f5es.\n\nOs primeiros sistemas web de gera\u00e7\u00e3o de conte\u00fado\ndin\u00e2mico geralmente objetivavam a simplifica\u00e7\u00e3o da\nmanutenibilidade e expansibilidade de grandes sistemas\nde informa\u00e7\u00e3o. A evolu\u00e7\u00e3o destes conceitos \u2013 e das\ntecnologias envolvidas \u2013 permite que aplica\u00e7\u00f5es web\ntenham cada vez mais capacidade de realizar as mesmas\nfuncionalidades que aplica\u00e7\u00f5es desktop nativas.\n\nNeste contexto, diversos frameworks foram criados\npara facilitar e possibilitar o desenvolvimento de\naplica\u00e7\u00f5es web, cada um utilizando um conjunto de\nabordagens para simplificar as complexidades\nprovenientes da adapta\u00e7\u00e3o da web para as novas\ndemandas e novos requisitos funcionais. O conseq\u00fcente\n\namadurecimento do desenvolvimento de aplica\u00e7\u00f5es web\npossibilita a migra\u00e7\u00e3o de servi\u00e7os para a web, tornando,\nsob estas perspectivas, o conceito de instala\u00e7\u00e3o de\nsoftware em uma m\u00e1quina desktop obsoleto neste\ncontexto.\n\nA busca da continuidade da expans\u00e3o das\ncapacidades de aplica\u00e7\u00f5es web tem, por\u00e9m, uma grande\nlimita\u00e7\u00e3o em compara\u00e7\u00e3o a aplica\u00e7\u00f5es web. A utiliza\u00e7\u00e3o\npura da web como plataforma para aplica\u00e7\u00f5es requer, de\nacordo com as pr\u00f3prias caracter\u00edsticas da web, que o\nacesso \u00e0 internet esteja dispon\u00edvel para que o usu\u00e1rio\npossa acessar uma aplica\u00e7\u00e3o. Usu\u00e1rios de aplica\u00e7\u00f5es\nweb t\u00edpicas s\u00e3o capazes de utilizar estas aplica\u00e7\u00f5es\nsomente quando conectados \u00e0 internet.\n\nH\u00e1 ent\u00e3o a necessidade da pesquisa, an\u00e1lise e\ncompara\u00e7\u00e3o da possibilidade de compatibiliza\u00e7\u00e3o entre\ntecnologias de desenvolvimento web e os conceitos\nexistentes que visam \u00e0 disponibiliza\u00e7\u00e3o de aplica\u00e7\u00f5es\nweb offline, segundo os princ\u00edpios b\u00e1sicos do\nfuncionamento da web e dos poss\u00edveis impactos e\nrequisitos ao usu\u00e1rio final.\n\nEste trabalho tem como principal objetivo a pesquisa\nsobre a aplicabilidade e viabilidade da compatibiliza\u00e7\u00e3o\nentre o framework JavaServer Faces 2.0 0 \u2013 a \u00faltima\n\nmailto:rhlobo+ufsc@gmail.com\n\n\nvers\u00e3o do mais maduro framework de desenvolvimento\nde aplica\u00e7\u00f5es web contido na especifica\u00e7\u00e3o Java EE 6 \u2013\ndevido \u00e0 sua import\u00e2ncia no desenvolvimento de\naplica\u00e7\u00f5es web atrav\u00e9s da linguagem Java, e as\nfuncionalidades propostas pelo HTML5 de\narmazenamento local de dados de execu\u00e7\u00e3o e de usu\u00e1rio,\nque possibilitam a capacidade de execu\u00e7\u00e3o \u2013 pelo menos\nparcial \u2013 enquanto offline de aplica\u00e7\u00f5es web, sem a\nnecessidade de uma conex\u00e3o com a internet.\n\n2 Desenvolvimento de Aplica\u00e7\u00f5es Web\nDesenvolvimento web \u00e9 um termo amplo que faz\nreferencia a qualquer atividade de desenvolvimento que\nenvolve a web, e pode abranger desde a cria\u00e7\u00e3o de\np\u00e1ginas est\u00e1ticas simples de texto plano at\u00e9 o\ndesenvolvimento de complexas aplica\u00e7\u00f5es e servi\u00e7os\nbaseados na web, ou seja, softwares que s\u00e3o\napresentados em um ambiente controlado por um\nnavegador web, ou codificados em linguagens e\ntecnologias suportadas por estes navegadores. A\nplataforma web ainda \u00e9, portanto, um conceito muito\nabstrato, principalmente devido \u00e0 falta de uma base bem\ndefinida para desenvolvimento de software para a web.\nMesmo assim existe uma alta demanda para viabiliza\u00e7\u00e3o\ne matura\u00e7\u00e3o de tecnologias para suporte a este processo.\n\n2.1 Modelo cliente-servidor\nO modelo cliente-servidor utilizado pela web descreve a\nrela\u00e7\u00e3o entre dois programas de computador em que um\nprograma - o cliente - faz uma solicita\u00e7\u00e3o de servi\u00e7o de\noutro programa - o servidor - que responde o pedido. O\ncliente interage com um ou mais servidores atrav\u00e9s do\nprotocolo HTTP (HyperText Transfer Protocol)\nrealizando requisi\u00e7\u00f5es de recursos e dados. Servidores\nweb, que normalmente \u2013 mas n\u00e3o necessariamente -\noperam sobre uma rede em hardware separado do\ncliente, ao receberem uma requisi\u00e7\u00e3o de recurso, ou\ndevolvem um recurso est\u00e1tico ou geram a resposta\ndinamicamente. Sob a perspectiva do cliente, n\u00e3o existe\ndiferencia\u00e7\u00e3o entre ambos os casos, e a resposta ser\u00e1\ntratada da mesma maneira, ou seja, ser\u00e1 renderizada\ndiretamente no cliente ou processada por algum script\nexecutado no navegador.\n\n2.2 Particionamento de aplica\u00e7\u00f5es entre\ncliente  e servidor\n\nO desenvolvimento de aplica\u00e7\u00f5es web est\u00e1 no meio de\numa mudan\u00e7a de paradigma. Usu\u00e1rios est\u00e3o se\nacostumando com aplica\u00e7\u00f5es web com conte\u00fado\ndin\u00e2mico e experi\u00eancia mais interativa do usu\u00e1rio.\nInterfaces gr\u00e1ficas n\u00e3o mais est\u00e3o presas \u00e0 necessidade\nde atualizar telas inteiras de uma vez, e servidores s\u00e3o\n\ncapazes de alimentar os dados a elas espontaneamente.\nNo entanto, conven\u00e7\u00f5es bem estabelecidas para o\nparticionamento da l\u00f3gica da aplica\u00e7\u00e3o entre o cliente e\no servidor ainda n\u00e3o existem, al\u00e9m da abordagem em\nque tudo \u00e9 executado no servidor e em que o cliente\nsimplesmente exibe os dados.\n\nO particionamento da l\u00f3gica de neg\u00f3cio entre cliente\ne servidor, ou seja, a defini\u00e7\u00e3o da por\u00e7\u00e3o de c\u00f3digo que\nficar\u00e1 em cada uma das distintas camadas de uma\naplica\u00e7\u00e3o, influencia diretamente a depend\u00eancia entre o\ngrau de interatividade de uma interface gr\u00e1fica web e o\nmodo em que a comunica\u00e7\u00e3o das duas partes deve ser\nfeita. As decis\u00f5es de particionamento de c\u00f3digo,\nportanto, definem a depend\u00eancia do cliente para com o\nservidor, o que significa que conseq\u00fcentemente definem\ntamb\u00e9m as possibilidades de que uma aplica\u00e7\u00e3o possa\nser executada em modo offline - sem conex\u00e3o com o\nservidor.\n\nNeste cen\u00e1rio, o ideal seria que o cliente\nindepend\u00eancia poss\u00edvel do cliente, possuindo o m\u00e1ximo\ncontrole poss\u00edvel sobre a execu\u00e7\u00e3o da l\u00f3gica de uma\naplica\u00e7\u00e3o. Tal abordagem n\u00e3o s\u00f3 torna o\ndesenvolvimento muito mais simples, mas tamb\u00e9m\naumenta a capacidade de resposta e robustez da interface\ndo usu\u00e1rio, pois resultaria em um n\u00famero reduzido de\nrequisi\u00e7\u00f5es necess\u00e1rias ao servidor - e o conseq\u00fcente\ntempo de lat\u00eancia relacionado a cada uma delas -\ngarantindo assim maior independ\u00eancia e flu\u00eancia da\ninterface de usu\u00e1rio.\n\nA utiliza\u00e7\u00e3o de uma \u00fanica linguagem comum para\ntoda a aplica\u00e7\u00e3o, com a aplica\u00e7\u00e3o transparente de um\ngateway para comunica\u00e7\u00e3o entre o servidor e o cliente,\npoderia facilitar o processo de desenvolvimento,\naproximando-o ao desenvolvimento de aplica\u00e7\u00f5es\ntradicionais. Al\u00e9m disto, esta estrat\u00e9gia tamb\u00e9m\npermitiria f\u00e1cil balanceamento de c\u00f3digo entre o cliente\ne servidor - sem a necessidade de grande retrabalho -\nampliando a flexibilidade da aplica\u00e7\u00e3o e a sua\nmanutenibilidade.\n\n2.3 Responsabilidades inerentes ao servidor\nPara muitas aplica\u00e7\u00f5es, seus requisitos \u00e0s prendem a\nalgumas responsabilidades inerentes do servidor:\n\n? Persist\u00eancia - Refere-se aos dados que n\u00e3o s\u00e3o\napagados no encerramento da execu\u00e7\u00e3o do\nprograma que o criou. Embora em navegadores\nmodernos seguindo a especifica\u00e7\u00e3o HTML5 seja\nposs\u00edvel o salvamento de dados localmente,\nmuitas vezes existe tamb\u00e9m a necessidade de que\nestes dados estejam dispon\u00edveis tamb\u00e9m para\noutros computadores na rede.\n\n\n\n? Comunica\u00e7\u00e3o cliente-cliente - Ocorre entre uma\nou mais aplica\u00e7\u00f5es web rodado em diferentes\nclientes.\n\n? Dados compartilhados - Significa que dados\nnecessitam estar acess\u00edveis a mais de um cliente\nsimultaneamente. O servidor \u00e9 utilizado para\nprover uma base de dados centralizada e\ncompartilhada entre diferentes clientes.\n\n? Tarefas agendadas - Pode-se existir a necessidade\nda execu\u00e7\u00e3o de tarefas e processamentos durante\no per\u00edodo em que n\u00e3o exista garantia que o\ncliente esteja sendo executado.\n\n2.4 Considera\u00e7\u00f5es para o servidor\nDe acordo com a natureza da aplica\u00e7\u00e3o, a execu\u00e7\u00e3o de\nalgumas tarefas e processamentos no servidor pode ser\ndesej\u00e1vel, vantajosa ou at\u00e9 necess\u00e1ria. Enquanto as\ntend\u00eancias da evolu\u00e7\u00e3o da web em rela\u00e7\u00e3o \u00e0 execu\u00e7\u00e3o de\naplicativos interativos e din\u00e2micos d\u00e1 prefer\u00eancia a (\u00e9\ncoerente com) um modelo no qual o cliente possa lidar,\nna medida do poss\u00edvel, com os eventos gerados na\ninterface gr\u00e1fica, o contexto de regras de neg\u00f3cio da\naplica\u00e7\u00e3o deve ser sempre levado em considera\u00e7\u00e3o.\n? Navega\u00e7\u00e3o - o modo na qual a navega\u00e7\u00e3o de\n\ndocumentos na web evoluiu permite que o\nusu\u00e1rio utilize bot\u00f5es para avan\u00e7ar e retroceder\nentre o conjunto de p\u00e1ginas acessadas. Usu\u00e1rios\nest\u00e3o acostumados a aplica\u00e7\u00f5es web simples nas\nquais se pode navegar com seguran\u00e7a mesmo\nquando utilizadas estas fun\u00e7\u00f5es. Esta\ncaracter\u00edstica \u00e9 perdida quando uma aplica\u00e7\u00e3o\ninteira \u00e9 implementada como uma \u00fanica p\u00e1gina\ndin\u00e2mica. Solu\u00e7\u00f5es para este problema envolvem\numa abordagem hibrida em que diferentes URLs\nidentifiquem diferentes partes de uma aplica\u00e7\u00e3o\nao mesmo tempo em que estas transi\u00e7\u00f5es de\nestado possam ser realizadas de forma din\u00e2mica e\nparcial, ou seja, atrav\u00e9s da adapta\u00e7\u00e3o do\nconte\u00fado entre diferentes estados sem a\nnecessidade de um recarregamento total da\naplica\u00e7\u00e3o.\n\n? C\u00e1lculos pesados - ou outras opera\u00e7\u00f5es de uso\nintensivo da CPU podem ser, em alguns casos,\nmelhor executados no servidor devido ao fato\ndeste poder ser um ambiente um pouco mais\ncontrolado onde se possui conhecimento do\nhardware utilizado e sua capacidade. A execu\u00e7\u00e3o\nde c\u00f3digo no servidor tamb\u00e9m possibilita o uso\nde linguagens mais poderosas para certos\ndom\u00ednios, como por exemplo o de c\u00e1lculos\nl\u00f3gicos ou matem\u00e1ticos.\n\n? Seguran\u00e7a - devido ao fato de que o c\u00f3digo\nexecutado no cliente pode ser acessado e\nmodificado, existem certas opera\u00e7\u00f5es cuja a\nexecu\u00e7\u00e3o possa ser obrigat\u00f3ria no servidor. Um\nexemplo inclui a necessidade de valida\u00e7\u00e3o de\ndados fornecidos pelo usu\u00e1rio, que pode ser\nfacilmente burlada por um usu\u00e1rio mais\nexperiente.\n\n? Confiabilidade - pode ser aumentada atrav\u00e9s da\nexecu\u00e7\u00e3o de opera\u00e7\u00f5es no servidor. Por exemplo,\nusu\u00e1rios podem fechar seus navegadores da web\ndurante uma opera\u00e7\u00e3o, ou no caso de opera\u00e7\u00f5es\ndependentes de hor\u00e1rio, comportamentos\ninv\u00e1lidos podem ocorrer devido \u00e0 m\u00e1\nconfigura\u00e7\u00e3o do rel\u00f3gio do cliente.\n\n2.5 Considera\u00e7\u00f5es para o cliente\nA natureza da plataforma web, de acordo com a sua\nevolu\u00e7\u00e3o, se deu de tal forma na qual os clientes mais\nsimples de uma aplica\u00e7\u00e3o s\u00e3o basicamente constitu\u00eddos\nda exibi\u00e7\u00e3o de uma interface gr\u00e1fica simples e est\u00e1tica,\npraticamente sem a execu\u00e7\u00e3o de nenhuma l\u00f3gica. A\ncria\u00e7\u00e3o de clientes mais complexos vem sendo um\ndesafio que aos poucos \u00e9 possibilitado pelas abstra\u00e7\u00f5es\ntecnol\u00f3gicas fornecidas por frameworks e ferramentas de\ndesenvolvimento, para facilitar a cria\u00e7\u00e3o de interfaces\ndin\u00e2micas, que proporcionem uma maior interatividade\ncom o usu\u00e1rio e maior poder em termos de capacidades\nque uma aplica\u00e7\u00e3o web pode apresentar.\n\nA disponibiliza\u00e7\u00e3o de dinamicidade e de\nfuncionalidades no software cliente requer ou que o\nmesmo possua l\u00f3gica em termos de ambos regras de\nneg\u00f3cio e integra\u00e7\u00e3o entre os componentes da\nvisualiza\u00e7\u00e3o de acordo com o dom\u00ednio da aplica\u00e7\u00e3o ou\nque uma comunica\u00e7\u00e3o extremamente ativa com o\nservidor seja estabelecida para que o servidor possa\ndeterminar os detalhes de como o cliente deve responder\na cada evento. Em outros termos, para a cria\u00e7\u00e3o de\naplica\u00e7\u00f5es web, \u00e9 necess\u00e1rio \u2013 proporcionalmente a sua\ncomplexidade - ou trazer parte da sua l\u00f3gica ao cliente\nou aumentar a depend\u00eancia da comunica\u00e7\u00e3o de um\ncliente simples e \u201cburro\u201d com o servidor. Esta dualidade\nestabelece claramente duas diferentes \u2013 e quase opostas\n\u2013 abordagens, uma propondo a utiliza\u00e7\u00e3o de um cliente\nfino e simples administrado pelo servidor e outra\npropondo a cria\u00e7\u00e3o de um cliente mais especializado\ncontendo parte da l\u00f3gica da aplica\u00e7\u00e3o.\n\n2.6 Aplica\u00e7\u00f5es offline\nA cria\u00e7\u00e3o de mecanismos para o desenvolvimento de\naplicativos web offline tem como intuito mitigar a\nlimita\u00e7\u00e3o - a qual muitas aplica\u00e7\u00f5es desktop n\u00e3o\n\n\n\npossuem \u2013 imposta pela necessidade de uma conex\u00e3o \u00e0\ninternet. Os requisitos m\u00ednimos necess\u00e1rios para que\numa aplica\u00e7\u00e3o web possa ser disponibilizada offline\npodem ser sintetizados e classificados em duas\ncategorias b\u00e1sicas: a armazenagem para futuro acesso de\nrecursos da aplica\u00e7\u00e3o \u2013 que implica em um mecanismo\nde armazenamento local de c\u00f3digo da aplica\u00e7\u00e3o - e a\narmazenagem de dados do usu\u00e1rio, relativos ao uso da\naplica\u00e7\u00e3o.\n\n3 HTML5\nO HTML foi concebido essencialmente como uma\nlinguagem para descrever semanticamente documentos\ncient\u00edficos, embora a sua concep\u00e7\u00e3o geral e adapta\u00e7\u00f5es\nao longo dos anos t\u00eam-lhe permitido ser usado para\ndescrever uma s\u00e9rie de outros tipos de documentos,\nincluindo sendo utilizado para a exibi\u00e7\u00e3o de interfaces\ngr\u00e1ficas de sistemas. At\u00e9 a vers\u00e3o 4 do HTML, sua\nespecifica\u00e7\u00e3o n\u00e3o visava praticamente nenhum suporte a\naplica\u00e7\u00f5es para a web.\n\nA cria\u00e7\u00e3o do HTML 5 tem sua motiva\u00e7\u00e3o na falta de\numa base mais s\u00f3lida na web no qual softwares possam\nse estabelecer. Sua especifica\u00e7\u00e3o visa mitigar a falta de\npadroniza\u00e7\u00e3o entre diferentes implementa\u00e7\u00f5es, aumentar\no grau de fidelidade entre os resultados desejados e\nobtidos na exibi\u00e7\u00e3o e comportamento de componentes\nde software, e por fim, visa tamb\u00e9m fornecer os recursos\ne funcionalidades b\u00e1sicas necess\u00e1rias para que\naplicativos web possam cada vez mais ter as mesmas\ncapacidades de aplica\u00e7\u00f5es nativas.\n\nO HTML5 contempla, dentre outras coisas, diversas\nfuncionalidades e APIs que se prop\u00f5em a comportar os\nrequisitos m\u00ednimos para a disponibiliza\u00e7\u00e3o de aplica\u00e7\u00f5es\nweb em um contexto offline. Sua especifica\u00e7\u00e3o\nestabelece um mecanismo de cacheamento de recursos\ndeclarativo, dois mecanismos para o armazenamento de\ndados estruturados no cliente, e um conjunto de APIs\npara a manipula\u00e7\u00e3o e armazenamento no cliente de bases\nde dados relacionais atrav\u00e9s do uso de SQL.\n\n4 JavaServer Faces 2.0\nO JSF, o principal framework de interface gr\u00e1fica ao\nusu\u00e1rio para aplica\u00e7\u00f5es Java web na especifica\u00e7\u00e3o do\nJavaEE 6, \u00e9 uma framework MVC orientada a\nrequisi\u00e7\u00f5es, fundamentado no modelo de design de\ninterfaces gr\u00e1ficas baseadas em componentes, atrav\u00e9s da\nutiliza\u00e7\u00e3o de arquivos XML chamados de view templates\n(templates de visualiza\u00e7\u00e3o) ou Facelet views.\n\nO framework realiza a facilita\u00e7\u00e3o da cria\u00e7\u00e3o de\ninterfaces gr\u00e1ficas web de aplica\u00e7\u00f5es escritas em Java,\nprovendo, dentre uma gama de funcionalidades, o\n\ngerenciamento de estado de componentes de UI,  a\nmanipula\u00e7\u00e3o de navega\u00e7\u00e3o p\u00e1gina-a-p\u00e1gina em resposta\na eventos provindos do cliente e do controle de\nvalida\u00e7\u00f5es e aplica\u00e7\u00e3o de valores. Ele \u00e9 respons\u00e1vel por\ngerar o conte\u00fado para o cliente (geralmente em HTML)\ne realiza o processamento das subseq\u00fcentes requisi\u00e7\u00f5es.\n\nA arquitetura do JSF estabelece um modelo em que\nquase a totalidade dos processamentos da aplica\u00e7\u00e3o s\u00e3o\nexecutados no servidor, n\u00e3o somente incluindo as\nfun\u00e7\u00f5es de gerenciamento necess\u00e1rias, mas incentivando\nque a l\u00f3gica de neg\u00f3cio da aplica\u00e7\u00e3o n\u00e3o seja levados ao\ncliente. Esta abordagem promove o cliente como uma\ncamada fina e delega ao servidor toda a ger\u00eancia das\nresponsabilidades e funcionalidades do framework.\nRequisi\u00e7\u00f5es s\u00e3o processadas pelo FacesServlet que, em\nsuma, carrega o template e \u00e1rvore de componentes de\nvisualiza\u00e7\u00e3o apropriado, aplica os novos valores\nfornecendo a oportunidade de atualiza\u00e7\u00e3o do estado de\ncada componente, realiza as devidas valida\u00e7\u00f5es,\nprocessa eventos, atualiza os valores no modelo,\ninvocando em seguida a aplica\u00e7\u00e3o para que se possa\nrealizar os devidos processamentos, e ent\u00e3o renderiza a\nresposta apropriada para o cliente. O cliente, portanto,\nfunciona como uma simples interface gr\u00e1fica, e \u00e9\nestritamente dependente do servidor.\n\n5 Integra\u00e7\u00e3o do JSF 2.0 e o HTML5 Offline\nA compatibiliza\u00e7\u00e3o do JSF 2.0 para cria\u00e7\u00e3o de\naplica\u00e7\u00f5es web offline oferece uma s\u00e9rie de grandes\ndesafios, e deve ser analisada em termos da viabilidade\ndas poss\u00edveis solu\u00e7\u00f5es, seus requisitos e os impactos ao\nseu uso e usu\u00e1rio final.\n\nA arquitetura determinada pela especifica\u00e7\u00e3o do JSF\n2.0 estabelece um modelo em que o servidor assume\ntoda a responsabilidade sobre o controle e sobre a l\u00f3gica\nde neg\u00f3cio da aplica\u00e7\u00e3o. \u00c9 estabelecida, assim, uma\nestrutura r\u00edgida que for\u00e7a que todas as fun\u00e7\u00f5es de\ngerenciamento de uma aplica\u00e7\u00e3o, desde a ger\u00eancia do\nestado da interface gr\u00e1fica e do modelo at\u00e9 o\nprocessamento e manipula\u00e7\u00e3o de valores, sua valida\u00e7\u00e3o,\ne a gera\u00e7\u00e3o de uma resposta, sejam executadas no lado\ndo servidor, atrav\u00e9s da utiliza\u00e7\u00e3o da linguagem Java. Ao\nmesmo tempo, n\u00e3o existe nenhuma maneira padronizada\nentre os diferentes navegadores web que permita \u2013 ou\nmesmo vislumbre - a execu\u00e7\u00e3o de c\u00f3digo Java\nrelacionado \u00e0s especifica\u00e7\u00f5es existentes do JSF para a\nsupervis\u00e3o da aplica\u00e7\u00e3o quando offline.\n\n\u00c9, portanto, necess\u00e1rio n\u00e3o s\u00f3 determinar a por\u00e7\u00e3o de\nc\u00f3digo que deve ser trazido ao cliente, mas tamb\u00e9m\nmaneiras para que se possa execut\u00e1-lo no ambiente dos\nnavegadores web modernos, e como sincronizar os\n\n\n\nprocessamentos entre o cliente o servidor, garantindo a\nintegridade dos dados dos mesmos.\n\n5.1 C\u00f3digo da aplica\u00e7\u00e3o necess\u00e1rio para\nexecu\u00e7\u00e3o offline no cliente\n\nOs requisitos m\u00ednimos para disponibiliza\u00e7\u00e3o offline de\numa aplica\u00e7\u00e3o web, abordados anteriormente neste\ntrabalho, estipulam a necessidade do armazenamento\nlocal dos recursos da aplica\u00e7\u00e3o, que incluem o c\u00f3digo e\nrecursos da interface gr\u00e1fica, c\u00f3digo base de\ngerenciamento da aplica\u00e7\u00e3o, c\u00f3digo contendo l\u00f3gica de\nneg\u00f3cio e os dados relativos ao dom\u00ednio.\n\n5.2 Particionamento de l\u00f3gica entre\naplica\u00e7\u00e3o cliente e o servidor\n\nA determina\u00e7\u00e3o da por\u00e7\u00e3o de c\u00f3digo de l\u00f3gica de\nneg\u00f3cio de uma aplica\u00e7\u00e3o necess\u00e1rio - e cab\u00edvel - ao\ncliente de uma aplica\u00e7\u00e3o web JSF \u00e9 um problema de\ngrande complexidade, pois a concep\u00e7\u00e3o e modelagem\ndas mesmas n\u00e3o foram idealizadas com este prop\u00f3sito.\nNeste contexto, \u00e9 necess\u00e1rio elencar tanto os\nprocessamentos cuja execu\u00e7\u00e3o seria imprescind\u00edvel em\nclientes offline quanto as por\u00e7\u00f5es de c\u00f3digo que devem\nresidir somente no servidor. Assim sendo, temos:\n? O pr\u00f3prio framework JSF como um todo \u00e9\n\nabsolutamente necess\u00e1rio em um contexto offline\ne necessita ser levado ao cliente. Suas\nresponsabilidades englobam quase que em sua\ntotalidade a gera\u00e7\u00e3o da interface gr\u00e1fica e seu\ngerenciamento, bem como fornece as portas de\nentrada ao resto do sistema. Como todas as fazes\ndo seu ciclo de vida de processamento e\ntratamento de requisi\u00e7\u00f5es realizam pap\u00e9is\nimportantes de acordo com este contexto, o\nmesmo n\u00e3o poderia ser dividido.\n\n? Os pontos de entrada de invoca\u00e7\u00e3o a aplica\u00e7\u00e3o,\nnormalmente referidos como Managed Beans,\ntamb\u00e9m se fazem necess\u00e1rios em um cliente\noffline. Sua principal responsabilidade resume-se\nem intermediar a comunica\u00e7\u00e3o entre as p\u00e1ginas\nda interface gr\u00e1fica web (componentes do JSF) e\no modelo da aplica\u00e7\u00e3o, fornecendo uma fachada\nde acesso a dados, escutando eventos, validando\nentradas e delegando a\u00e7\u00f5es e informa\u00e7\u00f5es \u00e0\ncamada de neg\u00f3cios, assim tamb\u00e9m\nrepresentando fun\u00e7\u00e3o essencial em um cliente\noffline.\n\n? A camada de neg\u00f3cio re\u00fane \u2013 por concep\u00e7\u00e3o - a\nmaior parte da l\u00f3gica de neg\u00f3cio e, segundo os\npadr\u00f5es propostos e enfor\u00e7ados pelo JavaEE,\ndeve ser implementada de forma totalmente\n\nindependente da camada de visualiza\u00e7\u00e3o, na\nforma de servi\u00e7os em EJBs. Devido a isto, esta\ncamada n\u00e3o deve, e n\u00e3o pode, ser inclu\u00edda em\nc\u00f3digo levado ao cliente. Esta camada pode\ntamb\u00e9m conter l\u00f3gica, depend\u00eancias, refer\u00eancia\nde acesso a outros servi\u00e7os online, e outros\nprocessamentos de execu\u00e7\u00e3o mandat\u00f3rios no\nservidor.\n\nEstabelece-se assim, que a por\u00e7\u00e3o de c\u00f3digo de l\u00f3gica\nque deve ser trazida ao cliente pode ser delimitada pela\nsepara\u00e7\u00e3o entre a camada de visualiza\u00e7\u00e3o e a camada de\nl\u00f3gica de neg\u00f3cios de uma aplica\u00e7\u00e3o JSF. O\nparticionamento de l\u00f3gica faz ent\u00e3o necess\u00e1rio um\nmecanismo - criado de acordo com a natureza da\naplica\u00e7\u00e3o - que possibilite a separa\u00e7\u00e3o de l\u00f3gica de\nneg\u00f3cio, aqui referido como Server-mock, representando\na implementa\u00e7\u00e3o dispon\u00edvel somente no servidor. Este\nmecanismo \u00e9 respons\u00e1vel por, dentre outras coisas,\ndeterminar as a\u00e7\u00f5es a serem tomadas desde quando\nopera\u00e7\u00f5es e dados n\u00e3o estiverem dispon\u00edveis,\nestabelecendo procedimentos ao implementar fachadas\nde servi\u00e7os EJB acess\u00edveis ao c\u00f3digo portado, ou seja,\nfornecendo uma implementa\u00e7\u00e3o alternativa as interfaces\nda l\u00f3gica indispon\u00edvel no cliente.\n\n5.3 Dados da aplica\u00e7\u00e3o\nO particionamento de c\u00f3digo entre servidor e cliente\nimplica na car\u00eancia de processamentos e dados -\nnormalmente disponibilizados pelo conjunto de servi\u00e7os\ndo servidor - n\u00e3o acess\u00edveis pelo cliente offline, que\npodem comumente representar fundamental import\u00e2ncia\npara o funcionamento da aplica\u00e7\u00e3o. Assim, a\nimplementa\u00e7\u00e3o alternativa dos servi\u00e7os indispon\u00edveis, ou\nseja, o Server-mock, deve ser respons\u00e1vel pelo acesso de\n- ao menos - todo o conjunto de dados fundamentais, e\npara que tal fun\u00e7\u00e3o seja poss\u00edvel, os mesmos devem\nestar armazenados e dispon\u00edveis de alguma maneira, em\ncontexto offline.\n\nDo mesmo modo, todo o conjunto de dados gerados\npelo cliente offline, bem como informa\u00e7\u00f5es de\nrepresenta\u00e7\u00e3o de todos os processamentos requisitados,\ndeve ser armazenado, para que possam ser\nposteriormente atualizados e executados no servidor, de\nmodo a manter a pertin\u00eancia e integridade do estado da\naplica\u00e7\u00e3o como um todo. Ambas a disponibiliza\u00e7\u00e3o dos\ndados da aplica\u00e7\u00e3o em ambientes offline e a atualiza\u00e7\u00e3o\ndo servidor segundo qualquer mudan\u00e7a depende da\nexist\u00eancia de um mecanismo respons\u00e1vel pela\nsincroniza\u00e7\u00e3o bilateral de dados entre cliente e servidor,\nassim como dependem de meios para o armazenamento\ne acesso a dados persistentes no cliente.\n\n\n\nO HTML5, segundo sua especifica\u00e7\u00e3o, fornece dois\nmecanismos distintos prim\u00e1rios para o armazenamento\nde dados de uma aplica\u00e7\u00e3o, disponibilizando seu acesso\ntanto quando online quanto quando offline. Ambos os\nmecanismos s\u00e3o acess\u00edveis diretamente pelo navegador e\natrav\u00e9s do uso de JavaScript, provendo acesso a um\nconjunto de APIs para a manipula\u00e7\u00e3o de bases de dados\nrelacionais no cliente e para o armazenamento - e acesso\n\u2013 persistente de dados baseados em pares de chaves-\nvalor. Em conjunto, as duas tecnologias viabilizam o\narmazenamento - para acesso futuro - de todos os tipos\nde dados da aplica\u00e7\u00e3o que podem vir a ser necess\u00e1rios\nneste cen\u00e1rio, incluindo dados salvos durante acesso\nonline, para acesso posterior offline, e dados salvos\ndurante a utiliza\u00e7\u00e3o offline do software, que necessitem\nser posteriormente disponibilizados para o servidor.\n\n5.4 Execu\u00e7\u00e3o do c\u00f3digo Java da aplica\u00e7\u00e3o\nno cliente\n\nExistem algumas alternativas n\u00e3o triviais que poderiam\nviabilizar a execu\u00e7\u00e3o do c\u00f3digo Java necess\u00e1rio em\nnavegadores web, dentre elas podemos ressaltar:\n? Java Applets para disponibiliza\u00e7\u00e3o de c\u00f3digo\n\nJava no cliente junto \u00e0 cria\u00e7\u00e3o de Render Kits do\nJSF especializados na cria\u00e7\u00e3o de p\u00e1ginas web\noffline que utilizem o Applet ao inv\u00e9s do\nservidor;\n\n? Cria\u00e7\u00e3o de plug-ins para navegadores web que\nexecutem o c\u00f3digo Java necess\u00e1rio quando\noffline, interceptando chamadas feitas por\np\u00e1ginas da aplica\u00e7\u00e3o; Necessitaria a cria\u00e7\u00e3o de\nplug-ins espec\u00edficos para cada navegador, para\ncada aplica\u00e7\u00e3o.\n\nAmbas as solu\u00e7\u00f5es poderiam viabilizar o problema\natacado por este estudo, contudo, ambas possuem\nalgumas considera\u00e7\u00f5es importantes:\n? Teriam relativamente grande tamanho,\n\nconsiderando os padr\u00f5es de velocidade de\ntransfer\u00eancia de arquivos na internet em rela\u00e7\u00e3o\nao tamanho das bibliotecas que seriam\nnecess\u00e1rias, como o JSF, que possui \u2013 de acordo\ncom suas diferentes implementa\u00e7\u00f5es \u2013 entre seis e\nnove Megabytes, se levando em conta tamb\u00e9m a\nnecessidade de download, pelo sistema do\ncliente, a cada nova vers\u00e3o, para armazenamento\nem seu computador.\n\n? Possuem como pr\u00e9-requisito e condi\u00e7\u00e3o b\u00e1sica a\ndepend\u00eancia de uma JVM (Java Virtual Machine)\ncompat\u00edvel na maquina cliente.\n\n5.5 Sincroniza\u00e7\u00e3o entre cliente e servidor\nCom a concep\u00e7\u00e3o de uma aplica\u00e7\u00e3o web com\ncapacidade de funcionamento offline faz-se necess\u00e1rio\num mecanismo que realize todos os m\u00e9todos de\nsincroniza\u00e7\u00e3o de dados entre cliente e servidor, sendo\nrespons\u00e1vel pela manuten\u00e7\u00e3o da integridade do estado\nda aplica\u00e7\u00e3o. No \u00e2mbito da compatibiliza\u00e7\u00e3o de\naplica\u00e7\u00f5es JSF 2.0 a complexidade deste mecanismo \u00e9\namplamente agravado.\n\nO alto acoplamento de camadas promovido pelo\nJavaEE e a arquitetura de software ditada pelas\nconven\u00e7\u00f5es do JSF estabelecem grande depend\u00eancia da\nvisualiza\u00e7\u00e3o aos servi\u00e7os da camada de l\u00f3gica da\naplica\u00e7\u00e3o para o acesso a dados e realiza\u00e7\u00e3o de\nprocessamentos.\n\nEm um ambiente offline, para que exista a\npossibilidade de atualiza\u00e7\u00e3o posterior do estado do\nservidor, faz-se necess\u00e1rio o armazenamento e\nsincroniza\u00e7\u00e3o de toda e qualquer opera\u00e7\u00e3o realizada na\nvisualiza\u00e7\u00e3o durante uma sess\u00e3o. Para garantir a\nconsist\u00eancia do estado de uma aplica\u00e7\u00e3o durante a\nconsuma\u00e7\u00e3o destes processos, determinam-se tamb\u00e9m\ndepend\u00eancias relacionadas \u00e0 ordem de execu\u00e7\u00e3o de\nprocessamentos e da congru\u00eancia dos dados resultantes\nentre servi\u00e7os no cliente e no servidor.\n\nNeste contexto, qualquer l\u00f3gica que seja levada ao\ncliente agrava as dificuldades de sincroniza\u00e7\u00e3o. A\nexecu\u00e7\u00e3o de qualquer l\u00f3gica particionada entre o cliente\ne o servidor tem como conseq\u00fc\u00eancia a gera\u00e7\u00e3o de dados\nparcialmente processados, cujo controle de vers\u00e3o e\nconflitos em rela\u00e7\u00e3o aos dados do servidor pode ser at\u00e9\nimposs\u00edvel, devido \u00e0 diferente natureza dos dados.\n\nComo conseq\u00fc\u00eancia, temos que uma grande\ncomplexidade surge devido \u00e0s possibilidades de\ndiverg\u00eancia entre a realiza\u00e7\u00e3o de opera\u00e7\u00f5es em um\nambiente offline e no servidor, que podem ser\nocasionados por uma ampla diversidade de situa\u00e7\u00f5es\ncomuns. Como exemplo, pode-se citar como causa de\nconflitos a comum possibilidade de que dados mantidos\nem um cache n\u00e3o estejam atualizados e a n\u00e3o\ndisponibiliza\u00e7\u00e3o, simula\u00e7\u00e3o ou at\u00e9 previs\u00e3o de\nresultados de servi\u00e7os e processamentos no cliente. Esta\nproblem\u00e1tica \u00e9 t\u00e3o critica que, de acordo com os\nrequisitos estabelecidos, a simples ocorr\u00eancia de\nconflito, erro ou discrep\u00e2ncia de resultados de\nprocessamentos durante a execu\u00e7\u00e3o de tarefas de\nsincroniza\u00e7\u00e3o, causaria a perda da sess\u00e3o offline ou, se\nn\u00e3o tratado, na inconsist\u00eancia do modelo de dados da\naplica\u00e7\u00e3o.\n\n\n\n6 Conclus\u00f5es\nAtrav\u00e9s do estudo das possibilidades de\ncompatibiliza\u00e7\u00e3o de aplica\u00e7\u00f5es web desenvolvidas\nutilizando-se o framework JavaServer Faces 2.0 com as\nfacilita\u00e7\u00f5es de disponibiliza\u00e7\u00e3o de aplica\u00e7\u00f5es offline\noferecidas pelo HTML5, junto \u00e0 implementa\u00e7\u00e3o de\ndiversas provas de conceito, conclui-se que a efetiva\u00e7\u00e3o\ndos fins contemplados pelo estudo realizado por este\ntrabalho \u00e9 poss\u00edvel, por\u00e9m, somente apresentando\nresultados extremamente limitados e demandando\nenorme esfor\u00e7o, n\u00e3o gerando, portanto, grande valor, ou\nseja, que a integra\u00e7\u00e3o das tecnologias \u00e9 tecnicamente\nfact\u00edvel por\u00e9m invi\u00e1vel em sua pr\u00e1tica.\n\nA cultura de utiliza\u00e7\u00e3o do JSF promove alto\nacoplamento entre as camadas de visualiza\u00e7\u00e3o e de\nservi\u00e7os, restringindo n\u00e3o somente o n\u00famero de\nprocessamentos dispon\u00edveis, mas tamb\u00e9m sua poss\u00edvel\ncomplexidade, tornando impratic\u00e1vel o desenvolvimento\nde aplica\u00e7\u00f5es JSF sofisticadas para ambientes offline.\nAl\u00e9m disto, a integra\u00e7\u00e3o das tecnologias propostas\nimplica tamb\u00e9m em um conjunto de limita\u00e7\u00f5es\nrelacionado \u00e0 necessidade de adapta\u00e7\u00e3o do pr\u00f3prio\nframework JSF 2, da especifica\u00e7\u00e3o e cria\u00e7\u00e3o de uma\ns\u00e9rie de complexos mecanismos espec\u00edficos \u00e0 natureza\nda aplica\u00e7\u00e3o, como de suporte \u00e0s funcionalidades\nfornecidas pelo HTML5 e da enorme complexidade para\nsincroniza\u00e7\u00e3o que seriam resultantes da implementa\u00e7\u00e3o\nde qualquer l\u00f3gica n\u00e3o trivial no cliente da aplica\u00e7\u00e3o.\n\nPara que as aplica\u00e7\u00f5es resultantes pudessem\ncontemplar qualquer tipo de processamento offline\ncontendo l\u00f3gica de neg\u00f3cios, por mais simples que os\nmesmos fossem, se faria necess\u00e1ria a quebra dos padr\u00f5es\nestabelecidos pelo JEE para desenvolvimento de\naplica\u00e7\u00f5es web.\n\nAssim, a cria\u00e7\u00e3o de uma aplica\u00e7\u00e3o JSF offline\npoderia prover poucas funcionalidades e uma pobre\nexperi\u00eancia ao usu\u00e1rio em rela\u00e7\u00e3o ao alto custo para seu\ndesenvolvimento, o que faz com que a sua pr\u00f3pria\nconcep\u00e7\u00e3o deva ser questionada: a da cria\u00e7\u00e3o de\naplica\u00e7\u00f5es web offline pode n\u00e3o fazer sentido quando os\npr\u00f3prios servi\u00e7os que justificariam a sua cria\u00e7\u00e3o seriam\nlimitados a pobres implementa\u00e7\u00f5es.\n\nDe maneira geral, o JSF \u00e9 uma excelente tecnologia\npara Web 1.0, fim para o qual foi projetada. As grandes\nvantagens da utiliza\u00e7\u00e3o desta tecnologia, por\u00e9m,\ndesaparecem quando se est\u00e1 em ambiente cliente, pois\nmesmo que tecnicamente poss\u00edvel trazer esta tecnologia\noriginalmente servidor, seu esfor\u00e7o \u00e9 demasiado grande\nem compara\u00e7\u00e3o aos seus potenciais resultados, visto que\nexistem tecnologias muito mais maduras para entregar\naplica\u00e7\u00f5es Web 2.0.\n\n7 Refer\u00eancias\nBURNS, E.; KITAIN, R. JavaServer Faces\n\nSpecification. Sun Microsystems Inc. Santa Clara. 2009.\nCLIENT-SIDE Scripting and HTML. W3C, 1997.\n\nDisponivel em:&lt;http://www.w3.org/TR/WD-script-\n970314>. Acesso em: 05 jan. 2010.\n\nGINIGE, A.; MURUGESAN, S. Web Engineering:\nA Methodology for Developing Scalable, Maintainable\nWeb Applications. Cutter IT Journal, Julho 2001. 24-35.\n\nHICKSON, I. HTML5. W3C, 2010. Disponivel em:\n<http://dev.w3.org/html5/spec/>. Acesso em: 20\nFevereiro 2010.\n\nHOLDENER, A. Ajax: The Definitive Guide. 1\nEdi\u00e7\u00e3o. ed. Sebastopol: O'Reilly, 2008.\n\nKUUSKERU, J.; MIKKONEN, T. Partitioning Web\nApplications Between the Server and the Client. 2009\nACM symposium on Applied Computing. Honolulu,\nHawaii: ACM. 2009. p. 647-649.\n\nMIKKONEN, T.; TAIVALSAARI, A. Web\napplications: spaghetti code for the 21st century. Sun\nMicrosystems, Inc. Mountain View, p. 1-19. 2007.\n\nMURUGESAN, S.; DESHPANDE, Y. Web\nEngineering: Managing Diversity and Complexity of\nWeb Application Development. Heidelberg: Springer-\nVerlag, v. LNCS 2016, 2001.\n\nTAIVALSAARI, A. et al. Web browser as an\napplication platform: The Lively Kernel Experience. Sun\nMicrosystems, Inc. Technical Reports; Vol.\nSERIES13103. Menlo Park, p. 1-19. 2008. (SMLI TR-\n2008-175).\n\nhttp://www.w3.org/TR/WD-script-\nhttp://dev.w3.org/html5/spec/\n\n\tTCC.pdf\n\tArtigo.pdf"}]}}}