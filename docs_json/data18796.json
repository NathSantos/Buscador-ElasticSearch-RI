{"add": {"doc": {"field": [{"@name": "docid", "#text": "BR-TU.22649"}, {"@name": "filename", "#text": "6669_331656.pdf"}, {"@name": "filetype", "#text": "PDF"}, {"@name": "text", "#text": "Lucas da Silva Maciel \n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\nA NOVEL SWARM-BASED ALGORITHM FOR PHASE \n\nUNWRAPPING \n \n\n \n\n \n\n \n\nDissertation submitted to the \n\nMechanical Engineering Graduate \n\nProgram of the Federal University of \n\nSanta Catarina in partial fulfillment of \n\nthe requirements for the degree of \n\nMaster of Mechanical Engineering. \n\n \n\nSupervisor: Prof. Dr. Armando \n\nAlbertazzi Gon\u00e7alves Jr. \n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\nFlorian\u00f3polis \n\n2014  \n\n\n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\nFicha de identifica\u00e7\u00e3o da obra elaborada pelo autor \natrav\u00e9s do Programa de Gera\u00e7\u00e3o Autom\u00e1tica da Biblioteca Universit\u00e1ria da \n\nUFSC. \n\n \n\n \n \n\nda Silva Maciel, Lucas \n\n     A Novel Swarm-Based Algorithm for Phase \n\nUnwrapping / \n\nLucas da Silva Maciel ; orientador, Armando \n\nAlbertazzi Gon\u00e7alves Jr \u2013 Florian\u00f3polis, SC, \n\n2014 \n\n     126 p. \n\n \n\n     Disserta\u00e7\u00e3o (mestrado) \u2013 Universidade \n\nFederal de Santa Catarina, Centro Tecnol\u00f3gico. \n\nPrograma de P\u00f3s-Gradua\u00e7\u00e3o em Engenharia \n\nMec\u00e2nica. \n\n \n\n     Inclui refer\u00eancias \n\n \n\n     1. Engenharia Mec\u00e2nica. 2. Processamento \n\nde imagens. 3. Phase unwrapping. 4. Swarm \n\nIntelligence. I. Albertazzi Gon\u00e7alves Jr, \n\nArmando. II. Universidade Federal de Santa \n\nCatarina. Programa de P\u00f3s-Gradua\u00e7\u00e3o em \n\nEngenharia Mec\u00e2nica. III. T\u00edtulo. \n\n \n\n\n\n \n\nLucas da Silva Maciel \n\n \n\n \n\n \n\nA NOVEL SWARM-BASED ALGORITHM FOR PHASE \n\nUNWRAPPING \n\n \n\n \n\nThis Dissertation was considered adequate to obtain the degree of \n\nMaster of Mechanical Engineering and was approved on its final version \n\nby the Mechanical Engineering Graduate Program. \n\n \n\nFlorian\u00f3polis, 17 November 2014 \n\n \n\n________________________ \n\nProf. Armando Albertazzi Gon\u00e7alves Jr., Dr. Eng. \n\nDepartment Chair \n\n \n\nExamining board: \n \n\n________________________ \n\nProf. Armando Albertazzi Gon\u00e7alves Jr., Dr. Eng. \n\nSupervisor \n\nFederal University of Santa Catarina \n\n \n\n________________________ \n\nProf. Marcelo Ricardo Stemmer, Dr.-Ing. \n\nFederal University of Santa Catarina \n\n \n\n________________________ \n\nProf. Tiago Loureiro Figaro da Costa Pinto, Dr. Eng. \n\nFederal University of Santa Catarina \n\n \n\n________________________ \n\nProf. Jo\u00e3o Carlos Esp\u00edndola Ferreira , PhD \n\nFederal University of Santa Catarina \n\n \n\n________________________ \n\nAnalucia Vieira Fantin, Dra. Eng. \n\nLabmetro - Federal University of Santa Catarina \n\n\n\n  \n\n\n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\nThis thesis is dedicated to my parents. \n\n\n\n\n\n \n\nACKNOWLEDGMENTS \n\n \n\nFirst and above all, I thank God for his unfailing love and mercy. \n\nThank you, Lord, for this opportunity and for never ceasing to guide me \n\nin your will. \n\nKarina, my love, I thank you for all your patience, encouragement \n\nand endless love. It has been an immense pleasure and privilege to walk \n\nthis journey by your side. \n\nTo my parents, Natanael and Walery, I am grateful for the ever-\n\nloving guidance and support throughout this journey since my earliest \n\nchildhood dreams. \n\nI would like to thank my supervisor, Prof. Armando, for believing \n\nin my crazy ideas and continually supporting my research with great \n\ninsight and careful guidance. \n\nI would also like to thank the great support given by the staff at \n\nLABMETRO, especially Rosana, who was always ready to help in every \n\nlittle detail. \n\nIn addition, I would like to thank the Brazilian Institute of Oil, Gas \n\nand Biofuels (IBP) for the scholarship that made this research possible. \n\nFinally yet importantly, I would like to thank my closest friends \n\nand family for their encouragement and friendship. \n \n\n \n\n \n\n \n\n \n\n  \n\n\n\n  \n\n\n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\u201cGo to the ant, you sluggard; consider its ways and \n\nbe wise!\u201d \n\nProverbs 6:6 \n\n  \n\n\n\n \n\n \n\n\n\n \n\nABSTRACT \n\n \n\nThe proper functioning of underground oil and gas pipelines depend on \n\nthe frequent and correct monitoring of stress states. Recent developments \n\non residual stress measurement techniques have employed optical \n\nmethods allied with stress relief in order to assess the underlying stress \n\nfield. These optical methods require a phase unwrapping step to interpret \n\nthe acquired data correctly. Phase unwrapping has posed a challenge for \n\nmany optical metrology applications for decades and saw the \n\ndevelopment of many different solutions. For the past decades, the field \n\nof Swarm Intelligence, based on the behavior observed among ants, bees \n\nand other social insects, has been studied and many algorithms have been \n\ndesigned to perform a variety of computational tasks. Swarm Intelligence \n\nis commonly regarded as robust and fast, which are desirable features in \n\na phase unwrapping algorithm. This work proposes a novel approach to \n\nphase unwrapping based on Swarm Intelligence, assessing its \n\napplicability, comparing it to existing methods and evaluating its potential \n\nto future developments. The proposed algorithm is thoroughly explained \n\nand the results for several different images are presented. These results \n\nshow a great potential of the proposed method, performing better than \n\nsome established techniques in specific situations. This potential is \n\nassessed and suggestion for future advancements are given. \n\n \n\nKeywords: Phase unwrapping. Swarm Intelligence.  Optical metrology. \n\nFringe processing. Interferometry. \n\n \n\n \n\n \n\n \n\n  \n\n\n\n\n\n \n\nRESUMO \n\n \n\nO correto funcionamento de tubula\u00e7\u00f5es subterr\u00e2neas para o \n\ntransporte de g\u00e1s e petr\u00f3leo depende de um monitoramento frequente e \n\ncorreto dos estados de tens\u00f5es. Avan\u00e7os recentes na medi\u00e7\u00e3o de tens\u00f5es \n\nresiduais t\u00eam aplicado m\u00e9todos \u00f3pticos em conjunto com o al\u00edvio de \n\ntens\u00f5es de maneira a avaliar o campo de tens\u00f5es no componente. Estes \n\nm\u00e9todos requerem uma etapa de remo\u00e7\u00e3o do salto de fase para interpretar \n\ncorretamente os dados adquiridos. Esta remo\u00e7\u00e3o do salto de fase tem sido \n\num desafio para diversas aplica\u00e7\u00f5es metrol\u00f3gicas. Este trabalho tem por \n\nobjetivo propor uma abordagem original para a solu\u00e7\u00e3o deste problema. \n\nNeste trabalho \u00e9 apresentado o algoritmo proposto assim como diversos \n\nresultados com diferentes imagens comparados com m\u00e9todos \n\nconsagrados. \n\nA luz, comportando-se como onda, obedece ao princ\u00edpio de \n\nsuperposi\u00e7\u00e3o que por sua vez d\u00e1 lugar ao fen\u00f4meno de interfer\u00eancia. Este \n\nfen\u00f4meno pode ser utilizado de diversas maneiras para a medi\u00e7\u00e3o de \n\nsuperf\u00edcies e formas geom\u00e9tricas. No entanto, v\u00e1rias dessas aplica\u00e7\u00f5es, \n\ncomo interferometria speckle e shearografia, fornecem os valores de \n\ninteresse restringidos a um intervalo de \u2013? a ?. Assim, faz-se necess\u00e1ria \n\numa opera\u00e7\u00e3o para retomar os valores reais que produziram o resultado \n\nobtido. Esta opera\u00e7\u00e3o \u00e9 chamada de remo\u00e7\u00e3o do salto de fase. \n\nPor d\u00e9cadas tem-se estudado diversas t\u00e9cnicas para realizar a \n\nremo\u00e7\u00e3o do salto de fase. Elas podem ser divididas em duas categorias \n\nprincipais: m\u00e9todos que seguem caminhos e m\u00e9todos independente de \n\ncaminhos. M\u00e9todos que seguem caminhos aplicam uma simples equa\u00e7\u00e3o \n\nde compara\u00e7\u00e3o e adi\u00e7\u00e3o de m\u00faltiplos de 2? por toda a imagem. Elas \n\ndiferem nos caminhos de pixels escolhidos. Para que o resultado seja \n\nconfi\u00e1vel, \u00e9 necess\u00e1rio que esse caminho evite pixels de baixa qualidade \n\nou corrompidos. As t\u00e9cnicas de branch-cut identificam esses pixels \n\natrav\u00e9s da teoria de res\u00edduos e conectando res\u00edduos de sinais opostos, ela \n\n\u00e9 capaz de tra\u00e7ar caminhos confi\u00e1veis para a remo\u00e7\u00e3o do salto de fase. \n\nT\u00e9cnicas baseadas em qualidade atribuem notas relativas a diferentes \n\ncrit\u00e9rios de qualidade para cada pixel, excluindo da an\u00e1lise aqueles que \n\nse encontram abaixo de um limiar arbitr\u00e1rio. \n\nT\u00e9cnicas independentes de caminhos, como os m\u00e9todos de norma \n\nm\u00ednima, assemelham-se a m\u00e9todos de otimiza\u00e7\u00e3o. Estes s\u00e3o iterativos e \n\nprocuram por um m\u00ednimo na diferen\u00e7a entre as derivadas da solu\u00e7\u00e3o \n\nproposta e as derivadas da imagem original. Estes m\u00e9todos s\u00e3o \n\nconsiderados bastante robustos e confi\u00e1veis. No entanto, estes tamb\u00e9m \n\n\n\ndemandam maior tempo de processamento para encontrar a resposta \n\ncorreta. \n\nEm paralelo aos desenvolvimentos na \u00e1rea de remo\u00e7\u00e3o do salto de \n\nfase, cientistas t\u00eam desenvolvido t\u00e9cnicas computacionais baseadas no \n\ncomportamento de animais sociais. O campo de Intelig\u00eancia de Enxame \n\n\u00e9 inspirado por insetos como formigas, abelhas e cupins e outros animais \n\ncomo peixes e p\u00e1ssaros. Estes animais t\u00eam em comum o fato de criarem \n\nsistemas organizados embora compostos de elementos simples e a \n\naus\u00eancia de uma lideran\u00e7a clara. O comportamento de formigas e abelhas \n\nna busca por comida e os movimentos em grupo de peixes e p\u00e1ssaros s\u00e3o \n\nos exemplos mais claros do conceito de comportamento emergente: um \n\ncomportamento que, embora n\u00e3o expl\u00edcito na descri\u00e7\u00e3o de seus elementos \n\nindividuais, surge com a intera\u00e7\u00e3o entre diversos desses elementos. Este \n\ncomportamento emergente pode ser explicado em termos de agentes \n\nsimples e independentes, regras simples e um comportamento \n\ndescentralizado. \n\nEste fen\u00f4meno tem inspirado as ci\u00eancias da computa\u00e7\u00e3o por \n\nd\u00e9cadas. Diversas solu\u00e7\u00f5es computacionais para problemas matem\u00e1ticos \n\nou operacionais t\u00eam sido propostas a partir das solu\u00e7\u00f5es elegantes \n\nencontradas na natureza. Exemplos dessas solu\u00e7\u00f5es s\u00e3o os algoritmos de \n\notimiza\u00e7\u00e3o baseados no comportamento de formigas e abelhas. No \n\nentanto, pouco deste conceito tem sido aplicado na \u00e1rea de processamento \n\nde imagem. Quanto ao problema de remo\u00e7\u00e3o do salto de fase, mais \n\nespecificamente, n\u00e3o foi encontrado nenhum trabalho que propusesse \n\numa solu\u00e7\u00e3o baseada em Intelig\u00eancia de Enxame. \n\nAssim, o presente trabalho prop\u00f5e uma solu\u00e7\u00e3o baseada nestes \n\nconceitos. Por causa da natureza imprevis\u00edvel do comportamento \n\nemergente, o desenvolvimento do algoritmo proposto foi pouco \n\nconvencional. Em primeiro lugar, foi necess\u00e1rio o desenvolvimento de \n\num ambiente de testes onde o enxame pudesse ser observado em tempo \n\nreal durante a sua opera\u00e7\u00e3o. Em segundo lugar, a cria\u00e7\u00e3o do algoritmo se \n\ndeu de maneira iterativa at\u00e9 que fosse encontrado um conjunto de regras \n\nsatisfat\u00f3rio. \n\nUma primeira solu\u00e7\u00e3o foi encontrada modelando os agentes como \n\nm\u00e1quinas de estados finitos. Este modelo de agente foi implementado \n\ncom din\u00e2micas de comunica\u00e7\u00e3o indireta atrav\u00e9s de estigmergia e \n\ncomunica\u00e7\u00e3o direta em casos de necessidade. Este m\u00e9todo, apesar de ter \n\napresentado bons resultados em termos de qualidade da remo\u00e7\u00e3o do salto \n\nde fase, necessitava ainda de um crit\u00e9rio de parada independente do \n\nusu\u00e1rio. Na cria\u00e7\u00e3o deste crit\u00e9rio de parada, novas regras deram espa\u00e7o \n\npara a cria\u00e7\u00e3o de um algoritmo completamente diferente. \n\n\n\n \n\nEsta segunda solu\u00e7\u00e3o modela o agente a partir de cinco regras \n\nsimples que permitem, entre outras coisas, a cria\u00e7\u00e3o e desativa\u00e7\u00e3o de \n\nnovos agentes. Uma vez que todos os agentes s\u00e3o desativados, o programa \n\nchega ao fim e retorna a imagem com o salto de fase removido. A primeira \n\ndestas regras afirma que se h\u00e1 um ou mais pixels que podem ter seu salto \n\nremovido na vizinhan\u00e7a do agente, um deles ser\u00e1 escolhido \n\naleatoriamente para a opera\u00e7\u00e3o. O agente ent\u00e3o se move para o pixel \n\nescolhido e ganha um ponto de energia. Se n\u00e3o h\u00e1 pixels aptos a serem \n\ntrabalhados, um pixel j\u00e1 trabalhado na vizinhan\u00e7a \u00e9 escolhido \n\naleatoriamente, de acordo com a segunda regra. O agente se move para o \n\npixel escolhido e perde um ponto de energia. A terceira regra faz com que \n\nagentes que encontram dois pixels vizinhos j\u00e1 trabalhados mas \n\ninconsistentes entre si, marcarem estes pixels como defeituosos e \n\ndesativarem-se. As duas \u00faltimas regras fazem com que agentes com \n\nenergia excedente repliquem-se e aqueles sem energia desativem-se. \n\nO comportamento esperado \u00e9 que os agentes de distribuam pela \n\nimagem de maneira eficiente, aproveitando ao m\u00e1ximo os ciclos de \n\nprocessamento. Al\u00e9m disso, a regra de marca\u00e7\u00e3o de remo\u00e7\u00f5es duvidosas \n\nfaz com que problemas de ambiguidade na remo\u00e7\u00e3o do salto de fase n\u00e3o \n\nsejam propagados por grandes regi\u00f5es da imagem. Este algoritmo foi \n\ntestado em diversas condi\u00e7\u00f5es e comparado com outros m\u00e9todos \n\nestabelecidos. \n\nOs primeiros resultados foram gerados aplicando-se o enxame em \n\nimagens sint\u00e9ticas sem quaisquer erros. Assim, foi poss\u00edvel avaliar a \n\ninflu\u00eancia de diferentes par\u00e2metros escolhidos pelo usu\u00e1rio no \n\ncomportamento do enxame e qualidade dos resultados. Foi poss\u00edvel \n\nobservar o impacto dos par\u00e2metros de energia na densidade do enxame \n\nque, por sua vez, \u00e9 importante para a corre\u00e7\u00e3o de ambiguidades \n\npropagadas. \n\nEm seguida, foram testadas imagens sint\u00e9ticas com erros \n\nartificiais. Os resultados foram comparados com um algoritmo baseado \n\nem qualidade e um algoritmo de norma m\u00ednima. Foi observado que o \n\nalgoritmo proposto foi extremamente capaz de contornar as dificuldades \n\ndas imagens de maneira, produzindo resultados confi\u00e1veis. Para certas \n\ncondi\u00e7\u00f5es, os resultados foram ainda melhores que os obtidos pelo outro \n\nalgoritmo baseado em qualidade. \n\nForam testadas ainda imagens provenientes de aplica\u00e7\u00f5es \n\nmetrol\u00f3gicas reais: proje\u00e7\u00e3o de franjas, interferometria speckle e \n\nshearografia. Os resultados obtidos pelo algoritmo baseado em \n\nIntelig\u00eancia de Enxame foram bastante satisfat\u00f3rios, compar\u00e1veis aos \n\nm\u00e9todos mais robustos. Ainda, o algoritmo proposto apresentou melhores \n\n\n\nresultados para imagens muito ruidosas quando comparado com o outro \n\nalgoritmo baseado em qualidade testado. Estes resultados atestam do \n\npotencial do m\u00e9todo proposto em obter resultados r\u00e1pidos e confi\u00e1veis. \n\nPor fim, este trabalho foi conclu\u00eddo com um breve resumo destes \n\nresultados e a valida\u00e7\u00e3o dos objetivos originais, afirmando assim o \n\nsucesso do m\u00e9todo proposto. Foram listadas ainda algumas sugest\u00f5es para \n\navan\u00e7os futuros como os testes com imagens e par\u00e2metros de qualidade \n\nnovos, a implementa\u00e7\u00e3o de processamento paralelo e a cria\u00e7\u00e3o de novas \n\nabordagens baseadas em Intelig\u00eancia de Enxame para a solu\u00e7\u00e3o deste \n\nproblema e outros semelhantes. \n\n \n\nPalavras-chave: Remo\u00e7\u00e3o do salto de fase. Intelig\u00eancia de Enxame.  \n\nMetrologia \u00f3ptica. Processamento de franjas. Interferometria. \n \n\n\n\n \n\nLIST OF FIGURES \n\n \n\nFigure 1 - Phase difference ?? between waves. .................................... 29 \nFigure 2 \u2013 Examples of a wave with both temporal and spatial coherence \n\n(a) and of a spatially coherent but temporally incoherent wave (b). ..... 30 \nFigure 3 \u2013 Examples of constructive interference (a) and destructive \n\ninterference (b). ..................................................................................... 32 \nFigure 4 \u2013 Young\u2019s experiment illustrating constructive and destructive \n\ninterference in space. ............................................................................. 32 \nFigure 5 \u2013 Michelson\u2019s interferometer. ................................................. 33 \nFigure 6 \u2013 Fringe pattern from a Michelson\u2019s interferometer where one \n\nmirror was slightly heated. .................................................................... 34 \nFigure 7 \u2013 A coherent light reflecting from a rough surface. ................ 35 \nFigure 8 \u2013 Random speckle pattern. ...................................................... 36 \nFigure 9 \u2013 Leendertz\u2019s method for the measurement of in-plane \n\ndisplacement. The vector k  shows the direction of sensitivity. .......... 37 \nFigure 10 \u2013 Shearography fringes. ........................................................ 37 \nFigure 11 \u2013 Structured fringes being projected over a mouse. .............. 38 \nFigure 12 \u2013 Application of a PZT for phase displacement. ................... 41 \nFigure 13 \u2013 Original (a) and wrapped (b) functions. ............................. 42 \nFigure 14 \u2013 Phase unwrapping being performed on a continuous \n\nfunction (a) and its result (b). ................................................................ 44 \nFigure 15 \u2013 Unwrapping comparison between functions with Gaussian \n\nnoise with low (a) and high (b) standard deviations; (c) and (d) show the \n\nwrapped phase; (e) and (f) show the unwrapped phase. ........................ 45 \nFigure 16 \u2013 Unwrapping comparison between functions sampled with \n\n12 (a) and 11 (b) samples; (c) and (d) show the wrapped phase; (e) and \n\n(f) show the unwrapped phase. .............................................................. 45 \nFigure 17 \u2013 An example of ambiguity in the phase unwrapping of \n\nimages. .................................................................................................. 47 \nFigure 18 \u2013 Residue identification. The numbers represent multiples of \n\n?. ............................................................................................................ 47 \nFigure 19 \u2013 Branch cuts. ....................................................................... 48 \nFigure 20 \u2013 Reynold\u2019s boids. ................................................................ 56 \nFigure 21 \u2013 Author\u2019s illustration of the behavior described by Goss et. \n\nal. [44]. .................................................................................................. 57 \nFigure 22 \u2013 Swarm algorithm design process. ...................................... 61 \nFigure 23 \u2013 Update structure of the test environment. .......................... 62 \nFigure 24 \u2013 Example of an unwrapping operation with reliability and \n\ncoverage problems................................................................................. 63 \n\n\n\nFigure 25 \u2013 Finite-State Machine model of an agent. ........................... 66 \nFigure 26 \u2013 Directed agents. The red arrow is the resulting avoidance \n\nvector; the yellow arrow is the preferred pheromone direction; the blue \n\narrow is the final movement direction. The green intensity represents the \n\npheromone level in each pixel. ............................................................. 67 \nFigure 27 \u2013 Algorithm\u2019s flowchart. The number of active agents is \n\ndefined as N. ......................................................................................... 68 \nFigure 28 \u2013 Random unwrap (a) and random search (b) rules. ............. 70 \nFigure 29 \u2013 Agents approach (a) an ambiguous region and mark (b) the \n\nambiguities.... ........................................................................................ 72 \nFigure 30 \u2013 Update function flowchart. Deactivation results in an instant \n\nending of the current iteration. .............................................................. 73 \nFigure 31 \u2013 Possible distribution of agents. .......................................... 74 \nFigure 32 \u2013 Graphical user interface. .................................................... 75 \nFigure 33 \u2013 Comparison of unwrapping errors showing how quantitative \n\nanalyses might mask the unwrapping success. ..................................... 76 \nFigure 34 \u2013 Residual stress measurement methods. .............................. 79 \nFigure 35 \u2013 Deformation around a blind hole under a uniform stress \n\nstate. ...................................................................................................... 80 \nFigure 36 \u2013 Wrapped phase map from a speckle interferometry \n\napplication for the measurement of residual stresses through the hole-\n\ndrilling method. ..................................................................................... 81 \nFigure 37 \u2013 Synthetic image used for experiments with energy settings. \n\nThe resolution is 640x481. .................................................................... 83 \nFigure 38 \u2013 Swarm density over time for different energy settings. ..... 84 \nFigure 39 \u2013 Correlation between the total number of update calls and \n\nprocessing times. ................................................................................... 86 \nFigure 40 \u2013 Processing times for different energy settings. .................. 87 \nFigure 41 \u2013 Maximum coverage for different energy settings. ............. 88 \nFigure 42 \u2013 Energy settings range, in white, for processing times lower \n\nthan 2 seconds and maximum coverage above 99.5%. ......................... 89 \nFigure 43 \u2013 Coverage values against processing times for different \n\nenergy settings. ..................................................................................... 90 \nFigure 44 \u2013 Synthetic image (512x512 pixels) with artificial errors (a), \n\nits unwrapped reference phase map (b) and the unwrapped phase map \n\nobtained with quality-based (c) and L0-norm (d) algorithms.. .............. 92 \nFigure 45 - Phase maps unwrapped by the swarm-based algorithm with \n\ndifferent settings. All operations used a single 0.9 threshold. ............... 93 \nFigure 46 \u2013 Selection of a difficult region from a synthetic image with \n\nerrors. .................................................................................................... 94 \n\n\n\n \n\nFigure 47 \u2013 Unwrapped solutions from the swarm-based algorithm. The \n\ncircles mark the starting pixels. All operations used a single 0.9 \n\nthreshold. ............................................................................................... 95 \nFigure 48 \u2013 Quality-based solution for the phase unwrapping of an \n\nambiguous region. The circles mark the starting pixels. ....................... 96 \nFigure 49 \u2013 Wrapped phase map (1624x1224 pixels) from a fringe \n\nprojection application (a) and the phase unwrapped using graycode (b), \n\nquality-based algorithm (c) and L0-norm algorithm (d). ....................... 97 \nFigure 50 \u2013 Fringe projection phase map unwrapped by the swarm-\n\nbased algorithm. .................................................................................... 98 \nFigure 51 \u2013 Comparison of the intensity profile along the red line (b) for \n\ndifferent unwrapping techniques. .......................................................... 99 \nFigure 52 - Wrapped phase map (1624x1224 pixels) from a fringe \n\nprojection application (a) and the phase unwrapped using graycode (b), \n\nquality-based algorithm (c) and L0-norm algorithm (d). ..................... 100 \nFigure 53 \u2013 Fringe projection phase map unwrapped by the swarm-\n\nbased algorithm. .................................................................................. 100 \nFigure 54 \u2013 Fringe pattern (1280x960 pixels) from a shearography \n\napplication (a) and the unwrapped phase from quality-based (b) and L0-\n\nnorm (c) algorithms. ............................................................................ 102 \nFigure 55 \u2013 Results for the swarm-based algorithm with a single \n\nthreshold at 0.9. ................................................................................... 103 \nFigure 56 - Results for the swarm-based algorithm with a single \n\nthreshold at 0.8. ................................................................................... 104 \nFigure 57 \u2013 Results from different configurations of the swarm-based \n\nalgorithm. ............................................................................................ 105 \nFigure 58 - Fringe pattern (1280x960 pixels) from a shearography \n\napplication (a) and the unwrapped phase from quality-based (b) and L0-\n\nnorm (c) algorithms. ............................................................................ 106 \nFigure 59 \u2013 Results from the swarm-based algorithm employing a single \n\nthreshold at 0.8. ................................................................................... 107 \nFigure 60 - Fringe pattern (1280x960 pixels) from a shearography \n\napplication (a) and the unwrapped phase from quality-based (b) and L0-\n\nnorm (c) algorithms. ............................................................................ 108 \nFigure 61 \u2013 Results from the swarm-based algorithm. ........................ 109 \nFigure 62 \u2013 Wrapped phase map (1600x1200 pixels) from a residual \n\nstress measurement (a) and the unwrapped phase map from the quality-\n\nbased (b) and L0-norm (c) algorithms. ................................................ 110 \nFigure 63 \u2013 Results from the swarm-based algorithm employing a single \n\nthreshold at 0.9 and the energy presets. ............................................... 111 \n\n\n\nFigure 64 \u2013 Results from the swarm-based algorithm using different \n\nenergy and threshold settings. ..............................................................112 \nFigure 65 \u2013 ESPI wrapped phase map (1600x1200 pixels) (a) and the \n\nunwrapped phase maps from the quality-based (b) and L0-norm (c) \n\nalgorithms. ...........................................................................................113 \nFigure 66 - Results from the swarm-based algorithm employing a single \n\nthreshold at 0.9 and the energy presets. ...............................................114 \nFigure 67 - Results from the swarm-based algorithm using different \n\nenergy and threshold settings. ..............................................................115 \nFigure 68 - Noisy ESPI wrapped phase map (1600x1200 pixels) (a) and \n\nthe unwrapped phase maps from the quality-based (b) and L0-norm (c) \n\nalgorithms. ...........................................................................................116 \nFigure 69 - Results from the swarm-based algorithm using different \n\nenergy and threshold settings. ..............................................................117 \nFigure 70 \u2013 General guidelines for parameter selection and examples of \n\nuse. .......................................................................................................118 \n \n\n \n\n \n\n \n\n\n\n \n\nLIST OF TABLES \n\n \n \n\nTable 1 \u2013 Maximum swarm population for each energy configuration. 85 \nTable 2 \u2013 Number of algorithm iterations for each energy configuration.\n\n ............................................................................................................... 85 \nTable 3 \u2013 Total time in milliseconds for each energy configuration. .... 86 \nTable 4 \u2013 Energy settings presets and the corresponding results from the \n\nsynthetic image. ..................................................................................... 89 \n \n\n \n\n\n\n\n\n \n\nABBREVIATIONS \n\n \n\n \n\nABC Artificial Bee Colony \n\nACO Ant Colony Optimization \n\nBCO Bee Colony Optimization \n\nCSI Computational Swarm Intelligence \n\nESPI Electronic Speckle Pattern Interferometry \n\nFSM Finite-State Machine \n\nPM Pseudo-modulation \n\nPSO Particle Swarm Optimization \n\nPZT Piezoelectric \n\nSI Swarm Intelligence \n\nUP Unwrappable Pixel \n\n \n  \n\n\n\n\n\n \n\nSYMBOLS \n\n \n\n?  Average phase difference \n\nk  Sensitivity vector \n\na Mean intensity \n\nd Swarm density \n\nE Agent energy \n\nE0 Initial energy \n\nER Replication energy \n\nf0 Carrier fringe frequency \n\nFT Fourier Transform \n\nI Wave intensity \ni, j Pixel coordinates \n\nIm Imaginary component \n\nk Window size \n\nN Iteration steps \n\nN Number of active agents \n\nR Correlation coefficient \n\nRe Real component \n\nt Processing time \n\nt Time of a wave function \n\nTQ Quality threshold \n\nTR Replication threshold \n\nu Complex wave amplitude \n\nU Wave amplitude \nW Wrapping operator \n\nx Displacement \n? Phase displacement \n\n?x Horizontal phase difference \n\n?y Vertical phase difference \n\n?? Phase difference \n\n? Angle of incidence \n\n? Wavelength \n\n? Real phase value \n\n? Wave phase \n?U Unwrapped phase value \n\n? Wrapped phase value \n\n \n\n \n\n \n\n\n\n\n\n \n\nTABLE OF CONTENTS \n \n\n1 INTRODUCTION ............................................................................ 25 \n1.1 OBJECTIVES .............................................................................. 26 \n\n1.1.1 General Objective ............................................................... 26 \n\n1.2 STRUCTURE .............................................................................. 27 \n\n2 FRINGE ANALYSIS ....................................................................... 29 \n2.1 INTERFERENCE ........................................................................ 29 \n\n2.2 FRINGES ..................................................................................... 33 \n\n2.2.1 Fringe sources ...................................................................... 33 \n\n2.2.2 Phase processing .................................................................. 38 \n\n2.3 PHASE UNWRAPPING ............................................................. 42 \n\n2.3.1 Basic unwrap ....................................................................... 43 \n\n2.3.2 Branch-cut methods ............................................................ 47 \n\n2.3.3 Quality-based ....................................................................... 49 \n\n2.3.4 Other methods ..................................................................... 51 \n\n3 SWARM INTELLIGENCE ............................................................ 54 \n3.1 EMERGENT BEHAVIOR AND SELF-ORGANIZATION ....... 54 \n\n3.2 SWARM INTELLIGENCE EXAMPLES ................................... 55 \n\n3.2.1 Flocks and schools ............................................................... 55 \n\n3.2.2 Ant foraging behavior ......................................................... 56 \n\n3.3 COMPUTATIONAL SWARM INTELLIGENCE ...................... 58 \n\n3.3.1 Optimization algorithms ..................................................... 58 \n\n3.3.2 Image processing algorithms .............................................. 59 \n\n4 ALGORITHM FOR PHASE UNWRAPPING.............................. 60 \n4.1 DESIGN PROCESS ..................................................................... 60 \n\n4.1.1 Test Environment ................................................................ 61 \n\n4.1.2 Design Requirements .......................................................... 62 \n\n4.1.3 Iterative Design ................................................................... 64 \n\n4.2 FIRST SOLUTION ...................................................................... 65 \n\n4.3 PROPOSED ALGORITHM ........................................................ 67 \n\n4.3.1 Rule set ................................................................................. 69 \n\n4.3.2 Analysis of requirements .................................................... 74 \n\n4.3.3 Interface ............................................................................... 75 \n\n4.4 PERFORMANCE ANALYSIS ................................................... 75 \n\n4.5 CASE STUDY ............................................................................. 77 \n\n4.5.1 Hole-drilling measurement of residuals stress .................. 77 \n\n4.5.2 Speckle interferometry applied to the hole-drilling method\n\n ....................................................................................................... 80 \n\n5 RESULTS .......................................................................................... 82 \n5.1 PARAMETER ANALYSIS ......................................................... 82 \n\n\n\n5.1.1 Energy settings .................................................................... 82 \n\n5.1.2 Randomness ......................................................................... 90 \n\n5.2 ALGORITHM COMPARISONS ................................................ 91 \n\n5.2.1 Synthetic images .................................................................. 91 \n\n5.2.2 Fringe projection................................................................. 96 \n\n5.2.3 Shearography .....................................................................101 \n5.3 CASE STUDY ............................................................................110 \n\n5.4 PARAMETER GUIDELINES....................................................117 \n\n6 CONCLUSIONS .............................................................................120 \n6.1 PERFORMANCE .......................................................................120 \n\n6.2 CONTRIBUTIONS ....................................................................121 \n\n6.3 LIMITATIONS ..........................................................................121 \n\n6.4 SUGGESTIONS FOR FUTURE ADVANCEMENTS ..............122 \n\n6.5 PUBLICATIONS .......................................................................122 \n\n7 REFERENCES ................................................................................124 \n \n\n \n\n \n\n \n\n \n\n \n  \n\n\n\n25 \n\n \n\n1 INTRODUCTION \n \n\nThe correct monitoring of underground pipelines is fundamental \n\nfor the oil and gas industry. The proper functioning of a transport network \n\ndepends on the corrosion and stress states of the pipelines. Stress \n\ndistribution, more specifically, can change over time and reach critical \n\nlevels, jeopardizing the whole network. Failures might result in leaking \n\nor even explosions. In order to ensure the safety and efficiency of the oil \n\nand gas transportation, the stress state of these pipelines must be evaluated \n\nperiodically. \n\nResidual stresses are a major component of the stress conditions \n\nfound in underground pipelines. This type of stress is mainly due to \n\nmanufacturing processes and can be found, therefore, in several \n\nengineering applications. Its wide importance resulted in the development \n\nof many different methods of measuring it throughout the last century [1].  \n\nFrom among these methods, the hole-drilling technique has been \n\nselected as suitable for the measurement of stresses in underground \n\npipelines. Recent advancements have adapted this method employing an \n\noptical assessment of the surface [2]. Hence, phase unwrapping \n\nalgorithms became essential to the success of these measurements. \n\nPhase unwrapping is a simple mathematical operation where a \n\nwrapped phase function returns to its original state by simply adding \n\nmultiples of 2? accordingly. Many optical metrology methods generate a \n\nwrapped phase map, making phase unwrapping extremely important to \n\ndifferent areas of engineering. This mathematical operation, however, \n\nbecomes much more difficult with the presence of incorrect information, \n\nsuch as noise. Therefore, due to its importance and difficulty, phase \n\nunwrapping has brought the attention of many scientists in the past \n\ndecades, resulting in a variety of methods [3]. \n\nThese methods have approached the phase unwrapping problem \n\nfrom very different perspectives, now offering solutions better suitable to \n\nspecific applications and standing on different locations of the quality vs. \n\nspeed compromise scale. The most common approaches can be divided \n\ninto two main groups, namely path-following and path-independent \n\nmethods. Path-independent algorithms are similar to optimization \n\ntechniques. They evaluate the whole image in order to find the minimum \n\nof certain parameters. This is usually a lengthy process that, however, \n\novercomes several problems of simpler methods. \n\nPath-following methods can be further classified into two groups: \n\nbranch-cut and quality-based methods. Both aim to find a reliable \n\nintegration path, the former creating blocking lines and integrating around \n\n\n\n26 \n\n \n\nthem while the latter employs quality parameters to evaluate which pixels \n\nshould be processed first, if at all. These methods are faster but highly \n\ndependent on a reliable pre-processing of the image. \n\nIn a so far unrelated field, Swarm Intelligence has been the subject \n\nof many studies on artificial and natural intelligence. Swarm Intelligence \n\nwas inspired by the collective behavior of social insects such as ants, bees \n\nand termites [4]. These insects are able to perform complicated tasks even \n\nthough presenting a very simple individual behavior. The observation of \n\nthis phenomenon gave place to the development of many algorithms, \n\nmainly for optimization tasks. This approach has been deemed fast, robust \n\nand flexible, which are very desirable characteristics for a phase \n\nunwrapping algorithm. \n\nTherefore, there was the opportunity of combining those different \n\nfields in order to produce a completely novel approach to the phase \n\nunwrapping problem. Although stress measurement is the main concern \n\nof this method, a successful phase unwrapping algorithm would be able \n\nto be applied in many different methods. \n\n \n\n1.1 OBJECTIVES \n \n\n1.1.1 General Objective \n \n\nThis work aims to develop a novel approach to phase unwrapping \n\nbased on Swarm Intelligence. This approach must result in a working \n\nalgorithm that is successful in unwrapping phase maps from real \n\nmetrological applications. More specifically, this method should be \n\nsuitable to be employed in residual stress measurements. \n\n \n\n1.1.2 Specific Objectives \n \n\nIn order to achieve a reliable method for phase unwrapping, the \n\nproposed approach must go through some necessary steps and fulfil some \n\nrequirements. Firstly, a working rule set must be designed. As it is going \n\nto become clear in a later discussion, an artificial swarm must be created. \n\nThis artificial swarm must be able to unwrap a phase map successfully \n\nwhile holding true to the fundamental aspects of Swarm Intelligence in \n\norder to maintain its usual speed, flexibility and robustness. \n\nLater, the algorithm must be tested in a variety of conditions. These \n\nconditions should present artificial errors to help understand the swarm \n\nbehavior and real metrological challenges in order to evaluate the \n\napplicability of the proposed method. \n\n\n\n27 \n\n \n\nFurthermore, the algorithm should be compared to existing \n\nmethods. This comparison should be able to place the proposed method \n\nin relation to available algorithms in terms of quality of results, processing \n\ntimes and suitability to specific phase unwrapping challenges. This work \n\ndoes not intend to surpass all the existing phase unwrapping algorithms. \n\nInstead, it aims to study the plausibility of employing Swarm Intelligence \n\nto this task while creating the pillars to future developments on this \n\napproach. A successful comparison with existing methods might become \n\nevidence of this approach\u2019s potential. \n\n \n\n1.2 STRUCTURE \n \n\nThe work is structured in six chapters. The second chapter, \n\nfollowing the introduction, reviews the state of art concerning fringe \n\nprocessing. The nature of fringes, their sources and processing methods \n\nare discussed here. In addition, the phase unwrapping problem and its \n\nsolutions are thoroughly reviewed in this chapter as well. \n\nThe third chapter concerns the growing field of swarm intelligence. \n\nInitially unrelated to the central problem of phase unwrapping, this \n\nchapter will review the fundamentals of this computational approach and \n\ndiscuss the main applications proposed in the literature. This will serve as \n\na reference for the proposed method. \n\nThe fourth chapter will present the proposed algorithm, starting \n\nwith the unconventional design methodology. Then, the resulting \n\nalgorithm is discussed in detail while being compared with the \n\nfundamental goals of this work. \n\nThe fifth chapter will present several results for the proposed \n\nalgorithm and the comparison with known methods as well, while the \n\nsixth and final chapter will summarize the main conclusions from this \n\nwork and list suggestions for future developments of the proposed \n\nmethod. \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n\n\n28 \n\n \n\n  \n\n\n\n29 \n\n \n\n2 FRINGE ANALYSIS \n \n\n2.1 INTERFERENCE \n \n\nInterferometry is one of the most powerful diagnostic tools among \n\nthe optical metrology techniques [5]. At the core of every interferometric \n\nsystem, are the understanding of light as wave and the concept of phase. \n\nPhase can be interpreted as the initial angle of a sinusoidal function, but \n\nfor interferometry, the phase difference between waves carries the most \n\nimportance. Figure 1 shows the phase difference ?? for two one-\n\ndimensional waves. \n\n \nFigure 1 - Phase difference ?? between waves. \n\n \nSource: Author\u2019s own work. \n\n \n\nPhase difference alone, however, is not enough to produce \n\ninterference. Coherence is another important aspect of light waves and a \n\nfundamental condition for interference. Coherence is a degree of \n\ncorrelation between phases of light along time or space.   \n\nTemporal coherence can be interpreted as a measure of correlation \n\nbetween phases of a wave along its propagation length. It can be also seen \n\nas a measure of spectral purity, i.e. for how long the wave displays a single \nfrequency. Moreover, it can be described as the interval [t1, t2] where the \n\nphase ?2 at any time t2 can be known given the phase ?1 at time t1 [5, 6, \n\n7]. Figure 2a shows a temporally coherent wave. The points P1, P1\u2019 and \n\nP1\u2019\u2019 are correlated, i.e. the oscillations at P1 are equal to those at P1\u2019 and \n\n\n\n30 \n\n \n\nP1\u2019\u2019. An example of a temporally incoherent wave is shown in Figure 2b, \n\nin which points P1\u2019 and P1\u2019\u2019 do not correlate to P1. \n \n\nFigure 2 \u2013 Examples of a wave with both temporal and spatial coherence (a) and \n\nof a spatially coherent but temporally incoherent wave (b). \n\n \nSource: Adapted from [6]. \n\n \n\nSpatial coherence, on the other hand, refers to the regularity of the \n\nwave propagation in more than one dimension, being the correlation \n\nbetween different points transverse to the propagation path [5, 6, 7]. It can \n\nbe described as the correlation between two points of a wave front for all \n\ntimes. Both waves in Figure 2 are spatially coherent. In both examples, \n\nwhat happens at P1 also happens at P2 and P3, showing a perfect \n\ncorrelation. \n\nCoherence is fundamental for the observation of the interference \n\nphenomenon, as understood through the superposition principle. This \n\nprinciple states that whenever two electromagnetic fields overlap in \n\nspace, their amplitudes are added [6, 7]. In mathematical terms, the \n\ncomplex amplitude of the waves can be modelled by \n \n\n1\n\n1 1\n\ni\nu U e\n\n?\n?       (1) \n\n \n\n2\n\n2 2\n\ni\nu U e\n\n?\n?       (2) \n\n \n\nWhen these waves overlap, the amplitudes are added accordingly: \n \n\n\n\n31 \n\n \n\n1 2\nu u u? ?       (3) \n\nIn a situation where light waves overlap, the resulting amplitude \n\noscillates in very high frequencies, from 4.3 x 1014 Hz to 7.5 x 1014 Hz \n\napproximately, and it is not perceived by the human eye [6]. The physical \n\nquantity actually processed by humans is the light intensity that results, \n\ngiven perfectly coherent waves, from the following relation: \n\n \n\n? ?\n2\n\n1 2 1 2\n2 cosI u I I I I ?? ? ? ? ?    (4) \n\n \n\nwhere \n\n \n\n1 2\n? ? ?? ? ?       (5) \n\n \n\nIt can be inferred from Equation 4 that the observed intensity \n\ndepends on the phase difference and will reach its maximum and \n\nminimum when cos(??) = 1 and cos(??) = -1, respectively. If the \ninterfering waves have the same intensity, the minimum and maximum \n\nare simplified to \n\n \n\nmin\n0I ? ,       \n\n (6) \n\nfor (2 1)n? ?? ? ?    and   0, 1, 2n ?  \n \n\nmax 0\n4I I? ,      (7) \n\nfor 2n? ?? ?    and   0, 1, 2n ?  \n \n\nThis result is illustrated in Figure 3. When the intensity of the \n\ninterference is greater than the individual waves, as in Figure 3a, the \n\ninterference is called constructive. The interference is called destructive \n\nif the phase difference is such that the resulting amplitude is smaller than \n\nthe original waves\u2019 amplitudes, as shown in Figure 3b. \n\nThis phenomenon can be observed through Young\u2019s famous \ndouble-slit experiment, which can be performed as follows: a coherent \n\nlight wave is projected in a double-slit aperture screen, where each slit \n\nbehaves as a new light source. The two new waves, being related to each \n\nother, will overlap throughout space. If another screen is positioned \n\n\n\n32 \n\n \n\nfurther, peaks and troughs will appear as the waves interfere. Figure 4 \n\nillustrates Young\u2019s experiment. The lines represent the wave fronts, i.e. \n\nregions with the same relative phase. As it can be seen, the result is a \n\npattern of interference with light and dark regions similar to fringes [6, \n\n7]. \n \n\nFigure 3 \u2013 Examples of constructive interference (a) and destructive \n\ninterference (b). \n\n \nSource: Author\u2019s own work. \n\n \nFigure 4 \u2013 Young\u2019s experiment illustrating constructive and destructive \n\ninterference in space. \n\n \nSource: Author\u2019s own work. \n\n\n\n33 \n\n \n\n \n\n \n\n2.2 FRINGES \n \n\nThe fringe pattern resulting from the interference of two waves \n\ndepends on several physical characteristics of both the wave and the \n\noptical system. Therefore, several applications have tried to assess these \n\nphysical quantities through experiments where some of these unknowns \n\nare controlled. This section will present some of the most common \n\nmethods that employ fringe patterns to the measurement of surfaces and \n\ndeformations. \n\n However, the formation of the fringes alone does not guarantee \n\nthe complete knowledge of the underlying physical quantities. The fringes \n\nmust be correctly interpreted and some methods of fringe and phase \n\nanalysis will be presented further on. \n \n\n2.2.1 Fringe sources \n \n\nMichelson\u2019s interferometer \n\nMichelson\u2019s experiments to inspect the existence of a luminiferous \n\naether in the late 19th century gave birth to one of the most important \n\ninterferometers in history [6]. His design of an amplitude-dividing \n\ninterferometer is still employed in the measurement of smooth surfaces \n\nand lengths. Figure 5 shows the classical configuration of Michelson\u2019s \n\ninterferometer. \n\n \nFigure 5 \u2013 Michelson\u2019s interferometer. \n\n\n\n34 \n\n \n\n \nSource \u2013 Author\u2019s own work. \n\nIn this interferometer, a coherent light wave is divided into two \n\nseparate beams with a beamsplitter, located at the center of the optical \n\ncircuit. Both beams reflect upon mirrors and return to the beamsplitter, \n\nbeing recombined into a single beam producing interference. A detector \n\nis placed at the end of this circuit to register the interference field [6, 7]. \n\nOne of the mirrors can be mounted on a movable platform, \n\nallowing the control over the phase difference between the interfering \n\nwaves. For a displacement x, the resulting phase difference is equal to ?? \n\n= (2?/?)2x. Fringe patterns arise when one of the mirrors is not perfectly \n\nflat or is slightly tilted. Figure 6 shows a fringe pattern obtained heating \n\na small region of one mirror. Similarly, small defects in lenses and mirrors \n\ncan be detected with this method. \n\n \nFigure 6 \u2013 Fringe pattern from a Michelson\u2019s interferometer where one mirror \n\nwas slightly heated. \n\n\n\n35 \n\n \n\n \nSource: [6]. \n\n \n\nSpeckle interferometry \nWhen a rough surface is illuminated by a coherent light source, a \n\nhigh-contrast granular pattern is observed. This structure is called speckle \n\n[5, 7]. The speckle pattern results from the interference of many waves \n\nreflected with random individual phases from an irregular surface, as \n\nshown in Figure 7. This noise-like structure, shown in Figure 8, was \n\noriginally a nuisance for some optical applications, but it has been \n\nobserved that positional changes on the material produce intensity \n\nchanges on the speckle that can be tracked back to the deformation. This \n\nphenomenon has resulted in many measurement techniques, some of \n\nwhich can be found in [5, 7].  \n\n \nFigure 7 \u2013 A coherent light reflecting from a rough surface. \n\n\n\n36 \n\n \n\n \nSource: Author\u2019s own work. \n\n \n\nFigure 8 \u2013 Random speckle pattern. \n\n \nSource: Labmetro\u2019s internal production. \n\n \n\nOne important technique among those is the speckle \n\ninterferometry. In this method, a reference interferometry pattern, i.e. the \n\nspeckle pattern, is recorded before any displacement is applied to the \n\nmeasured object. When the material deforms or moves, each speckle \nchanges accordingly, but the resulting pattern will remain random. Then, \n\nthis new speckle pattern is combined with the reference and correlation \n\nfringes appear among the interference pattern. \n\nThe correlation fringes are relative to the displacement along the \n\nbeam direction [5]. For the measurement of in-plane displacements, a dual \n\n\n\n37 \n\n \n\ncollimated beam is employed [8]. In this configuration, both beams \n\nilluminate the surface at the same angle in relation to the surface\u2019s normal. \n\nThe resulting sensitivity is parallel to the material\u2019s surface, i.e. the \n\ncorrelation fringes will be related to the displacement along the surface. \n\nFigure 9 shows the schematic for the speckle interferometer with in-plane \n\nsensitivity. \n\n \nFigure 9 \u2013 Leendertz\u2019s method for the measurement of in-plane displacement. \n\nThe vector k  shows the direction of sensitivity. \n\n \nSource: Adapted from [8]. \n\n \n\nThis approach can be further adapted to result in a radial \n\nsensitivity. When the laser beam is divided radially with carefully \n\nconstructed diffractive optical components, it converges to a central \n\nregion interfering with itself. Following the same principles that resulted \n\nin a sensitivity parallel to the surface when two beams were employed, it \n\ncan be shown that this configuration will result in a radial sensitivity [9]. \n\n \n\nShearography \nIn this method, the speckle pattern is brought to interfere with an \n\nidentical but displaced pattern. Thus, the wave reflected from a point will \n\ninterfere with that of a neighboring point. Correlation fringes appear when \n\nexposures from before and after the material displacement are combined. \n\nThese correlation fringes, however, are related not to the displacement, \n\nbut to the displacement differences [10, 11]. \n \n\nFigure 10 shows the resulting fringes from a shearography \n\ninspection. The sensitivity to the displacement differences is observed in \n\nthe symmetrical patterns caused by the displacements. This technique is \n\na powerful tool for finding surface and subsurface defects [10, 11]. \n \n\nFigure 10 \u2013 Shearography fringes. \n\n\n\n38 \n\n \n\n \nSource: [7]. \n\n \n\nFringe projection \n\nFringe processing is not restricted to interferometric applications. \n\nSeveral optical methods use pattern projection, such as fringes, to \n\nmeasure three-dimensional geometries [5]. Figure 11 shows an example \n\nof fringes being projected over a surface. The measurement system \n\nconsists of a projection device and an image acquisition unit. The \n\nprojected fringes are structured in a known pattern, usually sinusoidal. \n\nThe lit surface is registered and the image is processed by one of many \n\nfringe analyses techniques available [12]. \n\n \nFigure 11 \u2013 Structured fringes being projected over a mouse. \n\n \nSource: [12]. \n\n \n\n2.2.2 Phase processing \n \n\nFor metrological purposes, the fringes must be translated into the \n\nphysical quantities that caused them. This process was for a long time \n\n\n\n39 \n\n \n\nlimited to the intensity analysis of the fringe maps. This approach is still \n\na viable solution for photographic records and cases where quantitative \n\nresults are not needed [7]. \n\nDigital image processing, however, allowed the storage of images \n\nand the manipulation of individual pixels. Following this, phase \n\nmeasurement techniques started being developed. These techniques aim \n\nto extract the exact phase values from the acquired images. Both temporal \n\nand spatial methods have been studied [5, 7]. \n\n \n\nTemporal methods \n\nAmong the most common temporal methods are the phase-step \n\ntechniques [13]. They are based on the displacement of the phase between \n\nthe acquisitions of several images. For a set of known or constant phase \n\ndisplacements, the intensity maps can be converted to phase maps. This \n\nmethod begins at describing the intensity of a single pixel as \n\n \n\ncos( )I a b ? ?? ? ? ?      (8) \n\n \n\nwhere I is the intensity of the interference, a is the mean intensity, \n\n?? is the phase difference between the interfering waves and ? means an \n\nexperimentally controlled phase displacement. This equation contains \n\nthree unknowns, a, b and ?, and requires at least three intensity \n\nmeasurements. These measurements are performed with a sequential \n\nphase displacement, thus obtaining: \n\n \n\n1 1\ncos( )I a b ? ?? ? ?      (9) \n\n \n\n2 2\ncos( )I a b ? ?? ? ?      (10) \n\n \n\n3 3\ncos( )I a b ? ?? ? ?      (11) \n\n \n\nfrom which derives \n\n \n\n? ? ? ? ? ?\n\n? ? ? ? ? ?\n2 3 1 1 3 2 1 2 31\n\n2 3 1 1 3 2 1 2 3\n\ncos cos cos\ntan\n\nsen sen sen\n\nI I I I I I\n\nI I I I I I\n\n? ? ?\n?\n\n? ? ?\n\n?\n? ?? ? ? ? ?\n\n? ? ?? ?? ? ? ? ?? ?\n\n        (12) \n\n \n\n\n\n40 \n\n \n\nIf the displacements ?1, ?2 and ?3 are conveniently defined, the \n\nequation can be further simplified. For example, if the phase is shifted by \n\n?/2 per exposure, giving ?1 = ?/4, ?2 = 3?/4, ?3 = 5?/4, Equation 12 is \n\nsimplified to \n\n \n\n1 2 3\n\n2 1\n\ntan\nI I\n\nI I\n?\n\n?\n? ??\n\n? ? ?\n?? ?\n\n     (13) \n\n \n\nHowever, this method might result in numerically unstable \n\nsolutions and it is often advised to overdetermine the system with the \n\naddition of phase displacements. Further acquisitions also minimize the \n\ninfluence of random noise. The following techniques are some of the most \n\ncommon solutions: \n\n \n\nFour-frame technique [13] \n\n?i = 0, ?/2, ?, 3 ?/2 \n\n \n\n1 4 2\n\n1 3\n\ntan\nI I\n\nI I\n?\n\n?\n? ??\n\n? ? ?\n?? ?\n\n     (14) \n\n \n\nFive-frame technique [14] \n\n?i = - ?, - ?/2, 0, ?/2, ? \n\n \n\n? ?2 41\n3 5 1\n\n2\ntan\n\n2\n\nI I\n\nI I I\n?\n\n?\n?? ?\n\n? ? ?\n? ?? ?\n\n   (15) \n\n \n\nCarr\u00e9 technique [15] \nIn Carr\u00e9\u2019s method, the phase shift does not need to be known, but \n\nneeds to remain constant between steps. \n\n \n\n? ? ? ? ? ? ? ?\n\n? ? ? ?\n1 4 2 3 2 3 1 41\n\n2 3 1 4\n\n3\ntan\n\nI I I I I I I I\n\nI I I I\n?\n\n?\n\n? ?? ? ? ? ? ?? ? ? ?? ? ? ?? ??\n? ?? ? ?\n? ?\n\n        (16) \n\n \n\nThe phase shifting can be achieved experimentally by several \n\nadjustments in the optical system. Interferometers commonly displace \n\n\n\n41 \n\n \n\none mirror with a precision device such as a piezoelectric (PZT) motor as \n\nillustrated in Figure 12. For fringe projection applications, the projected \n\nimage is simply replaced by a different picture with a built-in phase \n\ndisplacement. \n\n \nFigure 12 \u2013 Application of a PZT for phase displacement. \n\n \nSource: Author\u2019s own work. \n\n \n\nSpatial methods \n\nAmong the spatial techniques, the carrier fringe method [16] is the \n\nmost popular. This method superimposes a carrier fringe pattern on the \n\ninterferogram or projected fringes resulting in an intensity field that can \n\nbe described by \n\n \n\n0\n( , ) ( , ) ( , ) cos[2 ( , )]I x y a x y b x y f x x y? ?? ? ?   (17) \n\n \n\nThis equation can be written in its complex form using the relation \n\n \n( , )\n\n( , ) e\n( , )\n\n2\n\ni x y\nb x y\n\nc x y\n?\n\n?      (18) \n\n \n\nto obtain \n\n \n0 02 2( , y) ( , y) (x, y) e *(x, y) e\n\ni f x f x\nI x a x c c\n\n? ??\n? ? ?   (19) \n\n \n\nThis spatial phase modulation carries the fundamental frequency \n\nf0. In order to extract the phase information from the equation, the \nfunction can be transferred to the frequency domain using a Fourier \n\ntransform, resulting in \n\n \n\n\n\n42 \n\n \n\n0 0\n[ ( , y)] ( , ) ( , y) C*( , )FT I x A f y C f f f f y? ? ? ? ?  (20) \n\n \n\nThe C portion can be band-pass filtered and transferred back to the \nspatial domain through an inverse Fourier transform. Finally, the phase \n\ncan be extracted from c applying the following equation: \n\n \n\n1 Im[ (x, y)]\n( , ) tan\n\nRe[ (x, y)]\n\nc\nx y\n\nc\n?\n\n? ? ?\n? ? ?\n\n? ?\n    (21) \n\n \n\n2.3 PHASE UNWRAPPING \n \n\nAs it can be seen from the previous section, most common phase \n\nmeasurement methods employ a four-quadrant arctangent function to \n\nassess the real phase values. This function\u2019s range lies in the interval [-?, \n\n?] and can be considered as a wrapping operator W, as in \n\n \n\n( ) W[ (t)]t? ?? ,      (22) \n\n \n\nwhere (t)?  is the real phase function and ( )t? the wrapped phase \nobtained through the discussed phase measurement methods [3]. A simple \n\none-dimensional example is shown in Figure 13. In this example, the \n\noriginal phase, which represents a physical quantity, e.g. the surface of an \n\nobject, is a continuous function. The wrapped phase, on the other hand, \n\npresents several discontinuities keeping the function wrapped in the [-?, \n\n?] interval. These discontinuities appear as multiples of 2? added to the \n\noriginal phase. \n\n \n\n \n\n \n\n \n\n \nFigure 13 \u2013 Original (a) and wrapped (b) functions. \n\n\n\n43 \n\n \n\n \nSource: Author\u2019s own work. \n\n \n\n2.3.1 Basic unwrap \n \n\nTherefore, the phase unwrapping operation consists of recovering \n\nthe original phase by adding multiples of 2? to the wrapped phase [3, 17]. \n\nFigure 14 shows the same wrapped phase function being unwrapped by \n\nsequentially identifying the 2? jumps and adding multiples of 2? \n\naccordingly. \n\nThis simple method can be applied to discrete signals following the \nequation \n\n \n\n-1\n-\n\n- 2 ( )\n2\n\n?\n?\n\n? ?\n? ? ?\n\nU\n\nU N N\n\nN N\nRound ,     (23) \n\n\n\n44 \n\n \n\nwhere ? and ?U are, respectively, the wrapped and unwrapped \n\nphases, and N is iteration step. For an image of a wrapped phase map, the \n\nunwrapping becomes a simple operation of sequentially comparing one \n\npixel to the one before it until the whole image is processed. For each \n\nmultiple of 2? given by the Round function, the wrapped phase is adjusted \n\naccordingly.  \n\n \nFigure 14 \u2013 Phase unwrapping being performed on a continuous function (a) \n\nand its result (b). \n\n \nSource: Author\u2019s own work. \n\n \n\nHowever, since this equation is sequentially applied pixel by pixel, \n\nthe operation becomes susceptible to errors that might propagate \n\nthroughout the whole image. In real images from metrological \n\napplications, these errors can be caused by noise, undersampling and \n\nambiguity issues. \n\nThe effect of noise can be simulated and is shown in Figure 15. For \n\nthis example, Gaussian noise was added to the sinusoidal function shown \n\npreviously. However, the example on the right added noise with a higher \n\nstandard deviation than on the left. Then, these functions where wrapped \n\nwith a four-quadrant arctangent function. Finally, Equation 23 was \n\napplied in both cases to retrieve the original data.  \n\nAs observable, some noise do not interfere with the unwrapping \n\noperation because they do not cause the Round function to return a \n\nmistaken 2? multiple. However, as the noise increases, it becomes unclear \n\nif the jumps are due to the real data or to the noise. The result on the right \nside is an unwrapped function that does not represent the original data \n\nafter the first wrong unwrapping. If this simple method is applied to noisy \n\nimages, whole portions of the phase map can become meaningless. \n\n \n\n\n\n45 \n\n \n\nFigure 15 \u2013 Unwrapping comparison between functions with Gaussian noise \n\nwith low (a) and high (b) standard deviations; (c) and (d) show the wrapped \n\nphase; (e) and (f) show the unwrapped phase. \n\n \n\n \nSource: Author\u2019s own work. \n\n \n\nAnother difficulty that arises with discrete signals is the \n\nundersampling problem. Figure 16 simulates this effect with two \n\nfunctions sampled with 12 and 11 samples on the left and right side \n\nrespectively. Similarly to the noise example, these functions were \n\nwrapped with a four-quadrant arctangent function and unwrapped with \n\nEquation 23. As shown, if the function is not sampled properly, the \n\nwrapped map will present discontinuities greater than ? and the \nunwrapping will result in a corrupted function. \nFigure 16 \u2013 Unwrapping comparison between functions sampled with 12 (a) \n\nand 11 (b) samples; (c) and (d) show the wrapped phase; (e) and (f) show the \n\nunwrapped phase. \n\n\n\n46 \n\n \n\n \nSource: Author\u2019s own work. \n\n \n\nThe ambiguity problem arises with two-dimensional arrays, such \n\nas the wrapped phase images from the aforementioned measurement \n\ntechniques. As stated before, a whole image can be unwrapped by \n\nEquation 23 by applying it to every pixel sequentially. The sequence of \n\npixels, also called the path, can be arbitrarily chosen and some phase maps \n\nshow path-dependency.   \n\nFigure 17 shows an example of a path-dependent phase map. The \n\ngray levels represent the wrapped phase ranging from black, -?, to white, \n\n?. In this example, if Equation 23 is applied through the upper path from \n\nA to B, the pixel at B will have its phase added to 4?. If the lower path is \n\nchosen, however, the same pixel will add 6? to its phase. This example \n\nillustrates how the same phase map might have more than one solution. \n\nThese ambiguities might result from noise-like defects in the image or \n\ndiscontinuities on the measured surface. \n\n\n\n47 \n\n \n\nTherefore, robust phase unwrapping methods aim to minimize the \n\nnegative effects of discrete sampling of two-dimensional signals \n\nwhenever possible. In the past decades, several methods have been \n\nproposed and developed. The most studied and applied methods are \n\ndiscussed below. \n\n \nFigure 17 \u2013 An example of ambiguity in the phase unwrapping of images. \n\n \nSource: Author\u2019s own work. \n\n \n\n2.3.2 Branch-cut methods \n \n\nOne of the most intuitive approaches to phase unwrapping is to \n\nevaluate the path-dependency of an image. One condition for path-\n\nindependency is that the integral over every closed path must return zero \n\n[3]. The simplest method for checking path-dependency in images is to \n\nperform this integral over the shortest paths possible, i.e. over a closed \n\nloop of four pixels. Figure 18 shows an example for this evaluation, with \n\nthe number representing multiples of ?. As shown, the integral over four \n\npixels might return zero, showing path-independency. However, the \n\nintegral might result in positive or negative sums as well. In such cases, \n\nthis loop is classified as a residue with the respective sign [3]. \n\nResidue identification is the basis for the branch-cut methods. \nThese methods aim to create branches that connect residues with opposite \n\nsigns. These branches work as blockades for the path taken by Equation \n\n23. \n\n \nFigure 18 \u2013 Residue identification. The numbers represent multiples of ?. \n\n\n\n48 \n\n \n\n \nSource: Author\u2019s own work. \n\n \n\nThese branches can be connected in several different ways. Figure \n\n19 shows an example of the same disposition of residues being connected \n\nwith very different branches. The left case shows a poor choice of \n\nbranches because the branches are excessively long and unnecessarily \n\nmake regions unreachable by the integrating path. The solution on the \n\nright side shows a much more favorable disposition of branches, \n\nsimplifying the integrating path and allowing the whole image to be \n\nprocessed. \n\nBranch-cut algorithms, therefore, differ in ways of creating \n\nbranches, aiming to achieve a fast and reliable method for connecting \n\nresidues. Goldstein\u2019s algorithm [18] connects residues in clusters instead \n\nof in pairs. It is regarded as fast and able to create very short branches [3]. \n\nHuntley\u2019s method [19] connects pairs of residues with a simple nearest-\n\nneighbor algorithm. A modification of this method was presented by \n\nCusack [20], along with stable-marriage and simulated annealing \n\nalgorithms. A different approach, by use of the Hungarian minimization \n\nalgorithm, was proposed by Buckland [21]. Moreover, methods also \n\ninclude minimum spanning tree [22, 23], dendriform branch-cuts [23], \n\nnetwork programming [23, 24] and residue vectors [25] approaches. \n\n \n\n \n\n \n\n \nFigure 19 \u2013 Branch cuts. \n\n\n\n49 \n\n \n\n \nSource: Adapted from [3]. \n\n \n\n2.3.3 Quality-based \n \n\nQuality-based methods approach the reliability of a phase map \n\nfrom a different perspective. Instead of checking the path-dependency of \n\nthe map and identifying residues, these methods use different information \n\nfrom the pixels. This information is then used to classify each pixel \n\naccording to its quality. Finally, Equation 23 is applied to pixels that \n\nclassify as good. These methods rely on the assumption that low quality \n\npixels match the location of residues to some extent [3]. Below are some \n\nparameters that can be used to create the quality map. \n\n \n\nPseudocorrelation \n \n\nPseudocorrelation, also known as pseudomodulation, was \n\ndesigned to mimic the correlation parameter [3, 26]. It gives a good \n\nestimation of the homogeneity of the phase distribution. The \n\npseudocorrelation coefficient is defined as \n\n \n\n?\n?\n\n2 2\n\n( , ) ( , )\n\n( , ) 2\n\nx y x y\n\nx y\n\nS C\nPM\n\nk\n,    (24) \n\n \n\nwhere \n\n \n1 1\n\n( , ) ( , )\n\n1 1\n\nsin\nx y x i y j\n\ni j\n\nS ?\n? ?\n\n?? ??\n\n? ??\n     (25) \n\n?\n? ?\n\n?? ??\n\n? ? ?\n1 1\n\n( , ) ( , )\n1 1\n\ncos\nx y x i y j\n\ni j\n\nC\n\n    (26) \n\n\n\n50 \n\n \n\n \n\nand k represents the size of the k x k windows used to compute the \n\npseudocorrelation value. Using sine and cosine functions, 2? jumps are \n\nignored and the result is a coefficient that represents the smoothness of \n\nthe phase distribution. Results closer to 1 represent a smooth region, while \n\nlow values indicate a probable presence of noise. \n\n \n\nPhase Derivative Variance \n \n\nThe disadvantage of the pseudocorrelation is that it classifies steep \n\nphase variations as low-quality regions, even if it correctly represents the \n\nfeatures of the underlying physical quantity. The phase derivative \n\nvariance [3] is based on the statistical variance of phase derivatives and \n\ncan be obtained by \n\n \n\n2\n2\n\n, ,, ,\n\n, 2\n\n( ) ( )\nx x y y\n\nm n m ni j i j\n\nm n\nz\n\nk\n\n? ?? ? ? ??\n?\n? ?\n\n,  (27) \n \n\nwhere ,\nx\n\nm n?  and ,\ny\n\nm n?  are the averages of the partial derivatives \n\nfor the k x k window centered at the pixel (m, n). Moreover, \n,\n\nx\n\ni j\n?  and \n\n,\n\ny\n\ni j\n?  \n\nrepresent each partial derivative in the respective directions. Therefore, \n\nthe resulting coefficient represents the homogeneity of the phase variance \n\nand it approaches zero for regions that represent constant phase slopes. \n\n \n\nMaximum Phase Gradient \n\n \n\nThis quality parameter is based on the maximum value found \n\namong the phase differences in the k x k window [3]. It is defined as the \n\ngreater of the two values \n\n \n\n? ?,max xi j?       (28) \n \n\n? ?,max yi j?       (29) \nThis parameter is based on the observations that noisy regions tend \n\nto produce large maximum phase differences. Therefore, low values of \n\nmaximum phase gradient should indicate regions with low noise values. \n\n\n\n51 \n\n \n\nHowever, it shares the same problem of the pseudocorrelation, i.e. steep \n\nphase regions result in low-quality coefficients. More quality maps are \n\ndiscussed compared in [27]. \n\nThere are several methods for employing quality maps to guide the \n\nunwrapping algorithm. The simplest solution is to apply a fixed threshold \n\nover the image, classifying each pixel either as good or bad and then \n\nunwrapping the good pixels in any order, usually following a flood-fill \n\nsequence [28]. Thresholds can be also implemented with an adaptive \n\nbehavior [29] or to be modified as the unwrapped phase map is processed \n\n[30]. More common methods, however, sort the pixels by their quality \n\nvalues and unwrap those who present higher quality first independently \n\nfrom thresholds [31, 32, 27]. \n\n \n\n2.3.4 Other methods \n \n\nFlynn\u2019s method \n\nFlynn [33] proposed an algorithm that combines both branch-cut \n\nand quality-based methods and is often referred to as a mask-cut \n\nalgorithm. Flynn\u2019s method is, in a sense, the inverse of the quality-guided \n\nunwrapping, as it starts at the residues and follows the lower-quality \n\nregions creating masks. These masks grow until they encompass residues \n\nin a way that the total polarity becomes zero, i.e. the mask has the same \n\namount of positive and negative residues. The algorithm, then, unwraps \n\nthe reliable pixels using these masks as branches blocking the unwrapping \n\npath. In order to improve the unwrapped phase map, these masks might \n\ngo through a morphological operation to be thinned [3]. \n\n \n\nMinimum norm \nDifferently from the methods discussed so far, minimum norm \n\nalgorithms are path-independent and analyze the image as a whole instead \n\nof locally. These methods aim to finding the solution where the local \n\nderivatives match the real derivatives as closely as possible, similar to a \n\nsurface-fitting problem [3]. An example of this approach is the Minimum \n\nLp-norm as presented by [34], which can find weighted or unweighted \n\nsolutions. These algorithms present good reliability but are \n\ncomputationally intensive due to their iterative nature. \n\n \n\nFinally, phase unwrapping is a much studied subject and several \n\nother approaches can be mentioned. Some examples are cellular automata \n\n[35], calculated wrap regions [36], singularity compensation [37, 38], \n\ngraph cuts [39], image segmentation [40] and wavelet algorithms [41]. \n\n\n\n52 \n\n \n\n \n\n  \n\n\n\n53 \n\n \n\n  \n\n\n\n54 \n\n \n\n3 SWARM INTELLIGENCE \n \n\nSocial insects have, for a long time, fascinated humans. These \n\nsimple-structured animals seem capable of a high level of organization \n\nand cooperation with no apparent supervisor. This fascination has reached \n\ncomputer scientists as well and originated a completely new approach to \n\nold problems. \n\nIn this short section, the fundamental aspects of swarm intelligence \n\n(SI) will be discussed, followed by some examples of this behavior as \n\nobserved in nature. Then, some computational swarm intelligence (CSI) \n\napplications will be presented, focusing on their potential rather than on \n\nthe technicalities of each problem. This section aims to build a well-\n\ndefined swarm intelligence paradigm to guide the novel approach to phase \n\nunwrapping presented later. \n\n  \n\n3.1 EMERGENT BEHAVIOR AND SELF-ORGANIZATION \n \n\nSwarm intelligence, also referred to as collective intelligence, \n\nrelies on a complex behavior arising from the interaction of non-complex \n\nagents. This apparent complexity or organization is called emergent \n\nbehavior [42, 4]. As the term implies, this behavior cannot be found on \n\nan individual agent. Instead, the behavior emerges only with the \n\ninteraction of multiple agents. Consequently, the behavior is not guided \n\nby a leader agent. \n\nAnother fundamental aspect of swarm intelligence is the limitation \n\nof each agent\u2019s awareness. Firstly, the agents do not have a global \n\nawareness of their operation or structure. Furthermore, they only gather \n\ninformation from their immediate surroundings. Finally, their \n\ncommunication is often indirect, commonly through a process called \n\nstigmergy [4]. Stigmergy is the indirect communication done through the \n\nenvironment. Instead of communicating in real time, one agent alters the \n\nenvironment so another agent will react to it in a later time. This \n\nphenomenon is found, for example, among ants and termites [4]. \n\nEmergent behavior, which is also referred to as a self-organization \n\nexample, is defined by [4] as \u201ca set of dynamical mechanisms whereby \n\nstructures appear at the global level of a system from interactions among \n\nits lower-level components\u201d. Moreover, the authors in [4] list four pillars \n\nfor the emergence of these structures: \n\n \n\n \n\n\n\n55 \n\n \n\n1. Positive feedback, or amplification, consists of the \nbehavioral rules that promote the creation of structures. \n\nFor example, the recruitment of bees to a specific food \n\nsource is an instance of positive feedback. \n\n2. Negative feedback, on the other hand, counterbalances \npositive feedback, because it is necessary for a swarm to \n\nstabilize the collective behavior. The same example of \n\nbees gathering food can be mentioned. Behaviors such as \n\ncompetition between food sources, food exhaustion or \n\ncrowding at the food source help stabilizing the collective \n\neffort. \n\n3. Amplification of fluctuations entails a high-level of \nrandomness in the behavior. This randomness contributes \n\nfor the search of better solutions, acting as seeds. \n\n4. Multiple interactions are at the core of intelligent swarms. \nMost structures arise from the interaction between agents \n\nthat apply not only its individual results but also other \n\nagents\u2019 contribution to guide its future decisions. \n\n \n\n3.2 SWARM INTELLIGENCE EXAMPLES \n \n\nThere are several examples of swarm intelligence to be found in \n\nnature. Some instances of natural emergent behavior are listed by [42]: \n\n \n\n? Nest building behavior by termites; \n\n? Task allocation in ant colonies; \n\n? Bee recruitment through dances that result in optimal \nforaging behaviors; \n\n? Communication among bacteria using molecules. \n \n\nThese examples cover very diverse problems and solutions. \n\nHowever, in order to understand how simple rules can result in an \n\norganized behavior, two examples will be discussed more thoroughly. \n \n\n3.2.1 Flocks and schools \n \n\nA common sight in nature is the emergent behavior found in flocks \n\nof birds and schools of fish. Even though some of these animals present \n\nhigher complexity of organic structure and more direct means of \n\ncommunication than, for example, ants and bacteria, they present a \n\nrelatively complex motion that seems organized but unguided as well. \n\n\n\n56 \n\n \n\nThese cloud-like structures were described and modelled by Reynolds \n\n[43], who presented the concept of boids, which is a reference to the \u201cbird-\n\noid\u201d agents. \n\nReynolds [43] listed three fundamental behaviors that each agent \n\nshould follow in order for these collective formations to arise. These rules, \n\nalso illustrated in Figure 20, can be described as follows: \n\n \n\n1. Collision avoidance: this is a static rule, meaning that only \nthe position of the other boids will be computed. The goal \n\nis to steer away from imminent impacts with other agents. \n\n2. Velocity matching: this is a dynamic rule because the \nvelocity vectors of the neighbor agents are evaluated. \n\nFollowing this rule, each agent will try to adapt its own \n\nvelocity to that of its neighbors, also contributing to avoid \n\ncollisions. \n\n3. Flock centering: also a static rule, it makes each agent try \nto match its position to the geometrical center of its \n\nneighbors\u2019 positions.  \n \n\nFigure 20 \u2013 Reynold\u2019s boids. \n\n \nSource: Author\u2019s rendition of [43]. \n\n \n\nThese simple rules result in an organized behavior where no agent \n\nbehaves as a leader or possess global awareness of the group\u2019s condition. \n\nMoreover, these rules can be improved to include behaviors like obstacle \n\navoidance. \n\n \n\n3.2.2 Ant foraging behavior \n \n\nThe foraging behavior found among some species of ants is \n\nprobably one of the most used examples for swarm intelligence. It shows \n\ngreat elegance and efficiency in its solution for the foraging problem. \n\nGoss et. al. [44] experimented with Argentine ants (Iridomyrmex humilis), \n\n\n\n57 \n\n \n\nobserving a natural tendency to optimize the foraging path emerging from \n\nthe individual and decentralized effort of individual ants. Figure 21 shows \n\na rendition of that work\u2019s results. The rules listed below describe how \n\neach ant behaves locally. \n\n \nFigure 21 \u2013 Author\u2019s illustration of the behavior described by Goss et. al. [44]. \n\n \nSource: Adapted from [44]. \n\n \n\n1. Each ant searches for food while laying a trail of \npheromone; \n\n2. Upon finding a bifurcation, the ant chooses one randomly. \nPaths that contain a higher concentration of pheromone \n\nare preferred; \n\n3. After reaching the food source, the ant returns with the \nfood through its own pheromone trail. \n\n \n\n\n\n58 \n\n \n\nWhen these rules are combined, the behavior shown in Figure 21 \n\nemerges. Figure 21a shows the first ants finding the bifurcation. The \n\nchance of following each path is 50% so the swarm divides itself equally \n\namong the options. Figure 21b shows that the ants that opted for the \n\nshortest path are able to return to the colony earlier than the other group. \n\nReturning first, these ants intensify the pheromone trail on the shortest \n\npath, making it more likable that other ants will opt for it. Finally, after a \n\nfew moments, the whole swarm converges to the shortest path between \n\nthe colony and the food source. As it can be seen, no information about \n\nthe actual length of any path is never informed to any agent in particular, \n\nbut the swarm is able to find the shortest option nonetheless. This is also \n\na great example of stigmergy. \n \n\n3.3 COMPUTATIONAL SWARM INTELLIGENCE \n \n\nIn order for these real life examples to be employed in \n\ncomputational tasks, they need to be first modelled. As proposed by [4], \n\nalgorithms based on nature should mimic as closely as possible the actual \n\nproperties and variables of the observed phenomenon. The next step \n\nshould be the tampering the variables in order to produce efficient \n\nsolutions for computational problems. For example, the ant foraging \n\nbehavior as found in nature involves long times of random search and \n\npheromone decay. After the behavior is successfully modelled, these \n\nvariables should be properly adapted to computational needs. \n\nHowever, swarm intelligence algorithms are not limited to \n\nrepresenting real life examples. Based on the same philosophy, \n\ncompletely artificial swarms can be designed to provide novel solutions. \n\nIn general, swarm intelligence algorithms are regarded as fast, robust and \n\nflexible [4]. Short summaries of swarm-inspired algorithms for \n\noptimization and image processing tasks are presented below. \n\n \n\n3.3.1 Optimization algorithms \n \n\nMost SI algorithms descend from the optimization field [45]. Some \n\nwell-established algorithms are: \n\n? Ant Colony Optimization (ACO) [42, 46] is based on the \naforementioned ant foraging behavior; \n\n? Particle Swarm Optimization (PSO) [42, 47] is a search \nalgorithm based on the flock behavior of birds; \n\n\n\n59 \n\n \n\n? Bee Colony Optimization (BCO) [48] and Artificial Bee \nColony (ABC) [49] are inspired by bee\u2019s recruitment \n\nthrough waggle dances. \n \n\nThese and other swarm-inspired algorithms have been applied to a \n\ndiverse set of optimization problems. Some examples are the classic \n\ntraveling salesman problem [50, 48], vehicle routing [51], traffic lights \n\nscheduling [52] and supply chain network architecture [53]. \n \n\n3.3.2 Image processing algorithms \n \n\nNevertheless, optimization is not the only purpose of swarm-based \n\nalgorithms. Some recent works have been developed on the swarm \n\nintelligence basis aiming to achieve the same level of robustness and \n\nflexibility of known models. Some works relate to image processing \n\nproblems such as edge detection [45, 54, 55], image segmentation [56, \n\n57] and object recognition [58]. \n\nWhile many more algorithms could be mentioned, this work does \n\nnot intend to give an exhaustive overview of image processing-related \n\nworks, but to show the potential of the swarm intelligence approach and \n\nthe versatility of this method. \n\n \n\n \n\n  \n\n\n\n60 \n\n \n\n4 ALGORITHM FOR PHASE UNWRAPPING \n \n\nBased on the nature of the phase unwrapping problem and the \n\nfundamental aspects of Swarm Intelligence, this section will present the \n\ndesign methodology used to approach a solution and two resulting \n\nalgorithms. Two publications from this work\u2019s author were used in the \n\nexplanation of the proposed algorithms [59, 60].   \n\n \n\n4.1 DESIGN PROCESS \n \n\nDue to the unpredictable nature of swarm intelligence, i.e. the \n\nseemingly disparity between the emergent behavior and the underlying \n\nrule set, it is a difficult challenge to design a swarm starting with the \n\ndesired behavior. Therefore, a different methodology was adopted by this \n\nwork.  \n\nFigure 22 shows the design process for the swarm-based algorithm. \n\nInstead of progressing linearly from the expected results to the underlying \n\nprinciples, this method approaches the solution iteratively. However, \n\nsome important steps must be taken before the actual design of the rules \n\nbegins. \n\nFirstly, an observable test environment is fundamental for the \n\nexperimentation with artificial swarms. Some aspects of the emergent \n\nbehavior such as spatial distribution and the creation of random paths \n\nmust be evaluated in real time. This test environment does not aim to \n\noptimize the algorithm\u2019s performance, but rather to work as a canvas for \n\nthe brainstorming of solutions. \n\nSecondly, the objectives to be fulfilled by the artificial swarm must \n\nbe defined with clarity. These objectives will perform the role of design \n\nrequirements to guide the creative process and evaluate the success of the \n\nproposed solutions. These requirements aim to result in robustness, \n\nflexibility and efficiency in the final algorithm. \n\nFinally, with an experimentation environment and clear goals, the \n\nactual construction of the algorithm begins. As later explained with more \n\ndetails, this design process is fundamentally iterative and the design \n\nrequirements play an essential role of guiding the iterations. Only after \n\nthe rules meet all the requirements that the algorithm can actually be \n\noptimized and go under performance tests. In the following sections, the \n\nperformed work will be presented, from the creation of an \n\nexperimentation environment to the final rule set. \n\n \n\n \n\n\n\n61 \n\n \n\nFigure 22 \u2013 Swarm algorithm design process. \n\n \nSource: Author\u2019s own work. \n\n \n\n4.1.1 Test Environment \n \n\nThe test environment was programmed in C# using the tools from \n\nthe Microsoft XNA library. XNA is a free library developed and \n\npublished by Microsoft based on its .NET Framework with the purpose \n\nof promoting the development of independent games. Therefore, it \n\ncontains many tools to manage and control graphic resources in \n\ninteractive applications. These tools were used to build the test \n\nenvironment that shares the same needs of games, i.e. real time rendering \n\nand control over the program entities. Moreover, the C# language also \n\nallowed object-oriented programming enabling the creation of several \n\ninstances of the same agent with ease. \n\nFigure 23 shows the basic structure of every program built on \n\nMicrosoft XNA. The program starts by loading all the necessary content \n\nin the memory. Then, the application enters an Update&lt;-> Draw loop. \n\nThe update rate can be defined by the user but is also limited by the \n\ncomputer\u2019s ability to process all the required information in time. During \n\nthe Update step, all program entities are updated. In practice, this means \n\nthat each instantiated object has its Updated method called once.  \nThe Draw step consists of displaying all the graphic resources \n\naccordingly, considering the changes produced by the Update step. This \n\n\n\n62 \n\n \n\nmeans that all the agents have their location adjusted in the program \n\nscreen, along with any changes performed on the processed image. \n\n \nFigure 23 \u2013 Update structure of the test environment. \n\n \nSource: Author\u2019s own work. \n\n \n\n4.1.2 Design Requirements \n \n\nAs stated above, the design requirements must cover both the \n\nreliability and efficiency aspects of the algorithm. These requirements \n\nwill serve as references to evaluate the progress on the algorithm\u2019s \n\ncreation. The requirements were defined as reliable unwrapping, \n\nmaximum coverage, stop criteria and focused effort. These are explained \n\nthoroughly below. \n\n \n\nReliable unwrapping \n\nThe most important aspect of any unwrapping algorithm is its \n\nability to retrieve the true phase map that corresponds to the physical \n\nquantities measured by the optical system. For any application, the results \n\nof this operation must correspond as close as possible to the actual \n\nsurface. However, as it was already discussed, many difficulties arise in \n\nreal applications. More specifically, noise and ambiguity pose a challenge \n\nfor the unwrapping algorithm. \n\nIn order to avoid letting noise-like information interfere with the \n\nresults, the agents must have some method for assessing the pixel \n\nreliability. Ambiguities present a difficult challenge because the agents \n\nhave limited vision. Therefore, they are not capable of inferring which \nside of an ambiguous unwrapped region is best for the overall operation. \n\nSince an ambiguous path might arise from reliable pixels, it is not possible \n\nto classify it as incorrect, but only inconsistent with the majority of the \n\nalready unwrapped map. This evaluation must be performed, then, by a \n\nswarm composed of unaware agents. Figure 24 shows an example of \n\n\n\n63 \n\n \n\nunreliable regions that were propagated from ambiguous paths. As it can \n\nbe seen, the smooth, albeit noisy, surface around the center hole presents \n\na sudden change to a darker region, which is consistent on its own but \n\ndislocated from the correct position. The program must avoid this sort of \n\nresult. \n\n \nFigure 24 \u2013 Example of an unwrapping operation with reliability and coverage \n\nproblems. \n\n \nSource: Author\u2019s own work. \n\n \n\nStop criteria \n\nAs already discussed, the agents in a swarm algorithm have no \n\nawareness of the global operation. Thus, a swarm does never know how \n\nmuch of an operation has been completed. Therefore, the method cannot \n\nemploy progress-based stop criteria on an agent level. \n\nMoreover, although a higher awareness could be used to evaluate \n\nthe overall progress of the swarm, the completion of the unwrapping \n\nprocess would still be difficult. Firstly, there is no evaluation of the phase \n\nmap prior to runtime, i.e. the program is not aware of how many pixels \n\nare reliable and can actually be processed. Furthermore, even if the \n\nnumber of reliable pixels were known, the ability of the program to \n\nprocess them all would depend on their being connect through reliable \npaths. \n\nTherefore, there are many reasons for the process completion not \n\nto be used as a stop criterion. In addition, to take advantage of the swarm \n\nintelligence approach, the program should end through the interactions of \n\n\n\n64 \n\n \n\nthe multiple agents instead of depending on an entity with a global \n\nawareness of the operation. \n\n \nMaximum coverage \n\nAs discussed on the previous design requirement, process \n\ncompletion cannot be used as a stop criterion. Therefore, for any other \n\nstop criterion employed, there is a chance of the process being incomplete \n\nat the end of the operation. This requirement, thus, states that a successful \n\nalgorithm should unwrap most of the image. Figure 24 is also an example \n\nof an unsuccessful unwrapping due to a limited coverage of the algorithm. \n\n \n\nFocused effort \n\nAs discussed on the pillar of self-organization, the amplification of \n\nrandomness is fundamental for the swarm to find solutions successfully. \n\nAlthough the proposed algorithm does not involve a search for optimal \n\nsolutions, the randomness will be fundamental to cope with ambiguity \n\nissues. Consequently, this randomness might results as well in un \n\nunfocused effort towards the unwrapped phase map. Therefore, it is \n\nnecessary that the swarm, although random, spend most of its lifespan \n\nunwrapping pixels instead of randomly searching for them. \n \n\n4.1.3 Iterative Design \n \n\nThe rules creation process was performed as presented by Figure \n\n22. The first step was to brainstorm for possible rule sets. Individual rules \n\nwere difficult to be tested separately because the emergent behavior only \n\narises from the interactions of many agents and rules. Thus, different rules \n\nwere designed and tested simultaneously. \n\nThen, the algorithm was exhaustively tested. For each rule set, \n\ndifferent configurations had to be experimented because user-defined \n\nvariables presented a great impact over the emergent behavior. Only after \n\nthese experimentations, the rule set could be compared with the design \n\nrequirements. \n\nThis evaluation was performed only qualitatively. Firstly, because \n\nrequirements such as focused effort and reliable unwrapping were \n\ndifficult to measure quantitatively. In addition, these aspects were easily \n\nobserved visually in the test environment. After this evaluation, the \n\nalgorithm could be improved or have a new rule set designed from the \n\nstart, depending on its success. \n\nThis iterative process not only helped the algorithm to be improved \n\nprogressively but also gave new insight into the possible results from the \n\n\n\n65 \n\n \n\nmultiple interactions. Instead of creating new rules out of nothing in every \n\niteration, past failures were used to guide future proposals. \n\n \n\n4.2 FIRST SOLUTION \n \n\nDuring the design process previously discussed, more than one \n\nproposal reached satisfactory results. In this section, the first successful \n\nsolution is presented. This approach was based on direct communication \n\nallied with stigmergy. Although very different from the final algorithm, \n\nthis solution helps understanding how the same problem can be solved by \n\nvery different swarms and perhaps present an approach that can be further \n\ndeveloped. \n\nIn this solution, each agent was modelled as a Finite-State Machine \n\n(FSM). A FSM is one of the simplest form of Artificial Intelligence. It \n\ncan be defined by states and triggered transitions [42]. For each state, \n\nthere is a set of rules that can trigger a transition to a different state. The \n\nFSM used to model the agents is shown in Figure 25. An unwrappable \n\npixel means that it has not been unwrapped and is considered reliable \n\naccording to a quality measure. \n\nThe FSM defines a simple behavior where each agent, when not \n\nable to find a pixel suitable for processing, assumes different states in \n\norder to find workable areas. This approach aims to drive the swarm to a \n\nfocused effort towards unprocessed regions despite the limited awareness \n\nof each agent. The decision-making of each agent, following this FSM, \n\ncan be explained as follows: \n\n \n\n? At every iteration, the agent leaves a trace of pheromone \non its current location; \n\n? An agent stays in the first state, Unwrap, while there are \nunwrappable pixels around it; \n\n? If the UP = 0 condition is met, the agent will search for \nnew unwrapped pixels by walking randomly while on the \n\nRandom state. This state intends to free the agent from \n\nlocked positions and direct it towards near unprocessed \n\nregions; \n\n? If more than 50 iterations are spent searching for \nunwrappable pixels, the agent enters the Avoid state and \n\nstarts walking in the direction with less pheromone. This \n\nis a sort of stigmergy and the first rule to actually direct \n\nthe agent towards a focused effort; \n\n\n\n66 \n\n \n\n? If the agent is unable to find an unprocessed region, it \nenters the Request state and starts communicating with the \n\nneighbor agents. This communication consists of \n\nrequesting an information about the pheromone level at \n\nthe neighbors\u2019 locations. If the agent receives an answer \n\nwith a preferable location, it will follow its direction. \n\n? If at any of these search states the agent finds an \nunwrappable pixel, it enters the Unwrap state again. \n\n \nFigure 25 \u2013 Finite-State Machine model of an agent. \n\n \nSource: Author\u2019s own work. \n\n \n\nThis model achieved good results for focused effort and was able \n\nto avoid problematic pixels following a quality evaluation that will be \n\npresented in detail with the final solution. The first difficulty arose with \n\nthe proximity of the agents. Due to the communication with neighbors, \n\nthe agents tended to walk very close to each other, resulting in a tightly \n\npacked swarm that was unable to search with a broad reach. The solution \n\nwas to implement a collision avoidance behavior similar to that presented \n\nwith Reynolds\u2019 boids [43] in Section 3.2. The result was a widely spread \n\nswarm that in practice extended the vision of a single agent to that of the \n\nwhole swarm.  \n\nFigure 26 illustrates the collision avoidance and stigmergy \n\nbehaviors. As shown, the urge to avoid neighbor agents is stronger for the \n\nclosest neighbors. In this case, this avoidance vector will be summed to \n\n\n\n67 \n\n \n\nthe preferable pheromone position that comes from agent #2\u2019s location. \n\nThese vectors will define the probability function that directs the random \n\nwalk of the agent. \n\n \nFigure 26 \u2013 Directed agents. The red arrow is the resulting avoidance vector; the \n\nyellow arrow is the preferred pheromone direction; the blue arrow is the final \n\nmovement direction. The green intensity represents the pheromone level in each \n\npixel. \n\n \nSource: Author\u2019s own work. \n\n \n\nThis method was capable of unwrapping difficult images while \n\nbeing tested in the experimentation environment. However, the program \n\nended with a user command. This method, however, lacked a stop \n\ncriterion. While designing the stop criteria, to automate and optimize this \n\nmethod, new rules changed the swarm behavior completely. These rules \n\nshowed great potential on their own and with time replaced the present \n\nrule set altogether, giving place to the final algorithm, which is discussed \n\non the next section. \n\n \n\n4.3 PROPOSED ALGORITHM \n \n\nBefore detailing the rules and classes, it is important to understand \n\nhow the agents are updated. Figure 27 shows the update structure of the \n\nproposed algorithm. The algorithm starts by placing one or more agents \n\nin a pixel chosen by the user. If the chosen pixel is not reliable for any of \n\nits neighbors, a different pixel is sought automatically. Then, the \n\n\n\n68 \n\n \n\nalgorithm runs through the list of active agents, calling their update \n\nfunction once. Each agent takes a single step obeying the rules for each \n\nupdate call. These updates might result in the number of active agents, N, \n\nbeing altered. After the current list is completely processed, an updated \n\nversion is called. If eventually all agents are deactivated, the program \n\nends. \n\n  \nFigure 27 \u2013 Algorithm\u2019s flowchart. The number of active agents is defined as N. \n\n \nSource: Author\u2019s own work. \n\n \n\nPixel properties \n\nIn addition to the original wrapped phase, each pixel object must \n\nstore its unwrapped phase along with three Boolean variables: \n\nunwrapped, flawed and occupied. The pixel quality, i.e. reliability, is not \nstored on the pixel object. The quality is always evaluated by each agent \n\nindividually and depends on the agent\u2019s current pixel, i.e. there is a quality \n\nvalue for each of the eight possible directions of comparison and these \n\nvalues are not known prior to runtime. \n\n\n\n69 \n\n \n\nThe unwrapped Boolean simply tells if the pixel has been \n\nprocessed already. If true, it also means that the pixel is reliable from at \n\nleast one direction. The flawed variable is set true if the unwrapped phase \nof the pixel is inconsistent with the unwrapped phase of a neighbor pixel, \n\ni.e. if the difference between two unwrapped pixels is larger than ?. The \n\noccupied variable is defined as true at the moment an agent moves to the \npixel\u2019s location, in order to avoid two agents sharing the same pixel. \n\n \n\nAgent properties \n\nThe agents present simpler properties. The first one is a Boolean \n\nvariable, active, that stays true for as long as the agent remains in the list \nthat is called every iteration step by the main algorithm, as further \n\nexplained. The agent is deleted from this list when this property turns \n\nfalse. In addition, the agents hold the property of energy. This attribute, \nstored as an integer, increases or decreases depending on the agent \n\nactivity as explained in the rules, being fundamental for the success of the \n\nswarm behavior. \n \n\n4.3.1 Rule set \n \n\nRule #1: Unwrap \n\nThe unwrapping of a pixel is performed every time that an agent \n\nfinds a reliable pixel in its vicinity. Figure 28a shows an agent surrounded \n\nby wrapped, unwrapped and unreliable pixels. The reliability of the \n\nneighbor pixel is evaluated by a pseudo-modulation coefficient. Adapting \n\nthe original pseudo-modulation presented in Section 2.3.3, to two pixels, \n\nwe obtain: \n\n \n\n?\n?\n\n2 2\n\n( , ) ( , )\n\n( , )\n2\n\nx y x y\n\nx y\n\nS C\nPM     (30) \n\n \n\nwhere \n\n \n\n( , ) ( , ) ( , )\nsin sin\n\n? ?\n? ? ? ?\n\nx y x y x i y j\nS     (31) \n\n \n\n( , ) ( , ) ( , )\ncos cos\n\n? ?\n? ? ? ?\n\nx y x y x i y j\nC    (32) \n\n \n\n\n\n70 \n\n \n\nand i and j depend on the position of the neighbor pixel, varying \n\nfrom -1 to 1. It is important to note that the quality depends on the \n\ndirection of the evaluation. Therefore, the pixels marked as unreliable in \n\nFigure 28 are simply theoretical pixels that won\u2019t yield high PM values \n\nfrom any direction. \n\nIn addition, Equation 30 ranges from 0 to 1 and allows the \n\nclassification of the pixels based on user-defined thresholds levels. These \n\nlevels, when closer to 1, restrict the analysis to the most homogeneous \n\nregions, bypassing most of the noise. However, reliable regions with a \n\nsteep phase difference might be left unwrapped. Therefore, fine-tuning \n\nmight be required for special cases. Although this simple comparison has \n\nyielded satisfactory results, there is still opportunity for great \n\nimprovements in the pixel quality evaluation in terms of speed and \n\nreliability. \n\nIf at least one unwrappable pixel, i.e. a reliable and wrapped pixel, \n\nis found, one is chosen at random. The unwrapped phase is computed by \n\nEquation 23, replacing \nN\n\n?  for the wrapped phase of the neighboring \n\npixel and \n-1\n\nU\n\nN\n?  for the unwrapped phase at the agent\u2019s location. After the \n\nunwrapped phase is evaluated, the agent moves to the unwrapped pixel, \n\ngains energy, which will be important later on, and ends its current \n\niteration. \n\n \nFigure 28 \u2013 Random unwrap (a) and random search (b) rules. \n\n \nSource: Author\u2019s own work. \n\n \n\n\n\n71 \n\n \n\nRule #2: Search \n\nThe first rule results in a random walk. Therefore, it is possible for \n\ngood pixels to be left unprocessed due to random paths encircling good \n\nregions and moving away. In order to cover as many good pixels as \n\npossible, the agents need a rule that enables them to search for these \n\nregions. Figure 28b shows the case of an agent surrounded by unwrapped \n\nand unreliable pixels. In such cases, the agent selects an unwrapped pixel \n\nat random and moves to its location, losing energy in the process. This \n\nrule assures that each agent will never move to an unreliable pixel, even \n\nwhen locked. The resulting search is also a random walk and is not \n\noptimized to direct the agent to unprocessed pixels. The focused effort \n\narises with further rules. \n\n \n\nRule #3: Mark \nThe quality evaluation employed in the first rule is unable to avoid \n\nambiguous unwrapping operations. When two or more solutions are \n\npossible, it is desirable to promote the one that is more globally consistent. \n\nHowever, the agents have limited vision and only local awareness. These \n\nambiguities need, therefore, to be solved by the collective effort of \n\nunaware agents. \n\nThe proposed rule states that if two adjacent pixels have been \n\nalready unwrapped but present a difference between the phases greater \n\nthan ?, both are marked as flawed and the agent is deactivated. However, \n\ndue to its limited vision, the agent is unable to tell which side of the \n\nambiguity represents the best solution for the problem. By marking both \n\npixels as flawed and deactivating, the agent stops spreading the ambiguity \n\nof its own unwrapping path and transforms the ambiguity into a barrier \n\nfor movement. Figure 29 shows an example of ambiguity marking. \n\n \n\nRule #4: Replicate \n\nAs aforementioned, a single agent is created at the start. In order to \n\nbuild a consistent unwrapped phase map, new agents must be created in \n\nalready unwrapped regions, so the reference is the same for all operations. \n\nThis rule states that if the agent has energy above a certain threshold, \n\nsome of this energy is spent in order to spawn a new agent at the same \n\nlocation. The initial energy, as well as the energy threshold and cost for \n\nreplication, are defined by the user and can be tuned for different results. \n\n \n\nRule #5: Deactivate \n\nFinally, the energy attribute can also be used to direct the algorithm \n\nto its conclusion. After all energy is spent, the agent is deactivated. This \n\n\n\n72 \n\n \n\nnot only results in an eventual deactivation of all agents, i.e. a global stop \n\ncriterion, but also avoids the processing of unnecessary random walks. \n\n \nFigure 29 \u2013 Agents approach (a) an ambiguous region and mark (b) the \n\nambiguities. \n\n \nSource: Author\u2019s own work. \n\n \nFigure 30 shows a flowchart representing the decision-making of \n\neach agent every time its update function is called. All the rules can be \n\nidentified in the update function of each agent.  \n\n\n\n73 \n\n \n\n \n\nF\nig\n\nu\nre\n\n 3\n0\n \u2013\n\n U\np\nd\n\na\nte\n\n f\nu\n\nn\nc\nti\n\no\nn\n\n f\nlo\n\nw\nc\nh\n\na\nrt\n\n. \nD\n\ne\na\nc\nti\n\nv\na\nti\n\no\nn\n\n r\ne\nsu\n\nlt\ns \n\nin\n a\n\nn\n i\n\nn\nst\n\na\nn\n\nt \ne\nn\n\nd\nin\n\ng\n o\n\nf \nth\n\ne\n c\n\nu\nrr\n\ne\nn\n\nt \nit\n\ne\nra\n\nti\no\n\nn\n. \n\n \n\n \n\n S\no\n\nu\nrc\n\ne\n: \n\nA\nu\n\nth\no\n\nrs\n o\n\nw\nn\n\n w\no\n\nrk\n. \n\n \n\n \n\n \n \n\n \n\n \n\n \n\nG\ne\nt \n\nr\na\nn\n\nd\no\nm\n\n p\nix\n\ne\nl \n\na\nr\no\nu\n\nn\nd\n\n P\n(x\n\n, \ny\n)\n\nU\nn\n\nw\nr\na\np\n\np\ne\nd\n\n?\n\nF\nla\n\nw\ne\nd\n\n?\n\nA\nd\n\nd\n t\n\no\n \n\nq\nu\n\ne\nu\n\ne\n\nM\no\nr\ne\n?\n\nD\ne\na\nc\nti\n\nv\na\nte\n\nM\na\nr\nk\n\n b\no\nth\n\n \n\np\nix\n\ne\nls\n\n a\ns\n f\n\nla\nw\n\ne\nd\n\nU\nn\n\nw\nr\na\np\n\n a\nn\n\nd\n m\n\no\nv\ne\n\nR\na\nn\n\nd\no\nm\n\n f\nr\no\nm\n\n q\nu\n\ne\nu\n\ne\n \n\na\nn\n\nd\n m\n\no\nv\ne\n\nE\n >\n\n T\nR\n\n ?\n\nR\ne\np\n\nli\nc\na\nte\n\nE\n&lt;\n\n 0\n?\n\nE\nn\n\nd\n\nP\nM\n\n >\n T\n\nQ\n?\n\nD\ne\na\nc\nti\n\nv\na\nte\n\nY\n\nY Y\n\nY\n\nY\n\nY\n\nN\n\nN\n\nN\n\nN\n\nN\n\nN\n\nU\np\n\nd\na\nte\n\n c\na\nll\n\nE\n =\n\n E\n +\n\n 1\n\nE\n =\n\n E\n \u2013\n\n1\n\nE P\nM\n\nT\nQ\n\nT\nR\n\n=\n  \nE\n\nn\ne\nr\ng\ny\n\n=\n  \nP\n\ns\ne\nu\n\nd\no\nm\n\no\nd\n\nu\nla\n\nti\no\nn\n\n=\n  \nQ\n\nu\na\nli\n\nty\n t\n\nh\nr\ne\ns\nh\n\no\nld\n\n=\n  \nR\n\ne\np\n\nli\nc\na\nti\n\no\nn\n\n t\nh\n\nr\ne\ns\nh\n\no\nld\n\n\n\n74 \n\n \n\n4.3.2 Analysis of requirements \n \n\nWith each rule discussed in detail, it is now possible to evaluate \n\nthe original design requirements and how they relate to each rule. Firstly, \n\nthe goal of covering as many reliable pixels as possible is easily met by \n\nrules #1 and #2. Although this coverage is not optimized, by walking \n\nrandomly through every wrapped and unwrapped pixel, any number of \n\nagents suffices to cover all connected reliable pixels. This path-following \n\nmethod, however, excludes disconnected regions, as agents are unable to \n\ncross unreliable regions. \n\n \nFigure 31 \u2013 Possible distribution of agents. \n\n \nSource: Author\u2019s own work. \n\n \n\nThe focused effort problem is solved by rules #4 and #5 in addition \n\nto the energy gain and loss from the first two rules. Figure 31 shows a \n\npossible distribution of agents during runtime. As it can be seen, the \n\nagents closer to unprocessed regions contain more energy because they \n\noften unwrap pixels, also replicating often, creating new agents already \n\n\n\n75 \n\n \n\nclose to regions of interest. As some agents are left behind due to being \n\nlocked in processed pixels, these spend some steps searching randomly \n\nfor left behind pixels and, therefore, losing energy. Their lifespan is not \n\nlong and soon they deactivate. Therefore, the replication/deactivation \n\ndynamic is able to keep most of the effort at the border, where most of the \n\nunprocessed regions is found. The additional lifespan given to the agents \n\nis able to cover small regions that were left behind, fulfilling the first \n\nobjective. \n\n \n\n4.3.3 Interface \n \n\nFigure 32 shows the graphical user interface programed for the \n\nproposed algorithm. The adjustable parameters are the initial and \n\nreplication energy values and the thresholds. The program allows more \n\nthan one threshold to be used. In this case, when an agent has zero energy, \n\ninstead of deactivating, it regains energy to lower its own individual \n\nthreshold. In addition, the program also allows the selection of the starting \n\npixel for the unwrapping operation. The left image shows the original \n\nwrapped phase map, and the unwrapped map is shown on the right side. \n\n \nFigure 32 \u2013 Graphical user interface. \n\n \nSource: Author\u2019s own work. \n\n \n\n4.4 PERFORMANCE ANALYSIS \n \n\nThe quality of the phase unwrapping operation is difficult to be \n\nevaluated quantitatively. Figure 33 shows some examples of faulty \n\nunwrapping for both one-dimensional and two-dimensional cases. \n\n \n\n\n\n76 \n\n \n\n \nFigure 33 \u2013 Comparison of unwrapping errors showing how quantitative \n\nanalyses might mask the unwrapping success. \n\n \nSource: Author\u2019s own work. \n\n \n\nThe first objection to quantitative analyses is that path-following \n\nmethods either unwrap each data point correctly or deviate from the \n\ncorrect value by 2? steps, as shown in Figure 33a. In this case, the \n\nevaluation is binary: the unwrapping is either correct or incorrect. The \n\ncomparison between Figure 33a and Figure 33b shows that two \n\nunwrapping operations might result in similar quantitative deviations \n\nhaving varying degrees of success. On the first case, there was only one \n\nunwrapping error, while on the second there were seven mistaken 2? \n\njumps. Although a quantitative analysis is possible in this case, it does not \n\nnecessarily represent the robustness of the algorithm. \n\nA possible alternative would be to count the number of wrong 2? \n\njumps. Although it might be a good evaluation for the one-dimensional \n\ncase, it does not assess the quality of a two-dimensional unwrapping \n\noperation as well. Figure 33c and Figure 33d show the same ambiguous \n\nregion unwrapped in two different cases. Although there is only one \n\nsource of errors in this image, the propagation of this error was very \n\ndifferent in each case. The case on Figure 33d resulted in many more \n\nwrong 2? jumps if evaluated two-dimensionally. \n\n\n\n77 \n\n \n\nTherefore, this work will evaluate the proposed method and \n\ncompare it with established algorithms only qualitatively. This same \n\napproach was employed by past works, as in [61]. The comparison will \n\nbe made with the following algorithms: \n\n \n\n? L0-norm: This algorithm belongs to the Lp-norm methods. \nThis iterative method is capable of correctly unwrapping \n\ndifficult phase maps bypassing large ambiguities \n\ncompletely. However, it is a very slow method. \n\n? Asundi\u2019s flood-fill [31]: Asundi\u2019s algorithm is a quality-\nbased method that uses the pseudomodulation parameter \n\nto build the quality map. The unwrapping path is \n\nperformed following a first-in / last-out queue. \n \n\nThese algorithms do not represent the latest or undisputedly best \n\nmethods for phase unwrapping. However, these were the algorithms \n\navailable for this purpose. The fact that these have been used extensively \n\nfor different applications is evidence of their satisfactory results. \n\nTherefore, this comparison does not intend to place the proposed method \n\namong the very best solutions, but to compare it to satisfactory and well-\n\nregarded methods. The experiments will be performed on an Intel Core \n\ni7-4770 CPU at 3.40 GHz. \n \n\n4.5 CASE STUDY \n \n\n4.5.1 Hole-drilling measurement of residuals stress \n \n\nResidual stress refers to a type of mechanical stress that is internal \n\nto a component\u2019s structure instead of being caused by external forces. \n\nResidual stresses often arise during manufacturing processes. They are \n\ncharacterized by being in static equilibrium and do not result in further \n\nstrains in the material [62]. \n\nThese stresses can be classified according to different criteria. The \n\nscale of the residual stress is one of the most common criteria. According \n\nto this scale, the stress can be classified as follows [62, 63]: \n\n \n\n? Type I stress is also known as macroscopic stress. It \nextends to regions greater than the material\u2019s grain size. \n\nTherefore, this type of stress is uniform over several \n\ngrains; \n\n\n\n78 \n\n \n\n? Type II stress, also called microscopic, presents an order \nof magnitude similar to the grain size, spreading over \n\nfewer grains and usually caused by the grains\u2019 orientation; \n\n? Type III stress affects a region smaller than the grains\u2019 \nsize. It is often caused by small defects on the crystalline \n\nstructure. \n\n \n\nResidual stresses are usually produced by mechanical and thermal \n\nstrains and are found among most of the components manufactured \n\nthrough techniques that include plastic deformation, thermal treatments \n\nand machining [62]. Notwithstanding, these stresses can also be found in \n\nthe original material or caused by maintenance procedures. Stresses that \n\nare internal to assemblies considered as a single component can also be \n\nanalyzed as residual stresses. Two riveted sheets is a simple example [64]. \n\n Awareness of residual stresses is fundamental for manufacturing \n\nprocess and the application of manufactured components. These stresses \n\ncan be advantageous during use of the component. Compressive stress, \n\nfor example, increases the component\u2019s resistance to fatigue, wear and \n\ncorrosion. Tensile stresses, however, makes the component more \n\nsusceptible to the propagation of cracks, lowering the component\u2019s \n\nfatigue resistance [62]. \n\nAn important example is found in the oil and gas industry. Residual \n\nstresses are introduced to oil and gas pipes during their manufacturing, \n\nwhich includes forming and welding processes. Stresses caused by the \n\ninstallation and operation of these pipes are added to the already stressed \n\nstate of the material. Depending on the operation conditions, these stress \n\nstates may reach critical values to disastrous effects. In order to prevent \n\nthis from happening, the stress condition of these pipes must be \n\nmonitored. \n\nThe measurement of residual stresses poses a difficult challenge \n\nbecause the stresses are already applied to the component. Many \n\ntechniques have been developed in order to assess the direction and \n\nmagnitude of residual stresses. Figure 34 lists the most common methods. \n\nDestructive and semi-destructive techniques are based on the relief of \n\nmechanical stresses. Once the residual stresses are partially relieved from \n\nthe material, the latter deforms until it reaches statics equilibrium again. \nThis deformation is related to the direction and magnitude of the stress \n\nfield, which enables the comparison between the before and after states \n\nof the material in order to assess the residual stresses. Non-destructive \n\n\n\n79 \n\n \n\nmethods are usually based on the analysis of the crystalline structure and \n\nare used to measure stresses closer to the component\u2019s surface. \n\nAmong these techniques, the hole-drilling technique has been one \n\nof the most employed methods, and is the most common for the \n\nmeasurements of stresses in oil and gas pipes. Being a semi-destructive \n\nmethod, it does not compromise the performance of the pipe although it \n\nremoves some material from the component\u2019s surface. \n\n \nFigure 34 \u2013 Residual stress measurement methods. \n\n \nSource: Adapted from [62]. \n\n \n\nThis method works based on the measurement of the surface \n\ndeformation around a blind hole machined in a known location. When \n\nmaterial is removed from a region under a stress state, the material around \n\nthis removal readjusts itself until it enters static equilibrium again. This \n\ndeformation is relative to the direction and magnitude of the original \n\nstress state and can be used to assess it. Figure 35 shows how the material \n\ndeforms around a blind hole. The solid black line represents a theoretical \n\ncircle around the region to be drilled. The red dotted line shows the \n\nexpected deformation suffered by these circles after the residual stress is \n\nrelieved. \n\nThis method is over a century old and it has been widely studied \n\nand normalized. It is usually regarded as simple, fast and accurate [62]. \n\nOriginally, the strain measurement was performed with strain gages. \n\n\n\n80 \n\n \n\nHowever, recent techniques have replaced the strain gages with an optical \n\nsystem. More specifically, the speckle interferometry discussed in Section \n\n2.2.1, which in its digital form is called Electronic Speckle Pattern \n\nInterferometry (ESPI), has been adapted to measure radial deformation as \n\nexplained below. \nFigure 35 \u2013 Deformation around a blind hole under a uniform stress state. \n\n \nSource: Author\u2019s own work. \n\n \n\n4.5.2 Speckle interferometry applied to the hole-drilling method \n \n\nIn Section 2.2.1, a configuration for radial sensitivity was shown. \n\nWhen this system is centered at the expected location of the drilled hole, \n\nthe deformation will result in correlation fringes. Figure 36 shows an \n\nexample of an image acquired through speckle interferometry allied to the \n\nhole-drilling technique. \n\nThis method presents several advantages over the strain gages.  \n\nThe speckle interferometry technique allows a real time observation of \n\nthe fringes, giving an instantaneous insight of the residual stress field. In \n\naddition, this method measures the whole surface at once, instead of only \n\nthree small regions around the hole. Moreover, the installation and surface \n\npreparation time is much smaller than what is required by the strain gage \n\nmethod [2, 1].  \n\nFor phase unwrapping algorithms, this application poses a \n\nchallenge due to its noisy nature and the presence of regions with no \n\ninformation such as the drilled surface. In this case study, the proposed \n\nswarm-based method will be compared to established methods that are \ncurrently used to interpret the fringe maps from this application. \n\n \n\n \n\n \n\n\n\n81 \n\n \n\n \n\n \n\n \n\n  \nFigure 36 \u2013 Wrapped phase map from a speckle interferometry application for \n\nthe measurement of residual stresses through the hole-drilling method. \n\n \nSource: Author\u2019s own work. \n\n \n\n  \n\n\n\n82 \n\n \n\n5 RESULTS \n \n\nThe discussion on the proposed algorithm showed a number of \n\nuser-defined variables that must be finely tuned for the proper working of \n\nthis method. Therefore, it is fundamental to understand the influence of \n\nthese variables on the algorithm\u2019s performance and this section is \n\norganized accordingly. \n\nThe first experiments concern the influence of user-defined \n\nvariables alone. These experiments were performed on a synthetic phase \n\nmap aiming to understand how these parameters work together and to \n\nbuild a number of presets that could be applied to further experiments and \n\ncomparisons. \n\nAfter these presets were defined, the algorithm could be compared \n\nwith other existing methods. This comparison was done based on phase \n\nmaps obtained through real optical applications. Different applications \n\nwere selected in order to present different conditions for the phase \n\nunwrapping algorithms. These comparisons will present the influence of \n\nuser-defined parameters as well. \n\nFinally, the case study proposed in Section 4.5 will be performed \n\nto evaluate the suitability of the proposed method to the stress \n\nmeasurement application. This section will present the results with finely \n\ntuned parameters and compare it with the current methods.  \n\n \n\n5.1 PARAMETER ANALYSIS \n \n\nUser-defined parameters can be classified into two distinct groups. \n\nEnergy parameters are mainly concerned with the agents\u2019 life span and \n\nthe replication dynamics. It is directly connected with the agent density \n\nand processing times. Threshold parameters, on the other hand, have a \n\ndirect influence over the quality of results. These, however, must be tuned \n\naccording to the features on the phase map and depend on the source \n\napplication. \n \n\n5.1.1 Energy settings \n \n\nThe energy settings consist of two parameters: initial energy and \n\nreplication energy, represented by E0 and ER respectively. Initial energy \n\nis an integer that defines how much energy each agent has when created \n\nand dictates how long can an agent live without unwrapping pixels.  \n\nReplication energy is better tuned when related to the initial \n\nenergy. It is defined as the amount of energy the agent needs to have \n\n\n\n83 \n\n \n\nabove the initial value in order to create a new agent. The replication \n\naction consumes exactly this same amount of energy, returning it to the \n\ninitial value. For example, if E0 = 100 and ER = 0.2E0, an agent will \n\nreplicate if it reaches 120 energy, consuming 20 energy to create a new \n\nagent at the same location and with 100 energy as well. The replication \n\nthreshold is connected to the agent density and it can present a high \n\ninfluence over the results as further shown. \n\nThe first steps towards understanding how these variables \n\ninfluence the swarm should be taken observing the density behavior over \n\ntime. For this purpose, the synthetic image shown in Figure 37 was used \n\nfor the unwrapping operation. This perfect phase map, with a 640x480 \n\nresolution, should allow the swarm to perform a complete operation \n\nregardless of the quality threshold levels. \n\n \nFigure 37 \u2013 Synthetic image used for experiments with energy settings. The \n\nresolution is 640x480. \n\n \nSource: Labmetro\u2019s internal production. \n\n \nFigure 38 shows the results for the density over time using different \n\nenergy configurations. It is important to note that the different graphs are \n\nnot on the same scale. Further information can be found in the following \n\ntables. Table 1 shows the results for the peak density during runtime. \n\nTable 2 presents the total number of steps until the swarm was completely \n\n\n\n84 \n\n \n\ndeactivated. Finally, Table 3 shows the processing time for each \n\nconfiguration. \n\n \nFigure 38 \u2013 Swarm density over time for different energy settings. \n\n \nSource: Author\u2019s own work. \n\n \n\nThe influence of the energy settings over the swarm distribution is \n\nclearly observed in Figure 38. When agents are created with low energy \n\nand require very few unwrapping steps to replicate, the population \n\npresents a very steep slope from the start. Likewise, once the unwrappable \n\npixels are exhausted, the swarm is almost completely deactivated in only \n\na few iterations. In contrast, when agents have a longer lifespan, the \n\npopulation is better distributed over time. There is an initial inertia until \n\nthe swarm grows significantly and the swarm does not deactivate so \n\nquickly. \n\nHowever, the actual values of density will become more important \n\nin later results and it is, thus, important to evaluate the role of these energy \n\nsettings on the agent distribution quantitatively. Table 1 shows how \n\ndisparate the population can be for different settings. For low values of E0 \n\nand ER, the population easily surpasses 20,000 concurrent agents, while \n\n\n\n85 \n\n \n\nhigh values produce at maximum 330 concurrent agents. These numbers \n\nare important for the swarm dynamics explained in Section 4.3.1 like the \n\nambiguity compensation shown in Figure 29 as later experiments will \n\nshow. \n\n \nTable 1 \u2013 Maximum swarm population for each energy configuration. \n\n \nSource: Author\u2019s own work. \n\n \n\nAs aforementioned, the graphs in Figure 38 are not all on the same \n\nscale and that means that the number of cycles required for each energy \n\nsetting is also different. Table 2, when compared to Table 1, shows that \n\nhigher populations achieve, unsurprisingly, the complete operation in \n\nfewer iterations. The number of cycles are relevant to the processing \n\ntimes, as shown in Table 3. \n\n \nTable 2 \u2013 Number of algorithm iterations for each energy configuration. \n\n \nSource: Author\u2019s own work. \n\n \n\nIt is possible to observe in Table 3 that the processing times \n\ndecrease dramatically for higher values of E0 and ER. Apparently, the \n\nhigher number of iterations is overcompensated by the much lower \n\npopulation. It is more useful, then, to count the total number of single \n\nagent\u2019s iterations, i.e. how many times the update function is called. This \n\nis easily assessed by integrating the population over algorithm iterations. \n\n \n\n\n\n86 \n\n \n\nTable 3 \u2013 Total time in milliseconds for each energy configuration. \n\n \nSource: Author\u2019s own work. \n\n \n\nFigure 39 shows how the number of update calls and the processing \n\ntimes are related to each other. It becomes clear that the integral of \n\npopulation over number of iterations is a good indication of how long the \n\nalgorithm takes to process the whole image. Therefore, energy settings \n\nmust be carefully selected in order to achieve satisfactory results in a \n\nreasonable time. \n\n \nFigure 39 \u2013 Correlation between the total number of update calls and processing \n\ntimes. \n\n \nSource: Author\u2019s own work. \n\n \n\nIn order to help the selection of better energy settings, it is useful \n\nto eliminate unreasonable configurations defining some thresholds. One \n\nhundred experiments were performed, ranging E0 from 10 to 300 and ER \n\n\n\n87 \n\n \n\nfrom 0.1E0 to 1.0E0. These results were interpolated and are presented in \n\nFigure 40. It is shown that low replication costs result in high processing \n\ntimes. At the same time, replication costs above 0.3, approximately, have \n\nlittle influence over the processing time. It is possible, then, to select a \n\ngood energy configuration based on a time threshold. However, energy \n\nsettings showed great influence over another important variable, namely \n\nthe maximum coverage. \n\n \nFigure 40 \u2013 Processing times for different energy settings. \n\n \nSource: Author\u2019s own work. \n\n \n\nAs explained in the design requirements discussed in Section 4.1.2, \n\nit is possible for the swarm to deactivate before every unwrappable pixel \n\nis processed. The synthetic image shown in Figure 37 presents pixels with \n\nalmost perfect pseudomodulation. Therefore, unprocessed pixels are due \n\nonly to a faulty coverage by the swarm. It was observed that energy \n\nsettings had a great impact on the swarm\u2019s ability to cover the whole \n\nimage and the same experiments shown in Figure 40 were used to assess \n\nthis impact. \n\nFigure 41 shows the influence of the energy settings over the \n\nmaximum coverage, indicated as a percentage of the image pixels that \n\nwere actually processed. It can be observed that higher values of E0 and \n\nER produce worse coverage. When compared to the previous discussion, \n\nit is clear that smaller populations are unable to cover the whole image as \n\nsuccessfully as higher populations, even though the former require more \n\niterations. It is probably due to the overall density, since denser swarms \n\n\n\n88 \n\n \n\nare less likely to leave unprocessed pixels behind after their random \n\nwalks. Although some applications are not influenced by the loss of a \n\nsmall percentage of data, a better coverage is desired if the processing \n\ntimes are reasonable, even if only for aesthetic purposes. \n\n \nFigure 41 \u2013 Maximum coverage for different energy settings. \n\n \nSource: Author\u2019s own work. \n\n \n\nTherefore, if thresholds are set for both processing times and \n\nmaximum coverage, it is possible to obtain a narrow range of possible \n\nenergy configurations. Figure 42 shows the possible range, represented in \n\nwhite, of configurations that result in processing times faster than 2 \n\nseconds and coverages greater than 99.5%. As previously stated, the \n\npopulation size will influence some collective dynamics and it is useful, \n\nthen, to define presets that result in a variety of population sizes while \n\nobeying the time and coverage threshold. These presets are marked in \n\nFigure 42 and detailed in Table 4. \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n\n\n89 \n\n \n\nFigure 42 \u2013 Energy settings range, in white, for processing times lower than 2 \n\nseconds and maximum coverage above 99.5%. \n\n \nSource: Author\u2019s own work. \n\n \n\nTable 4 \u2013 Energy settings presets and the corresponding results from the \n\nsynthetic image. \n\n \nSource: Author\u2019s own work. \n\n \n\nFinally, it is often preferable to choose larger populations. Figure \n\n43 shows how processing times are related to maximum coverage for \n\ndifferent energy settings. The energy settings are only represented by E0 \n\nas the ER values are indirectly represented by the processing times. From \n\nthe results in Figure 43, it is observed that lower values of E0, and \n\ntherefore larger populations, produce better coverage for the same \nprocessing times. Similarly, larger populations require less time to \n\nachieve the same coverage. Smaller populations will be preferable only \n\nwhen ambiguity compensation becomes more necessary. \n\n \n\n\n\n90 \n\n \n\n \nFigure 43 \u2013 Coverage values against processing times for different energy \n\nsettings. \n\n \nSource: Author\u2019s own work. \n\n \n\n5.1.2 Randomness \n \n\nAs previously discussed, randomness is a fundamental aspect of \n\nswarm-based algorithms. Therefore, the proposed method often presents \n\ndifferent results for different runs under the same configuration. Most of \n\nthe time, these differences are insignificant when compared to the overall \n\nresult. For smaller images with more difficult ambiguous regions, these \n\ndifferences might compromise the reliability and usefulness of the results. \n\nIt has been also observed that these differences depend on the swarm \n\ndensity. Very dense populations will produce the same results more \n\nconsistently because the agents have little room to walk randomly. Sparse \n\npopulations, on the other hand, allow these random walks to differ more \n\nfrom one experiment to the other. \n\nTherefore, the results presented on the next section will be selected \nfrom a set of three sequential experiments at most, if the first ones are not \n\nsatisfactory. The variability of the results will be discussed only \n\nqualitatively. \n \n\n\n\n91 \n\n \n\n5.2 ALGORITHM COMPARISONS \n \n\nIn this section, the proposed method will be tested under several \n\ndifferent circumstances presenting different obstacles to a phase \n\nunwrapping algorithm. These tests not only intend to evaluate the overall \n\nsuccess of the proposed method but to compare it with existing and \n\nestablished algorithms, as explained in Section 4.4. \n\nProcessing times will be presented for the swarm-based algorithm. \n\nHowever, the other algorithms were implemented in different \n\nprogramming environment with different levels of optimization, making \n\nit difficult, therefore, to compare their performances honestly. Still, it is \n\nimportant to note that minimum norm algorithms, such as the tested L0-\n\nnorm method, are slow and usually take a few minutes to unwrap average-\n\nsized images like the ones used in this work. On the other hand, quality-\n\nbased algorithms are usually very fast, unwrapping these images well \n\nunder a second.  \n\nTherefore, processing times will be provided in order to understand \n\nthe influence of the energy parameters and the compromise between \n\nperformance and quality of results. Finally, both path-following methods, \n\ni.e. the quality-based and swarm-based algorithms, will start the \n\nunwrapping operation at the center of the image unless otherwise stated. \n \n\n5.2.1 Synthetic images \n \n\nBefore experimenting with real metrology applications, it is useful \n\nto further experiment with synthetic images. This allows testing the \n\nproposed method under artificial circumstances that highlight a certain \n\naspect of phase unwrapping. For example, ambiguity errors can be \n\nartificially produced to create a difficult unwrapping task to be solved by \n\ndifferent methods and configurations. \n\nFigure 44a shows an example of artificial ambiguity errors. This \n\nimage was firstly created free of errors by wrapping Figure 44b that also \n\nserves as a reference for the unwrapping results. Later, errors were \n\nintroduced in the image to create difficult ambiguous regions. \n\nFigure 44c shows the phase map unwrapped by the quality-based \n\nalgorithm. The propagation of several small errors can be observed. In \n\naddition, some regions with 2? jumps presented lower quality and \n\nresulted in white lines crossing the image. Overall, the quality-based \n\nmethod was successful, despite these errors being always present. \n \n\n\n\n92 \n\n \n\nFigure 44 \u2013 Synthetic image (512x512 pixels) with artificial errors (a), its \n\nunwrapped reference phase map (b) and the unwrapped phase map obtained \n\nwith quality-based (c) and L0-norm (d) algorithms. \n\n \nSource: Author\u2019s own work. \n\n \n\nFigure 44d shows the solution from the L0-norm method. This \n\nmethod is very successful in unwrapping this phase map because it does \n\nnot follow integration paths. Therefore, ambiguity errors are almost \n\ncompletely ignored. This approach represents the other end of the speed \n\nvs. reliability compromise spectrum. \n\nThe results from the swarm-based algorithms are shown in Figure \n45 along with the energy settings used and the processing times. Three \n\npresets defined in Section 5.1.1 were employed first. The first preset, \n\nwhich results in the higher population, was tested first and the best result \n\nfrom 3 consecutive runs is presented in Figure 45a. It can be observed that \n\n\n\n93 \n\n \n\nthe smaller ambiguities were easily suppressed by the collective effort, \n\nconfirming the expectations on the rules interactions discussed in Section \n\n4.3.1 and shown in Figure 29. This suppression is evident when the results \n\nare compared with the other path-following method shown in the previous \n\nfigure. A larger propagation, however, can be found in the upper right \n\nregion of the image, where a much more difficult ambiguity is located. \n\nDue to its high density, the swarm is unable to suppress this error \n\npropagation quickly. \n\n \nFigure 45 - Phase maps unwrapped by the swarm-based algorithm with different \n\nsettings. All operations used a single 0.9 threshold. \n\n \n\n \nSource: Author\u2019s own work. \n\n\n\n94 \n\n \n\nThe influence of the swarm density is clearly shown in Figure 45b \n\nand Figure 45c. With energy settings resulting in less simultaneous \n\nagents, less agents will pass through ambiguities and these are easily \n\ncorrected by the collective behavior. In addition, the processing times are \n\nnot much longer for these settings. \n\nIn order to highlight the influence of swarm sizes, Figure 45d \n\nshows the results for a much larger population. The propagation of the \n\nambiguities becomes much more intense and the variability between \n\nconsecutive runs becomes smaller. Moreover, these settings result in an \n\nunnecessarily high time cost. \n\nPopulation size, however, is not the only parameter to influence the \n\npropagation of ambiguities. The swarm direction changes how these \n\nambiguities are dealt by the agents and it depends mainly on the starting \n\nposition. To better show this, a smaller region of the synthetic image was \n\nselected as shown in Figure 46. This region presents the larger ambiguity \n\nin its upper right corner along with smaller errors. \n\n \nFigure 46 \u2013 Selection of a difficult region from a synthetic image with errors. \n\n \nSource: Author\u2019s own work. \n\n \n\nFigure 47a and \n\nFigure 47b show the unwrapped phase maps for the same settings \n\nbut with two different starting points. It is observable that ambiguities are \n\neasily suppressed for the second swarm positioning. If the ambiguous line \n\nis parallel to the swarm direction, fewer agents will cross it and the ones \n\nthat do are easily corrected by the others. If ambiguities are obvious, \n\nchanging the starting point is an easy solution to problematic phase maps. \n \n\n\n\n95 \n\n \n\nFigure 47 \u2013 Unwrapped solutions from the swarm-based algorithm. The circles \n\nmark the starting pixels. All operations used a single 0.9 threshold. \n\n \n\n \nSource: Author\u2019s own work. \n\n \n\nIt can be also observed that the dependence of the starting point is \n\ndifferent for different population sizes. Figure 47c and Figure 47d show \n\nthe same comparison but with a smaller population. Since the ambiguity \n\nwas easily suppressed on the first case, the starting position shows little \ninfluence. Therefore, changing the starting point is a good solution for \n\nimages that require swarms with a higher density. \n\nFigure 48 shows this same experiment performed with the quality-\n\nbased algorithm. Although this algorithm also depends on the starting \n\n\n\n96 \n\n \n\npoint, both results are greatly corrupted. This is mainly due to the size and \n\nproximity of the larger ambiguity, since its propagation was much more \n\nintense than in Figure 44d. Notwithstanding, these results show the \n\npotential of the swarm-based approach to produce reliable results in \n\nrelatively fast processing times, especially when compared to existing \n\nmethods. \n \n\nFigure 48 \u2013 Quality-based solution for the phase unwrapping of an ambiguous \n\nregion. The circles mark the starting pixels. \n\n \nSource: Author\u2019s own work. \n\n \n\n5.2.2 Fringe projection \n \n\nAlthough synthetic images provide good test subjects for phase \n\nunwrapping algorithms, real applications hold many features that are \n\ndifficult to recreate artificially. These features not only pose new \n\nchallenges for these algorithms but they represent the actual obstacles to \n\nbe overcome by any unwrapping technique intending metrological \n\napplicability.  \n\nFringe projection, for example, is a common measurement \n\ntechnique that requires a phase unwrapping operation. Two objects were \n\nmeasured with this method and the resulting phase maps were used for \n\nthe comparison of the algorithms. Figure 49a shows the wrapped phase \n\nmap for the measurement of a face mannequin. \n \n\n \n \n\n\n\n97 \n\n \n\nFigure 49 \u2013 Wrapped phase map (1624x1224 pixels) from a fringe projection \n\napplication (a) and the phase unwrapped using graycode (b), quality-based \n\nalgorithm (c) and L0-norm algorithm (d). \n\n \nSource: Author\u2019s own work. \n\n \n\nIn fringe projection applications, it is possible to include further \n\ninformation in order to guide the unwrapping operation. The projection \n\nof graycodes informs the unwrapping algorithm in which fringe order \n\neach pixel is, removing all sources of ambiguities [65]. This method was \n\nemployed to obtain a reference phase map, which is shown in Figure 49b. \n\nConventional algorithms, however, must rely only on the \n\ninformation provided by the phase map. Figure 49c shows the unwrapped \n\nphase map from the quality-based algorithm. It can be observed that \n\nalthough the image is relatively noise-free, this algorithm was unable to \n\nprovide a smooth unwrapped phase map. In addition, it is possible to \n\nobserve inconsistent 2? jumps at the right side of the mannequin. Figure \n\n49d shows the smooth results from the L0-norm method. Both these \n\nmethods, however, are incapable of correctly unwrapping surface \n\ndiscontinuities without further information, as later shown. \n\n\n\n98 \n\n \n\nThe results from the swarm-based algorithm are shown in Figure \n\n50. Unlike the synthetic images, these phase maps present whole regions \n\nwithout information, which are left unprocessed by the swarm. In \n\naddition, the swarm size seems to be irrelevant to the quality of results, \n\naffecting only the processing times. There is no apparent benefit of using \n\nsmaller swarms as these were slower to process.  \n\n \nFigure 50 \u2013 Fringe projection phase map unwrapped by the swarm-based \n\nalgorithm. \n\n \nSource: Author\u2019s own work. \n\n \n\nAs already mentioned, these algorithms are unable to interpret \n\nsurface discontinuities without further information. Figure 51 shows the \n\nintensity profile from an arbitrary path for all the tested methods. These \n\nprofiles were normalized and the comparison is purely qualitative. It is \n\nclear that no algorithm was capable of interpreting the discontinuity \n\nbetween the mannequin and the background surface. The swarm-based \n\nalgorithm was, however, able to provide the smoothest results. \n\nAnother experiment was performed with a smooth surface. The \n\nwrapped phase map is shown in Figure 52 along with the phase \n\nunwrapped by the same methods. Once again, the quality-based algorithm \n\nhad trouble unwrapping the phase jumps while the L0-norm provided a \n\nsmooth phase map. \n\nFigure 53 shows the result from the swarm-based algorithm. \n\nSimilarly to the first example, the algorithm easily unwrapped the phase \nmap. There was no need to employ smaller swarms. These results also \n\nshow some potential for application of the proposed method.  \n\n \n\n \n\n\n\n99 \n\n \n\nFigure 51 \u2013 Comparison of the intensity profile along the red line (b) for \n\ndifferent unwrapping techniques. \n\n \nSource: Author\u2019s own work. \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n\n\n100 \n\n \n\nFigure 52 - Wrapped phase map (1624x1224 pixels) from a fringe projection \n\napplication (a) and the phase unwrapped using graycode (b), quality-based \n\nalgorithm (c) and L0-norm algorithm (d). \n\n \nSource: Author\u2019s own work. \n\n \nFigure 53 \u2013 Fringe projection phase map unwrapped by the swarm-based \n\nalgorithm. \n\n \nSource: Author\u2019s own work. \n\n \n \n\n\n\n101 \n\n \n\n5.2.3 Shearography \n \n\nSo far, all the cases presented relatively noise-free phase maps. \n\nSingle thresholds enabled the swarm to reach almost the complete image. \n\nIn addition, swarm sizes had an impact only on the ability to suppress \n\nambiguity propagations and the processing times. Several optical \n\napplications, however, must deal with the presence of noise. \n\nShearography, as explained in Section 2.2.1, uses a random speckle \n\npattern to produce correlation fringes that can be tracked to deformations \n\non the measured surface. This noise-like pattern poses a challenge to \n\nphase unwrapping algorithms and allows further comparisons between \n\nthe proposed approach and established methods. Furthermore, it also \n\nallows the experimentation with different algorithm parameters to better \n\nunderstand the collective behavior. \n\nIt is important to mention that several filters can be applied to \n\nspeckle patterns without significant loss of data. These filters make the \n\nprocessing easier for many phase unwrapping methods. This work \n\nemployed unfiltered images in its comparisons in order to highlight the \n\ndifferences between methods and provide a challenging environment for \n\nthe swarm, allowing several experiments with the tuning of parameters. \n\nIn other words, unfiltered images allow the analysis of noisy \n\nenvironments, regardless of the application, since noise might be an \n\ninherent feature of certain applications, possibly due to constraints of \n\nprocessing times or the risk of losing data. \n\nFigure 54a shows a wrapped phase map from a shearography \n\napplication. Figure 54b shows the phase unwrapped by the quality-based \n\nalgorithm. It is clear from the resulting phase map that this approach is \n\nunable to reliably retrieve the correct phase information from the given \n\nimage. It is mainly due to the algorithm\u2019s nature of lowering its \n\nthresholds. Once the threshold is lowered enough to overcome the local \n\nnoisy boundaries, it will accept unreliable information in future steps. \n\nTherefore, the algorithm soon starts to propagate several errors \n\nthroughout the whole image.  \n\nThe L0-norm algorithm, on the other hand, unwraps the phase \n\nsuccessfully as shown in Figure 54c at the cost of processing time. This \n\nphase map is a good reference to evaluate the swarm-based algorithm\u2019s \n\nsuccess. \n\nThe first experiments with the swarm-based algorithm employed a \n\nsingle threshold at 0.9 and the results are shown in Figure 55. Firstly, the \n\ninfluence of noise over the covered area is noticeable since the same \n\nthresholds parameter are unable to cover more than half the image at best. \n\n\n\n102 \n\n \n\nSecondly, swarm size shows a great influence over the covered area as \n\nwell, reducing it dramatically with smaller populations. Therefore, it \n\nbecomes clear that noisy images require more resilient swarms, i.e. \n\nswarms that have a faster replication rate and unwrap the phase in higher \n\nnumbers. \n\n \nFigure 54 \u2013 Fringe pattern (1280x960 pixels) from a shearography application \n\n(a) and the unwrapped phase from quality-based (b) and L0-norm (c) algorithms. \n\n \nSource: Author\u2019s own work. \n\n \n\nHowever, the algorithm\u2019s threshold can also be tuned to values that \n\nare more appropriate to the current application. Figure 56 shows the \n\nresults for the same image and energy settings but with a lower threshold, \n\nset at 0.8. The influence of the swarm size is even clearer for this \n\nconfiguration, which reinforces the notion that larger populations are \n\nmore appropriate for noisy applications. The result shown in Figure 56a \n\nshows that most of the region with useful information was unwrapped \n\nwithout the propagation of errors similar to those from the quality-based \n\nalgorithm. This result indicates that the quality evaluation of each agent \n\nis indeed reliable, although based on only two pixels at a time. \n\n \n\n\n\n103 \n\n \n\nFigure 55 \u2013 Results for the swarm-based algorithm with a single threshold at \n\n0.9. \n\n \nSource: Author\u2019s own work. \n\n \n\nFor some applications, the area covered in Figure 56a would \n\nsuffice. However, it is important to understand how the swarm could be \n\ntuned in order to process further information. The first option is to \n\nincrease the swarm size by lowering the replication costs. Figure 57a \n\nshows that this approach allows the swarm to process the useful region \n\nalmost completely at the cost of increasing the processing time. The \n\nalgorithm\u2019s reach can be increased by employing more than one \n\nthreshold. \n\n \n\n \n\n \n\n \n\n \n\n \n\n\n\n104 \n\n \n\nFigure 56 - Results for the swarm-based algorithm with a single threshold at \n\n0.8. \n\n \nSource: Author\u2019s own work. \n\n \n\nMultiple threshold are employed by reactivating an agent with a \n\nlower threshold after it deactivates for the lack of unwrapping operations. \n\nIf this agent comes to deactivate again, the threshold is not lowered any \n\nfurther. Figure 57b shows the results from a configuration with two \n\nthresholds. The swarm is indeed capable of unwrapping a larger region \n\nbut increasing the processing times.  \n\nThese first two results would allow most of the necessary \n\ninformation to be extracted and the overall quality shows how successful \n\nthe algorithm can be, especially when compared to the tested quality-\n\nbased algorithm. Even with processing times around a few seconds, this \nmethod is still much faster than the expected times required by minimum-\n\nnorm algorithms as presented in the literature [3, 61]. \n\n \n\n \n\n \n\n\n\n105 \n\n \n\nFigure 57 \u2013 Results from different configurations of the swarm-based algorithm. \n\n \nSource: Author\u2019s own work. \n\n \n\nHowever, if processing times are not critical to the application and \n\nthe whole image must be unwrapped, the swarm-based algorithm\u2019s reach \n\ncan be further extended. Figure 57c shows the results for an even larger \n\npopulation, where the agents are able to replicate after each successful \n\nunwrap operation. Figure 57d shows this same energy setting employed \n\nwith an additional zero-level threshold in order for the swarm to process \n\nevery pixel in the image, independently of its usefulness. \n\nFurther experiments were performed with the phase map shown in \n\nFigure 58. Similarly to the first example, the quality-based algorithm was \n\nunable to process the phase map reliably while the L0-norm method \n\nunwrapped the phase map correctly albeit slowly.  \n\n \n\n \n\n \n\n\n\n106 \n\n \n\nFigure 58 - Fringe pattern (1280x960 pixels) from a shearography application \n\n(a) and the unwrapped phase from quality-based (b) and L0-norm (c) algorithms. \n\n \nSource: Author\u2019s own work. \n\n \n\nThis phase map shows how the energy settings alone can determine \n\nwhere the algorithm will perform on the quality vs. time scale. Figure 59 \n\nshows several results from experiments with an increasing population. \n\nThe first three results are unable to unwrap a large portion of the phase \n\nmap and can be considered unsatisfactory for almost any application. The \n\nlast three configurations, however, are capable of unwrapping the great \n\nmajority of the useful information and offer satisfactory options for many \n\nmetrological purposes. \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n\n\n107 \n\n \n\n \nFigure 59 \u2013 Results from the swarm-based algorithm employing a single \n\nthreshold at 0.8. \n\n \nSource: Author\u2019s own work. \n\n \n\nIt can be also noted that the processing time increases with an \n\nincreasing population. On the first experiments, it is mainly due to the \n\ncovered area that also increases with the population. In other words, the \n\n\n\n108 \n\n \n\nprocessing time depended mainly on how many pixels could be processed \n\nby the swarm.  \n\nOn the later experiments, however, the processing time increases \n\ndramatically while the covered area is almost the same. It can be \n\nconcluded that the algorithm becomes less efficient with very dense \n\nswarms, probably due to an increase of the unnecessary random searches, \n\nand this approach is only appropriate if this little increase on the covered \n\narea is fundamental for a specific application. \n\nFinally, an especially difficult phase map, shown in Figure 60a, \n\nwas also tested and compared. Figure 60b shows the unwrapped phase \n\nmap from the quality-based algorithm and it can be seen that this method \n\nproduces even worse results for this noisy fringe pattern. Similarly to the \n\nlast examples, the L0-norm method was capable of reliably unwrapping \n\nthe map despite the high levels of noise, as shown in Figure 60c. \n\n \nFigure 60 - Fringe pattern (1280x960 pixels) from a shearography application \n\n(a) and the unwrapped phase from quality-based (b) and L0-norm (c) algorithms. \n\n \nSource: Author\u2019s own work. \n\n \n\n\n\n109 \n\n \n\nSeveral experiments were performed with the swarm-based \n\nalgorithm and it was observed that for any threshold above 0.8, the swarm \n\nwas unable to unwrap many pixels before it was completely deactivate. \n\nHowever, even if the threshold was set at 0.8 or lower, the swarm was \n\nunable to grow if the replication cost was 2 or greater. This means that \n\nreliable information was often surrounded by unreliable pixels and the \n\nswarm was only able to cover a large area if it was allowed to replicate \n\nwith every unwrapped pixel it could find. \n\nTherefore, the first configuration able to cover the majority of the \n\nuseful area was a replication cost of 1 with a threshold set at 0.8. The \n\nresult is shown in Figure 61a. It can be observed that this configuration \n\nallowed the propagation of many errors, compromising the resulting \n\nphase map.  \n\nA very particular solution was to employ two thresholds: the first \n\nslightly above the average quality and the second slightly below. In this \n\nmanner, the agents always process the good information first, relying on \n\na lower threshold only after all the good pixels were exhausted. These \n\nagents than travel over pixels with slightly lower quality and replicate \n\nagain in regions with better quality, creating agents that again require a \n\nhigher pixel quality. \n\nThe resulting phase map for this configuration is shown in Figure \n\n61b. The increase in the quality of the information over the first \n\nconfiguration is clear. In addition, the processing time was surprisingly \n\nlower. This example shows how flexible this approach can be, being tuned \n\nfor specific applications after a few quick experiments. \n\n \nFigure 61 \u2013 Results from the swarm-based algorithm. \n\n \nSource: Author\u2019s own work. \n\n \n\n\n\n110 \n\n \n\n5.3 CASE STUDY \n \n\nAs previously explained, the main subject for the proposed method \n\nis the measurement of residual stress fields through the ESPI technique \n\npresented in Section 4.3. This technique generates phase maps similar to \n\nthose from the shearography application, i.e. containing high levels of \n\nnoise and regions without information. Therefore, similar results are \n\nexpected from the swarm-based algorithm. Also similar to the \n\nshearography experiments, these images were unfiltered in order to \n\nhighlight the behavior of the swarm algorithm in comparison to the other \n\nmethods. \n\nThe first experiment was based on the phase map shown in Figure \n\n62a. This map has the region of interest around the machined hole at the \n\ncenter of the image. Despite noisy, the fringes are clear and have a good \n\ncontrast. Figure 62b shows the phase map unwrapped by the quality-\n\nbased algorithm. The results are good as are those from the L0-norm \n\nmethod shown in Figure 62c. \n\n \nFigure 62 \u2013 Wrapped phase map (1600x1200 pixels) from a residual stress \n\nmeasurement (a) and the unwrapped phase map from the quality-based (b) and \n\nL0-norm (c) algorithms. \n\n \nSource: Author\u2019s own work. \n\n\n\n111 \n\n \n\nFigure 63 shows the results from the swarm-based algorithm. The \n\nresults are unlike those from the shearography images because the swarm \n\nsize showed little influence over the covered area. In addition, the region \n\nof interest was unwrapped almost completely for all energy settings. \n\nTherefore, the fastest configuration, i.e. the larger population, could be \n\nemployed without compromising the stress measurement. \n \n\nFigure 63 \u2013 Results from the swarm-based algorithm employing a single \n\nthreshold at 0.9 and the energy presets. \n\n \nSource: Author\u2019s own work. \n\n \n\nNonetheless, it is useful to understand what parameters would \n\nproduce results similarly to the other tested algorithms. The first option is \n\nto increase the swarm size dramatically. The result is shown in Figure \n64a. The image is unwrapped almost completely but at a processing cost \n\nten times greater than necessary. A smaller population is able to produce \n\nsimilar results with faster times as shown in Figure 64b. Figure 64c and \n\nFigure 64d show even slower results that cover a greater area of the image \n\nby employing zero-level thresholds. These options should only be \n\n\n\n112 \n\n \n\nemployed for aesthetic reasons in applications where speed is not critical \n\nbecause most of these regions are useless for the stress measurement \n\napplication. \n\n \nFigure 64 \u2013 Results from the swarm-based algorithm using different energy and \n\nthreshold settings. \n\n \nSource: Author\u2019s own work. \n\n \n\nFigure 65 shows another example of an ESPI phase map and the \n\nunwrapped solution provided by the other two algorithms. Once again, \n\nthese algorithms are able to unwrap the phase map successfully. The same \n\nconfigurations employed by the swarm-based algorithm on the first \n\nexample were tested again. \n \n\n \n\n \n\n\n\n113 \n\n \n\nFigure 65 \u2013 ESPI wrapped phase map (1600x1200 pixels) (a) and the \n\nunwrapped phase maps from the quality-based (b) and L0-norm (c) algorithms. \n\n \nSource: Author\u2019s own work. \n\n \n\nThe results presented in Figure 66 show that, again, larger swarms \n\npresent the best relationship between covered area and processing times. \n\nAlso similar to the first examples are the results shown in Figure 67. \n\nSlightly larger swarms are able to unwrap the great majority of the useful \n\ninformation at the cost of processing speed. The whole image can also be \n\nunwrapped by employing zero-level thresholds. However, these settings \n\nresult in unnecessary processing times and are hardly justifiable. \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n\n\n114 \n\n \n\nFigure 66 - Results from the swarm-based algorithm employing a single \n\nthreshold at 0.9 and the energy presets. \n\n \n\n \nSource: Author\u2019s own work. \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n\n\n115 \n\n \n\nFigure 67 - Results from the swarm-based algorithm using different energy and \n\nthreshold settings. \n\n \nSource: Author\u2019s own work. \n\n \n\nA final example is shown in Figure 68. This phase map contains \n\nmore noise than the first examples and its impact can be observed on the \n\nunwrapped phase map provided by the quality-based algorithm shown in \n\nFigure 68b. The noise caused the algorithm to lower its thresholds to \n\nlevels that propagated errors due to unreliable information. The results \n\nfrom the L0-norm algorithm were, as usual, of high quality. \n\n \n\n \n \n\n \n\n \n\n \n\n\n\n116 \n\n \n\nFigure 68 - Noisy ESPI wrapped phase map (1600x1200 pixels) (a) and the \n\nunwrapped phase maps from the quality-based (b) and L0-norm (c) algorithms. \n\n \nSource: Author\u2019s own work. \n\n \n\nThis phase map posed a good challenge for the swarm-based \n\nalgorithm. As it can be seen in Figure 69a, the usual energy and threshold \n\nsetting were unable to reliably unwrap the image. Not only was the region \n\nof interest sparsely processed, but also many errors were propagated \n\nthrough large portions of the image. Increasing the swarm size enabled \n\nthe algorithm to cover the image completely. However, a single threshold \n\nwas unable to provide good results. \n\nA solution was to approach it like the image presented in Figure \n\n61. By setting two thresholds, one above the average pixel quality and \n\nanother below it, the algorithm was able to reliably unwrap the image \n\nalmost completely. A similar result was given by a single threshold with \n\nmuch a larger swarm, however slower. \n\nThese results show that the proposed method can solve the same \n\nproblematic phase map through very different approaches and that it \n\ndepends highly on the application at hand. Notwithstanding, it showed \n\ngood results when compared to other known algorithms. The algorithm \n\n\n\n117 \n\n \n\nwas able to provide results with a quality similar to those from the L0-\n\nnorm method. \n\n \nFigure 69 - Results from the swarm-based algorithm using different energy and \n\nthreshold settings. \n\n \nSource: Author\u2019s own work. \n\n \n\n5.4 PARAMETER GUIDELINES \n \n\nAs it was observed in these experiments, the swarm-based solution \n\nis extremely flexible. However, it should be tuned to specific applications \n\naccording to the obstacles featured by each specific case. In order to help \n\nwith the selection of the parameters, a simple guide was created and it is \n\nshown in Figure 70. These rough guidelines aim to provide a qualitative \n\nestimation of the energy settings necessary to unwrap a phase map with \n\nreliability and fast processing times.  \n\n\n\n118 \n\n \n\nFor example, images with low noise levels do not require dense \n\npopulations. Therefore, agents with higher replication costs can be easily \n\nemployed. If there are difficult ambiguities to be solved, fewer agents \n\nwith longer lifespans perform better. If both noise and ambiguities are \n\nabsent, e.g. as in fringe projection applications, smaller populations with \n\na short lifespan are able to process the image in the fastest time without \n\ncompromising the results. \n\nFor noisy applications, such as speckle-based techniques, the \n\nagents must be allowed to replicate at a faster rate. Noisier images require \n\ndenser and more resilient swarm. In those cases, the use of multiple \n\nthresholds is also advisable. \n\n \nFigure 70 \u2013 General guidelines for parameter selection and examples of use. \n\n \nSource: Author\u2019s own work. \n\n \n\n \n\n\n\n119 \n\n \n\n  \n\n\n\n120 \n\n \n\n6 CONCLUSIONS \n \n\nThis work proposed a novel method to phase unwrapping based on \n\nthe concept of Swarm Intelligence. Departing from usual SI algorithms \n\nbased on natural swarms, this work applied the fundamental aspects of \n\nemergent behavior to create artificial agents following original rules. \n\nThe methodology adopted to develop a working swarm was highly \n\niterative. It was shown that the artificial swarm approach admit more than \n\none solution. The latest solution was selected to be thoroughly tested and \n\ncompared with existing algorithms. This section will summarize the main \n\nresults from these experiments. \n\n \n\n6.1 PERFORMANCE \n \n\nThe first experiments were based solely on a flawless synthetic \n\nimage, allowing experimentations with user-defined variables in order to \n\nunderstand the dynamics of the emergent behavior. It was observed that \n\nthe initial and replication energy settings have a major influence over the \n\nswarm density, its capability of reaching unwrappable pixels and the \n\nprocessing times. Larger populations are more thorough on their \n\nunwrapping but require longer processing times. Therefore, energy \n\npresets were defined in order to balance coverage and processing costs \n\nand allow different population sizes for later experiments. \n\nSynthetic images with very little noise but difficult ambiguities \n\nwere tested. The results confirmed the expected behavior of ambiguity \n\ncompensations. Unlike the quality-based algorithm tested, the swarm was \n\nable to suppress the propagation of errors even after some agents walked \n\nover ambiguous paths. It was also shown that smaller populations allowed \n\nbetter suppression of errors. \n\nImages obtained through fringe projection were also tested. The \n\nswarm-based algorithm was able to smoothly unwrap the phase map, even \n\nbetter than the quality-based method. However, it shared with the other \n\ntested methods the same limitation when dealing with surface \n\ndiscontinuities. Despite this problem, it was shown that smaller swarms \n\ndid not necessarily unwrap the image faster. \n\nSpeckle-based methods were tested, providing images with high \n\nlevels of noise. Shearography images were tested first and, based on the \n\nresults from the quality-based algorithm, they posed a great challenge to \n\npath-following algorithms. Notwithstanding, the proposed method was \n\nable to successfully unwrap the phase maps after proper tuning of the \n\nenergy and threshold variables. \n\n\n\n121 \n\n \n\nImages from an ESPI application for the measurement of residual \n\nstresses were also experimented. Again, noisy phase maps required more \n\nexperimentations with the swarm parameters. The proposed method was \n\nagain capable of reliably unwrapping the phase map, despite requiring \n\nlonger processing times. \n\nFinally, general guidelines to the selection of parameters were \n\nproposed. These guidelines were based on the characteristics of the tested \n\nimages and the performance results for different energy settings. These \n\nguidelines provide a qualitative indication of good parameters to shorten \n\nthe tests necessary to find the optimal configuration. \n\n  \n\n6.2 CONTRIBUTIONS \n \n\nOverall, the results showed that this work\u2019s objectives were \n\nfulfilled with the successful unwrapped phase maps based on a \n\ncompletely novel approach. The swarm intelligence concept not only \n\nproved to be a feasible method for phase unwrapping, but also showed \n\nthat many solutions can be found and that, perhaps, a better artificial \n\nswarm can still be conceived. \n\nWhen compared to the other path-following algorithm, the swarm-\n\nbased method showed to be often better in terms of quality of results. \n\nAlthough slower, it was still faster than usual processing times required \n\nby minimum-norm algorithms as reported in the literature. Unfortunately, \n\nbetter quality-based algorithms could not be tested and compared. \n\nHowever, this simple comparison is a good evidence of the proposed \n\nmethod\u2019s potential. \n\n \n\n6.3 LIMITATIONS \n \n\nThe swarm-based method showed some limitations when \n\nunwrapping noisy phase maps in terms of processing times. The \n\nnecessary settings, i.e. dense and resilient swarms, were usually slow to \n\nprocess. Until the method is optimized, there are other methods that claim \n\nresults as good as those in this work, but faster. The randomness can also \n\nbe a limitation. For example, for automated applications that rely heavily \n\non reliable phase maps, random propagation of errors could be \n\nproblematic. Finally, the algorithm must be tuned to specific applications. \n\nEven though there are few variables to be adjusted, it is difficult to create \n\none single configuration that reliably unwrap any given phase map. \n\n \n\n \n\n\n\n122 \n\n \n\n6.4 SUGGESTIONS FOR FUTURE ADVANCEMENTS \n \n\nThere are many opportunities for the further development of this \n\nmethod. There is certainly the possibility of designing a completely new \n\nrule set to perform the phase unwrapping. However, the proposed method \n\nalready offers many possible advancements. \n\nFirstly, parallel computing could be implemented in order to speed \n\nup the process. Theoretically, this technique could achieve processing \n\ntimes comparable to the fastest methods current available, overcoming \n\none of the method\u2019s limitations. \n\nIn addition, different methods could be used to evaluate the pixel \n\nquality. As previously explained, quality parameters are better suited to \n\nspecific applications. Therefore, other parameters could be tested, \n\nperhaps achieving even better results. \n\nFinally, there are still many metrological applications that require \n\nphase unwrapping that were left untested. These techniques could provide \n\nfurther challenges to be overcome and grounds to further develop the \n\nalgorithm\u2019s dynamics. \n \n\n6.5 PUBLICATIONS \n \n\nThis work resulted in two publications during the development of \n\nthe presented method. The first paper [59] was presented at the SPIE \n\nConference and published at the Conference Proceedings. This paper was \n\nbased on the first swarm-based solution for phase unwrapping as \n\npresented in Section 4.2. The work was well received at the event. \n\nThe second paper [60] was published on the same date, \n\ncoincidentally, at the Applied Optics journal. It focused on the method \n\nproposed in Section 4.3, i.e. the rule set that was thoroughly tested in this \n\nwork.  \n \n\n  \n\n\n\n123 \n\n \n\n  \n\n\n\n124 \n\n \n\n7 REFERENCES \n \n\n \n\n[1]  G. S. SCHAJER, \u201cHole-drilling residual stress measurement at 75: \n\nOrigins, advances, opportunities,\u201d Experimental Mechanics, vol. \n\n50, pp. 245-253, 2010.  \n\n[2]  M. R. VIOTTI e A. ALBERTAZZI, \u201cCompact sensor combining \n\nDSPI and the hole-drilling technique to measure non-uniform \n\nresidual stress fields,\u201d in SPIE Proceedings, Vigo, 2012.  \n\n[3]  D. C. GHIGLIA e M. D. PRITT, Two-Dimensional Phase \n\nUnwrapping: Theory, Algorithms, and Software, New York: \n\nWiley-Interscience, 1998.  \n\n[4]  E. BONABEAU, M. DORIGO e G. THERAULAZ, Swarm \n\nIntelligence - From Natural to Artificial Systems, New York: \n\nOxford University Press, 1999.  \n\n[5]  T. YOSHIZAWA, Handbook of Optical Metrology: Principles and \n\nApplications, Boca Raton: Taylor &amp; Francis Group, 2008.  \n\n[6]  E. HETCH, Optics, San Francisco: Addison Wesley, 2002.  \n\n[7]  K. J. GASVIK, Optical Metrology, Chichester: John Wiley &amp; Sons, \n\n2002.  \n\n[8]  J. A. LEENDERTZ, \u201cInterferometric displacement measurement \n\non scattering surfaces utilizing speckle effect,\u201d Journal of Physics \nE: Scientific Instruments, vol. 3, pp. 214-218, 1970.  \n\n[9]  M. VIOTTI e A. ALBERTAZZI JR., \u201cIndustrial inspections by \n\nspeckle interferometry: general requirements and a case study,\u201d in \n\nSPIE Proceedings, Munich, 2009.  \n\n[10]  J. A. LEENDERTZ e J. N. BUTTERS, \u201cAn image-shearing \n\nspeckle-pattern interferometer for measuring bending moments,\u201d \n\nJournal of Physics E: Scientific Instruments, vol. 6, pp. 1107-1110, \n\n1973.  \n\n[11]  Y. Y. HUNG e C. E. TAYLOR, \u201cSpeckle-shearing interferometric \n\ncamera -- A tool for measurement of derivatives of surface-\n\ndisplacement,\u201d in SPIE, 1973.  \n\n[12]  S. S. GORTHI e R. P., \u201cFringe Projection Techniques: Whiter we \n\nare?,\u201d Optics and Lasers in Engineering, vol. 48, n\u00ba 2, pp. 133-140, \n2010.  \n\n\n\n125 \n\n \n\n[13]  K. CREATH, \u201cPhase-measurement interferometry techniques,\u201d in \n\nProgress in Optics XXVI, Amsterdam, Elsevier, 1988, pp. 349-393. \n\n[14]  P. HARIHARAN, B. F. OREB e T. EIJU, \u201cDigital phase-shifting \n\ninterferometry: a simple error-compensating phase calculation \n\nalgorithm,\u201d Applied Optics, vol. 26, n\u00ba 13, pp. 2504-2506, 1987.  \n\n[15]  P. CARR\u00c9, \u201cInstallation et utilisation du comparateur \n\nphoto\u00e9lectrique et interf\u00e9rentiel du Bureau International des Poids \n\net Mesures,\u201d Metrologia, vol. 2, n\u00ba 1, pp. 13-23, 1966.  \n\n[16]  M. TAKEDA, H. INA e S. KOBAYASHI, \u201cFourier-transform \n\nmethod of fringe-pattern analysis for computer-based topography \n\nand interferometry,\u201d Journal of the Optical Society of America, vol. \n\n72, n\u00ba 1, pp. 156-160, 1982.  \n\n[17]  K. ITOH, \u201cAnalysis of the phase unwrapping algorithm,\u201d Applied \n\nOptics, vol. 21, n\u00ba 14, p. 2470, 1982.  \n\n[18]  R. M. GOLDSTEIN, H. A. ZEBKER e C. L. WERNER, \u201cSatellite \n\nradar interferometry: Two-dimensional phase unwrapping,\u201d Radio \n\nScience, vol. 23, n\u00ba 4, pp. 713-720, 1988.  \n\n[19]  J. M. HUNTLEY, \u201cNoise-immune phase unwrapping algorithm,\u201d \n\nApplied Optics, vol. 28, n\u00ba 15, pp. 3268-3270, 1989.  \n\n[20]  R. CUSACK, J. M. HUNTLEY e H. T. GOLDREIN, \u201cImproved \n\nnoise-immune phase-unwrapping algorithm,\u201d Applied Optics, vol. \n\n34, n\u00ba 5, pp. 781-789, 1995.  \n\n[21]  J. R. BUCKLAND, J. M. HUNTLEY e S. R. E. TURNER, \n\n\u201cUnwrapping noisy phase maps by use of a minimum-cost-\n\nmatching algorithm,\u201d Applied Optics, vol. 34, n\u00ba 23, pp. 5100-5108, \n1995.  \n\n[22]  C. W. CHEN e H. A. ZEBKER, \u201cNetwork approaches to two-\n\ndimensional phase unwrapping: intractability and two new \n\nalgorithms,\u201d Journal of the Optical Society of America, vol. 17, n\u00ba \n\n3, pp. 401-414, 2000.  \n\n[23]  Z. SEN, Z. HEPING e T. JINSONG, \u201cDendriform branch cut \n\nalgorithm based on minimum spanning tree for phase unwrapping,\u201d \n\nProcedia Engineering, vol. 29, pp. 1154-1159, 2012.  \n\n[24]  M. CONSTANTINI, \u201cA novel phase unwrapping method based on \n\nnetwork programming,\u201d IEEE Transactions on Geoscience and \n\nRemote Sensing, vol. 36, n\u00ba 3, pp. 813-821, 1998.  \n\n\n\n126 \n\n \n\n[25]  S. A. KAROU, M. A. GDEISAT, D. R. BURTON e M. J. LALOR, \n\n\u201cResidue vector, an approach to branch-cut placement in phase \n\nunwrapping: theoretical study.,\u201d Applied Optics, vol. 46, n\u00ba 21, pp. \n\n4712-4727, 2007.  \n\n[26]  A. ALBERTAZZI JR, \u201cRobust phase-unwrapping algorithm for \n\ndiscrete meshes,\u201d in Proceedings of SEM Annual Conference, 1999.  \n\n[27]  M. ZHAO, L. HUANG, Q. ZHANG, X. SU, A. ASUNDI e Q. \n\nKEMAO, \u201cQuality-guided phase unwrapping technique: \n\ncomparison of quality maps and guiding strategies,\u201d Applied \n\nOptics, vol. 50, n\u00ba 33, pp. 6214-6224, 2011.  \n\n[28]  D. J. BONE, \u201cFourier fringe analysis: the two-dimensional phase \n\nunwrapping problem,\u201d Applied Optics, vol. 30, n\u00ba 25, pp. 3627-\n3632, 1991.  \n\n[29]  J. A. QUIROGA, A. GONZ\u00c1LEZ-CANO e E. BERNABEU, \n\n\u201cPhase-unwrapping algorithm based on an adaptive criterion,\u201d \n\nApplied Optics, vol. 34, n\u00ba 14, pp. 2560-2563, 1995.  \n\n[30]  H. LIM, W. XU e X. HUANG, \u201cTwo new practical methods for \n\nphase unwrapping,\u201d in Geoscience and Remote Sensing \n\nSymposium, Firenze, 1995.  \n\n[31]  A. ASUNDI e Z. WENSEN, \u201cFast phase-unwrapping algorithm \n\nbased on a gray-scale mask and flood fill,\u201d Applied Optics, vol. 37, \n\nn\u00ba 23, pp. 5416-5420, 1998.  \n\n[32]  X. SU e W. CHEN, \u201cReliability-guided phase unwrapping \n\nalgorithm: a review,\u201d Optics and Lasers in Engineering, vol. 42, pp. \n\n245-261, 2004.  \n\n[33]  T. J. FLYNN, \u201cConsistent 2-D phase unwrapping guided by a \n\nquality map,\u201d in Proceedings of the 1996 International Geoscience \n\nand Remote Sensing Symposium, Piscataway, 1996.  \n\n[34]  D. C. GHIGLIA e L. A. ROMERO, \u201cMinimum Lp-norm two-\n\ndimensional phase unwrapping,\u201d Journal of the Optical Society of \nAmerica, vol. 13, n\u00ba 10, pp. 1999-2013, 1996.  \n\n[35]  D. C. GHIGLIA, G. A. MASTIN e L. A. ROMERO, \u201cCellular-\n\nautomata method for phase unwrapping,\u201d Journal of the Optical \nSociety of America, vol. 4, n\u00ba 1, pp. 267-280, 1987.  \n\n[36]  K. A. STETSON, J. WAHID e P. GAUTHIER, \u201cNoise-immune \n\nphase unwrapping by use of calculated wrap regions,\u201d Applied \nOptics, vol. 36, n\u00ba 20, pp. 4830-4838, 1997.  \n\n\n\n127 \n\n \n\n[37]  R. YAMAKI e A. HIROSE, \u201cSingularity-spreading,\u201d IEEE \n\nTransactions on Geoscience and Remote Sensing, vol. 45, n\u00ba 10, pp. \n3240-3251, 2007.  \n\n[38]  S. TOMIOKA, S. HESHMAT, N. MIYAMOTO e S. \n\nNISHIYAMA, \u201cPhase unwrapping for noisy phase maps using \n\nrotational compensator with virtual singular points,\u201d Applied \n\nOptics, vol. 49, n\u00ba 25, pp. 4735-4745, 2010.  \n\n[39]  J. M. BIOUCAS-DIAS e G. VALAD\u00c3O, \u201cPhase unwrapping via \n\ngraph cuts,\u201d IEEE Transactions on image processing, vol. 16, n\u00ba 3, \n\npp. 698-709, 2007.  \n\n[40]  H. WANG, F. LIU e Q. ZHU, \u201cImprovement of phase unwrapping \n\nalgorithm based on image segmentation and merging,\u201d Optics \nCommunications, vol. 308, pp. 218-223, 2013.  \n\n[41]  S. KIM e Y.-S. KIM, \u201cTwo-dimensional phase unwrapping using \n\nwavelet transform,\u201d Electronic Letters, vol. 38, n\u00ba 1, pp. 19-20, \n2002.  \n\n[42]  A. P. ENGELBRECHT, Computational Intelligence - An \n\nIntroduction, Chichester: John Wiley &amp; Sons, 2007.  \n\n[43]  C. W. REYNOLDS, \u201cFlocks, herds and schools: a distribuited \n\nbehavioral model,\u201d Computer Graphics, vol. 21, n\u00ba 4, pp. 25-34, \n1987.  \n\n[44]  S. GOSS, S. ARON, J. L. DENEUBOURG e J. M. PASTEELS, \n\n\u201cSelf-organized shortcuts in the Argentine ant,\u201d \n\nNaturwissenschaften, vol. 76, pp. 579-581, 1989.  \n\n[45]  U. KIRCHMEIER, S. HAWE e K. DIEPOLD, \u201cA Swarm \n\nIntelligence inspired algorithm for countour detection in images,\u201d \n\nApplied Soft Computing, vol. 13, pp. 3118-3129, 2013.  \n\n[46]  M. DORIGO, G. DI CARO e L. M. GAMBARDELLA, \u201cAnt \n\nalgorithms for discrete optimization,\u201d Artificial Life, vol. 5, n\u00ba 2, pp. \n\n137-172, 1999.  \n\n[47]  J. KENNEDY e R. EBERHART, \u201cParticle swarm optimization,\u201d \n\nem Proceeding of the IEEE Conference on Neural Networks, Perth, \n\n1995.  \n\n[48]  D. TEODOROVIC, P. LUCIC, G. MARKOVIC e M. DELL' \n\nORCO, \u201cBee Colony Optimization: principles and applications,\u201d in \n\n8th Seminar on Neural Network Applications in Electrical \nEngineering, Belgrade, 2006.  \n\n\n\n128 \n\n \n\n[49]  D. KARABOGA e B. BASTURK, \u201cA powerful and efficienct \n\nalgorithm for numerical function optimization: artificial bee colony \n\n(ABC) algorithm,\u201d Journal of Global Optimization, vol. 39, pp. \n\n549-471, 2007.  \n\n[50]  M. DORIGO e L. M. GAMBARDELLA, \u201cAnt Colony System: a \n\ncooperative learning approach to the Traveling Salesman Problem,\u201d \n\nIEEE Transactions on Evolutionary Computation, vol. 1, n\u00ba 1, pp. \n53-66, 1997.  \n\n[51]  J. E. BELL e S. E. GRIFFIS, \u201cSwarm Intelligence: application of \n\nthe Ant Colony Optimization algorithm to logistics-oriented vehicle \n\nrouting problems,\u201d Journal of Business Logistics, vol. 31, n\u00ba 2, pp. \n\n157-175, 2010.  \n\n[52]  J. GARC\u00cdA-NIETO, E. ALBA e A. C. OLIVERA, \u201cSwarm \n\nintelligence for traffic light scheduling: application to real urban \n\nareas,\u201d Engineering Applications of Artificial Intelligence, vol. 25, \npp. 274-283, 2012.  \n\n[53]  R. S. KADADEVARAMATH, J. C. H. CHEN, B. L. SHANKAR e \n\nK. RAMESHKUMAR, \u201cApplication of particle swarm intelligence \n\nalgorithms in supply chain network architecture optimization,\u201d \n\nExpert Systems with Applications, vol. 39, pp. 10160-10176, 2012.  \n\n[54]  S. A. ETEMAD e T. WHITE, \u201cAn ant-inspired algorithm for \n\ndetection of image edge features,\u201d Applied Soft Computing, vol. 11, \n\npp. 4883-4893, 2011.  \n\n[55]  M. SETAYESH, M. ZHANG e M. JOHNSTON, \u201cEdge detection \n\nusing constrained discrete particle swarm optimisation in noisy \n\nimages,\u201d in IEEE Congress on Evolutionary Computation, New \n\nOrleans, 2011.  \n\n[56]  K. BENATCHA, M. KOUDIL, N. BENKHELAT e Y. BOUKIR, \n\n\u201cAn algorithm for image segmentation using ants,\u201d in IEEE \n\nInternational Symposium on Industrial Electronics, Cambridge, \n2008.  \n\n[57]  X. ZHUANG, G. YANG e H. ZHU, \u201cA model of image feature \n\nextraction inspired by ant swarm system,\u201d in Fourth International \nConference on Natural Computation, Jinan, 2008.  \n\n[58]  T. MIRZAYANS, N. PARIMI, P. PILARSKI, C. BACKHOUSE, \n\nL. WYARD-SCOTT e P. MUSILEK, \u201cA swarm-based system for \n\nobject recognition,\u201d Neural Network World, vol. 15, n\u00ba 3, pp. 243-\n\n255, 2005.  \n\n\n\n129 \n\n \n\n[59]  L. S. MACIEL e A. G. ALBERTAZZI, \u201cApplication of a swarm-\n\nbased approach for phase unwrapping,\u201d in Proceedings of SPIE, \nInterferometry XVII: Techniques and Analysis, San Diego, 2014.  \n\n[60]  L. S. MACIEL e A. G. ALBERTAZZI, \u201cSwarm-based algorithm \n\nfor phase unwrapping,\u201d Applied Optics, vol. 53, n\u00ba 24, pp. 5502-\n\n5509, 2014.  \n\n[61]  E. ZAPPA e G. BUSCA, \u201cComparison of eight unwrapping \n\nalgorithms applied to Fourier-transform profilometry,\u201d Optics and \n\nLasers in Engineering, vol. 46, pp. 106-116, 2008.  \n\n[62]  N. S. ROSSINI, M. DASSISTI, K. Y. BENYOUNIS e A. G. \n\nOLABI, \u201cMethods of measuring residual stresses in components,\u201d \n\nMaterias and Design, vol. 35, pp. 575-588, 2012.  \n\n[63]  P. J. WITHERS e H. K. D. H. BHADESHIA, \u201cResidual stress Part \n\n1 - Measurement techniques,\u201d Materials Science and Technology, \n\nvol. 17, n\u00ba 4, pp. 355-365, 2001.  \n\n[64]  P. J. WITHERS e H. K. D. H. BHADESHIA, \u201cResidual stress Part \n\n2 - Nature and origins,\u201d Materials Science and Technology, vol. 17, \nn\u00ba 4, pp. 366-375, 2001.  \n\n[65]  T. L. F. C. PINTO, Medi\u00e7\u00e3o \u00f3ptica, compara\u00e7\u00e3o e sinaliza\u00e7\u00e3o de \n\nsuperf\u00edcies com forma livre de grande extens\u00e3o, Doctor Thesis - \nFlorian\u00f3polis, 2010."}]}}}