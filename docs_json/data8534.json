{"add": {"doc": {"field": [{"@name": "docid", "#text": "BR-TU.11820"}, {"@name": "filename", "#text": "17243_TESE.pdf"}, {"@name": "filetype", "#text": "PDF"}, {"@name": "text", "#text": "Localization of Field Robots\nUsing RTK-GNSS/INS Systems\n\nDep. of Electrical and Computer Engineering at University of Coimbra\n\nMasters Dissertation in Electrical and Computer Engineering\n\nF\u00e1bio Filipe da Costa Monteiro\n\nSupervisor: Professor Doutor Lino Jos\u00e9 Forte Marques\n\nCo-Supervisor: Professor Doutor Ant\u00f3nio Paulo Mendes Breda Dias Coimbra\n\nJury:\n\nPresident: Professor Doutor Urbano Jos\u00e9 Carreira Nunes\n\nMembers: Professor Doutor Lino Jos\u00e9 Forte Marques\n\nProfessor Doutor Paulo Jos\u00e9 Monteiro Peixoto\n\nSeptember 2016\n\n\n\n\n\nAcknowledgements\n\nFirst of all, I would like to thank my parents, to whom, over the years were always my greatest\n\nsupport, being patient, encouraging, suffering, persevering, and friends. Without their help, this\n\ndissertation would not have been possible. And of course, all the other family members who were\n\nalso interested and concerned about this phase of my life are not forgotten.\n\nI want to manifest a sincerely gratitude to my supervisor, Professor Doutor Lino Marques, for\n\nall his help and guidance that he has given me over the last year. And also to Professor Doutor\n\nAnt\u00f3nio Paulo Coimbra, for his advice and availability since the beginning.\n\nTo my true friends, who appeared in my life in different circumstances, occasions, and places,\n\nspecially the ones that I have met in my early years in Coimbra. To Jo\u00e3o Carlos Horta, that I have\n\nmet in the first year of university, went with me in Erasmus, and we\u2019ve been friends since the first\n\nday.\n\nLast but not least, for everybody that in some way had contributed to this dissertation, I want to\n\nexpress my deepest acknowledgments.\n\n\n\n\n\nResumo\n\nQuando se utiliza robots aut\u00f3nomos umas das tarefas mais importantes \u00e9 estimar a sua locali-\n\nza\u00e7\u00e3o com exatid\u00e3o e precis\u00e3o, e ao mesmo tempo ter no\u00e7\u00e3o de tudo o que o rodeia. O sucesso\n\nde simples tarefas como a navega\u00e7\u00e3o e mapeamento depende bastante do bom conhecimento da\n\nposi\u00e7\u00e3o do robot.\n\nO Sistema de Navega\u00e7\u00e3o por Sat\u00e9lite (GNSS-Global Navigation Satellite System) e o Sistema\n\nde Navega\u00e7\u00e3o Inercial (INS-Inertial Navigation System) s\u00e3o dois sistemas de navega\u00e7\u00e3o muito\n\nusados nos dias de hoje para ajudar a estimar a localiza\u00e7\u00e3o. Ambos os sistemas t\u00eam vantagens e\n\ndesvantagens, mas quando combinados num sistema \u00fanico de navega\u00e7\u00e3o GNSS/INS, permite-nos\n\ncombinar as vantagens de ambos os sistemas.\n\nNesta Tese de Mestrado v\u00e3o ser explicados os principais problemas presentes em cada um\n\ndestes sistemas de navega\u00e7\u00e3o e como os podemos reduzir. \u00c9 tamb\u00e9m explicado e implementado um\n\nsistema de fus\u00e3o dos dois sistemas, de modo a obtermos uma solu\u00e7\u00e3o com maior precis\u00e3o. Por fim\n\nno ultimo cap\u00edtulo, o sistema que foi implementado \u00e9 testado e comparado com outros Receptores\n\nGNSS que se encontram \u00e0 venda no mercado com pre\u00e7os e caracter\u00edsticas bastante diferentes.\n\nPalavras-Chave: GNSS, RTK, IMU, Kalman, ROS\n\n\n\n\n\nAbstract\n\nWhen dealing with autonomous robots one of the most important tasks is to estimate an accurate\n\nand precise localization of the robot and his surroundings. The success of simple tasks as navigation\n\nand mapping depend on a good robot\u2019s position knowledge.\n\nThe Global Navigation Satellite System (GNSS) and the Inertial Navigation System (INS)\n\nare two navigation systems commonly used nowadays that can be used to determine the robot\u2019s\n\nlocalization. Both systems have advantages and disadvantages, but they can complement each other\n\nwhen fused together in a GNSS/INS Navigation System.\n\nIn this dissertation, it is going to explain the main problems when using this type of systems and\n\nhow to reduce them. It\u2019s also explained and implemented a data fusion of both systems in order to\n\nachieve a higher precision. In the last chapter the implemented fusion is tested, and compared with\n\nothers GNSS receivers available in the market with different prices and characteristics.\n\nKeywords: GNSS, RTK, IMU, Kalman, ROS\n\n\n\n\n\nContents\n\nList of Figures iii\n\nList of Tables v\n\nAcronyms vii\n\n1 Introduction 1\n\n1.1 Motivation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1\n\n1.2 Objectives . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 3\n\n1.3 Goals and Research Questions . . . . . . . . . . . . . . . . . . . . . . . . . . . . 5\n\n1.4 Outline . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 6\n\n2 Localization 7\n\n2.1 Global Navigation Satellite System (GNSS) . . . . . . . . . . . . . . . . . . . . . 9\n\n2.1.1 GNSS Receivers . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 10\n\n2.1.2 GPS Operation Principle . . . . . . . . . . . . . . . . . . . . . . . . . . . 10\n\n2.1.3 GPS Observables . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 11\n\n2.1.4 Real Time Kinematic . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 14\n\n2.1.5 Multipath . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 15\n\n2.1.6 User Equivalent Range Error (UERE) . . . . . . . . . . . . . . . . . . . . 16\n\n2.2 Inertial Navigation System (INS) . . . . . . . . . . . . . . . . . . . . . . . . . . . 16\n\n2.2.1 Inertial Measurement Units . . . . . . . . . . . . . . . . . . . . . . . . . . 16\n\n2.2.2 MEMS Accelerometer/Gyroscope Error Characteristics . . . . . . . . . . . 19\n\n2.2.3 MEMS Magnetometer Error Characteristics . . . . . . . . . . . . . . . . . 20\n\n3 GNSS/INS Data Fusion 23\n\n3.1 Experimental Applications in the Literature . . . . . . . . . . . . . . . . . . . . . 25\n\n3.2 Extended Kalman Filter . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 26\n\n3.3 System Dynamics Model . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 28\n\ni\n\n\n\n3.4 Measurement Model . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 30\n\n3.4.1 GNSS Data . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 30\n\n3.4.2 INS Data . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 30\n\n3.4.3 Complete Model . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 31\n\n3.5 Other Platform Models . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 32\n\n3.5.1 Differential Drive Steering . . . . . . . . . . . . . . . . . . . . . . . . . . 32\n\n3.5.2 Skid Steering . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 33\n\n3.5.3 Ackerman Steering . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 34\n\n4 Experimental Results 35\n\n4.1 INS Implementation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 35\n\n4.2 RTK GNSS Implementation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 37\n\n4.3 GNSS/INS Integration . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 42\n\n4.4 RTK-GNSS/INS Integration . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 49\n\n5 Conclusion and Future Work 59\n\n6 Appendixes 61\n\nAppendix A Connections Diagram 63\n\nAppendix B Allan Variance 65\n\nAppendix C Coordinate Frames and Earth Models 71\n\nAppendix D System Dynamics Model Matrixes 73\n\nAppendix E RTKLIB 75\n\nAppendix F u-blox Base Station 24 Hours Post Processing Results 79\n\nAppendix G Septentrio Base Station 24 Hours Post Processing Results 85\n\nAppendix H GNSS/INS Integration 91\n\nAppendix I RTK-GNSS/INS Integration 93\n\nBibliography 95\n\nii\n\n\n\nList of Figures\n\n1 Position Estimation Block Diagram . . . . . . . . . . . . . . . . . . . . . . . . . 3\n\n2 Triangulation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 7\n\n3 Trilateration . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 8\n\n4 Multilateration . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 8\n\n5 u-blox NEO-6P and Septentrio AsteRx4 GNSS Receivers . . . . . . . . . . . . . . 10\n\n6 GPS Code Pseudorange . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 12\n\n7 GPS Carrier Phase . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 13\n\n8 GNSS Multipath Errors . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 15\n\n9 InvenSense MPU-9150 and Xsens MTi-G . . . . . . . . . . . . . . . . . . . . . . 17\n\n10 Loosely Coupled Integration . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 23\n\n11 Tightly Coupled Integration . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 24\n\n12 Differential Drive Steering . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 32\n\n13 Ackerman Steering . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 33\n\n14 Ackerman Steering . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 34\n\n15 MPU-9150 Accelerometer/Gyroscope and Magnetometer Axes Orientation . . . . 36\n\n16 RTK-GNSS Connection Diagram . . . . . . . . . . . . . . . . . . . . . . . . . . 38\n\n17 Real Time Kinematic - Base Stations . . . . . . . . . . . . . . . . . . . . . . . . . 39\n\n18 Aluminium Bar used in the Rover . . . . . . . . . . . . . . . . . . . . . . . . . . 40\n\n19 Septentrio (left) and u-blox (right) Base Stations Position Random Walk . . . . . . 41\n\n20 Septentrio PolaNt-x MF (left), Trimble Bulet GG (center), Xsens MTi-G (right) . . 41\n\n21 Antenna Quality SNR Test . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 42\n\n22 Overview of the route travelled . . . . . . . . . . . . . . . . . . . . . . . . . . . . 43\n\n23 Vehicle Speed and Number of Satellites . . . . . . . . . . . . . . . . . . . . . . . 45\n\n24 Latitude, Longitude and Altitude - 1 Sigma Errors . . . . . . . . . . . . . . . . . . 46\n\n25 Detailed view from part of the route - 1 - u-blox (left) and Septentrio (right) . . . . 47\n\n26 Latitude 1 Sigma Errors - Zoomed Version . . . . . . . . . . . . . . . . . . . . . 47\n\n27 Detailed view from part of the route - 2 - u-blox (left) and Septentrio (right) . . . . 48\n\niii\n\n\n\n28 GNSS Receivers Fix Quality . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 48\n\n29 Low Speed Test - Velocity reported by the Septentrio AsteRx4 Receiver . . . . . . 49\n\n30 Low Speed Test - Satellite Image . . . . . . . . . . . . . . . . . . . . . . . . . . . 49\n\n31 Low Speed Test - 1 Sigma Error . . . . . . . . . . . . . . . . . . . . . . . . . . . 50\n\n32 RTK Vehicle Speed and Number of Satellites . . . . . . . . . . . . . . . . . . . . 51\n\n33 Detailed view from part of the route - 3 - RTK u-blox . . . . . . . . . . . . . . . . 52\n\n34 Detailed view from part of the route - 4 - RTK u-blox (left) and RTK Septentrio\n\n(right) . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 52\n\n35 RTK GNSS Receivers Fix Quality . . . . . . . . . . . . . . . . . . . . . . . . . . 53\n\n36 RTK Latitude, Longitude and Altitude - 1 Sigma Errors . . . . . . . . . . . . . . . 54\n\n37 RTK Longitude 1 Sigma Errors - Zoomed Version . . . . . . . . . . . . . . . . . 54\n\n38 Latency between the Base Stations and the Rover, RTK Correction Age . . . . . . 55\n\n39 Detailed view from part of the route - 5 - RTK u-blox . . . . . . . . . . . . . . . . 55\n\n40 u-blox Satellite Cycle-Slips, Base Station (left) and Rover (right) . . . . . . . . . . 56\n\n41 u-blox Residuals (left) and Position Estimation (right) . . . . . . . . . . . . . . . . 56\n\n42 RTK Low Speed Test - Velocity reported by the Septentrio AsteRx4 Receiver . . . 57\n\n43 RTK Low Speed Test - Satellite Image . . . . . . . . . . . . . . . . . . . . . . . . 57\n\n44 RTK Low Speed Test - 1 Sigma Error . . . . . . . . . . . . . . . . . . . . . . . . 58\n\n45 Rover Connections Diagram . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 63\n\n46 Base Station Connections Diagram . . . . . . . . . . . . . . . . . . . . . . . . . . 63\n\n47 Allan Variance Plot . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 65\n\n48 Allan Variance for Raw Accelerometer Data . . . . . . . . . . . . . . . . . . . . . 69\n\n49 Allan Variance for Raw Gyroscope Data . . . . . . . . . . . . . . . . . . . . . . . 70\n\n50 ECI and ECEF Coordinates . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 71\n\n51 GNSS Cycle Slip . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 77\n\niv\n\n\n\nList of Tables\n\n1 Number of operational satellites per constellation (Sep. 2016) . . . . . . . . . . . 9\n\n2 GPS User Equivalent Range Error . . . . . . . . . . . . . . . . . . . . . . . . . . 16\n\n3 Alternative IMUs Specifications . . . . . . . . . . . . . . . . . . . . . . . . . . . 17\n\n4 Alternative IMUs Specifications . . . . . . . . . . . . . . . . . . . . . . . . . . . 35\n\n5 GNSS Receivers Specifications . . . . . . . . . . . . . . . . . . . . . . . . . . . . 38\n\n6 Base Station Broadcasted Messages . . . . . . . . . . . . . . . . . . . . . . . . . 39\n\n7 Base Stations Estimated Position - 24Hours Post-Processing . . . . . . . . . . . . 40\n\n8 Rover - Aluminium Bar Position Offsets . . . . . . . . . . . . . . . . . . . . . . . 42\n\n9 Allan Variance - Accelerometer Data from MPU #1 . . . . . . . . . . . . . . . . . 67\n\n10 Allan Variance - Accelerometer Data from MPU #2 . . . . . . . . . . . . . . . . . 67\n\n11 Allan Variance - Accelerometer Data from Xsens MTi-G . . . . . . . . . . . . . . 67\n\n12 Allan Variance - Gyroscope Data from MPU #1 . . . . . . . . . . . . . . . . . . . 67\n\n13 Allan Variance - Gyroscope Data from MPU #2 . . . . . . . . . . . . . . . . . . . 68\n\n14 Allan Variance - Gyroscope Data from Xsens MTi-G . . . . . . . . . . . . . . . . 68\n\nv\n\n\n\nvi\n\n\n\nAcronyms\n\nADC Analog-to-Digital Converter\n\nAHRS Attitude and Heading Reference System\n\nDD Double Differences\n\nDGPS Differential Global Positioning System\n\nDOF Degrees of Freedom\n\nECEF Earth-Centered-Earth-Fixed\n\nECI Earth-Centered-Inertial\n\nEKF Extended Kalman Filter\n\nEMI Electromagnetic Interference\n\nENU East-North-Up\n\nGNSS Global Navigation Satellite System\n\nGPS Global Positioning System\n\nIEEE Institute of Electrical and Electronics Engineers\n\nILS Integer Least Square\n\nIMU Inertial Measurement Unit\n\nINS Inertial Navigation System\n\nLLI Loss of Lock Indicator\n\nLTE Long-Term Evolution\n\nvii\n\n\n\nMEMS MicroElectroMechanical Systems\n\nNED North-East-Down\n\nNMEA National Marine Electronics Association\n\nNWU North-West-Up\n\nPPP Precise Point Positioning\n\nPRN Pseudorandom Noise\n\nRINEX Receiver Independent Exchange Format\n\nRTCM Radio Technical Commission for Maritime Services\n\nRTK Real Time Kinematic\n\nSBAS Satellite-Based Augmentation System\n\nSD Single Differences\n\nSPS Standard Positioning Service\n\nTDOA Time Difference of Arrival\n\nUAV Unmanned Aerial Vehicles\n\nUERE User Equivalent Range Error\n\nviii\n\n\n\n1. Introduction\n\n1.1. Motivation\n\nIn the last decades, research in autonomous vehicles has been growing and involving more and\n\nmore people due to their vast application potentials. Every year more mobile robots and electronic\n\ndevices are joining our daily life.\n\nThe improvements made in the processing power and the size reduction in the microcontrollers\n\nand similar processing boards, allowed the field of robotics to boost tremendously. These au-\n\ntonomous vehicles can have a tremendous importance for field robots and they can perform tedious\n\nand dangerous tasks to humans, with faster response times or in situations without human access.\n\nThey can be used in scientific experiments using autonomous boats to patrol rivers, gathering\n\nwater parameters and perform bathymetry studies [Fraga et al., 2013]. In military operations using\n\nautonomous drones to perform mapping and surveillance of critical areas. Or in an opposite sense,\n\nto clear post-combat regions of land mines using the robots to map wide areas without human\n\ninteraction [Cabrita et al., 2015]. To perform planetary exploration with mission like the Mars\n\nExploration Rovers, that uses autonomous robots to land, explore, and study the geology of the\n\nMartian surface. And of course, the most actual contest that every big brand in the tech and mobile\n\nvehicles manufacturers is trying to win, to create a true self driving car.\n\nWhen these robots navigate outdoors they suffer from the unpredictability of everything that\n\nsurround them. Objects that were stationary one moment ago, can start moving and becoming\n\nobstacles. Sometimes these objects have different contours than what we expect and out of the\n\nsensors range, which will lead to difficult situations for the robot to handle. The terrain conditions\n\ncan change from day to day and undergo interactions by humans and weather conditions, making an\n\neasily travelled routed today inaccessible tomorrow. All these problems make outdoors navigation\n\na lot more difficult than what we normally find indoors.\n\nIn order to be truly called autonomous, these robots must be able to sense its environment,\n\nnavigate without human input, and be able to complete their tasks. To performing such critical tasks,\n\none of the most important aspects needed for these robots is an accurate and repetitive localization.\n\n1\n\n\n\nOn many critical occasions it is not allowed for a robot to drive by the same place twice and report\n\ndifferent positions for that place, as such situation can lead catastrophic results.\n\nA localization can be referred as an absolute or relative position depending on our reference\n\npoint and the type of measurements that we are making. If our starting position is just a random\n\npoint that we can\u2019t define its position globally, then our measurements will be relative to the\n\nreference point and known as a relative position. On the other hand, if we are starting from a\n\nreference point that we know the global position or using sensors providing global positioning, then\n\nwe can call the position absolute.\n\nSome of the most common techniques used to estimate a position include the odometry, the\n\nGlobal Navigation Satellite System (GNSS), and the Inertial Navigation System (INS). From\n\nall these systems, the only one that can obtain a truly absolute position is the GNSS, but at the\n\nsame time it relies on third party services which can be disabled or the satellites it depends on be\n\ntemporarily occluded by obstacles.\n\nMost GNSS receivers commonly used in commercial applications have an User Equivalent\n\nRange Error (UERE) accuracy of about 6 meters within a 3? deviation provided the measurements\n\nare under optimal conditions, and have low update rates. With this performance, these systems\n\nalone are not suitable to be used in robots and therefore other techniques need to be used.\n\nTo improve the position estimation, one should reduce the errors associated with the GNSS\n\nreceivers and at the same time implement an Inertial Navigation System, so that our new positioning\n\nsystem can have two independent measurements sources. As the INS can provide higher accuracy\n\nin the short-term and also good update rates, the estimated position obtained from the data fusion\n\nhas the advantage of being accurate in short and long term, and at the same time have good update\n\nrates for a robot to navigate dynamically.\n\n2\n\n\n\nFigure 1: Position Estimation Block Diagram\n\n1.2. Objectives\n\nThe purpose of this dissertation is to search and implement a sensor fusion algorithm that can com-\n\nbine the absolute measurements obtained from the GNSS receivers with the relative measurements\n\nfrom Inertial Sensors, in order to improve the accuracy of the estimated position. Before presenting\n\nthe data fusion, both technologies are explained and their most common errors investigated as well\n\nas some techniques that can minimize them.\n\nThis dissertation will mainly focus on the blue block shown in Figure 1. The prime idea of this\n\nestimation block is that it will only deal with the GNSS and INS measurements, and predict an\n\naccurate position that can then be fed to a speed control and path planning algorithm.\n\nThe State of the Art in localization systems hasn\u2019t changed a lot in the latest years. Cost-\n\neffective systems with good accuracy have become more common due to advances in technology\n\nand consequently the price dropped, however these technologies have been used in high quality\n\nsystems for some time.\n\nThe simplest technique to obtain an absolute positioning is to use a GNSS receiver, however\n\nthese type of devices have some disadvantages. Firstly, they need sky view to be able to receive\n\nthe satellite signals, therefore indoor usage is out of the question. Secondly, GNSS receivers\n\nhave low update rate. Most receivers have updates rates between 1 and 5Hz, which in systems\n\nwith fast dynamics can become problematic. Thirdly, the measurement errors are usually in the\n\norder of 3 meters even when the system is in a good environment. These last two errors can be\n\nattenuated when using higher quality receivers. Devices ranging from 300 C to 15.000 C can reduce\n\nthe measurements errors to near half a meter by tracking more satellites, using multiple frequencies\n\nand antennas, different measuring techniques, and have update rates up to 100Hz.\n\nTo obtain solutions with higher accuracy it\u2019s necessary to implement algorithms as the Real\n\nTime Kinematic (RTK). This technique is able to overcome the errors inherent from the GNSS\n\nReceivers, allowing an accuracy up to a few centimeters when the system is operating in good\n\nconditions. To implement these kind of solutions and obtain low measurements errors, it\u2019s necessary\n\nto use two GNSS receivers operating within an area of 20 km, and with both receiver communicating\n\nbetween them. Theoretically, as both receivers are under similar conditions the errors arriving at\n\n3\n\n\n\nthem are also similar and can cancel each other out. Low cost solutions with low update rates can\n\nbe purchased from 1.000 C, and higher quality ones can go up to 50.000 C.\n\nAll these GNSS receivers and techniques suffer from a common problem, which is the satellite\n\navailability. If the receiver is near trees, high buildings, under bridges, or near other kind of\n\nobstacles that can momentarily block the satellite signals, the errors in the solution will start to\n\nincrease.\n\nTo avoid these errors, started to appear localization system with multiple measurement sources\n\nand fusing them all together. These type of solutions depend highly from the environment the\n\nsystem is going to be used. Ground vehicles with wheels can fuse the GNSS measurements with\n\nWheel Odometry, Marine vehicles can have measurements from Doppler Sonars, Unmanned Aerial\n\nVehicless (UAVs) also have cameras and Visual Odometry. Simultaneously it can also be used an\n\nInertial Measurement Unit which is more versatile to all applications, as the sensor can provide\n\ninformation about linear acceleration, angular velocity, and orientation. The improvement and price\n\ndrop in Microelectronic Mechanical Systems (MEMS) devices allowed the introduction of Inertial\n\nMeasurement Units to the localization systems. As the MEMS IMUs are usually cheap and have\n\ngood update rates they are a good complement to GNSS receivers. Of course as in all the devices,\n\nhigher quality MEMS IMUs with low measurements errors and drift rates can cost thousands of\n\nEuros.\n\nThe information from all these devices is then combined through a data fusion algorithm to estimate\n\na single and accurate solution. The most common fusion algorithm is the Extended Kalman Filter\n\n[Fraga, 2012; Kelly, 1994; Lopes, 2011], however there are other possible fusion algorithms, such\n\nas the Unscented Kalman Filters (UKF) [Crassidis, 2006; Gustafsson, 2014], State-Dependent\n\nRiccati Equations (SDRE) [Nemra and Aouf, 2010], Particle Filters [Gustafsson, 2010], and the\n\nExtended or Unscented Rauch-Tung-Striebel smoother Algorithm [Elisson and Gassler, 2014].\n\nIn conclusion, a localization system using a RTK-GNSS Receiver fusing the measurements of\n\nan IMU and if possible other sensors can produce a final single solution without the three main\n\nproblems described previously. The RTK-GNSS gives us an accurate solution in good sky view\n\nconditions, the introduction of an IMU to the system allows us to remove the problems from the\n\nsatellite miscommunication, and temporary indoors trajectories.\n\n4\n\n\n\n1.3. Goals and Research Questions\n\nWhen starting a project like this there is always questions that we ask ourselves and that we research\n\nin order to find the best answers. Some of them ended up having easy answers, other ones not so\n\nmuch. Here are some of them,\n\n\u2022 How can I measure the accuracy of a localization system?\n\n\u2022 What accuracy can I expect when using a budget GNSS receiver? Does a moving receiver\n\nloses a lot of accuracy when compared to a stationary?\n\n\u2022 Should I go for RTK GNSS receivers or a GNSS/INS Sensor?\n\n\u2022 If I want to upgrade my GNSS receivers, how does the accuracy improves based on the cost\n\nof the receiver? Do I get a better sensitivity? Better update rates? The ability to track new\n\nconstellations? Integration with the information of other sensors?\n\n\u2022 And if I want to upgrade my inertial sensors, does the accuracy improves based on the cost of\n\nthe sensor? Do I get a better sensitivity? Better update rates? Lower random walks? Better\n\nupdate rates?\n\n\u2022 How does the measurements errors from these sensors evolve over time? And what can I do\n\nto minimize them?\n\n5\n\n\n\n1.4. Outline\n\nThis dissertation is divided into 6 chapters. The First Chapter, contains a brief introduction to\n\nthis project, explains the main sections where the dissertation is going to focus, and the existing\n\nlocalization methods. Chapter Two, describes the two Navigation Systems used: the Global\n\nNavigation Satellite System and the Inertial Navigation System. Some of the most common errors\n\nthat can be expected when using these type of navigations are explained as well as the materials that\n\nare going to be used during this dissertation. In Chapter Three explains the various types of data\n\nfusion, cites similar projects, and the implemented Data Fusion Algorithm. Chapter Four shows\n\nus the results of the implemented algorithm compared with other solutions on the market. Chapter\n\nFive is the conclusion, where some ideas are given for future work and how the implemented data\n\nfusion could be improved. It also describes some of the challenges found during this dissertation.\n\nFinally, Chapter Six it\u2019s composed by all the extra information in the appendices.\n\n6\n\n\n\n2. Localization\n\nThis chapter covers the two types of navigation systems that are going to be used during this\n\ndissertation. It will list the electronics used, their characteristics, and similar devices that could be\n\nused as an alternative to improve the accuracy of the localization. It will also explain how both\n\nsystems work, their most common errors and how to minimize them so the whole system can be\n\nmore accurate. Finally, it demonstrate how both navigation systems were implemented.\n\nWhen trying to choose the most appropriate localization system to implement, it\u2019s important\n\nto understand how the different localization methods obtain their measurements. Most of the\n\nlocalization systems can be divided in the following categories: Triangulation, Trilateration, and\n\nMultilateration.\n\nTriangulation, consists in the process of determining the localization of a position by measuring\n\nthe angles formed by known landmarks. It\u2019s the first localization method known and it\u2019s being\n\nused by the man since the antiquity, in situation as to find the height of the pyramids, or in nautical\n\nnavigation using instruments as the sextant and the astrolabe (See Figure 2). Nowadays it can be\n\nimplemented with multiple cameras to estimate a 3D position.\n\nIf we wants to measure the distance d or h using triangulation, we start by creating a triangle\n\nwith a known baseline distance S = A?B, measure the angles formed by ? and ? , and the unknown\n\ndistance can be found using\n\nd = S \u00b7\nsin ? sin ?\nsin(? + ? )\n\nh = S \u00b7\nsin ? sin ?\nsin(? ?? )\n\n(1)\n\nFigure 2: Triangulation\n\n7\n\n\n\nFigure 3: Trilateration\n\nTrilateration, consists in the process of determining\n\nthe localization of a position by measuring the distance\n\nto known landmarks using the geometry of circles and\n\nspheres (See Figure 3).\n\nThis is the method used by GNSS Receivers to esti-\n\nmate a localization on earth. If the receiver can track three\n\nsatellites, then three theoretical spheres are created on the\n\nearths surface and their intersection represent the Latitude\n\nand the Longitude (2D Fix) of the receiver. If more satel-\n\nlites are being tracked by the receiver, then the solution\n\ncan be estimated by more spheres and the receiver can\n\nevaluate the Latitude, Longitude, and Altitude (3D Fix).\n\nThe position can be estimated in a 2D plane, using three spheres with centres P1,P2,P3, and\n\nradii r1,r2,r3. The equations for the three spheres are represented by\n\nr21 = x\n2 + y2 + z2, r22 = (x?d)\n\n2\n+ y2 + z2, r23 = (x?i)\n\n2\n+(y? j)2 + z2 (2)\n\nThe intersection point located at (x,y,z) that satisfies all three equations, can be found using,\n\nx =\nr21 ?r\n\n2\n2 + d\n\n2\n\n2d\n\ny =\nr21 ?r\n\n2\n3 + i\n\n2 + j2\n\n2 j\n?\n\ni\nj\nx\n\nz =\u00b1\n?\n\nr21 ?x2 ?y2\n\n(3)\n\nFigure 4: Multilateration\n\nMultilateration, consists in the process of determin-\n\ning the localization of a position by measuring the Time\n\nDifference of Arrival (TDOA) of a broadcasted signal at\n\nmultiple stations with known locations. The principle is\n\nquite similar to trilateration, except that now the triangles,\n\ncircles, and spheres, are replaced by a hyperbola (2D), or\n\na hyperboloid (3D) (See Figure 4).\n\nTo obtain an accurate position it\u2019s also needed at least\n\nfour stations, however the receivers don\u2019t need to know\n\nthe instant the signal was broadcasted and hence there is no need for time synchronisation among\n\ntransmitters and receivers. This method is commonly used to estimate the airplanes position.\n\nConsidering the emitter\n??\nE = (x,y,z), and multiple receivers\n\n??\nPi = (xi,yi,zi), the distance between\n\n8\n\n\n\nthem is given by\n\nRi =\n?????Pi ???E ??? = ?(xi ?x)2 +(yi ?y)2 +(zi ?z)2 (4)\n\nIf we have a receiver placed at the origin, its distance becomes\n\nR0 =\n?\n\nx2 + y2 + z2 (5)\n\nWhich can also be found using the broadcasted wave speed (?), and the transmitting time (Ti).\n\nTherefore, the TDOA equation for receivers Pi and P0 is\n\n? ?i = ? Ti ?? T0\n\n? ?i = Ri ?R0\n(6)\n\nEquation 6 is the hyperboloid described previously, and when using 4 receivers it leads to 3\n\nnon-linear equations that allows to solve the three unknown values (x,y,z).\n\n2.1. Global Navigation Satellite System (GNSS)\n\nA GNSS is a localization method based on signals transmitted from satellites that are in orbit\n\naround the Earth. These signals are received by GNSS receivers and their messages decoded into\n\ninformation such as localization, speed, and time.\n\nThe most common system used nowadays, is the Global Positioning System (GPS) which is\n\nowned by the United States Department of Defense, but can be used freely by civilians and militaries\n\n[NAVSTAR, 2008]. As the GPS is owned by the EUA and can be deactivated if they choose to\n\ndo so, other countries started to develop their own systems. Russia come up with the GLONASS,\n\nChina with the BeiDou, and the European Union with the Galileo project, which aims to provide\n\nan independent high precision positioning system, that can not be disabled by governments. As\n\nsome of the systems are relatively new their number of satellites is still low, which means that some\n\nplaces on earth can lack the visibility of their satellites (See Table 1).\n\nThese systems transmit their signals using multiple frequencies and different modulations,\n\nexplaining them all in this dissertation would require a lot of time and would make the document\n\nrather extensive. Therefore, in the next sections it will only be explained the most common one,\n\nthe Global Positioning System (GPS). For more informations on how these systems work there are\n\ngood books explaining them, such as [Jeffrey, 2010] and [Petrovski, 2014].\n\nTable 1: Number of operational satellites per constellation (Sep. 2016)\n\nSystem GPS GLONASS BeiDou Galileo\nSatellites 31 23 21 12\n\n9\n\n\n\n2.1.1. GNSS Receivers\n\nThe GNSS receivers are the main devices used to estimate a position of field platforms as they can\n\nprovide absolute localization.\n\nDuring this dissertation were used two u-blox NEO-6P receivers, and two Septentrio AsteRx4\n\nreceivers (Figure 5). The u-blox were chosen because they are inexpensive and can receive Raw\n\nObservable Messages from the satellites, which allows to use a technique known as Real Time\n\nKinematic (RTK) Satellite Navigation. This technique consists of using two receivers at the same\n\ntime, compare the signals from both receivers and cancel the common errors. The Septentrio are\n\nhigher quality receivers that can track all satellite constellations, receives signals from multiple\n\nfrequencies, has better updates rates, and better precision. The technical specifications for both\n\nreceivers will be explained in Section 4.2.\n\nThere are a lot GNSS receivers can be used for this purpose, u-blox has the new NEO-M8\n\nreceivers which can receive signals from multiple constellations and some of them perform RTK\n\nsolutions. There is also NVS, NovAtel, and Trimble, all of them are popular manufacturers with\n\ngood quality receivers.\n\n2.1.2. GPS Operation Principle\n\nThe satellite navigation uses trilateration to estimate a position by measuring the distance between\n\nthe satellite and the receiver. This distance can be obtained by measuring how long a radio signal\n\ntakes to reach the receiver after being transmitted by the satellite. Each satellite being measured\n\ncreates a sphere of possible locations where the receiver can be located, and by intersecting at least\n\nfour of these sphere the exact position can be found.\n\nA broadcasted GPS satellite signal consists mainly on a message with the time of transmission\n\nand a Pseudorandom Noise (PRN) code. When the signal is received, the receiver generates an\n\nFigure 5: u-blox NEO-6P and Septentrio AsteRx4 GNSS Receivers\n\n10\n\n\n\nidentical signal and shifts it in time until it correlates with the received code. The time shift\n\ncorresponds to the propagation time of the signal, and multiplying the propagation time by the\n\nspeed of light gives us the distance between the satellite and the receiver.\n\nAs the signals don\u2019t travel through vacuum, more complex models are needed to estimate the\n\ndistance. Higher quality receivers use dual frequency measurements to estimate this value with\n\nhigher accuracy. As different frequency signals take different times to travel the same path, by\n\ncomparing the delays introduced by the different frequencies, the receivers can estimate with higher\n\naccuracy the position.\n\n2.1.2.1. Signals\n\nThe GPS constellation broadcasts its signals using three different frequencies. They are generated\n\nby the onboard atomic clock and are known as L1 (1575.42 MHz), L2 (1227.60 MHz) and L3\n\n(1176.45 MHz). Superimposed on these frequencies are a PRN code unique to each satellite and\n\nnavigation messages.\n\n2.1.2.2. Navigation Messages\n\nThe navigation message is divided in 25 frames of data, with each frame subdivided into 5 subframes.\n\nThese messages are broadcasted at 50Hz, taking the receiver 6 seconds to receive a subframe, 30\n\nseconds to receive one frame, and 12.5 minutes to receive all 25 frames.\n\nTo decrease the initial time to obtain a position, the first three subframes are identical in all the\n\nframes, allows the receiver to obtain all the critical satellite specific information within 30 seconds.\n\nSubframe 1, contains clock corrections for the transmitting satellite and parameters describing the\n\naccuracy and health of the broadcasted signal.\n\nSubframe 2 and 3, contain ephemeris parameters used to compute the location of the satellite.\n\nSubframe 4 and 5, contain components of the almanac, but each frame contains only 1/25th of the\n\ncomplete almanac, so the receiver must retrieve all the 25 frames to be able to decode the data.\n\n2.1.3. GPS Observables\n\nThere are two GPS observables known as Code Pseudoranges and Carrier Phases, whose measure-\n\nment yield the distance between the satellite and the receiver.\n\n2.1.3.1. Code Pseudorange\n\nThe Pseudorange is the geometric distance between the satellite at the time of signal transmission\n\nand the receiver at the time of signal reception. The simplest model for the pseudorange can be\n\n11\n\n\n\nobtained when the signal travels through vacuum and there are no clock errors involved. In this\n\ncase, the pseudorange Psr between receiver r and satellite s can be determined by\n\nPsr (tr,te) = (tr ?te)c (7)\n\nwhere c is the speed of light, tr is the reception time, and te is the emission time. The value of te\n\nis known from the navigation message, and the value of tr is found out by the shifting technique\n\ndescribed previously (See Figure 6).\n\nUsing the satellite position rs(t) = [xs(t),ys(t),zs(t)] and the receiver position rr(t) = [xr(t),yr(t),zr(t)],\n\nthe pseudorange can be expressed as\n\nPsr (tr,te) =?r\ns(t)?rr(t)?\n\n=\n\n?\n(xs(te)?xr(t r))\n\n2\n+(ys(te)?yr(t r))\n\n2\n+(zs(te)?zr(t r))\n\n2\n\n= ? sr (tr,te)\n\n(8)\n\nAdding the clock errors to the pseudorange, it is then represented as\n\nPsr (tr,te) = ((tr + ? t r)?(te + ? t\ns\n))c\n\n= (tr ?te)c +(? t r ?? t s)c\n\n= ? sr (tr,te)+(? t r ?? t\ns\n)c\n\n(9)\n\nwhere ? t r and ? t\ns are the clock offsets at the receiver and satellite respectively.\n\nTaking into account the ionospheric effects, tropospheric effects, earth tide and loading tide\n\neffects, multipath and relativistic effects, as well as all the others remaining errors, the Pseudorange\n\nmodel can be completely represented by\n\nPsr (tr,te) = ?\ns\nr (tr,te)+(? t r ?? t\n\ns\n)c + ?ion + ?tro + ?tide + ?mul + ?rel + ? (10)\n\nwhich is one of the most common models for the Code Pseudorange [Xu, 2003].\n\n2.1.3.2. Carrier Phase\n\nThe Carrier Phase consists in measuring the phase between the received satellite signal and the\n\nreceiver generated carrier phase signal. This method is usually used by higher quality receivers to\n\nFigure 6: GPS Code Pseudorange [Takasu, 2015]\n\n12\n\n\n\narchive a better accuracy.\n\nIf the signals travels through vacuum and there are no clock errors involved, the measured phase\n\n?\ns\nr between the receiver r and the satellite s can be written as\n\n?\ns\nr (tr,te) = ?r(tr)??\n\ns(te)+ N\ns\nr (11)\n\nwhere tr and te are the reception and emission time of the signal respectively, ?r is the phase of\n\nthe receiver oscillator, and ?s the phase of the emitted signal. The additional parameter Nsr , is the\n\nnumber of full phase cycles that have passed between the satellite s and receiver r. This parameter\n\nis an ambiguity that the receiver needs to estimate (See Figure 7).\n\nAssuming that the received satellite signal and the generated signal have a frequency f , their\n\nphases can be written as\n\n?r(tr) = f (tr ?t0)+ ?r,0\n\n?\ns(te) = f (te ?t0)+ ? s,0\n\n(12)\n\nwhere ?r,0 and ? s,0 are the initial phases of the signal, and t0 is the initial time. Introduce the clock\n\nerrors to the Carrier Phase equation 11, becomes\n\n?\ns\nr (tr,te) = ( f (tr + ? tr ?t0)+ ?r,0)?( f (te + ? t\n\ns ?t0)+ ? s,0)+ Nsr\n\n= f (tr ?te)+ f (? tr ?? t s)+(?r,0 ?? s,0)+ Nsr\n(13)\n\nExpressing equation 13 using the wavelength ( f = c/? ), allows the the Phase Range ?sr to be\n\ndefined as the Carrier Phase ? sr multiplied by the wavelength ? , as can be seen in equation 14.\n\n?\ns\nr(tr,te) = ? ?\n\ns\nr (tr,te)\n\n= c(tr ?te)+ c(? tr ?? t s)+ ? (?r,0 ?? s,0)+ ? Nsr\n\n= ? sr (tr,te)+ c(? tr ?? t\ns\n)+ ? (?r,0 ?? s,0)+ ? Nsr\n\n(14)\n\nAdding the ionospheric effects, tropospheric effects, earth tide and loading tide effects, multipath\n\nand relativistic effects, as well as the others remaining errors into account, the complete model for\n\nthe Carrier Phase becomes\n\n?\ns\nr(tr,te) = ?\n\ns\nr (tr,te)+ c(? tr ?? t\n\ns)+ ? (?r,0 ?? s,0)+ ? Nsr ??ion + ?tro + ?tide + ?mul + ?rel + d?br + ? (15)\n\nFigure 7: GPS Carrier Phase [Takasu, 2015]\n\n13\n\n\n\nwhere d?br contains the receiver antenna phase offset, the antenna phase centre variation, station\n\ndisplacement and phase wind-up effect. When using good quality antennas, most of the d?br can\n\nbe neglected using the Antenna Calibration models available online [?].\n\nIt is worth to notice that, in the carrier phase model the sign of the ionosphere error is opposite\n\nto the signal used in the pseudorange model. This is because, the ionosphere delays the code signal\n\ntransmission and advances the phase signal transmission [Hoque and Jakowski, 2012].\n\n2.1.4. Real Time Kinematic\n\nIn situations where it is required to have an accurate position, it is common to use a differential\n\npositioning technique known as Real Time Kinematic (RTK).\n\nThis GNSS technique involves using two receivers placed over a small distance, typically less\n\nthan 20 km allowing to removed common errors arriving at receivers. As the satellites are so far out\n\nin space, the relatively low distance between the receivers become insignificant as the signals that\n\nreach both receivers will have traveled through virtually the same slice of atmosphere, and so will\n\nhave virtually the same errors.\n\nUsually, one of the receivers stays at a fixed position and is knows as the base station, the other\n\none can move freely and is called as the rover. Depending on the satellites being observed by both\n\nreceivers it is possible to create multiple types of linear combinations between the measurements of\n\nboth receivers.\n\n2.1.4.1. Single Differences\n\nSingle Differences (SD) are formed when both receivers are observing the same satellite at the\n\nsame time, and can be defined as\n\nSDsbr(O) = O\ns\nr ?O\n\ns\nb (16)\n\nwhere O is the raw bbservable data for the base station b and the rover r, when observing the\n\nsatellite s. Using the pseudorange model described in equation 10, the SD are expressed as\n\nPsbr = P\ns\nr ?P\n\ns\nb\n\n= (? sr ??\ns\nb)+(? t r ?? t b)c +(? t\n\ns ?? t s)+(? srion ??\ns\nbion)+(?\n\ns\nrtro ??\n\ns\nbtro)\n\n+(? srtide ??\ns\nbtide\n\n)+(? srmul ??\ns\nbmul\n\n)+(? srrel ??\ns\nbrel\n\n)+(?r ??b)\n\n= ? sbr + c? t br + ?\ns\nbrion + ?\n\ns\nbrtro + ?\n\ns\nbrtide\n\n+ ? sbrmul + ?\ns\nbrrel\n\n+ ?br\n\n(17)\n\nAnd for the carrier phase model from equation 15 we get\n\n?\ns\nbr = ?\n\ns\nr ??\n\ns\nb\n\n= ? sbr + c? tbr + ? ?br,0 + ? N\ns\nbr ??\n\ns\nbrion + ?\n\ns\nbrtro + ?\n\ns\nbrtide\n\n+ ? sbrmul + ?\ns\nbrrel\n\n+ d?sbr + ?br\n(18)\n\n14\n\n\n\nThe satellite clock error ? t s was removed from both models due to this error being independent\n\nfrom the location of the receivers. In the carrier phase model it was also removed the satellite initial\n\ncarrier phase ? s,0.\n\n2.1.4.2. Double Differences\n\nDouble Differences (DD) can be formed when both receivers are observing two satellites at the\n\nsame time, and is defined as\n\nDDszbr = SD\nz\nbr(O)?SD\n\ns\nbr(O) (19)\n\nwhere s and z represent the two satellites. As the receiver clock offsets ? t szbr, and the initial carrier\n\nphases ? szbr,0, are constants and independent from the satellites, they cancel each other out. Using\n\nshort baselines, the values for the ionospheric effects, tropospheric effects, earth tide and loading\n\ntide effects, and relativistic effects, are all close to zero making the code pseudorange and carrier\n\nphase models expressed as\n\nPszbr = ?\nsz\nbr + ?\n\nsz\nbrmul\n\n+ ? szbr\n\n?\nsz\nbr = ?\n\nsz\nbr + ? N\n\nsz\nbr + ?\n\nsz\nbrmul\n\n+ d?szbr + ?\nsz\nbr\n\n(20)\n\n2.1.5. Multipath\n\nThe multipath is one of the main contributors for the errors in the GNSS positioning, and can\u2019t be\n\neliminated using Double Differences . The error is generated when the signal is reflected on nearby\n\nobstacles and then picked by the antenna together with the original signal (See Figure 8). These\n\nerrors occur mainly when the receiver is located near tall buildings, under trees or bridges, or other\n\nobject that can block the sky view.\n\nFigure 8: GNSS Multipath Errors\n\n15\n\n\n\nTable 2: GPS User Equivalent Range Error\n\nGPS User Equivalent Range Error\n\nError Pseudorange Carrier Phase RTK\nSignal arrival 3 m 3 mm 3 mm\nIonosphere 5 m 5m 0\nTroposphere 0.5 m 0.5 m 0\nEphemeris 2.5 m 2.5 m 0\nSatellite clock 2 m 2 m 0\nMultipath 1 m 1 m 1 m\n3?R 6.7 m 6 m 1 m\n\n2.1.6. User Equivalent Range Error (UERE)\n\nThe term user equivalent range error (UERE) refers to the errors in the various components between\n\nthe receiver and the satellite, and they are given as \u00b1 errors it is implied they have a zero mean.\n\nTable 2 shows estimated values for these errors. However, as they depend a lot from external factors\n\nas weather conditions, the receivers localization, and the satellites health, they don\u2019t completely\n\nillustrate the performance of GPS receivers.\n\n2.2. Inertial Navigation System (INS)\n\nAn Inertial Navigation System uses inertial measurements to estimate the pose of a mobile platform.\n\nThe INS usually contains three orthogonal accelerometers to measure linear accelerations, three\n\ngyroscopes to measure angular velocities, and three magnetometers to sense the Earth\u2019s magnetic\n\nfield and use it as a digital compass. This sensor array is called an Inertial Measurement Unit (IMU),\n\nand allows us to calculate the current attitude, heading, velocity, and position of the system from a\n\nknown initial origin. As opposed to the GNSS which depends on the availability of satellites, the\n\nINS can work by itself. However, the system is prone to noise and drift errors that accumulate with\n\ntime, making its estimates unusable after a short period of time [Vectornav, 2015].\n\n2.2.1. Inertial Measurement Units\n\nDuring this dissertation it was used the InvenSense MPU-9150, which is a low cost 9-Axis MEMS\n\nIMU1 that combines one accelerometer, one gyroscope, and one magnetometer. The idea is to\n\nuse two of these sensors, placing them in fixed positions, and imposing restrictions in the allowed\n\nmovements. Since the noise is not correlated, we want to use multiple units of this cheap IMU in\n\norder to improve the performance in\n?\n\n(n). It was also used a Xsens MTi-G, which is a device\n\nthat combines a MEMS accelerometer, gyroscope, compass, barometer, and a GNSS receiver. The\n\n1https://www.invensense.com/products/motion-tracking/9-axis/mpu-9150/\n\n16\n\n\n\nFigure 9: InvenSense MPU-9150 and Xsens MTi-G\n\nXsens fuses all the sensors together using a proprietary Kalman filter algorithm and outputs its\n\nposition and orientation (See Figure 9).\n\nWhen choosing these devices it is important to know and understand the differences between\n\nthe various designations given to them. When the device is referred as an IMU, it consists only in\n\nthe sensors and it only provides their measurements. An Attitude and Heading Reference System\n\n(AHRS) is an IMU with an onboard processing system that provides additional attitude and heading\n\ninformation. When the device is called an INS, the processing system is more advanced and is able\n\nto perform navigation.\n\nThere are a lot of IMUs on the market that can be used for this propose. The biggest difference\n\nbetween them lies mostly on the type of device, the noise density, bias stability, and of course\n\nthe price. Table 3 shows some of them, with their specifications and prices. Another interesting\n\noption can be one of the IMUs from SBG Systems. They have good quality standalone IMUs, some\n\nTable 3: Alternative IMUs Specifications\n\nIMUs PARAMETERS SPECIFICATION\n\nDevice Type\nAcc. FS Acc. Noise Gyr. FS Gyr. Noise Mag. FS Mag. Noise\n\nPrice\ng mg/\n\n?\nHz \u00b0/s \u00b0/s/\n\n?\nHz G mG/\n\n?\nHz\n\nInvensense MPU-9150 IMU 16 0.400 2000 0.005 12 5 C\nXsens MTi-G GNSS/INS 5 0.200 300 0.050 0.75 1.500\nXsens MTi-G 710 GNSS/INS 5 0.080 450 0.010 0.8 0.200 3.980 C\nXsens MTi-10 IMU 5 0.080 450 0.030 0.8 0.200 800 C\nXsens MTi-100 IMU 5 0.080 450 0.010 0.8 0.200 1.500 C\nAnalog Devices ADIS16488A IMU 18 0.063 450 0.006 2.5 0.042 1.500 C\nST iNEMO-M1 IMU 16 0.220 2000 0.030 8 70 C\nST LSM6DSM IMU 16 0.090 2000 0.004 16\nSBG Ellipse-E INS 8 0.100 450 0.003 8 0.200\nVectorNav VN-100 AHRS 16 0.140 2000 0.003 2.5 0.140 $800\nInertial Labs OS3D AHRS 2 0.300 1200 0.030 2 0.150 ~$999\nInertial Labs OS3DM AHRS 6 0.300 2000 0.009 2.5 0.015 ~$999\nInertial Labs OS3D-FG AHRS 6 0.200 2000 0.009 8 0.015 ~$799\nUAV Navigation POLAR GPS/INS 16 0.520 2000 0.015\nMicroStrain 3DM-GX4-25 AHRS 5 0.100 300 0.005 2.5 0.100\nMicroStrain 3DM-GX3-35 AHRS 5 0.080 300 0.030 2.5 0.100 ~$3075\nMEMSENSE MS-IMU3050 IMU 10 0.054 480 0.002\nGladiator Tech. LandMark 10 IMU 2 0.070 300 0.012 ~$2495\nGladiator Tech. LandMark 70 IMU 10 0.055 100 0.001\nKVH DSP-3000 FOG-IMU 375 0.067 $4200\n\n17\n\n\n\nmodels with built in GNSS/INS integration, and also models that can be connected to external\n\nGNSS receivers like the Septentrio and do (RTK)GNSS/INS integration automatically. Similar to\n\nthis, Septentrio also has their AsteRxi models which can be connected to external IMUs from Xsens\n\nand SBG, and the GNSS receiver can perform the (RTK)GNSS/INS integration automatically.\n\n2.2.1.1. Accelerometer\n\nMicroElectroMechanical Systems (MEMS) accelerometers are one of the most widely used type of\n\nMEMS devices. They are used in cost sensitive, low power, motion and tilt-sensing applications\n\nsuch as mobile devices, gaming systems, disk drive protection, image stabilisation, or in more\n\ncomplex systems such as air bag crash sensors, active suspensions, and anti-lock braking system\n\n(ABS).\n\nThe most common type of MEMS accelerometers are based on two capacitors with a suspended\n\nmass held between them. Without force applied to the system, the two capacitors are symmetrical.\n\nBut when a small force is applied, the moveable mass shifts closer to one of the plates increasing its\n\ncapacitance and moves further away from the other plate reducing its capacitance. This difference\n\nin capacitance is measured and amplified to produce a voltage proportional to the acceleration\n\n[O\u2019Reilly et al., 2009].\n\n2.2.1.2. Gyroscope\n\nMEMS gyroscopes work by measuring the Coriolis effect Fc that affects a reference frame with a\n\nmass m, rotates with an angular velocity ? , and a linear velocity v, as expressed in\n\nFc =?2m(? \u00d7?) (21)\n\nWhen the device is undergoing a rotational motion, the generated force causes a differential out-of-\n\nplane deflection on the proof mass elements which is detected by capacitors plates, measured and\n\namplified to produce a voltage proportional to the angular velocity.\n\n2.2.1.3. Magnetometer\n\nMagnetometers are important sensors when estimating the attitude of a robot in navigation systems,\n\nas they can be a low cost and accurate solution to estimate the heading of a vehicle. They work by\n\ncomparing the magnetic field nearby with a vector representation of the Earth coordinates.\n\nHowever, the magnetic field reading are sometimes corrupted by fabrication issues and the\n\npresence of ferromagnetic elements in the surrounding of the sensor. Therefore, proper calibration\n\nis really important to achieve accurate results.\n\n18\n\n\n\n2.2.2. MEMS Accelerometer/Gyroscope Error Characteristics\n\nThis section explains the most common errors in MEMS accelerometers and gyroscopes. As these\n\nerrors are going to be integrated it is very important to reduce them [Woodman, 2007].\n\nConstant Bias\n\nThe bias value is a constant offset that is present in the output signals and shifts the output from its\n\nreal value.\n\nFor the Accelerometer, it\u2019s measured in m/s2, and when double integrated causes an error in\n\nthe position which grows quadratically with time.\n\nFor the Gyroscope, it\u2019s measured in \u00b0/h and when integrated creates an angular error which\n\ngrows linearly with time.\n\nAcc. s(t) = ? \u00b7\nt 2\n\n2\n\nGyr. ? (t) = ? \u00b7t\n(22)\n\nEquation 22 can be used to estimate the error over time for both devices, where ? is the bias\n\nerror and t is the integration time. The bias error can be estimated by long term averaging the sensor\n\noutput when the device isn\u2019t experiencing the influence of any external movement, and then simply\n\nsubtract its value from output.\n\nThermo-Mechanical White Noise - Velocity/Angle Random Walk\n\nThe output of a MEMS device is unsettled by a thermo-mechanical white noise sequence which\n\noscillates at a much higher frequency than the sampling frequency of the sensor.\n\nFor the Accelerometer, this results in a velocity random walk whose standard deviation grows\n\nproportionally to\n?\n\nt, and is usually specified in m/s/\n?\n\nh.\n\nFor the Gyroscope, this results in a angle random walk whose standard deviation grows\n\nproportionally to\n?\n\nt, and is usually specified in \u00b0/\n?\n\nh.\n\nAcc. ?s(t) ? ? \u00b7t 3/2 \u00b7\n?\n\n?t\n3\n\nGyr. ?? (t) = ? \u00b7\n?\n\n? t \u00b7t\n(23)\n\nEquation 23 can be used to estimate the error over time for both devices. When double integrated\n\nto obtain the position, this creates a second order random walk with zero mean and a standard\n\ndeviation ?s(t) which grows proportionally to t 3/2.\n\n19\n\n\n\nFlicker Noise - Bias Stability\n\nThe bias of a MEMS device drifts over time, and is caused by a flickering noise present in all the\n\nelectronics. This noise has a 1/ f spectrum which tends to be only observable at lower frequencies\n\nin electronic components. At higher frequencies it is usually obscured by the presence of white\n\nnoise.\n\nThe bias stability is usually specified as a 1? value and describes how the bias of a device\n\nchange over time in fixed conditions. The flicker noise creates a random walk in the integrated\n\nsignal signal, so its standard deviation grows proportionally to\n?\n\nt, being measured in \u00b0/h, as seen\n\nin equation 24.\n\nAcc. Gyr. BRW (\u00b0/\n?\n\nh) =\nBS(\u00b0/h)?\n\nh(t)\n(24)\n\nThis flickering creates a second order random walk in velocity whose uncertainty grows\n\nproportionally to t 3/2, and a third order random walk in position which grows proportionally to t 5/2.\n\nTemperature Effects\n\nTemperature oscillations in the environment induces movements in the bias. There isn\u2019t a specific\n\nrelationship between the bias and the temperature, as it changes from device to device and is often\n\nhighly nonlinear for MEMS devices.\n\nCalibration Errors\n\nCalibration errors are expressed as scale factors errors, axis misalignments, and non-linearity outputs\n\nwhich produce bias errors that are only visible whilst the device is undergoing movements.\n\n2.2.3. MEMS Magnetometer Error Characteristics\n\nThere are two types of errors that can be found in the magnetometer measurements. The first one rep-\n\nresents instrumentation errors, and includes scale factors, sensor offsets, and the non-orthogonality\n\nof the sensor axes. These errors are present in the sensors due to fabrication imperfections. The\n\nsecond type is specific to magnetometers and consists of the magnetic deviation produced by the\n\npresence of ferromagnetic materials.\n\nScale Factors, are errors in the sensor measurements that corresponds to different constants of\n\nproportionality between the input and the output of the sensor. It is represented by\n\nS = diag\n(\n\nsx sy sz\n)\n\n(25)\n\n20\n\n\n\nBias, are simple offsets present in the sensor output and can be modelled as a scalar per axis\n\nbso =\n[\nbsox bsoy bsoz\n\n]T\n(26)\n\nNon-Orthogonality errors are caused by limitations during the construction of the sensor which\n\nleads to the axes not being completely orthogonal to each other. It is represented by\n\nKnor =\n\n?\n????\n\ncos(?) 0 sin(?)\n\nsin(? )cos(?) cos(? )cos(?) sin(?)\n\n0 0 1\n\n?\n???? (27)\n\nwhere ? , ? , and ? are the misalignment in the X, Y, Z axes respectively.\n\nHard Irons distortions are produced by materials with a constant additive field to the earth\u2019s\n\nmagnetic field, and therefore generate a constant additive value to the output of the magnetometer\n\naxes. They are represented by a bias\n\nbhi =\n[\nbhix bhiy bhiz\n\n]T\n(28)\n\nSoft Irons distortions are produced by ferromagnetic compounds that distorts the magnetic\n\nfield, causing the intensity and the direction of the sensed field to change. The soft iron effect can\n\nbe modelled by a 3x3 matrix\n\nAsi =\n\n?\n????\n\na11 a12 a13\n\na21 a22 a23\n\na31 a32 a33\n\n?\n???? (29)\n\nComplete Error Model\n\nTaking into account all the errors listed above, the relationship between the true geomagnetic\n\nfield and the three-axis magnetometer output can be modelled as\n\nh? = S\u00b7Knor (Asi \u00b7h + bhi)+ bso + ? (30)\n\nwhere h is the true geomagnetic field, h? are the reading from the three-axis magnetometer output, and\n\n? is a Gaussian noise ? N\n(\n0,? 2?\n\n)\n. Introducing two new variables to equation 30, the magnetometer\n\nerror model becomes\n\nh? = Ah + b + ? (31)\n\nwhere values for the matrix A and the bias b can be found using\n\nA = S\u00b7Knor \u00b7Asi\n\nb = S\u00b7Knor \u00b7bhi + bso\n(32)\n\nthe matrix A represents the scale factors, misalignments, and soft irons disturbances. The vector b\n\nrepresents the combined bias.\n\nThere are a wide variety of algorithms that can be used to estimate the values for these two\n\n21\n\n\n\nvariables. In this case it was used the algorithm described by [Renaudin et al., 2010], which uses an\n\nadaptive least mean square estimator to solve the ellipsoid fitting problem.\n\n22\n\n\n\n3. GNSS/INS Data Fusion\n\nGNSS Receivers using Real Time Kinematics are able to accurately estimate the position in areas\n\nwith good sky view. However as explained before, the satellite signals can be partially blocked, and\n\nthe RTK solution will only work as long as the communication between the Base Station and the\n\nRover is stable. The INS can provide us information about the orientation, linear acceleration, and\n\nangular velocity with higher update rates and availability.\n\nA combination of both systems have the possibility of providing a better short and long term\n\naccuracy with higher update rates, and allows us to increase the reliability of the system if the RTK\n\nstops working or if there is a satellite occlusion. There are three types of GNSS/INS integrations:\n\nthe Loosely coupled, the Tightly coupled and the Ultra-Tight coupled [Titterton and Weston, 2005].\n\nLoosely Coupled Integration\n\nIn the Loosely coupled integration, the GNSS receiver and the INS sensors are treated as standalone\n\ndevices that provide two separate measurements (See Figure 10). This allows the GNSS receiver\n\nand the inertial sensor to be replaced by other ones and only have to make minor changes in the\n\ndata fusion algorithm. The implementation is simple and stable, however there is a need to track a\n\nminimum of 4 satellites to get an accurate positioning.\n\nFigure 10: Loosely Coupled Integration [Titterton and Weston, 2005]\n\n23\n\n\n\nFigure 11: Tightly Coupled Integration [Titterton and Weston, 2005]\n\nThe problem with this type of integration is that each device has its own Kalman filter running,\n\nplus one more for the data fusion. When we are formulating the Kalman filter, it\u2019s implicitly\n\nassumed that the measurement errors aren\u2019t correlated, however in the cascaded Kalman filter\n\nconfiguration used by the loosely coupled integration, such assumption is not necessarily true.\n\nIn some situations, the integration algorithm can sample the GNSS information faster than the\n\nprovided by the receiver or receive signals arising through multipath effects, which can cause the\n\nKalman filter measurement errors to become time correlated.\n\nTightly Coupled Integration\n\nIn the Tightly coupled integration, the measurements from the GNSS receiver and the INS are\n\nintegrated at a deeper level and using a single Kalman filter (See Figure 11). This solution overcomes\n\nthe problem of the loosely coupled where the measurement errors can become correlated.\n\nIn this system the measurements that arise from the inertial sensor are integrated in the pseudor-\n\nange and the carrier phase signals received from the satellites, allowing the system to work with\n\nless than 4 satellites and thus keeping a good accuracy in urban areas. The main disadvantage with\n\nthis type of integration is that it is more complex to implement and more hardware dependent.\n\nAn example of such type of integration can be found on the NovAtel Synchronized Position,\n\nAttitude and Navigation (SPAN) receivers.\n\nUltra-Tight Coupled Integration\n\nIn the Ultra-Tight coupled integration, the Kalman filter integration is done in the tracking loops of\n\nthe satellite signals inside the receiver. This type of system provides improvements in the Signal to\n\nNoise Ratio, has less multipath influence, and a faster re-acquisition of interrupted signals. However,\n\n24\n\n\n\nit is a highly complex system to implement and therefore there aren\u2019t a lot of manufacturers using it.\n\n3.1. Experimental Applications in the Literature\n\nThere are a lot of vehicles using these type of sensor fusion algorithms, so in this section some of\n\nthe most interesting ones are presented.\n\nFrom Gothenburg, Sweden [Magnusson and Odenman, 2012] implemented a sensor fusion\n\nalgorithm for a GPS receiver, an IMU, and wheel odometry. Two years later, [Elisson and Gassler,\n\n2014] also implemented a sensor fusion for GNSS/INS integration. Both projects where tested in\n\ncars in urban and rural areas, with some interesting results.\n\n[Kreinar, 2013] also implemented a GPS, INS, and wheel odometry sensor fusion algorithm for\n\nan autonomous lawn mower robot with wheel slip detection. He also compares the robots behaviour\n\nwith different EKF system models.\n\nIn Link\u00f6ping, Sweden, [Hjelmare and Rangsj\u00f6, 2012] implemented a localization and mapping\n\nrobot using the TurtleBot platform with a GPS receiver, a gyroscope, and a Microsoft Kinect.\n\nFrom Instituto Superior T\u00e9cnico in Portugal, [Lopes, 2011] implemented a low cost fusion\n\nalgorithm modelled for an UAV, using a normal GPS receiver and an IMU with only a accelerometer\n\nand a gyroscope. The final test flight was done using a Xsens MTi-G to collect the data, and the\n\nfusing algorithm was able to achieve good results.\n\nIn his PhD Dissertation [Hol, 2011] talks about calibration methods, INS/Vision integration,\n\nINS/Ultra Wide-Band (UWB) integration, and GPS/INS integration which was later tested in a jet\n\naircraft. It is a very complete thesis that shows other types of localization methods and some Xsens\n\nprototypes being developed.\n\n[Carcanague, 2013] is a very interesting and complete PhD Dissertation on implementing low\n\ncost GNSS receivers in precise positioning algorithms to be used mostly in urban environments.\n\nHe shows that low cost GNSS receivers can have large errors in their measurements, talks about\n\nthe inter-channel biases that exists in the GLONASS satellite signals because of the signals being\n\nbroadcasted at different frequencies, and has a lot more information about the GNSS.\n\nFinally probably the most complete project, [Rodrigues et al., 2013] implemented a robotic\n\nsystem composed by an Autonomous Surface Vehicle (ASV) piggybacking a multi-rotor Unmanned\n\nAerial Vehicle (UAV). The ASV provides long-range transportation in all-weather conditions, and\n\nthe UAV assures an augmented perception of the environment. The coordinated aerial, underwater,\n\nand surface level perception allows the navigation system to assess the near field to the far field,\n\nwhich is key for safe navigation and environmental monitoring data gathering. The localization\n\nof the ASV is done with RTK-GPS/INS integration and the UAV uses GPS/INS integration. The\n\n25\n\n\n\nnavigation is based on a laser scanner, an underwater sonar, and multiple cameras in the ASV and\n\nthe UAV.\n\n3.2. Extended Kalman Filter\n\nThe Extended Kalman Filter is a modified version of the common Kalman Filter that allows to\n\nestimate a non-linear system such as the one this dissertation addresses. The filter consists of\n\ntwo distinct steps: In the first one, it is made an estimation of the of the system states based on\n\nthe noise model, and the estimated covariance updated. In the second step, the measurements are\n\nupdated and the estimation corrected. There are a lot of books and articles discussing the EKF\n\nand data fusion such as [Welch and Bishop, 2006; Ge and Lewis, 2006; Bar-Shalom et al., 2004;\n\nGrewal and Andrews, 2015; Kelly, 1994; Magnusson and Odenman, 2012; Terejanu, 2008]. During\n\nthis section it\u2019s mainly followed two books [Kelly, 1994; Grewal and Andrews, 2015].\n\nThe system can be modelled as a state space model in discrete time, with the following generic\n\nform,\n\nxk+1 = fk (xk)+ wk\n\nzk = hk (xk)+ vk\n(33)\n\nwhere x represents the system model, and z the measurements model. The process noise w, and the\n\nmeasurement noise of the system v, are assumed to be white, additive, zero mean, and uncorrelated\n\nwith each other, as shown in equation 34.\n\nE [wk] = 0\n\nE [vk] = 0\n\nE\n[\nwkwTi\n\n]\n= Qk\n\nE\n[\nvkvTi\n\n]\n= Rk\n\nE\n[\nwkvTi\n\n]\n= 0, ?(k,i)\n\n(34)\n\nIn equation 33, f represents the non-linear function that defines the systems dynamics and relates\n\nthe state from tk to tk+1. The measurement function h, is also a non-linear function and defines how\n\nthe sensors measurements are related to the states.\n\nAssuming the non-linearities in the dynamics and that the measurement model are smooth, the\n\nfunctions f and h can be expanded in Taylor Series, and approximating this way the prediction and\n\nthe next estimation of xk. Neglecting the higher order terms in the Taylor Series Expansion, the\n\n26\n\n\n\nfirst order approximation coefficients are given by\n\nFk =\n? f\n? x\n\n????\nx?k\n, Hk =\n\n? h\n? x\n\n????\nx?k\n\n(35)\n\nthat represent the system and the measurement Jacobians. The discrete time Extended Kalman\n\nFilter equations for the system model follows\n\nExtended Kalman Filter - Prediction Step\n\nx?k+1 = ?kx?k (36)\n\nP?k+1 = FkPkFTk + ?kQk?\nT\nk (37)\n\nThe predicted estimate of the system state x?, and the associated covariance matrix P?, represent\n\nthe best knowledge of the system state at tk+1 before making any observations. The transition\n\nmatrix ?k relates the state vector from x?k to x?k+1, and the process noise distribution matrix ?k\ntransforms the vector wk into the coordinates of x?k.\n\nThe EKF correction step can be found using the following equations\n\nExtended Kalman Filter - Correction Step\n\nKk = P?kHTk\n(\n\nHkP?kHTk + Rk\n)?1\n\n(38)\n\nxk = x?k + Kk (zk ?h(x?k)) (39)\n\nPk = (I?KkHk)P?k (40)\n\nIn the previous equations, Kk is the Kalman Gain, a matrix that multiplies the error from the\n\ndifference between the real measurement obtained at tk and the predicted value. xk represents the\n\nupdated state estimate, and Pk the updated covariance matrix.\n\nThe equations aren\u2019t run all at once. The prediction step can be run at a high frequency and the\n\ncorrection step should only run when new measurements are available. There are several similar\n\nforms of the Kalman filter equations with different forms of systems models. However, this one is\n\ncommonly used in the navigation industry since it avoids numerical problems in the Kalman gain\n\nmatrix, and at the same time it also decreases the number of matrix inversions needed to the number\n\nof measurements only.\n\n27\n\n\n\n3.3. System Dynamics Model\n\nWhen implementing a Kalman Filter it is very import to model correctly the system where the\n\nfilter is going to be used, as a good dynamics model allows to reduce the navigation errors by\n\nimplementing restrictions to the possible movements the physical system can do.\n\nAs the objective of this dissertation is to implement an EKF to be used in a wide variety of\n\nrobots and other movable objects, the system model implemented was a standard 3D Model without\n\nkinematic restrictions, and follows the Loosely Coupled Integration explained earlier in this chapter.\n\nThe state vector of the filter is composed by the 3D components of the Pose, Orientation,\n\nVelocity, Angular Velocity, and Linear Acceleration, as described by equation 41.\n\nxk =\n[\nx,y,z, ?,? ,?, x?,y?, z?, ??,?? ,??, x?,y?, z?\n\n]T\n(41)\n\nThe transfer function can be found using the multiplication of the three rotation matrices that define\n\nthe rotation of a 3D body using the Roll Pitch Yaw Convention.\n\nRz(?) =\n\n?\n???\n\ncos(?) ?sin(?) 0\n\nsin(?) cos(?) 0\n\n0 0 1\n\n?\n???,Ry(? ) =\n\n?\n???\n\ncos(? ) 0 sin(? )\n\n0 1 0\n\n?sin(? ) 0 cos(? )\n\n?\n???,Rx(?) =\n\n?\n???\n\n1 0 0\n\n0 cos(?) ?sin(?)\n\n0 sin(?) cos(?)\n\n?\n??? (42)\n\nProjecting the state forward using x? = f(x?,t), the predicted state is found using the transfer\n\nfunction\n\nx?k+1 = ?kx?k =\n\n?\n?????????\n\nI 0 ?13 0 ?15\n\n0 I 0 ?24 0\n\n0 0 I 0 ?35\n\n0 0 0 I 0\n\n0 0 0 0 I\n\n?\n?????????\n\u00b7 x?k (43)\n\nwhere the sub-matrices are all 3x3 and\n\n?13 =\n\n?\n????\n\ncos ? cos ? sin ? sin ? cos ? ?cos ? sin ? cos ? sin ? cos ? + sin ? sin ?\n\ncos ? sin ? sin ? sin ? sin ? + cos ? cos ? cos ? sin ? sin ? ?sin ? cos ?\n\n?sin ? sin ? cos ? cos ? cos ?\n\n?\n????\u00b7?t (44)\n\n?15 =\n?13\n\n2\n\u00b7?t, ?24 = ?13, ?35 = ?t \u00b7I (45)\n\nThe System Jacobian can be obtained using equation 35, and is equivalent to the following\n\nmatrix\n\n28\n\n\n\nFk =\n\n?\n?????????\n\nI F12 ?13 0 ?15\n0 F22 0 ?24 0\n\n0 0 I 0 ?35\n\n0 0 0 I 0\n\n0 0 0 0 I\n\n?\n?????????\n\n(46)\n\nwhere F12 and F22 can be found in Appendix D and were calculated using MATLAB. With the\n\nJacobian calculated, the covariance matrix P? can then be estimated using equation 37.\n\nThe first correction step is initialised by feeding a starting \"a priori estimate\" x?k(0) and its\n\ncovariance P?k(0) to the filter when the first measurements from the sensors arrive. The initial value\n\nof x?k(0) represents the starting position and orientation, and the value of P?k(0) was hand tuned\n\nusing small covariance values. The value for the process noise covariance Qk was also chosen\n\nusing small covariance values, and for each cycle of the system model, the new values of the state\n\ntransition matrix ?k and Qk are estimated. The measurement matrix Hk, and its covariance Rk are\n\nupdated when new sensor measurements arrive to the filter.\n\nIf it is desired to work in a 2D environment, it is sufficient to zero the Z components of the\n\nposition, velocity, and acceleration, roll, pitch, roll velocity, and pitch velocity.\n\n29\n\n\n\n3.4. Measurement Model\n\nThe measurement model implemented in the Kalman filter is used to define how the sensors\n\nmeasurements relate to the states. During this section it\u2019s important to know the different types\n\nof frames that exist, understand how they relate to each other, and how to make the conversions\n\nbetween them. A brief information about this can be seen in Appendix C or more detailed in\n\n[Crassidis, 2006].\n\n3.4.1. GNSS Data\n\nAll the data processing related to the GNSS ceceivers is done outside of the data fusion algorithm\n\nusing a separate ROS node and published in a ROS NavSatFix message. The EKF subscribes to\n\nthese messages and starts by converting them from LLA to UTM. The measurement model for the\n\nGNSS receiver is then expressed as,\n\nzgps,k = Hgps,kxk + vgps,k =\n\n=\n\n?\n????\n\n1 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n\n0 1 0 0 0 0 0 0 0 0 0 0 0 0 0\n\n0 0 1 0 0 0 0 0 0 0 0 0 0 0 0\n\n?\n????xk + vgps,k =\n\n=\n\n?\n????\n\nxk\n\nyk\n\nzk\n\n?\n????+ vgps,k\n\n(47)\n\nwith the vgps,k noise following a zero mean, white, gaussian distribution with a known covariance\n\nRgps,k, which is is filled directly from the values provided by the GNSS receiver or the RTKLIB\n\ncovariance estimation.\n\n3.4.2. INS Data\n\nThe measurement model of the INS Data is provided by the Inertial Measurement Units and pre-\n\nprocessed previously by the Stellaris Launchpad, a ROS node and then published in a ROS IMU\n\nmessage. Before feeding the measurements to the filter it\u2019s important to make sure all inertial\n\nsensors are reporting their data in the same body frames, and apply the correct rotations to align\n\nthem properly if needed. As the IMUs are composed internally by three sensors, the measurement\n\nmodel is more complex and allows us to obtain more information.\n\n30\n\n\n\nzimu,k = Himu,kxk + vimu,k\n\n=\n\n?\n?????????????????????\n\n0 0 0 1 0 0 0 0 0 0 0 0 0 0 0\n\n0 0 0 0 1 0 0 0 0 0 0 0 0 0 0\n\n0 0 0 0 0 1 0 0 0 0 0 0 0 0 0\n\n0 0 0 0 0 0 0 0 0 1 0 0 0 0 0\n\n0 0 0 0 0 0 0 0 0 0 1 0 0 0 0\n\n0 0 0 0 0 0 0 0 0 0 0 1 0 0 0\n\n0 0 0 0 0 0 0 0 0 0 0 0 1 0 0\n\n0 0 0 0 0 0 0 0 0 0 0 0 0 1 0\n\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 1\n\n?\n?????????????????????\n\nxk + vimu,k\n\n=\n[\n?k ?k ?k ??k ??k ??k ??k ??k ??k\n\n]T\n+ vimu,k\n\n(48)\n\nwhere the vimu,k noise follows a zero mean, white, gaussian distribution with a known covariance\n\nRimu,k, broadcasted in the ROS IMU Message and hand tuned from similar devices.\n\n3.4.3. Complete Model\n\nThe complete measurement model is composed by concatenating the measurement models above in\n\na single matrix,\n\nzk =\n\n?\n?zgps,k\n\nzimu,k\n\n?\n?xk +\n\n?\n?vgps,k\n\nvimu,k\n\n?\n?\n\n= Hkxk + vk\n\n(49)\n\nwhere the resulting matrix H has a dimensions of 15x15.\n\nThe measurement noise vk has a corresponding covariance matrix Rk,\n\nRk =\n\n?\n?Rgps,k 0\n\n0 Rimu,k\n\n?\n? (50)\n\nwhere it is assumed that the measurement noises are independent from each other.\n\nAs the measurements and their errors are uncorrelated, these matrices can be subdivided in\n\nsmaller ones and processed one at a time giving the same result as processing everything together.\n\nThis is particularly important in real time systems with multiple asynchronous sensors, as it allows\n\nto only change the sub-matrices related to that sensor, and therefore reducing the computational\n\npower needed.\n\n31\n\n\n\n3.5. Other Platform Models\n\n3.5.1. Differential Drive Steering\n\nFigure 12: Differential Drive Steering\n[Kreinar, 2013]\n\nIt is very common to find wheeled mobile robots using two\n\nwheels mounted on a common axis as a drive mechanism.\n\nThese robots are known as differential drive, since each\n\nwheel can be driven independently in order to steer the\n\nplatform (Figure 12).\n\nDifferent wheels speeds causes the robot to follow cir-\n\ncular trajectories with an Instantaneous Centre of Curvature\n\n(ICC). The differential drive imposes non-holonomic restric-\n\ntions on the position, as the robot cannot move laterally.\n\nA simple state vector for a differential drive can be\n\nexpressed by\n\nxk = [x,y,? ,?,?]\nT (51)\n\nThe system model f(x), and the system Jacobian Matrix Fk can be represented by\n\nf(x) =\n\n?\n?????????\n\nxk?1 + ?k?1cos(?k +\n?k?1?t\n\n2 )?t\n\nyk?1 + ?k?1sin(?k +\n?k?1?t\n\n2 )?t\n\n?k?1 + ? ?t\n\n?k?1\n\n?k?1\n\n?\n?????????\n\n(52)\n\nFk =\n\n?\n?????????\n\n1 0 ??k \u00b7sin(?k +\n?k ?t\n\n2 )?t cos(?k +\n?k ?t\n\n2 )?t ?\n?k\n2 sin(?k +\n\n?k ?t\n2 )?t\n\n2\n\n0 1 ?k \u00b7cos(?k +\n?k ?t\n\n2 )?t sin(?k +\n?k ?t\n\n2 )?t\n?k\n2 cos(?k +\n\n?k ?t\n2 )?t\n\n2\n\n0 0 1 0 ?t\n\n0 0 0 1 0\n\n0 0 0 0 1\n\n?\n?????????\n\n(53)\n\n32\n\n\n\n3.5.2. Skid Steering\n\nFigure 13: Skid Steering\n[Rogers-Marcovitz, 2010]\n\nSkid steering robots are also widely used because of their\n\nsimple mechanism and robustness. However, their complex\n\nwheel-ground interactions and kinematic constraints, make\n\nit more difficult to understand and implement the kinematic\n\nmodel of the platform.\n\nThese vehicles typically use four wheel mechanically\n\nlocked in synchronisation on each side which can be driven\n\nindependently (Figure 13). As the wheels have no steering\n\nmechanism and are hold in a fixed straight alignment, by\n\nchanging the speed of the left and right wheel pairs the robot turns by skidding its fixed-orientation\n\nwheels across the ground.\n\nA simple state vector and input vector for the skid steering can be expressed by\n\nxk = [x,y,? ]\nT uk = [V,?]\n\nT (54)\n\nWith the following kinematic differential equation for the vehicle\u2019s 2D position and heading,?\n????\n\nx?\n\ny?\n\n??\n\n?\n???? =\n\n?\n????\n\ncos(? ) ?sin(? ) 0\n\nsin(? ) cos(? ) 0\n\n0 0 1\n\n?\n????\u00b7\n?????\n????\n?\n????\n\nVx\n\nVy\n\n?\n\n?\n????+\n\n?\n????\n\n?V x\n\n?V y\n\n? ?\n\n?\n????\n?????\n???? (55)\n\nThe input error is modelled as ? u =\n[\n?V x,?V y,? ?\n\n]\n. The Jacobian with respect to the slip\n\nvelocities ?, and the states F are represented by\n\n? =\n? x?\n\n? ? u\n=\n\n?\n????\n\ncos(? ) ?sin(? ) 0\n\nsin(? ) cos(? ) 0\n\n0 0 1\n\n?\n???? (56)\n\nF =\n? x?\n? x\n\n=\n\n?\n????\n\n0 0 ?(V + ?Vx)sin(? )??Vycos(? )\n\n0 0 (V + ?Vx)cos(? )??Vysin(? )\n\n0 0 0\n\n?\n???? (57)\n\n33\n\n\n\n3.5.3. Ackerman Steering\n\nFigure 14: Ackerman Steering\n[Newman, 2003]\n\nThe Ackerman Steering is one of the most common steering\n\nmodels used on two or four wheel vehicles, as road cars and\n\nbicycles. This steering principle defines a geometry for the\n\ncorrect turning angle of the steering wheels when cornering\n\nthat minimises the tire slippage (Figure 14).\n\nThe Ackerman Steering also has non-holonomic restric-\n\ntions, as the robot can only turn its front wheels. It can not\n\nmove sidewise, nor rotate having a null linear velocity.\n\nA simple state vector and input vector for the Ackerman\n\nsteering can be expressed by\n\nxk = [x,y,? ]\nT uk = [V,?]\n\nT (58)\n\nWith the following kinematic differential equation for the vehicle\u2019s 2D position and heading,?\n????\n\nxk+1\n\nyk+1\n\n?k+1\n\n?\n???? =\n\n?\n????\n\nxk +Vk \u00b7cos(?k)?t\n\nyk +Vk \u00b7sin(?k)?t\n\n?k +\nVk\u00b7tan(?k)?t\n\nL\n\n?\n???? (59)\n\nThe Jacobians with respect to the states, and the control noise are represented by\n\n? f\n? x\n\n=\n\n?\n????\n\n1 0 ?V k \u00b7sin(?k)?t\n\n0 1 Vk \u00b7cos(?k)?t\n\n0 0 1\n\n?\n???? (60)\n\n? f\n? u\n\n=\n\n?\n????\n\ncos(?k)?t 0\n\nsin(?k)?t 0\ntan(?k)\n\nL\nVk\u00b7sec2(?k)?t\n\nL\n\n?\n???? (61)\n\n34\n\n\n\n4. Experimental Results\n\nThis chapter contains the practical part that was done during this dissertation, and explains how the\n\nINS and RTK was implemented, and has some tests of the GNSS/INS integration.\n\n4.1. INS Implementation\n\nAs mentioned in section 2.2 during this dissertation was used two Invensense MPU-9150 IMUs\n\nand one Xsens MTi-G. Both devices differ quite a bit and their main specifications can be seen in\n\nTable 4. The Xsens provides drivers for their devices in their website, so interacting with the Xsens\n\nMTI-G quite easy and all it took was a little fiddling in the software.\n\nHowever, to interact with the Invensense MPU-9150 and implement the INS, it was needed\n\nto develop the software for the device using one Texas Instruments Stellaris LaunchPad micro-\n\ncontroller with both inertial sensors connected to his I2C ports. The microcontroller initialises the\n\naccelerometer and gyroscope, and sends them calibrations values. As the magnetometer doesn\u2019t\n\nhave hardware registers for the calibration, it needs to be calibrated in software. It is very important\n\nto pay attention for the axes orientation when dealing with these type sensors, as they can have their\n\naxes swapped. The MPU-9150 has different axes orientations between the accelerometer/gyroscope\n\nand the magnetometer, as can be seen in Figure 15. Therefore, before using their measurements it is\n\nnecessary to rotate the values properly.\n\nThe datasheet of the Invensense MPU-9150 states that in order to sample the magnetometer it\n\nis needed to follow a special sequence of commands with specific times between them, making\n\nthe maximum update rate 8 Hz. Changing a little the command sequence and reducing the waiting\n\ntimes, it was possible to configure the microcontroller to run a timer interruption where the all\n\nTable 4: Alternative IMUs Specifications\n\nIMUs PARAMETERS SPECIFICATION\n\nDevice\nGyroscope Accelerometer Magnetometer\n\nFS Lin. Noise Freq. ADC FS Lin. Noise Freq. ADC FS Freq. ADC\nXsens MTi-G 300 0.1 0.05 512 16 5 0.2 0.2 512 16 0.75 512 16\nInvensense MPU-9150 2000 0.2 0.005 8000 16 16 0.5 0.4 1000 16 12 8 13\n\n\u00b0/s %F S \u00b0/s/\n?\n\nHz Hz bits g %F S mg/s/\n?\n\nHz Hz bits G Hz bits\n\n35\n\n\n\nFigure 15: MPU-9150 Accelerometer/Gyroscope and Magnetometer Axes Orientation\n\nthe sensors are sampled at 100 Hz without measuring errors. As the magnetometer values are still\n\nnot calibrated, after being sampled they are corrected by the rotation matrix and the bias vector\n\npreviously found using the model in section 2.2.3.\n\nTo calculate the IMU orientation, the calibrated values from the accelerometer, gyroscope, and\n\nmagnetometer are fed to a Madgwick filter. This is a highly popular filter when using inertial\n\nsensors in microcontrollers because it doesn\u2019t require a lot of computational power and can obtain\n\nsimilar result as the Kalman filter or the complementary filter [Madgwick, 2010]. The filter receives\n\nthe inertial 9 Degrees of Freedom (DOF) values, fuses them together and returns a normalised\n\nquaternion, which is a four-dimensional complex number used to represent the orientation of\n\na ridged body or a coordinate frame in a three-dimensional space. A detailed explanation and\n\ncomparison of the Madgwick filter, the Complementary filter and Kalman filter can be seen at\n\n[OlliW, 2013].\n\nIt is important to run the filter at a high frequency in order to the estimated orientation to be\n\naccurate when the sensor is undergoing movements. The Stellaris LaunchPad is able to run two\n\ninstances of the filter, one for each inertial sensor, at 1600 MHz and takes 10 to 15 seconds to\n\ninitially estimate an accurate orientation. With everything ready, 3 messages per IMU (Equation\n\n62) are created and sent to the serial port with a 460800 baudrate. These messages contain the\n\nquaternion, accelerometer, and gyroscope information and are sent at 50 Hz.\n\n1Q,0.688973,?0.000998,?0.000075,?0.724955 (44bytes)\n\n1A,?0.010777,?0.010777,9.932511 (34bytes)\n\n1G,?0.129699,?0.114440,0.076293 (34bytes)\n\n(62)\n\nThe transmission times for the messages can be calculated by\n\nQuat. =\n44 ? 10 bits/byte\n\n460800(bits/s)\n= 0.955 ms\n\nAcc. =\n34 ? 10 bits/byte\n\n460800(bits/s)\n= 0.738 ms\n\nGyr. =\n34 ? 10 bits/byte\n\n460800(bits/s)\n= 0.738 ms\n\n(63)\n\n36\n\n\n\nIt takes about 5 ms for the complete 6 messages to be fully transmitted, giving a lot of free time in\n\nthe 50 Hz update rate used to send other debugging messages. In summary, the sensors are sampled\n\nat 100Hz, their values are corrected and fed to the Madgwick filter which runs at 1600MHz, and\n\nthe information is sent to the serial port at 50 Hz. It is also important to notice that the quaternion is\n\ntransmitted in the East-North-Up (ENU) Frame, which is useful information when fusing the IMUs\n\nwith the GNSS.\n\nThe transmitted messages are received by the ODROID, which publishes two ROS topics\n\n\u201dimu/dataL\u201d and \u201dimu/dataR\u201d which are of the type \u201dsensor_msgs/Imu\u201d and hold the following\n\ninformation\n\n\u2022 Quaternion\n\n\u2022 Orientation Covariance\n\n\u2022 Angular Velocity\n\n\u2022 Angular Velocity Covariance\n\n\u2022 Linear Acceleration\n\n\u2022 Linear Acceleration Covariance\n\nThe Xsens MTi-G, is using a third party driver for ROS that is available in the official Xsens\n\nwebsite and is configured to communicate with a 921600 baudrate, and to output the orientation,\n\nangular velocity, linear acceleration, and GPS information. The IMU information is published\n\nin a ROS topic \u201dimu/data\u201d at 48 Hz, and the GPS information in a \u201dgps/fix\u201d topic of the type\n\n\u201dNavSatFix\u201d at 4 Hz. When configuring the MTi-G it is very important to choose the right onboard\n\nfilter, as some of them don\u2019t use the magnetometer in the fusion algorithm causing the orientation\n\nto drift a lot with time. In this case, it is being used the aerospace filter which uses all the sensors in\n\nthe fusing algorithm, and the output orientation follows the North-West-Up (NWU) frame.\n\nA schematic with all the components used and their respective connections can be seen in\n\nAppendix A. It was also done a small study on the inertial sensors stability using the Allan Variance,\n\nwhich can be read in the Appendix B.\n\n4.2. RTK GNSS Implementation\n\nAs explained in section 2.1.4, the RTK technique involves using two receivers within a small\n\ndistance to archive and higher accuracy. In this case it is being used two different systems so we can\n\ncompare high end receivers with cheaper ones. The first system is composed by two u-blox NEO-6P\n\nreceivers using Trimble Bullet antennas, and the RTK solution is processed separately using an\n\nopen source software. The second system is composed by two Septentrio AsteRx-4 receivers with\n\nSeptentrio PolaNt-x MF (Multi-Frequency) antennas, which can perform RTK solutions on its own.\n\n37\n\n\n\nTable 5: GNSS Receivers Specifications\n\nGNSS RECEIVERS PARAMETERS SPECIFICATION\nDevice Updates GPS GALILEO GLONASS BEIDOU IRNSS QZSS Mode\nu-blox NEO-6P 5 Hz L1 - - - - - SPS SBAS PPP\nXsens MTi-G 4 Hz L1 E1 - - - - SPS SBAS\nSeptentrio AsteRx-4 50 Hz L1 L2 L5 E5 E6 L1 L2 L3 B1 B2 B3 L5 L1 L2 L5 SPS SBAS PPP RTK\n\nAs the systems have lot of differences, Table 5 shows some of the receivers specifications.\n\nFor the RTK system to work it is necessary to have some kind of connection between the\n\ntwo receivers in order for them to communicate with each other. To solve this problem it is\n\ncommonly used an WiFi connection or other kind of RF communication directly between both\n\ndevices. However, with these solution it is necessary to maintain a good line-of-sight in order for\n\nthe connection to be stable, which limits the distance between the receivers and the places where the\n\nsystem can be used. Therefore in the final implementation of the RTK system, the base station was\n\nconnected to the home internet connection and runs a TCP server broadcasting all the information.\n\nIn order for the rover to access all the broadcasted information it is being used a smartphone with\n\n4G Long-Term Evolution (LTE) high-speed internet to connect the rover to the internet and the\n\nbase station. Figure 16 shows a diagram of the RTK implementation.\n\nIn a RTK system the base station is used to send corrections messages to the rover. There are a\n\nlot of messages and standards to broadcast this information, but in this case it was chosen the Radio\n\nTechnical Commission for Maritime Services (RTCM) v3, and the messages shown in Table 6.\n\nThe u-blox receivers are using the open source software RTKLIB to estimate the RTK solution.\n\nThe software was configured to transmit the messages at 5 Hz which is the maximum update rate\n\nof the receiver. A brief explanation on how the software works can be read in Appendix E. The\n\nSeptentrio receiver defaults the update rates for the corrections to every 2 seconds, but as the\n\nFigure 16: RTK-GNSS Connection Diagram\n\n38\n\n\n\nTable 6: Base Station Broadcasted Messages\n\nRTCM Version 3.x Messages\nSeptentrio u-blox\n\n1002 - Extended L1 GPS RTK Observables X\n1004 - Extended L1+L2 GPS RTK Observables X\n1006 - Stationary RTK Reference Station ARP with Antenna Height X X\n1012 - Extended L1+L2 GLONASS RTK Observables X\n1013 - System Parameters, List of Transmitted Message Types and Update Rates X X\n1019 - GPS Satellite Ephemeris Data X X\n1020 - Glonass Satellite Ephemeris Data X\n1033 - Receiver and Antenna Descriptor X\n1044 - QZSS Satellite Ephemeris Data X\n1045 - Galileo F/NAV Satellite Ephemeris Data X\n1230 - GLONASS Code/Phase Bias Correction X\n\nimplemented network infrastructure was stable the value as set to the same 0.2 seconds as the\n\nu-blox.\n\nAs explained during this section a RTK system is divided in two parts, the fixed part (base\n\nstation) and the moving part (rover). As it is being used to 2 RTK systems, the base station is\n\ncomposed by one receiver and antenna of each type, one ODROID, and one router with internet\n\nconnection (See Figure 17).\n\nThe moving part in this case has all the components necessary for the rover part of the RTK\n\nsystem, but also all the components used in the INS implementation. It is composed by an aluminium\n\nbar with secures the two antennas used by the Septentrio receiver, the Xsens MTi-G in the centre,\n\ntwo Invensense MPU-9150 secured to the bar with duck tape, and a Trimble antenna used by the\n\nu-blox receiver (See Figure 18). As well as, all the rest of the electric components like cables, the\n\nGNSS receivers, another ODROID, the Stellaris Launchpad, and a battery.\n\nThe first thing that needs to be done when performing RTK solutions is to find an accurate\n\nposition for the base stations, as the position errors present here will offset the rover position. In\n\norder to have an accurate base station position and to study the random walk evolution of the\n\nGNSS receivers, both systems were left running for 24 hours logging all the messages to a Receiver\n\nFigure 17: Real Time Kinematic - Base Stations\n\n39\n\n\n\nFigure 18: Aluminium Bar used in the Rover\n\nIndependent Exchange Format (RINEX) file. After the 24 hours logging period it was then waited\n\nanother 24 hours for the more precise RAPID GNSS Orbit Ephemerides to become available online,\n\nand then the RINEX files were post-processed with the Canadian Spatial Reference System (CSRS)\n\nPrecise Point Positioning (PPP). It is important to notice that as the Septentrio PolaNt-x MF are\n\nhigh-end GNSS antennas, it was used the calibration model available online, and the Antenna North\n\nReference Point (NRP) was oriented toward the true north [?]. The estimated positions and errors\n\nare summarised in Table 7.\n\nAs the base stations are not in the same position, it is not expected for values to be the same.\n\nThe distance between the two antennas was measured with a measuring tape and the difference\n\nbetween them was about ~68cm North, ~45cm East, and ~35cm Altitude, which is more or less the\n\ndifference obtained from the Post-Processing. Figure 19 shows the estimated position random walk\n\nthat occurred during the 24 hours logging period. The green crosses represent the initial position and\n\nthe red ones the final position. The complete Post-Processing results can be found in the Appendix\n\nF and G, where other interesting plots can be analysed. Such as, it takes 9 hours of data collected\n\nfor the Septentrio to have a good estimated position, however the u-blox needs 15 hours and still\n\nhas some random walk after that.\n\nIt was also done a quick test to the three antennas used, the Septentrio PolaNt-x MF, the Trimble\n\nBullet GG, and the patch antenna provided in the Xsens MTi-G Development Kit (See Figure 20).\n\nTable 7: Base Stations Estimated Position - 24Hours Post-Processing\n\nBase Stations Estimated Position\nSeptentrio u-blox\n\nLatitude (+n) Longitude (+e) Ell. Height Latitude (+n) Longitude (+e) Ell. Height\n\nITRF08 (2016) 40\u00b011\u2019 32.9839\u2019\u2019 -8\u00b025\u2019 04.4044\u2019\u2019 100.609 m 40\u00b011\u2019 33.0074\u2019\u2019 -8\u00b025\u2019 04.3869\u2019\u2019 100.204 m\nSigmas (95%) 0.001 m 0.001 m 0.003 m 0.017 m 0.013 m 0.034 m\n\nUniversal Transverse Mercator (UTM) Estimated Position\nZone 29 4449285.137m (N) 549549.062m (E) --- 4449285.864m (N) 549549.471m (E) ---\n\n40\n\n\n\nFigure 19: Septentrio (left) and u-blox (right) Base Stations Position Random Walk\n\nTo perform the test each antenna was placed in the same spot and connected to the u-blox NEO-6P\n\nGNSS receiver for 5 minutes, and after that the SNR for each satellite was written down. It isn\u2019t a\n\nscientific test and doesn\u2019t say that much about the quality of the antennas, because there are other\n\nimportant aspects other than SNR, but it was a quick and interesting test. All of them are active\n\nGPS L1 band antennas and all need the 3.3V DC supplied by the receiver. One aspect that should\n\nbe noticed is that the Septentrio PolaNt-x MF, is a multi-frequency antenna with calibration models\n\navailable and built-in ground planes, so it needs a good GNSS receiver to take fully advantage of its\n\ncapabilities. Another aspect to notice is that the Xsens antenna has a built-in 3 meters long cable\n\nwith an attenuation of 3.9 dB (3m), and for the other two antennas was used the same 1 meter long\n\nRG-58C/U cable which only has 0.63 dB per metre attenuation at 1.5GHz.\n\nAs can be seen in Figure 21 the PolaNt-x MF quality is undeniable as the antenna manages to\n\nobtain the highest SNR for all the satellites. However, the Trimble Bullet GG Antenna also has\n\ngood quality results with only a few dBHz lower than the Septentrio. As far as the Xsens Antenna,\n\nthe u-blox receiver struggled a lot to track satellites and get a solution, as most of the time it couldn\u2019t\n\ntrack that many satellites as displayed.\n\nTo test the fusion algorithm the aluminium bar with all the sensors and receivers was fitted on\n\ntop of a car, and then driven around Coimbra while running the data fusion algorithm and at the\n\nsame time recording all the data. The aluminium bar has one meter long, and its centre position is\n\nFigure 20: Septentrio PolaNt-x MF (left), Trimble Bulet GG (center), Xsens MTi-G (right)\n\n41\n\n\n\nFigure 21: Antenna Quality SNR Test\n\nrepresented by the Trimble antenna. The rest of the devices have the following offsets described\n\nin Table 8. As the bar was positioned relatively low (about 1 meter above the ground) the GNSS\n\nsignals can be easily blocked and suffer from multipath errors. The test was done in an urban\n\nenvironment with lots of buildings, trees, overpasses, narrows streets, and some places without sky\n\nview. The route has 20 km takes about 30 minutes to complete, and was done in two separate days.\n\nIn the first day, it was only tested the rover part of the system with the GNSS receivers working\n\nwithout the base stations. In the second day, the rover was connected to the base stations and the\n\nGNSS receivers were working in RTK.\n\n4.3. GNSS/INS Integration\n\nDuring the first test the following solutions were recorded:\n\n1 - GNSS Positioning with the u-blox NEO-6P using Carrier Phase\n\n2 - GNSS Positioning with the u-blox NEO-6P using Code Pseudorange\n\n3 - GNSS Positioning with the Septentrio AsteRx4\n\n4 - GNSS/INS Integration with the Xsens MTi-G\n\n5 - INS Solution from 2 Invensense MPU-9150\n\n6 - GNSS/INS Integration from the u-blox (1) and the 2 Invensense MPU-9150 (5)\n\n7 - Low Speed Test with the u-blox NEO-6P using Carrier Phase\n\n8 - Low Speed Test with the Xsens MTi-G\n\n9 - Low Speed Test with the Septentrio AsteRx4\n\nTable 8: Rover - Aluminium Bar Position Offsets\n\nRover Aluminium Bar Position Offsets\nX (m) Y (m) Z (m)\n\nTrimble Antenna for the u-blox receiver 0.00 0.00 0.00\nXsens MTi-G 0.13 0.00 -0.12\n2x Invensense MPU-9150 0.12 \u00b10.10 -0.13\n2x Septentrio Antennas 0.13 \u00b10.35 0.07\n\n42\n\n\n\nAn overview of the route travelled during the test can be seen in Figure 22. This route was\n\nmainly chosen as an attempt to put together all kind of problems that can be expected when using\n\nthese kind of devices. As it is difficult to show the errors and the small differences between all the\n\nestimated trajectories, Appendix H has a link to Google Maps where the respective routes can be\n\nanalysed and also has some additional photos of this section. The Google Maps is a good tool to\n\neasily preview the solutions and estimate their accuracy, however when analysing them we must\n\nbe careful as it can also yield wrong conclusions. This is because, the satellite imagery can have\n\nslight offsets from the real positions, and also because the latest satellite imagery available from the\n\nregion are from January 2013.\n\nThe u-blox NEO-6P (1) allows to configure the output format of the solution between the\n\nproprietary UBX messages, or the more common National Marine Electronics Association (NMEA)\n\nmessages. The NMEA-0183 messages are the easiest way to get all the information needed, as they\n\nare quite clear and can be easily logged through the serial port. The receiver was also configured in\n\nPrecise Point Positioning (PPP), which helps stabilising the measured distance between the satellites\n\nand the receiver by using the carrier phase observables. It was also enabled the reception of signals\n\nfrom the Satellite-Based Augmentation System (SBAS) constellation, which helps archiving a\n\nbetter accuracy by receiving ionospheric corrections, clock drifts, and ephemeris errors. The final\n\nestimated position is then outputted using NMEA-0183 messages with an update rate of 5 Hz.\n\nAs a means of comparison it was also logged another u-blox NEO-6P (2), but this time outputting\n\nthe UBX RAW messages and with the solution being processed by the RTKLIB software in single\n\nmode. In this mode it is only used the pseudorange data which makes the precision quite low, and\n\nas the solution is being processed by the RTKLIB it isn\u2019t filtered by the u-blox chipset.\n\nThe Septentrio AsteRx4 (3) was configured in a similar way as the u-blox (1), as it receives\n\nFigure 22: Overview of the route travelled\n\n43\n\n\n\nall the signals available, estimates the solution, and broadcasts it in NMEA-0183 messages at 50\n\nHz. The receiver is connected to 2 antennas so it can also estimate its attitude and use the heading\n\nand pitch angles to help estimating an accurate position. An interesting remark is that initially\n\nwhen the receiver was set up as Standard Positioning Service (SPS), it was able to receive signals\n\nfrom the GPS, GLONASS, Galileo and BeiDou constellations seamlessly. But when configured in\n\nDifferential Global Positioning System (DGPS) to make use of the SBAS corrections, the receiver\n\nwas only able to track the GPS satellites. After some time trying to circumvent the problem without\n\nluck, it was contacted the Septentrio support and after some emails, the receiver was updated with\n\nthe latest firmware which solved the problem and allowed the receiver position error to halve.\n\nThe Xsens MTi-G (4) only has a 4 Hz update rate for the GNSS receiver, but with the internal\n\nGNSS/INS fusion the update rate can go up to 400 Hz. The device was configured to fuse the all its\n\nsensors and output the solution at 48 Hz.\n\nThe information from both Invensense MPU-9150 (5) is received from the Stellaris Launchpad\n\nat 50Hz and used to calculate the INS solution and the GNSS/INS integration. In the same Google\n\nMaps link provided previously it is also displayed 4 minutes of the INS solution without the aids\n\nof GNSS receivers. After 4 minutes and with the sensors moving at a relatively high speed, the\n\nestimated velocity starts to have a fairly amount of errors and therefore the estimated position drifts\n\na lot from the real position. This solution allow us to have some visual information on how the\n\nerrors grow in this type of sensors.\n\nThe GNSS/INS Integration (6) is estimated in real time using the solution obtained from the\n\nu-blox (1) and the information received from both Invensense MPU-9150 (5) using the fusion\n\nalgorithm described in chapter 3.\n\nThe Solutions 7, 8 and 9, represent a secondary test done in a parking lot with good sky view\n\nto test the accuracy of the receivers in low speeds conditions.\n\nAs expected the solutions 1, 3, and 4 are quite similar in areas with good sky view, however\n\nwhen the conditions start to deteriorate, the errors increase and the solutions diverge.\n\nOne of the most remarkable aspects is the quality of the Septentrio solution when compared to\n\nthe the other two receivers. The fact that it uses two high quality antennas, can track more satellites\n\nsignals, uses multiples frequencies, and has a high update rate, allows the receiver to estimated an\n\nalmost perfect trajectory even in areas with bad sky view and where multipath errors were expected.\n\nAs for the u-blox, in areas with good sky view it tends to yield a solution that follows quite\n\nclose the generated by the Septentrio. However, in areas with big building and narrow streets the\n\nsatellites being tracked starts to decrease and the accuracy of the solution rapidly degrades.\n\nThe Xsens MTi-G has a lower quality GNSS receiver when compared with the other two devices\n\nas it can only measure the code pseudorange, so the device strongly relies on a good GNSS/INS\n\n44\n\n\n\nFigure 23: Vehicle Speed and Number of Satellites\n\nintegration. The solution generated with the Xsens differs quite a bit from the others receivers, this\n\ncan be seen mostly after road turns (IMU rotations) where the solution tends to delay a bit and\n\nbecome parallel to the others solutions.\n\nThe following figures in this section represent a comparison between the u-blox (1) and the\n\nSeptentrio (3), as the Xsens MTi-G doesn\u2019t share this information it\u2019s impossible analize it.\n\nFigure 23 shows the speed of the vehicle and the number of satellites being used to estimated\n\nthe position by the receivers during the route. As expected the reported velocity by both receivers\n\nis quite similar, and the drops in satellites tracked affect both receivers. Figure 24 shows the 1?\n\nerrors for the latitude, longitude and altitude measurements. Their mean value is estimated in the\n\nequation 64 and 65. A zoomed version of the 1? errors can be seen in Figure 26 for two different\n\nsituations of the route, one with good sky visibility and the other one not so much. In that figure,\n\nboth plots have the same X-Axis scale (4 minutes) but the Y-Axis is different between them.\n\nAnalysing the plots, the NMEA messages, and the map, we can see that the first three big drops\n\nin satellites that occur between 06:39 and 06:42, correlates with three underpasses where the signals\n\nare partially blocked. As the Septentrio can track more satellites, these drop doesn\u2019t affect it that\n\nmuch even when reporting high errors. However, the first underpass makes the u-blox completely\n\nlose its positioning due to the lack of available satellites. The next big drop it is also an underpasses,\n\nbut this time 150 meters long without sky view followed by a second small one. This time it is\n\nexpected for the GNSS receivers to have some troubles with the signals. It is also a good time to\n\n45\n\n\n\nFigure 24: Latitude, Longitude and Altitude - 1 Sigma Errors\n\nsee how long they will take to recover and start reporting an accurate position again.\n\nAnalysing the NMEA messages and Google Maps, the u-blox was 9 seconds without being able\n\nto estimate a position, and then took 2.5 seconds to estimate an accurate position which was 50\n\nmeters after exiting the underpass. The Septentrio managed to get some signals in the middle of the\n\nunderpass and was only 5 seconds without a position. The accurate position took only 1 second\n\nand was less than 25 meters after exiting the underpass. This can be seen in detail in Figure 27,\n\nwhere each green dot represent an estimated position with 3D Fix. In all these satellite drops the\n\nGNSS/INS integration seems to have taken care of the problem and made a good estimation of the\n\nreal position. However, after the big underpass without sky view, the first values reported by the\n\nu-blox come with high errors and that makes the correction of the GNSS/INS integration to go off\n\nthe road.\n\nSeptentrio 1? LAT =\n1\nn\n\nn\n\n?\ni=1\n\n1? LAT (i) = 0.9402m\n\n1? LON =\n1\nn\n\nn\n\n?\ni=1\n\n1? LON(i) = 0.7245m\n\n1? ALT =\n1\nn\n\nn\n\n?\ni=1\n\n1? ALT (i) = 1.5829m\n\n(64)\n\nu?blox 1? LAT =\n1\nn\n\nn\n\n?\ni=1\n\n1? LAT (i) = 1.7310m\n\n1? LON =\n1\nn\n\nn\n\n?\ni=1\n\n1? LON(i) = 1.4429m\n\n1? ALT =\n1\nn\n\nn\n\n?\ni=1\n\n1? ALT (i) = 1.8365m\n\n(65)\n\n46\n\n\n\nFigure 25: Detailed view from part of the route - 1 - u-blox (left) and Septentrio (right)\n\nThe next two drop in satellites happens after crossing the bridge and when passing a small\n\noverpass, each of this drops is the same overpass but in different directions. In this case both drops\n\ndidn\u2019t cause a great effect in the the accuracy of the solution. After crossing the bridge again and at\n\n06.45, starts a more urban area with the appearance of buildings, trees, and slower traffic. At 06.55\n\nthe receivers were stationary for some time with the signals being partially blocked by high building\n\nclosed to the road and also by a tall bus standing near the antennas. Despite this the receivers were\n\nable to hold the solution with high measurements errors. However, shortly after that they both lose\n\nthe solution in different places due to trees covering the sky. The same thing happened again in the\n\nu-blox at 06.57 when stopped at a traffic light under some trees. This section is very problematic for\n\nboth the GNSS receivers and the inertial sensors, because it has lots of building and trees covering\n\nthe sky and at the same time the road is made of old bricks which introduce a lot of vibrations in the\n\ncar, the IMUs, and the antennas.\n\nFinally at 07.00 starts a slow section with narrow roads, high building close to the road, and\n\nalso a climb where the trees completely cover the sky. This is where high errors start to appear for\n\nthe u-blox and the Xsens, and surprisingly the Septentrio keeps a good solution. Figure 27 shows\n\nthe beginning of this path in detail where we can see that the u-blox completely loses the position\n\nfor some time but the GNSS/INS integration is able to estimates it quite well. Later on, during\n\nthe climb with the trees covering the sky, both receivers were able to hold some satellites, but the\n\nu-blox reports a wrong position and the Integration doesn\u2019t correct it.\n\nAnother way to quickly analyse the accuracy of a GNSS solution is by the fix quality indicator\n\nFigure 26: Latitude 1 Sigma Errors - Zoomed Version\n\n47\n\n\n\nFigure 27: Detailed view from part of the route - 2 - u-blox (left) and Septentrio (right)\n\nbroadcasted in the NMEA messages. When the value is 2, the receiver has a DGPS fix, meaning\n\nthat is using the SBAS satellites and receiving corrections, which helps the accuracy. If the fix\n\nquality is 1 then the receiver only has a SPS fix, so the receiver is only using the common satellite\n\nand the accuracy will depend mainly from quality of the receiver and the antenna. Finally, if the fix\n\nquality drops to 0, then the number of satellites being tracked dropped bellow the minimum 3 and\n\nthe receiver stopped being able estimate the position.\n\nLow Speed Test\n\nThe low speed test allows to investigate how the GNSS receivers behave when used in vehicles\n\nwith slower dynamics and at the same time use the parking spaces to estimate the accuracy of the\n\nsolution and the Google Maps satellite imagery. The path has only 200 meters and consists mainly\n\nin 90 degrees turns and a small loop at the end. To estimate the real velocity was used used the\n\nNMEA messages broadcasted by the Septentrio which is higher accuracy GNSS receiver available\n\n(See Figure 29).\n\nFigure 30 show the trajectory estimated by the receivers, the light blue path is from the u-blox,\n\nthe orange from the Xsens, and the green from the Septentrio. It can be seen that the u-blox and\n\nFigure 28: GNSS Receivers Fix Quality\n\n48\n\n\n\nFigure 29: Low Speed Test - Velocity reported by the Septentrio AsteRx4 Receiver\n\nFigure 30: Low Speed Test - Satellite Image\n\nthe Septentrio started almost in the same place, with the Xsens having a little offset. Either way,\n\nnone of the the solutions are starting in the right place. The real starting point is the middle of the\n\nwhite car, being the closest solution from the u-blox. Nevertheless, these are still good errors for\n\nthe single GNSS receivers. After starting to move, it was always tried to pass as closely as possible\n\nto the middle of both lines of the parking spot. After the first two 90 degree turns, the u-blox started\n\nto have a solution closer to the Xsens, but there are still some differences between all of them.\n\nInterestingly, all the three solution report the final location pretty much in the same place.\n\nTo end this section, Figure 31 show us the estimated 1 sigma errors for the low speed test. Once\n\nagain, the Septentrio\u2019s ability to track multiple satellite constellations in multiple frequencies allows\n\nthe receiver to estimate a more accurate solution. Nonetheless, the u-blox still has a very good\n\naccuracy considering it is only using the GPS and SBAS constellations.\n\n4.4. RTK-GNSS/INS Integration\n\nDuring this test the following solutions were recorded:\n\n1 - RTK-GNSS Positioning with 2 u-blox NEO-6P\n\n2 - RTK-GNSS Positioning with 2 Septentrio AsteRx4\n\n3 - INS Solution from 2 Invensense MPU-9150\n\n4 - RTK-GNSS/INS Integration from the u-blox and the 2 MPU-9150\n\n5 - Low Speed Test using 2 u-blox NEO-6P\n\n6 - Low Speed Test using 2 Septentrio AsteRx4\n\n49\n\n\n\nFigure 31: Low Speed Test - 1 Sigma Error\n\nThe u-blox Solution (1) is processed using the UBX RAW messages and the RTKLIB software\n\nin Kinematic mode. It is worth mentioning that it is being used the RTKLIB version from Tim\n\nEverett which fixes a lot of the bugs that exist in the software, improves the time needed to estimate\n\nthe ambiguities, and also improves the overall stability of the RTK fix solution. His blog is really\n\nworth reading as he explains his modifications followed by images showing the improvements\n\n[Everett, 2016]. The software is outputting the solution to ROS topics as well as NMEA-0183\n\nmessages with an update rate of 5 Hz.\n\nThe Septentrio Solution (2) is quite similar to the previous one, the position mode was changed\n\nto RTK and the IP address from the base station was added as an input server. The receiver it\n\nis still configured to receive all the signals available, estimate the solution, and broadcast it in\n\nNMEA-0183 messages at 50Hz.\n\nThe Solutions 3 to 6 are similar to the previous section, therefore there is no need to explain\n\nhow they were generated again. Appendix I has the link to the new Google Maps with the RTK\n\nroutes, as well as other figures about this section.\n\nWhen generating RTK-GNSS solutions one of the most important things we should pay attention\n\nis the solution fix status. What does this mean?\n\nThe RTK solution can have two values, \"FLOAT\" which is the starting value for the solution\n\nand means that the receiver is getting data from the base station, performing single difference\n\ncorrections, but still doesn\u2019t have the minimum carrier phase ambiguities solved to integer numbers,\n\nand therefore it is still not performing double differences. When the minimum number of satellites\n\nwith their carrier phase ambiguities fixed is reached and the solution passes a quality check, the\n\nreceiver starts performing double differences corrections and the solution is then called \"FIXED\".\n\nThis information is broadcasted in the NMEA messages using the same parameter previously\n\n50\n\n\n\nmentioned as the fix quality indicator. However, in the RTK a float solution is represented by\n\nthe number 5, and the fixed solution by the number 4. If at any time the rover stops receiving\n\ninformation from the base station, this can be easily identified in the fix quality indicator which in\n\nthis case should have the values used for single GNSS positioning.\n\nThe first aspect that need to be noticed, is the time that it takes from booting up the system until\n\nobtaining a fixed RTK solution. For the Septentrio receiver this usually takes less than one minute,\n\nbut the RTKLIB with the u-blox receivers using only GPS and SBAS can take from 5 to 30 minutes\n\ndepending on the satellites being tracked, the atmospheric conditions, and the sky visibility.\n\nThere are two interesting parameters used in the RTKLIB software, the \"minimum fixed\n\nsatellites to obtain a fixed solution\" and the \"minimum fixed satellites to hold the fixed solution\". In\n\nthis case the chosen values were 5 and 4 satellites respectively, which is the lowest value possible\n\nand can have the drawback of generating wrong estimations in the internal EKF, but as the receivers\n\nonly support GPS and SBAS satellites it is probably the best value use.\n\nWhy are these values important? If we think of one example where the base station is tracking\n\n13 satellites and the rover 8 satellites, it is normal for the RTK solution to be only using 5 or 6\n\nsatellites due to the other ones being blocked by restrictions as the low SNR or low position in the\n\nsky. It was shown in section 4.3 that the number of satellites being tracked can drop a lot in some\n\nareas, and reflecting those values with this new information on how the RTK works, we can expect\n\nthe u-blox to have problems holding the fixed solution. As for the Septentrio, with lots of satellites\n\nbeing tracked it can get the minimum satellites for the fixed solution faster and also hold it better.\n\nFigure 32: RTK Vehicle Speed and Number of Satellites\n\n51\n\n\n\nFigure 33: Detailed view from part of the route - 3 - RTK u-blox\n\nAs the route is the same, was performed in similar atmospheric conditions, and almost at the\n\nsame time of the day, it is going to be interesting to see the differences between the RTK and the\n\nnon-RTK solution. The first thing that can be noticed in Figure 32 is that the u-blox estimated speed\n\nhas a lot more noise than the Septentrio.\n\nComparing Figure 23 and 32, we can see that both RTK solutions use fewer satellites to estimate\n\nthe position as explained previously. For the u-blox receiver this is actually a problem, as this time\n\nthe receiver actually stops tracking satellites in all the first three overpasses that appear during the\n\nroute. (Figure 33). The Septentrio is also affected in the first overpass but only loses the position\n\nfor 0.5 seconds. The big underpass also has impact in the RTK solution as can be seen in Figure 34.\n\nThe u-blox has no satellite communication for 9 seconds, and after exiting the underpass takes 25\n\nmeters to estimate a new position. The Septentrio is able to track some satellites in the middle of\n\nthe underpass once again, and therefore is only 3.9 seconds without signals. After that it only takes\n\n4 meters for the receiver to broadcast new positions.\n\nThe RTK-GNSS/INS integration has no problems in the first three situations, as the the estimated\n\nroute has a good approximation and follows what is to be expected from the previous measurements.\n\nIn the big underpass the estimation starts appropriately but as the new GNSS measurements arrive\n\nwith high errors and saying that we are moving in the opposite direction, this makes the estimation\n\nto move to the wrong side and go off the road.\n\nAnalysing the fix quality indicator in Figure 35, the Septentrio shows the expected switching\n\nbetween the various types of solutions as the number of satellites increases and decreases. However,\n\nthe u-blox/RTKLIB doesn\u2019t have this behaviour, and after loosing the RTK fix it still tries to recover\n\nFigure 34: Detailed view from part of the route - 4 - RTK u-blox (left) and RTK Septentrio (right)\n\n52\n\n\n\nFigure 35: RTK GNSS Receivers Fix Quality\n\nfrom the RTK float solution but never get it back. This problem will be investigated later on. The\n\nswitching between RTK and standalone GNSS receiver it is also not reported by the RTKLIB, so it\n\nis almost impossible to have that kind of information. However, it is always possible to take some\n\nconclusions on how the system is working by looking at the satellites being tracked.\n\nFor the Septentrio the only thing interesting that happens during the rest of the route, is that\n\nthis switching from float to fix to float can be actually seen in some places as it causes a small\n\nshift in the position. Apart from that, there isn\u2019t anything more that needs to be reported as the\n\nreceiver does its job quite well. As for the u-blox, with good sky view it works fine, but otherwise\n\nthe solution starts to have problems and the multipath errors are really easy to identify. Figure\n\n36 and 37 are the 1 sigma errors reported by the receivers during the route, with their mean value\n\nestimated in equations 66 and 67.\n\nSeptentrio RT K 1? LAT =\n1\nn\n\nn\n\n?\ni=1\n\n1? LAT (i) = 0.2883m\n\n1? LON =\n1\nn\n\nn\n\n?\ni=1\n\n1? LON(i) = 0.2819m\n\n1? ALT =\n1\nn\n\nn\n\n?\ni=1\n\n1? ALT (i) = 0.6522m\n\n(66)\n\nu?blox RT K 1? LAT =\n1\nn\n\nn\n\n?\ni=1\n\n1? LAT (i) = 1.0103m\n\n1? LON =\n1\nn\n\nn\n\n?\ni=1\n\n1? LON(i) = 0.4051m\n\n1? ALT =\n1\nn\n\nn\n\n?\ni=1\n\n1? ALT (i) = 0.8267m\n\n(67)\n\nThe values show a clear improvement from the previous section. However, the u-blox latitude error\n\nseems to be higher than expected when compared to the longitude and altitude.\n\n53\n\n\n\nFigure 36: RTK Latitude, Longitude and Altitude - 1 Sigma Errors\n\nThe high error section of this route that starts at 07.30 and lasts until 07.40, is a little bit\n\nproblematic for the RTK-GNSS/INS integration. Sometimes the GNSS estimations are all over\n\nthe place, and it is difficult for the filter to identify what to follow. Another times the solution is\n\naccurate but the broadcasted covariance values are still high and again makes problems in the data\n\nfusion. Anyway, the estimated RTK-GNSS/INS integration has an overall good performance.\n\nAnother important aspect to take into account is the delay in the communications between the\n\nbase station and the rover, and the RTK correction age used for the solution. Analysing Figure 38\n\nand the NMEA messages, shows that RTKLIB sends every message received in the base station to\n\nthe rover, and then processed the solution with all the information. As the receivers are working at\n\n5Hz, the solution has 0.2 seconds of correction age with additional delay introduced in the datalink.\n\nThe average value for the correction age in the u-blox solution is 0.267 seconds.\n\nThe Septentrio has a higher value for the correction age even when the base station is configured\n\nto send corrections at 5Hz. As the value seemed a little bit odd, both receivers were tested on a\n\nlocal network, and yet the values were oscillating between 13 and 15 seconds. As the receiver was\n\ngetting a good accuracy and reporting that everything was fine with the communication, it was\n\nFigure 37: RTK Longitude 1 Sigma Errors - Zoomed Version\n\n54\n\n\n\nFigure 38: Latency between the Base Stations and the Rover, RTK Correction Age\n\nsupposed that this is its normal operation method. The average value for the correction age in the\n\nSeptentrio solution is 14.490 seconds.\n\nThere is also a loss of network connection for 63 seconds, which corresponds to the problematic\n\narea where the u-blox GNSS solution had problems previously. This miscommunication with the\n\nbase station wasn\u2019t a unique case, as the route was performed several times and in all of them the\n\nsame thing happened in the area seen in Figure 39.\n\nTo try to figure out why the RTK solution from the u-blox wasn\u2019t being able to get past the\n\nFloat solution, the base station and the rover were logged to RINEX files and then Post Processed.\n\nFigure 40 shows us the satellites being observed by both receivers, where the yellow lines represent\n\nthe satellites that can be used to process the solution, and the grey lines satellites that were rejected\n\nbecause their position in the sky make a low angle to the receivers position.\n\nFigure 39: Detailed view from part of the route - 5 - RTK u-blox\n\n55\n\n\n\nFigure 40: u-blox Satellite Cycle-Slips, Base Station (left) and Rover (right)\n\nThe most important part in Figure 40 are the small red strokes overlapped in the yellow lines.\n\nThese strokes are the Loss of Lock Indicator (LLI) flag and represents a cycle slip. The cycle slips\n\noccur when the receiver loses the lock with a satellite and therefore loses count of the number of\n\ncarrier phase cycles. Once a cycle slip occurs, the receiver has lost track of the cycle count and can\n\nnot recover it, meaning that the Kalman filter state in RTKLIB that is estimating the cycle count for\n\nthat satellite must be reset and reconverge again, which can take easily 30 seconds.\n\nThe cycle slips are usually caused by obstructions, reflections, high accelerations, vibration,\n\nElectromagnetic Interference (EMI), lack of antenna ground planes, or anything else that degrades\n\nthe quality of the satellite signal. Figure 41 shows the measurement residual which are the difference\n\nbetween the expected measurement and the observed measurement, and also the estimated change\n\nin the rover position. The Post Processing was able to perform a fix solution (Green lines), but as\n\nthe rover starts to see cycle slips on every satellite for every sample, the satellite phase biases are\n\nreset and the solution has to converge again causing it to always stay on float (Yellow lines).\n\nThe interesting part about these figures is that they show that the cycle slips start 38 seconds\n\nbefore the rover starts moving. The cause of this problem was not found, but as the problem starts\n\nbefore the rover starts moving its likely to be caused by a software problem or by an EMI caused by\n\nsomething inside the car.\n\nFigure 41: u-blox Residuals (left) and Position Estimation (right)\n\n56\n\n\n\nLow Speed Test\n\nFigure 42: RTK Low Speed Test - Velocity reported by the Septentrio AsteRx4 Receiver\n\nThe RTK low speed test is quite similar to the one from the previous section, the path has 180\n\nmeters and consists mainly in 90 degrees turns, with the velocity shown in Figure 42.\n\nThe trajectory started in the right side at the same place as before, and the light blue path is\n\nfrom the u-blox and the green from the Septentrio (See Figure 43. This time the Septentrio starting\n\nposition is actually being reported in the right place, the middle of the white car. The u-blox has a\n\nlittle error but we have to take into account that the receiver it is still not working properly, because\n\nthe test was done with the fix/float problem still happening.\n\nThe accuracy of the solution can be seen by the Septentrio estimations that always go through\n\nthe middle of the parking lines, as opposed to the u-blox that tends to keep its error. The 1 sigma\n\nerror is shown in Figure 44.\n\nFigure 43: RTK Low Speed Test - Satellite Image\n\n57\n\n\n\nFigure 44: RTK Low Speed Test - 1 Sigma Error\n\n58\n\n\n\n5. Conclusion and Future Work\n\nAfter a hard and long work, it is interesting to look back and compare the initial goals with what has\n\nbeen achieved. The main objective was fulfilled as we have a working localization method using\n\nRTK-GNSS/INS integration. At the same time, the project allowed to understand and have deeper\n\nknowledge on how the devices work and what to expect when using them.\n\nIt is possible to implement an INS to correct the GNSS positioning using low cost IMUs,\n\nhowever their quality will have a big impact on the time it takes for the solution to diverge. Higher\n\nquality IMUs allows the estimated solution to be accurate during more time without GNSS signals\n\nas they are composed by better sensor with lower noises and better bias stability. Nevertheless,\n\nlow cost IMUs with using proper calibration methods and with good implementations can archive\n\ninteresting results.\n\nThe developed INS solution with the two InvenSense MPU-9150 was able to yield a good\n\nsolution for a couple of minutes before diverging and become unusable. In order to obtain such\n\nresults its sensors had to be strictly calibrated and tested multiple times.\n\nThe u-blox NEO-6P used during the dissertation as able to obtain good results when measuring\n\nthe carrier phases observables and working as a Standard Positioning Service (SPS) receiver,\n\nhowever it was not the best choice for Real Time Kinematic (RTK) solutions as it can only track\n\nGPS satellites. The Septentrio AsteRx4 proved to be a really good receiver in DGPS and RTK,\n\nand if coupled with good quality antennas it can reduce most of the expected errors. The GNSS\n\nimplementation showed that even when using the same receiver, the type of observables being\n\nmeasured is really important as it completely changes the accuracy of the solution. Therefore, when\n\nusing only one receiver to estimated the position of field robots, it should be chosen one receiver\n\nthat measures carrier phases. If the robot is using RTK the receivers should be able to receive\n\nsignals from multiple constellations.\n\nThe loosely coupled implementation used during the dissertation obtained good results, but\n\nthere is still room for further improvements. As the system model implemented didn\u2019t correspond\n\nto the used vehicle, the solution had some errors that could have been eliminated if using a more\n\nrestricted model.\n\n59\n\n\n\nFinally, the Google Maps proved to be a good tool to analize the accuracy of these solutions, as\n\nmost of the times it was able to display positions which reflected the real world location.\n\nAs these kind of works are never finished and there is always something more that can be made\n\nand improved, here are some suggestions.\n\nDuring the dissertation was bought an higher quality IMU, the Analog Devices ADIS16488A\n\nwith the aim of implementing an INS solution more stable. As the time as short, it ended up never\n\nbeing implemented and tested.\n\nAnother interesting device to test is a low cost GNSS receiver capable of receiving multiple\n\nsatellite constellations. It was proven that the number of satellites being tracked is very important\n\nfor the accuracy and stability of the solution, so testing other receivers is always interesting.\n\nThe data fusion can also be improved and the suggestion here is to implement the an Ackerman\n\nmodel with other sensors in the fusion algorithm. The car speed is easily accessible throw the\n\nOBD-II port, and the Steering Angle Sensor (SAS) through the Controller Area Network (CAN)\n\nbus, so they are good sensors to integrate in the fusion algorithm.\n\n60\n\n\n\n6. Appendixes\n\n61\n\n\n\n62\n\n\n\nAppendix A: Connections Diagram\n\nRover\n\nFigure 45: Rover Connections Diagram\n\nBase Station\n\nFigure 46: Base Station Connections Diagram\n\n63\n\n\n\n64\n\n\n\nAppendix B: Allan Variance\nThe Allan Variance was developed by David Allan in 1966, and is a time domain analysis technique\n\noriginally designed to characterise the noise and stability of clock systems. The technique has been\n\nadopted by the inertial sensor community for its simplicity when compared to others techniques\n\nlike the Power Spectral Density (PSD) or the autocorrelation function. It is also recommended by\n\nthe Institute of Electrical and Electronics Engineers (IEEE) as a standard to analyse accelerometers\n\nand gyroscopes signals [IEEE AES, 1997].\n\nThe method can be applied to any signal in order to determine the character of underlying noise\n\nprocesses, as they cause slopes with different gradients to appear on the plot. Furthermore, the\n\ndifferent processes usually appear in different regions, allowing them to be easily identified (See\n\nFigure 48). A more detailed explanation and implementation of the Allan Variance method can be\n\nfound at [El-Sheimy et al., 2008].\n\nFigure 47: Allan Variance Plot [IEEE AES, 1997]\n\nQuantization Noise\n\nThe quantization noise is a type of error introduced into the signal that results from inaccuracies\n\nin the Analog-to-Digital Converter (ADC), and it is caused by the small differences between the\n\nreal amplitude of the point being sampled and the bits resolution of the ADC. It is represented by a\n\nslope of ?1 in the log-log plot, and the magnitude can be read at T =\n?\n\n3.\n\nAngle/Velocity Random Walk\n\nThe high frequency noise present in all electronic devices has a correlation time much shorter\n\nthan the sampling time, which leads to the angle and velocity random walk. These errors are all\n\n65\n\n\n\ncharacterised by a white noise sequence on the signal output, and can be a substantial source for\n\nerrors in the output signal. It is represented by a slope of ?0.5 in the log-log plot, and the value can\n\nbe obtained directly by reading the slope line at T = 1.\n\nBias Instability\n\nThe bias instability occurs due to the electronics being susceptible to random flickering noise as\n\ndescribed previously. The flat region in the log-log plot can be used to estimate the limit of the bias\n\ninstability.\n\nRate Random Walk\n\nThe rate random walk noise has an unclear origin, but it is likely a limiting case of an exponentially\n\ncorrelated noise with a very long correlation time. It is represented by a slope of +0.5 in the log-log\n\nplot, and the value can be obtained directly by reading the slope line at T = 3.\n\nDrift Rate Ramp\n\nThe previously explained errors are all of random character, however it is also useful to determine\n\nthe response of ?(T ) under deterministic errors. The drift rate ramp noise has a slope of +1 in the\n\nlog-log plot and the amplitude can be obtained from the slope line at T =\n?\n\n2.\n\nImplementation and Results\n\nTo plot the Allan Variance the inertial sensors were placed on a flat surface and left running during\n\n10 hours without any external environmental disturbance. The sensors output were sampled at\n\n100Hz and the measurements recorded to a file, which was later processed in Matlab. The log\u2013log\n\nplot of the Allan standard deviation versus time can be seen in Figure 48 and 49.\n\nDuring the logging period the temperature change was about 0.5\u00b0C, which being such a small\n\nvalue can be neglected. From the MPU-9150 datasheet, a change in 1\u00b0C in the sensors temperature\n\nwill change the accelerometer output 0.02%, and about 0.04% for the gyroscope.\n\nTables 9 and 10 show the accelerometer errors for both Invensense MPU-9150 where it is easy\n\nto notice that the velocity random walk is the dominant error. As the sensors have a 16 bits ADCs\n\nthe quantization noise isn\u2019t present in these IMUs. This is because as the number of bits increase\n\nthe quantization error starts to have less influence. And as expected, the values for the Z-axis are\n\nalmost double than the X and Y-Axis. Table 11 shows the same parameters for the Xsens MTi-G,\n\n66\n\n\n\nand as before the velocity random walk is the dominant error. The Xsens also has a 16 bits ADCs\n\ntherefore the quantization noise it is also not present.\n\nTable 9: Allan Variance - Accelerometer Data from MPU #1\n\nMPU-9150 #1 - ACCELEROMETER PARAMETERS SPECIFICATION\n\nAcc. Quantization Noise Velocity Random Walk Bias Instability Rate Random Walk\nm/s m/s/\n\n?\nh m/s2 m/s/s2\n\nX N/A 0.0866 2.304e-04 8.408e-04\nY N/A 0.0874 2.651e-04 8.716e-04\nZ N/A 0.1174 3.491e-04 11.719e-04\n\nTable 10: Allan Variance - Accelerometer Data from MPU #2\n\nMPU-9150 #2 - ACCELEROMETER PARAMETERS SPECIFICATION\n\nAcc. Quantization Noise Velocity Random Walk Bias Instability Rate Random Walk\nm/s m/s/\n\n?\nh m/s2 m/s/s2\n\nX N/A 0.0869 6.178e-04 8.557e-04\nY N/A 0.0797 2.870e-04 7.634e-04\nZ N/A 0.1293 12.695e-04 12.695e-04\n\nTable 11: Allan Variance - Accelerometer Data from Xsens MTi-G\n\nXsens MTi-G - ACCELEROMETER PARAMETERS SPECIFICATION\n\nAcc. Quantization Noise Velocity Random Walk Bias Instability Rate Random Walk\nm/s m/s/\n\n?\nh m/s2 m/s/s2\n\nX N/A 0.0560 6.054e-04 7.737e-04\nY N/A 0.0403 11.675e-04 5.231e-04\nZ N/A 0.0392 3.176e-04 4.706e-04\n\nReviewing the Tables 12 and 13 which summarise the gyroscope errors for both Invensense\n\nMPU-9150, yields a result very similar to the one experienced by the accelerometers, as the angle\n\nrandom walk is still the most dominant error. Table 14 shows us the same parameters for the Xsens\n\nMTi-G, and as before the angle random walk is the dominant error. In this case, the gyroscope\n\ninside the Xsens has a higher quality than the one used in the Invensense.\n\nTable 12: Allan Variance - Gyroscope Data from MPU #1\n\nMPU-9150 #1 - GYROSCOPE PARAMETERS SPECIFICATION\n\nAcc. Quantization Noise Angle Random Walk Bias Instability Rate Random Walk\n\u00b0 \u00b0/\n\n?\nh \u00b0/s \u00b0/s2\n\nX N/A 0.1903 7.610e-04 19.240e-04\nY N/A 0.1847 8.402e-04 18.294e-04\nZ N/A 0.2106 7.248e-04 20.977e-04\n\n67\n\n\n\nTable 13: Allan Variance - Gyroscope Data from MPU #2\n\nMPU-9150 #2 - GYROSCOPE PARAMETERS SPECIFICATION\n\nAcc. Quantization Noise Angle Random Walk Bias Instability Rate Random Walk\n\u00b0 \u00b0/\n\n?\nh \u00b0/s \u00b0/s2\n\nX N/A 0.2078 24.254e-04 20.279e-04\nY N/A 0.2859 19.144e-04 28.643e-04\nZ N/A 0.2190 13.762e-04 23.248e-04\n\nTable 14: Allan Variance - Gyroscope Data from Xsens MTi-G\n\nXsens MTi-G - GYROSCOPE PARAMETERS SPECIFICATION\n\nAcc. Quantization Noise Angle Random Walk Bias Instability Rate Random Walk\n\u00b0 \u00b0/\n\n?\nh \u00b0/s \u00b0/s2\n\nX N/A 0.0266 1.028e-04 2.752e-04\nY N/A 0.0511 1.274e-04 7.284e-04\nZ N/A 0.0306 1.335e-04 3.053e-04\n\n68\n\n\n\nFigure 48: Allan Variance for Raw Accelerometer Data\n\n69\n\n\n\nFigure 49: Allan Variance for Raw Gyroscope Data\n\n70\n\n\n\nAppendix C: Coordinate Frames and Earth Models\n\nWhen using Satellite or Inertial Navigation Systems it\u2019s important to understand and know the\n\ndifferences between the coordinate frames that can be used to describe the position and attitude.\n\nThese coordinate frames specify the reference points and axes which our measurements will use as\n\ntheir initial reference, and for that reason it\u2019s necessary to understand them and know which ones\n\nour devices use, so we don\u2019t have unexpected results in the data fusion.\n\nEarth-Centered-Inertial (ECI) Frame has its origin in the earth\u2019s centre of mass, with the Z\n\nAxis passing through the north pole. The X Axis points to the sun and passes through the equatorial\n\nline. Finally, the Y Axis is found using the right hand rule. The ECI Frame it\u2019s mostly used for\n\nobjects in space, as the motion equations that describe their orbital motion are easier in non rotating\n\nframes.\n\nFigure 50: ECI and ECEF Coordinates Frames [Grewal et al., 2007]\n\nEarth-Centered-Earth-Fixed (ECEF) Frame also has its origin in the earth\u2019s centre of mass,\n\nwith the Z Axis passing through the north pole. However, the X Axis is fixed to earth and intersects\n\nthe Greenwich Meridian, with the Y Axis once again deduced by the right hand rule.\n\nThe ECEF Coordinates are usually expressed in the Geodetic Coordinates of Latitude, Longitude,\n\nand Altitude (LLA) or in the Universal Transverse Mercator (UTM).\n\nThe Geodetic Coordinates (LLA) is the most common one, and is measured in degrees for the\n\nLatitude and Longitude, and meters for the Altitude. The Latitudes values can change from 90?\n\n(North) to ?90? (South) with the Equatorial line being represented by 0?. The Longitude values can\n\ngo from 180? (East) to ?180? (West), being 0? the prime meridian that passes through Greenwich.\n\nAs for the Altitude, it\u2019s the estimated distance above the Earth\u2019s Ellipsoid defined by the World\n\n71\n\n\n\nGeodetic System Standard being used, which in this case is the WGS84.\n\nThe UTM Coordinates divides the world into 60 North-South zones, each one covering a strip\n\nof 6? wide in Longitude. Each zone is then divided into 20 horizontal bands of 8? wide in Latitude.\n\nThis projection allows to represent the complete globe into a flat surface, where each zone/band\n\ncombination is projected into a plane separately minimising the distortion.\n\nMore informations about the UTM Coordinates and conversions between then can be found at\n\n[DMATM 8358.2, 1989]. The ECEF Frame is used by GNSS Receivers with the LLA Coordinates.\n\nBody and Sensor Frames, are frames fixed to the vehicle and used to represent navigation\n\ndata such as velocity and orientation. The most commonly used systems are the North-East-Down\n\n(NED), the East-North-Up (ENU), and the North-West-Up (NWU). They are all right-handed\n\nsystems where their origin could be defined anywhere, and their names identify the axes orientation.\n\nThese local coordinate frames are the most basic ones and assume that the earth is flat, so they\n\nshouldn\u2019t be used over large distances.\n\nThe NED Frame is typically used for Air and Sea vehicles, where the X Axis points to the\n\nfront of vehicle, the Y Axis to its right, and the Z Axis down.\n\nThe ENU Frame is mostly used for land vehicles, with the X Axis pointing to the front, the Y\n\nAxis to the left, and the Z Axis up.\n\nThe NWU Frame is similar to the ENU Frame, but rotated 90? degrees. It\u2019s worth mention this\n\nframe as some magnetometers report their data in this coordinates.\n\nMore information about Coordinate Frames and transformations between them can be found in\n\n[Crassidis, 2006].\n\n72\n\n\n\nAppendix D: System Dynamics Model Matrixes\n\nFk =\n\n?\n?????????\n\nI F12 ?13 0 ?15\n0 F22 0 ?24 0\n\n0 0 I 0 ?35\n\n0 0 0 I 0\n\n0 0 0 0 I\n\n?\n?????????\n, F12 =\n\n?\n????\n\nF 11 F 12 F 13\n\nF 14 F 15 F 16\n\nF 17 F 18 F 19\n\n?\n???? (68)\n\nF 11 =?t (y?(cos ? sin ? cos ? + sin ? sin ?)+ z?(?sin ? sin ? cos ? + cos ? sin ?))\n\n+\n?t 2\n\n2\n(y?(cos ? sin ? cos ? + sin ? sin ?)+ z?(?sin ? sin ? cos ? + cos ? sin ?))\n\nF 12 =?t (x? (?sin ? cos ?)+ y?(sin ? cos ? cos ?)+ z?(cos ? cos ? cos ?))\n\n+\n?t 2\n\n2\n(x? (?sin ? cos ?)+ y?(sin ? cos ? cos ?)+ z?(cos ? cos ? cos ?))\n\nF 13 =?t (x? (?cos ? sin ?)+ y?(?sin ? sin ? sin ? ?cos ? cos ?)+ z?(?cos ? sin ? sin ? + sin ? cos ?))\n\n+\n?t 2\n\n2\n(x? (?cos ? sin ?)+ y?(?sin ? sin ? sin ? ?cos ? cos ?)+ z?(?cos ? sin ? sin ? + sin ? cos ?))\n\nF 14 =?t (y?(cos ? sin ? sin ? ?sin ? cos ?)+ z?(?sin ? sin ? sin ? ?cos ? cos ?))\n\n+\n?t 2\n\n2\n(y?(cos ? sin ? sin ? ?sin ? cos ?)+ z?(?sin ? sin ? sin ? ?cos ? cos ?))\n\nF 15 =?t (x? (?sin ? sin ?)+ y?(sin ? cos ? sin ?)+ z?(cos ? cos ? sin ?))\n\n+\n?t 2\n\n2\n(x? (?sin ? sin ?)+ y?(sin ? cos ? sin ?)+ z?(cos ? cos ? sin ?))\n\nF 16 =?t (x? (cos ? cos ?)+ y?(sin ? sin ? cos ? ?cos ? sin ?)+ z?(cos ? sin ? cos ? + sin ? sin ?))\n\n+\n?t 2\n\n2\n(x? (cos ? cos ?)+ y?(sin ? sin ? cos ? ?cos ? sin ?)+ z?(cos ? sin ? cos ? + sin ? sin ?))\n\nF 17 =?t (y?(cos ? cos ? )+ z?(?sin ? cos ? ))\n\n+\n?t 2\n\n2\n(y?(cos ? cos ? )+ z?(?sin ? cos ? ))\n\nF 18 =?t (x? (?cos ? )+ y?(?sin ? sin ? )+ z?(?cos ? sin ? ))\n\n+\n?t 2\n\n2\n(x? (?cos ? )+ y?(?sin ? sin ? )+ z?(?cos ? sin ? ))\n\nF 19 =0\n(69)\n\n73\n\n\n\nFk =\n\n?\n?????????\n\nI F12 ?13 0 ?15\n\n0 F22 0 ?24 0\n\n0 0 I 0 ?35\n\n0 0 0 I 0\n\n0 0 0 0 I\n\n?\n?????????\n, F22 =\n\n?\n????\n\nF 21 F 22 F 23\n\nF 24 F 25 F 26\n\nF 27 F 28 F 29\n\n?\n???? (70)\n\nF 21 =?t\n(\n?? (cos ? sin ? cos ? + sin ? sin ?)+ ?? (?sin ? sin ? cos ? + cos ? sin ?)\n\n)\n+ 1\n\nF 22 =?t\n(\n?? (?sin ? cos ?)+ ?? (sin ? cos ? cos ?)+ ?? (cos ? cos ? cos ?)\n\n)\nF 23 =?t\n\n(\n?? (?cos ? sin ?)+ ?? (?sin ? sin ? sin ? ?cos ? cos ?)+ ?? (?cos ? sin ? sin ? + sin ? cos ?)\n\n)\nF 24 =?t\n\n(\n?? (cos ? sin ? sin ? ?sin ? cos ?)+ ?? (?sin ? sin ? sin ? ?cos ? cos ?)\n\n)\nF 25 =?t\n\n(\n?? (?sin ? sin ?)+ ?? (sin ? cos ? sin ?)+ ?? (cos ? cos ? sin ?)\n\n)\n+ 1\n\nF 26 =?t\n(\n?? (cos ? cos ?)+ ?? (sin ? sin ? cos ? ?cos ? sin ?)+ ?? (cos ? sin ? cos ? + sin ? sin ?)\n\n)\nF 27 =?t\n\n(\n?? (cos ? cos ? )+ ?? (?sin ? cos ? )\n\n)\nF 28 =?t\n\n(\n?? (?cos ? )+ ?? (?sin ? sin ? )+ ?? (?cos ? sin ? )\n\n)\nF 29 =1\n\n(71)\n\n74\n\n\n\nAppendix E: RTKLIB\nTo obtain the Real Time Kinematic solution was used the open source software RTKLIB. The\n\nsoftware employs an Extended Kalman Filter (EKF) to perform the RTK solution and solve the\n\nambiguities present in the code pseudorange and carrier phase models [Takasu and Yasuda, 2009].\n\nThe state vector xk and the measurement vector zk, are represented by\n\nxk = [rr,vr,SDL1,SDL2,SDL5]\nT\n\nzk = [?L1,?L2,?L5,PL1,PL2,PL5]\nT\n\n(72)\n\nwhere rr and vr are the rover antenna position and velocity in the ECEF frame, and SDLi are the\n\nSingle Difference carrier phase measurements. The measurement vector zk is defined by the Souble\n\nDifferences phase range and pseudorange measurements from the epoch tk. Using the EKF Predict\n\nStep, the estimated state vector x? and its covariance matrix P? are found as\n\nExtended Kalman Filter - Prediction Step\n\nx?k+1 = Fkx?k (73)\n\nP?k+1 = FkPkFTk + Qk (74)\n\nwhere F and Q are the transition matrix and the covariance matrix of the system noise from the\n\nepoch tk to tk+1. The EKF Correction Step can then be found using the following equations\n\nExtended Kalman Filter - Correction Step\n\nKk = P?kHTk\n(\n\nHkP?kHTk + Rk\n)?1\n\n(75)\n\nxk = x?k + Kk (zk ?h(x?k)) (76)\n\nPk = (I?KkHk)P?k (77)\n\nwhere h represents the measurements model vector, Hk the matrix of partial derivatives, and Rk the\n\ncovariance matrix of the partial errors. A more complete description of the EKF implementation\n\ncan be found in the RTKLIB Manual [Takasu and Yasuda, 2009].\n\nSolving the EKF equations with RTK-GPS Model (Equations 17 and 18) gives us the estimated\n\nrover position with the Single Differences carrier phase ambiguities. The next step to improve the\n\naccuracy of the rover position is to solve the float carrier phase ambiguities into integer values, and\n\n75\n\n\n\nimplement the Double Differences. The floating solution obtained for the rover position with the\n\nSingle Differences, is then transformed to Double Differences with\n\nG =\n\n?\n??????\n\nI6\nD\n\nD\n\nD\n\n?\n??????\n\nx??k = Gxk =\n(\nr?r,v?r,N?\n\n)T\nP?k = GPkGT =\n\n?\n? QR QNR\n\nQRN QN\n\n?\n?\n\n(78)\n\nbeing G the SD to DD transformation matrix, where the Single Differences carrier phase biases are\n\ntransferred to Double Differences carrier phase form in order to eliminate the receiver initial phase\n\nterms ? szbr,0, to obtain integer ambiguities N?, and their covariance QN . The most appropriate integer\n\nvector N? for integer ambiguities is then found by solving the Integer Least Square (ILS) problem\n\nN? = min\nN?Z\n\n((\nN?N?\n\n)T\nQ?1N\n\n(\nN?N?\n\n))\n(79)\n\nTo solve this problem in real time, the RTKLIB software uses a modified LAMBDA method,\n\nMLAMBDA [Teunissen, 1994]. The integer vector solution is then validated by using a simple\n\nratio test defined as the weighted sum of the squared residuals by the second best solution N?2 to the\n\nbest N?, and is used to check the reliability of the solution\n\nR =\n(\nN?2 ?N?\n\n)T\nQ?1N\n\n(\nN?2 ?N?\n\n)\n(\nN??N?\n\n)T\nQ?1N\n\n(\nN??N?\n\n) > Rthres (80)\nIf the solution ratio is higher than the defined threshold, the new position and velocity is finally\n\nobtained with ?\n?r?\n\nv?\n\n?\n? =\n\n?\n?r?\n\nv?\n\n?\n??QRN Q?1N (N??N?) (81)\n\nand defined as a \"FIXED\" Solution. If the solution fails the ratio test, it is instead used the values of\n\nr? and v?, and solution it is called \"FLOAT\".\n\nWhen the receiver is locked to a satellite, the ambiguity that represents the unknown number\n\nof full cycles between the satellite and the receiver is constant. However, when a discontinuity\n\nin the continuous phase lock on the satellite signal occurs (from a power loss, a low SNR, severe\n\nionospheric conditions, or the obstructions from buildings or trees), a cycle slip occurs in the RTK\n\nSolution. Once the signal from the satellite is re-established, a new ambiguity will exist and will\n\nhave to be solved separately from the original ambiguity. Code Pseudorange measurements are\n\n76\n\n\n\nimmune to cycle slips, but Carrier Phase accuracy rapidly degrades if cycle slips occurs. One of the\n\nadvantages of using Post-Processing techniques is the ability to eliminate these Cycle Slips.\n\nFigure 51: GNSS Cycle Slip [Sickle, 2014]\n\n77\n\n\n\n78\n\n\n\nAppendix F: u-blox Base Station 24 Hours Post Processing Results\n\nCSRS-PPP (V 1.05 34613 )\n\nbase.obs\n\nData Start Data End Duration of Observations\n\n2016-06-20 14:58:20.200 2016-06-21 15:04:26.900 24h 6m 6.70s\n\nApri / Aposteriori Code Std\n\n2.0m / 1.568m\n\nObservations Frequency Mode\n\nCode L1 Static\n\nElevation Cut-Off Rejected Epochs Observation &amp; Estimation Steps\n\n10.000 degrees 0.25 % 0.10 sec / 0.10 sec\n\nAntenna Model APC to ARP ARP to Marker\n\nAnt. not in PPP (0 m) 0.000 m\n\n(APC = antenna phase center; ARP = antenna reference point)\n\nEstimated Position for base.obs\n\nLatitude (+n) Longitude (+e) Ell. Height\n\nITRF08 (2016) 40\u00ba 11\u2019 33.0074\u2019\u2019 -8\u00ba 25\u2019 04.3869\u2019\u2019 100.204 m\n\nSigmas(95%) 0.017 m 0.013 m 0.034 m\n\nApriori 40\u00ba 11\u2019 32.827\u2019\u2019 -8\u00ba 25\u2019 04.324\u2019\u2019 112.253 m\n\nEstimated - Apriori 5.575 m -1.499 m -12.049 m\n\n95% Error Ellipse (cm) \nsemi-major: 2.140cm \nsemi-minor: 1.655cm \n\nsemi-major azimuth: -5\u00ba 52\u2019 59.01\u2019\u2019\n\nUTM (North) Zone 29\n\n4449285.864m (N) 549549.471m (E) \n\nScale Factors \n0.99963022 (point) \n\n0.99961450 (combined)\n\n(Coordinates from RINEX file used as apriori position)\n\nNRCan Rapid12:45:59 UTC 2016/06/23 / base.obs 1\n\n79\n\n\n\nEstimated Parameters &amp; Observations Statistics\n\n12:45:59 UTC 2016/06/23 / base.obsNRCan Rapid 2\n\n80\n\n\n\nNRCan Rapid12:45:59 UTC 2016/06/23 / base.obs 3\n\n81\n\n\n\n \n\n \n\n \n\n12:45:59 UTC 2016/06/23 / base.obsNRCan Rapid 4\n\n82\n\n\n\n \n\n \n\n \n\nNRCan Rapid12:45:59 UTC 2016/06/23 / base.obs 5\n\n83\n\n\n\n84\n\n\n\nAppendix G: Septentrio Base Station 24 Hours Post Processing Results\n\nCSRS-PPP (V 1.05 34613 )\n\nSEPT \n\nData Start Data End Duration of Observations\n\n2016-06-20 15:05:31.000 2016-06-21 15:11:29.000 24h 5m 58.00s\n\nApri / Aposteriori Phase Std Apri / Aposteriori Code Std\n\n0.015m / 0.012m 2.0m / 1.575m\n\nObservations Frequency Mode\n\nPhase and Code L1 and L2 Static\n\nElevation Cut-Off Rejected Epochs Observation &amp; Estimation Steps\n\n10.000 degrees 0.00 % 1.00 sec / 1.00 sec\n\nAntenna Model APC to ARP ARP to Marker\n\nSEPPOLANT_X_MF NONE L1= 0.058 m L2= 0.066 m 0.000 m\n\n(APC = antenna phase center; ARP = antenna reference point)\n\nEstimated Position for sept.16o\n\nLatitude (+n) Longitude (+e) Ell. Height\n\nITRF08 (2016) 40\u00ba 11\u2019 32.9839\u2019\u2019 -8\u00ba 25\u2019 04.4044\u2019\u2019 100.609 m\n\nSigmas(95%) 0.001 m 0.001 m 0.003 m\n\nApriori 40\u00ba 11\u2019 33.033\u2019\u2019 -8\u00ba 25\u2019 04.395\u2019\u2019 100.091 m\n\nEstimated - Apriori -1.516 m -0.229 m 0.518 m\n\n95% Error Ellipse (mm) \nsemi-major: 1.374mm \nsemi-minor: 0.748mm \n\nsemi-major azimuth: 91\u00ba 47\u2019 25.98\u2019\u2019\n\nUTM (North) Zone 29\n\n4449285.137m (N) 549549.062m (E) \n\nScale Factors \n0.99963022 (point) \n\n0.99961443 (combined)\n\n(Coordinates from RINEX file used as apriori position)\n\nNRCan Rapid13:13:29 UTC 2016/06/23 / sept.16o 1\n\n85\n\n\n\nEstimated Parameters &amp; Observations Statistics\n\n13:13:29 UTC 2016/06/23 / sept.16oNRCan Rapid 2\n\n86\n\n\n\nNRCan Rapid13:13:29 UTC 2016/06/23 / sept.16o 3\n\n87\n\n\n\n \n\n \n\n \n\n13:13:29 UTC 2016/06/23 / sept.16oNRCan Rapid 4\n\n88\n\n\n\n \n\n \n\n      \n\nNRCan Rapid13:13:29 UTC 2016/06/23 / sept.16o 5\n\n89\n\n\n\n90\n\n\n\nAppendix H: GNSS/INS Integration\nThe routes can be seen with better quality using the Google Maps in the following address,\n\nhttps://drive.google.com/open?id=1qAzMKi3yE7Z3ePCLC49Nmok6no0&amp;usp=sharing\n\n91\n\nhttps://drive.google.com/open?id=1qAzMKi3yE7Z3ePCLC49Nmok6no0&amp;usp=sharing\n\n\n92\n\n\n\nAppendix I: RTK-GNSS/INS Integration\nThe following paths can be seen with better quality using the Google Maps in the following address,\n\nhttps://drive.google.com/open?id=10ep9klfXXHQZyv4z90c8nV8kkiY&amp;usp=sharing\n\n93\n\nhttps://drive.google.com/open?id=10ep9klfXXHQZyv4z90c8nV8kkiY&amp;usp=sharing\n\n\n94\n\n\n\nBibliography\n\n[Bar-Shalom et al., 2004] Yaakov Bar-Shalom, X. Rong Li, and Thiagalingam Kirubarajan. Esti-\n\nmation with Applications to Tracking and Navigation: Theory, Algorithms, and Software. John\n\nWiley &amp; Sons, 2004.\n\n[Cabrita et al., 2015] Gon\u00e7alo Cabrita, Raj Madhavan, and Lino Marques. A framework for remote\n\nfield robotics competitions. In Autonomous Robot Systems and Competitions (ICARSC), 2015\n\nIEEE International Conference on, pages 192--197. IEEE, 2015.\n\n[Carcanague, 2013] S\u00e9bastien Carcanague. Low-cost GPS/GLONASS Precise Positioning Algo-\n\nrithm in Constrained Environment. PhD thesis, Universit\u00e9 de Toulouse, 2013.\n\n[Crassidis, 2006] John L. Crassidis. Sigma-point kalman filtering for integrated gps and inertial\n\nnavigation. IEEE Transactions on Aerospace and Electronic Systems, April 2006.\n\n[DMATM 8358.2, 1989] DMATM 8358.2. The universal grids: Universal transverse mercator\n\n(utm) and universal polar stereographic (ups). DMA Technical Manual, September 1989.\n\n[El-Sheimy et al., 2008] Naser El-Sheimy, Haiying Hou, and Xiaoji Niu. Analysis and Modeling\n\nof Inertial Sensors Using Allan Variance, volume = 57. Ieee Transactions On Instrumentation\n\nAnd Measurement, 2008.\n\n[Elisson and Gassler, 2014] Viktor Elisson and Gabriel Gassler. Low cost relative gnss positioning\n\nwith imu integration. Master\u2019s thesis, Chalmers University of Technology, 2014.\n\n[Everett, 2016] Tim Everett. Exploring ultra-low cost precision gps with rtklib and ublox receivers,\n\n2016.\n\n[Fraga et al., 2013] Jorge Fraga, Jo\u00e3o Sousa, Gon\u00e7alo Cabrita, Paulo Coimbra, and Lino Marques.\n\nSquirtle: An ASV for Inland Water Environmental Monitoring. ROBOT2013: First Iberian\n\nRobotics Conference, pages 33--39, 2013.\n\n[Fraga, 2012] Jorge Fraga. Trajectory Control for an Unmanned Surface Vehicle. Master\u2019s thesis,\n\nFaculdade de Ci\u00eancias e Tecnologia da Universidade de Coimbra, 2012.\n\n95\n\n\n\n[Ge and Lewis, 2006] Shuzhi Sam Ge and Frank L. Lewis. Autonomous Mobile Robots: Sensing,\n\nControl, Decision Making and Applications. Taylor &amp; Francis, 2006.\n\n[Grewal and Andrews, 2015] Mohinder S. Grewal and Angus P. Andrews. Kalman Filtering:\n\nTheory and Practice with MATLAB. John Wiley &amp; Sons, 2015.\n\n[Grewal et al., 2007] Mohinder S. Grewal, Lawrence R. Weill, and Angus P. Andrews. Global\n\nPositioning Systems, Inertial Navigation, and Integration. Wiley, 2nd edition, August 2007.\n\n[Gustafsson, 2010] Fredrik Gustafsson. Statistical Sensor Fusion. Studentlitteratur, 2010.\n\n[Gustafsson, 2014] Johan Gustafsson. Orientation estimation of a rigid multi body system using ac-\n\ncelerometers, gyroscopes and the geometry. Master\u2019s thesis, Chalmers University of Technology,\n\n2014.\n\n[Hjelmare and Rangsj\u00f6, 2012] Fredrik Hjelmare and Jonas Rangsj\u00f6. Simultaneous localization\n\nand mapping using a kinect in a sparse feature indoor environment. Master\u2019s thesis, Link\u00f6ping\n\nUniversity, 2012.\n\n[Hol, 2011] Jeroen Hol. Sensor fusion and calibration of inertial sensors, vision, ultra-wideband\n\nand gps. Master\u2019s thesis, Link\u00f6ping University, 2011.\n\n[Hoque and Jakowski, 2012] M. Mainul Hoque and Norbert Jakowski. Global Navigation Satellite\n\nSystems: Signal, Theory and Applications, chapter Ionospheric Propagation Effects on GNSS\n\nSignals and New Correction Approaches. InTech, 2012.\n\n[IEEE AES, 1997] IEEE AES. IEEE Standard Specification Format Guide and test Procedure for\n\nSingle-Axis Interferometric Fiber Optic Gyros. IEEE Std. 852-1997 (R2008), 1997.\n\n[Jeffrey, 2010] Charles Jeffrey. An Introduction to GNSS: GPS, GLONASS, Galileo and other\n\nGlobal Navigation Satellite Systems. NovAtel Inc., 2010.\n\n[Kelly, 1994] Alonzo Kelly. A 3d state space formulation of a navigation kalman filter for\n\nautonomous vehicles. Technical Report CMU-RI-TR-94-19, Carnegie Mellon University,\n\n1994.\n\n[Kreinar, 2013] Edward Joseph Kreinar. Filter-based slip detection for a complete-coverage robot.\n\nMaster\u2019s thesis, Case Western Reserve University, 2013.\n\n[Lopes, 2011] Hugo Lopes. Attitude Determination of Highly Dynamic Fixed-wing UAVs - A\n\nMEMS-AHRS/GPS Integration. Master\u2019s thesis, Instituto Superior T\u00e9cnico, 2011.\n\n96\n\n\n\n[Madgwick, 2010] Sebastian O.H. Madgwick. An efficient orientation filter for inertial and iner-\n\ntial/magnetic sensor arrays. Technical report, University of Bristol, April 2010.\n\n[Magnusson and Odenman, 2012] Niklas Magnusson and Tobias Odenman. Improving absolute\n\nposition estimates of an automotive vehicle using GPS in sensor fusion. Master\u2019s thesis, Chalmers\n\nUniversity of Technology, 2012.\n\n[NAVSTAR, 2008] NAVSTAR. GPS Standard Positioning Service Performance Standard. US-\n\nDOD, 4th edition, 2008.\n\n[Nemra and Aouf, 2010] Abdelkrim Nemra and Nabil Aouf. Robust INS/GPS Sensor Fusion for\n\nUAV Localization Using SDRE Nonlinear Filtering. IEEE Sensors Journal, 10(4):789--798,\n\n2010.\n\n[Newman, 2003] Paul Michael Newman. C4b---mobile robotics. Accessed, 2, 2003.\n\n[OlliW, 2013] OlliW. IMU Data Fusing: Complementary, Kalman, and Mahony Filter, 2013.\n\n[O\u2019Reilly et al., 2009] Rob O\u2019Reilly, Alex Khenkin, and Kieran Harney. Sonic nirvana: Using\n\nmems accelerometers as acoustic pickups in musical instruments. Analog Dialogue, 43, 2009.\n\n[Petrovski, 2014] Ivan G. Petrovski. GPS, GLONASS, Galileo, and BeiDou for Mobile Devices:\n\nFrom Instant to Precise Positioning. Cambridge University Press, 2014.\n\n[Renaudin et al., 2010] Val\u00e9rie Renaudin, Muhammad Haris Afzal, and G\u00e9rard Lachapelle. Com-\n\nplete triaxis magnetometer calibration in the magnetic domain. Journal of Sensors, 2010.\n\n[Rodrigues et al., 2013] Paulo Rodrigues, Franscisco Marques, Eduardo Pinto, Ricardo Pombeiro,\n\nAndr\u00e9 Louren\u00e7o, Ricardo Mendon\u00e7a, Pedro Santana, and Jos\u00e9 Barata. RIVERWATCH\n\n- A Marsupial Surface-Aerial Robotic Team for Riverine Environmental Monitoring.\n\nhttp://riverwatchws.cloudapp.net, 2013.\n\n[Rogers-Marcovitz, 2010] Forrest Rogers-Marcovitz. On-line mobile robotic dynamic modeling\n\nusing integrated perturbative dynamics. Technical Report CMU-RI-TR-10-15, Carnegie Mellon\n\nUniversity, 2010.\n\n[Sickle, 2014] Jan Van Sickle. GEOG 862: GPS and GNSS for Geospatial Professionals. Penn\n\nState\u2019s Online Master of GIS, 2014.\n\n[Takasu and Yasuda, 2009] Tomoji Takasu and Akio Yasuda. Development of the low-cost RTK-\n\nGPS receiver with an open source program package RTKLIB. Laboratory of Satellite Navigation,\n\nTokyo University of Marine Science and Technology, 2009.\n\n97\n\n\n\n[Takasu, 2015] Tomoji Takasu. GNSS Precise Positioning and RTKLIB. 2015.\n\n[Terejanu, 2008] Gabriel A. Terejanu. Extended kalman filter tutorial. University at Buffalo, 2008.\n\n[Teunissen, 1994] P. J. G. Teunissen. A new method for Fast Carrier Phase Ambiguity Estimation.\n\nIEEE Position Location and Navigation Symposium, April 1994.\n\n[Titterton and Weston, 2005] David Titterton and John L. Weston. Strapdown Inertial Navigation\n\nTechnology. The Institution of Engineering and Technology, 2005.\n\n[Vectornav, 2015] Vectornav. VectorNav Support Library, 2015.\n\n[Welch and Bishop, 2006] Greg Welch and Gary Bishop. An Introduction to the Kalman Filter.\n\nTechnical Report TR 95-041, University of North Carolina at Chapel Hill, July 2006.\n\n[Woodman, 2007] Oliver J. Woodman. An introduction to inertial navigation. Technical Report\n\nUCAM-CL-TR-696, University of Cambridge, August 2007.\n\n[Xu, 2003] Guochang Xu. GPS Theory, Algorithms and Applications. Springer, 2003.\n\n98\n\n\n\tList of Figures\n\tList of Tables\n\tAcronyms\n\tIntroduction\n\tMotivation\n\tObjectives\n\tGoals and Research Questions\n\tOutline\n\n\tLocalization\n\tGlobal Navigation Satellite System (GNSS)\n\tGNSS Receivers\n\tGPS Operation Principle\n\tGPS Observables\n\tReal Time Kinematic\n\tMultipath\n\tUser Equivalent Range Error (UERE)\n\n\tInertial Navigation System (INS)\n\tInertial Measurement Units\n\tMEMS Accelerometer/Gyroscope Error Characteristics\n\tMEMS Magnetometer Error Characteristics\n\n\n\tGNSS/INS Data Fusion\n\tExperimental Applications in the Literature\n\tExtended Kalman Filter\n\tSystem Dynamics Model\n\tMeasurement Model\n\tGNSS Data\n\tINS Data\n\tComplete Model\n\n\tOther Platform Models\n\tDifferential Drive Steering\n\tSkid Steering\n\tAckerman Steering\n\n\n\tExperimental Results\n\tINS Implementation\n\tRTK GNSS Implementation\n\tGNSS/INS Integration\n\tRTK-GNSS/INS Integration\n\n\tConclusion and Future Work\n\tAppendixes\n\tAppendix Connections Diagram\n\tAppendix Allan Variance\n\tAppendix Coordinate Frames and Earth Models\n\tAppendix System Dynamics Model Matrixes\n\tAppendix RTKLIB\n\tAppendix u-blox Base Station 24 Hours Post Processing Results\n\tAppendix Septentrio Base Station 24 Hours Post Processing Results\n\tAppendix GNSS/INS Integration\n\tAppendix RTK-GNSS/INS Integration\n\tBibliography"}]}}}