{"add": {"doc": {"field": [{"@name": "docid", "#text": "BR-TU.12787"}, {"@name": "filename", "#text": "18521_Veronika-Abramova.pdf"}, {"@name": "filetype", "#text": "PDF"}, {"@name": "text", "#text": "Abstract \n\nNowadays, information is one of the main resources of any company and plays an important role \n\nin decision making. For top management teams, obtaining important information as fast as possible \n\nis a priority, which can become challenging when there is a lot of data to process. Complex Event \n\nProcessing (CEP) engines are able to process incoming data stream and extract important \n\ninformation while filtering non-relevant data. Thus, CEP engines are capable of analyzing \n\nthousands of data records very quickly, reducing the latency between receiving data and processing \n\nit, making it appropriate to be used for decision making. This operational capability, we consider, \n\ncould benefit any data management system built today. But, there are diverse types of information \n\nsystems, applied to a variety of enterprise areas, operating in different environments as well as \n\nrequiring numerous methods to ensure their correct operability. One type of those systems are the \n\nSafety-critical systems, responsible for infrastructures with great impact and that could possibly \n\ncause high damage to people, society or environment. Safety-critical systems are responsible for \n\nperforming operations in critical environments, such as, water storage, petroleum and atomic \n\nstations, vehicle systems, avionics, medical devices, etc. Since those systems are required to \n\ngenerate response and alerts in real-time, it is clear that CEP engines can be a solution for their \n\nperformance goals. But, safety-critical systems have other, and more important, quality attributes \n\nsuch as security, dependability and safety. In this work, we investigate if CEP engines can be used \n\nfor safety-critical applications and are able to cope with the inevitable quality attributes of these \n\nsystems. After describing CEP engines, safety-critical systems and their quality attributes we focus \n\non safety and security and provide a solution for data authenticity as mechanism added to one of \n\nthe most popular CEP engines, ESPER. We conclude that proposed solution provides data \n\nauthenticity but also has considerable performance impact. \n\nKeywords: CEP, Safety-critical, sensor networks \n\n\n\n \n\n \n\nResumo \n\nNos dias de hoje, a informa\u00e7\u00e3o \u00e9 um dos principais recursos de qualquer empresa e desempenha \n\num papel importante na tomada de decis\u00e3o. Para as equipas de gest\u00e3o, a obten\u00e7\u00e3o de informa\u00e7\u00f5es \n\nimportantes o mais r\u00e1pido poss\u00edvel \u00e9 uma prioridade, que pode se tornar desafiadora quando \n\nexistem muitos dados a serem processados. Os mecanismos complexos de processamento de \n\neventos (CEP) s\u00e3o capazes de processar o cont\u00ednuo fluxo de dados, separando a informa\u00e7\u00e3o e \n\nfiltrando os dados de pouca relev\u00e2ncia. Assim, os sistemas da CEP s\u00e3o capazes de analisar milhares \n\nde registros de dados de forma muito r\u00e1pida, reduzindo o atraso entre a rece\u00e7\u00e3o e processamento \n\nde dados, tornando-se conveniente para a tomada de decis\u00e3o. Acreditamos que esta capacidade \n\noperacional, poderia beneficiar qualquer sistema atual de gest\u00e3o de dados. Mas, existem diversos \n\ntipos de sistemas de informa\u00e7\u00e3o, aplicados a uma variedade de \u00e1reas empresariais, que operam em \n\ndiferentes ambientes, al\u00e9m de exigir in\u00fameros m\u00e9todos para garantir sua correta operacionalidade. \n\nUm tipo desses sistemas, s\u00e3o sistemas cr\u00edticos, respons\u00e1veis por infraestruturas com grande \n\nimpacto e que podem causar danos elevados \u00e0s pessoas, \u00e0 sociedade ou ao meio ambiente. Os \n\nsistemas cr\u00edticos s\u00e3o respons\u00e1veis pela realiza\u00e7\u00e3o de opera\u00e7\u00f5es em ambientes cr\u00edticos, tais como \n\narmazenamento de \u00e1gua, esta\u00e7\u00f5es de petr\u00f3leo e at\u00f3micas, sistemas de ve\u00edculos e avi\u00e1rios, \n\ndispositivos m\u00e9dicos, etc. Uma vez que esses sistemas s\u00e3o necess\u00e1rios para gerar resposta e alertas \n\nem tempo real, \u00e9 poss\u00edvel que os motores CEP podem ser uma solu\u00e7\u00e3o para melhorar o \n\ndesempenho desses sistemas. Mas, os sistemas cr\u00edticos possuem outros atributos de qualidade, \n\ncomo a prote\u00e7\u00e3o, a confiabilidade e a seguran\u00e7a. Neste trabalho, investigamos se os motores CEP \n\npodem ser usados em sistemas cr\u00edticos e se s\u00e3o capazes de lidar com os atributos de qualidade \n\ndesses sistemas. Depois de descrever os motores CEP, os sistemas cr\u00edticos e seus atributos de \n\nqualidade, nos concentramos em seguran\u00e7a e prote\u00e7\u00e3o e fornecemos uma solu\u00e7\u00e3o para a \n\nautenticidade de dados como mecanismo adicionado a um dos motores CEP mais populares, o \n\nESPER. Conclu\u00edmos que a solu\u00e7\u00e3o proposta fornece autenticidade de dados, mas tamb\u00e9m tem um \n\nimpacto consider\u00e1vel no desempenho. \n\nPalavras-chave: CEP, Safety-critical, sensor networks \n\n \n\n\n\n \n\n \n\nTable of Contents  \n\n1 Introduction ............................................................................................................................. 1 \n\n1.1 Problem statement ............................................................................................................ 1 \n\n1.2 Methodology .................................................................................................................... 3 \n\n1.3 Contributions .................................................................................................................... 4 \n\n1.4 Outline .............................................................................................................................. 4 \n\n2 CEP Engines and Safety Critical Systems .............................................................................. 5 \n\n2.1 CEP engines ..................................................................................................................... 5 \n\n2.2 Safety-critical systems...................................................................................................... 7 \n\n3 CEP in Safety-critical systems ................................................................................................ 9 \n\n3.1 System monitoring ........................................................................................................... 9 \n\n3.2 Critical infrastructures monitoring ................................................................................. 10 \n\n3.3 Critical Systems management and predictions............................................................... 11 \n\n3.4 Cloud data management ................................................................................................. 12 \n\n3.5 Healthcare....................................................................................................................... 13 \n\n3.6 RFID ............................................................................................................................... 14 \n\n3.7 Controlling system events based on rules ...................................................................... 15 \n\n4 Quality attributes ................................................................................................................... 18 \n\n5 Security in CEP engines........................................................................................................ 21 \n\n5.1 Apache Flink .................................................................................................................. 24 \n\n5.2 Drools ............................................................................................................................. 25 \n\n5.3 ESPER ............................................................................................................................ 26 \n\n5.4 Oracle CEP ..................................................................................................................... 27 \n\n5.5 Sybase Aleri ................................................................................................................... 28 \n\n6 An approach for handling security inside CEP engines ........................................................ 30 \n\n6.1 Security in WSN............................................................................................................. 30 \n\n6.2 Proposed security mechanism ........................................................................................ 33 \n\n\n\n \n\n \n\n6.2.1 Methodology ........................................................................................................... 34 \n\n6.2.2 Setup ....................................................................................................................... 35 \n\n6.2.3 Results ..................................................................................................................... 35 \n\n6.2.4 Discussion of results ............................................................................................... 38 \n\n7 Conclusions and future work ................................................................................................ 39 \n\n7.1 Main conclusions............................................................................................................ 39 \n\n7.2 Limitations ..................................................................................................................... 41 \n\n7.3 Directions for future research ......................................................................................... 41 \n\nReferences ..................................................................................................................................... 42 \n\nAppendix A \u2013 Test executions ...................................................................................................... 51 \n\n2048 bytes p/sensor value ......................................................................................................... 51 \n\n5120 bytes p/sensor value ......................................................................................................... 52 \n\n32 bytes p/sensor value ............................................................................................................. 53 \n\nAppendix B \u2013 Published paper \u2013 COMPLEXIS\u201917 ..................................................................... 54 \n\nAppendix C \u2013 Draft paper ............................................................................................................. 62 \n\n \n\n \n\n \n\n\n\n \n\n \n\nList of Figures \n\nFigure 1 \u2013 Architecture example where data is collected from sensors and is received by CEP \n\nengine using input controllers. Then, the core of the system processes the received data and sends \n\nit to the end user. Parallelly, after being processed, data may be persisted. ................................... 2 \n\nFigure 2 - LiSEP data flow (Zappia, Paganelli &amp; Parlanti, 2012) ................................................ 10 \n\nFigure 3 \u2013 Proposed architecture. System modules are integrated and are necessary for managing, \n\nstoring, correlating and aggregating events. Presented module receives micro events and processes \n\nthose against stored rules. Event processing module is based on ESPER correlation engine (Itria, \n\nDaidone &amp; Ceccarelli, 2014). ....................................................................................................... 11 \n\nFigure 4 \u2013 Integration between system components allows understanding of the entire system at \n\nthe same time. IF part of the system in compromised the rest of the system is affected and anomaly \n\nmay be detected. PDC - Phasor Data Concentrator is responsible for collecting and measuring data \n\nfrom PMUs - Phasor Measurement Units that are devices that use signals to measure power \n\nquantity (Cerullo et al., 2014). ...................................................................................................... 12 \n\nFigure 5 - JTangCMS architecture (Lu et al., 2016). Systems components may be considered \n\nconfigurable plugins which may be added or removed on demand. It is possible to use other \n\navailable components or develop own modulus, depending on preferences and operational \n\nenvironments. ................................................................................................................................ 13 \n\nFigure 6 -  System architecture. There are two components: Coordination Center and Ambulance \n\nmodule, deployed in each vehicle. Coordination center controls each vehicle state in the fleet. \n\nBased on the available information this component should assign vehicles. Vehicle component \n\nconstantly analyzes and presents current vehicle state (Bruns et al., 2014). ................................ 14 \n\nFigure 7 - Designed Framework System data flow may be divided in two parts: Semantic and \n\nphysical data flows. Collected data is processed and filtered, to remove noisy data, generating basic \n\nevents. Basic events are then processed again, using aggregation, etc., and create other events. In \n\nthe physical data flow, data is received from the sensors, is processed and posteriorly is delivered \n\nto the end-user (Yao, Chu &amp; Li, 2011). ........................................................................................ 15 \n\nFigure 8 - Architecture of solution in CPS system (Ollesch, 2016). ............................................ 16 \n\nFigure 9 - Common software quality attributes (Elzinga, 2017). ................................................. 18 \n\nFigure 10 \u2013 Example of window that considers and analyzes 5 events which are considered the \n\nnew events and other are old events (Oracle, 2017). .................................................................... 22 \n\nFigure 11 - Apache Flinx web console dashboard. Provides overview of the running and last \n\ncompleted jobs (Flink, 2017) ........................................................................................................ 25 \n\n\n\n \n\n \n\nFigure 12 - Drools Web UI. Presents the project rules and events that are triggered when \n\nmeaningful events are detected. Also in the bottom section, there is error and problems report, \n\ngenerated while running a specific project (Jboss, 2017). ............................................................ 26 \n\nFigure 13 - Esper web GUI. On the right side are defined EPL statements, one with data schema \n\nand other one with desired rule. In the center are presented events and on the right side are shown \n\nthe results (Klendar, 2017). ........................................................................................................... 27 \n\nFigure 14 - Oracle CEP rules tab. Allows adding system rules that will be used while analyzing \n\nincoming data. This statement defines that each time window will retain two events with metric \n\nvalue higher than 5000 (Oracle, 2017). ........................................................................................ 28 \n\nFigure 15 - Aleri Studio UI with source stream, responsible for receiving data which posteriorly is \n\nsent to other stream components (filter/aggregate/join/... streams). It is possible to identify data \n\nfields that are considered inside the stream: Id, Symbol, Price, Shared and Trade Time.  (Sybase, \n\n2010). ............................................................................................................................................ 29 \n\nFigure 16 - Proposed solution for validation of data authenticity. Operational flow is represented \n\nusing arrows. Orange boxes represent string values, such as, IDs. Blue ones represent numerical \n\nlong value which is the sensor value. Green is the final message that is transferred from the sensor \n\nto the ESPER and it consists of hashed sensor ID and value. Decision component (dark red) \n\ncompares the IDs and validates the sensor authenticity. ............................................................... 34 \n\nFigure 17 - Execution time, in seconds, with sensor value of 2KB. Each point represents different \n\nnumber of records, starting with 1000000, up to 10000000 and 100000000. Presented numbers are \n\nthe average of 10 executions ......................................................................................................... 36 \n\nFigure 18 - Execution time with 5KB per sensor value. Were performed 1000000, 10000000 and \n\n100000000 operations. Each value is average from 10 executions. ............................................. 37 \n\nFigure 19 - Throughput obtained during the execution of tests using 5KB of data per value and \n\n100 million of operations .............................................................................................................. 38 \n\n \n\n \n\n\n\n \n\n \n\nList of Tables \n\nTable 1 - Quality attributes ........................................................................................................... 20 \n\nTable 2 - CEP engines security attributes. .................................................................................... 23 \n\n \n\n  \n\n\n\n \n\n \n\nAcronyms and Definitions \n\nAES - Advanced Encryption Standard \u2013 encryption method developed by U.S. government. Uses \n\nsymmetric key algorithm to encrypt transferred data and decrypt on the destination. \n\nCEP \u2013 Complex Event Processing \u2013 standard executable language for specifying actions within \n\nbusiness processes with web services. \n\nCoAP - Constrained Application Protocol \u2013 web application protocol used for communication \n\nbetween constrained devices, network components with low processing and power capabilities, \n\nthat are part of the same system. \n\nCRM \u2013 Customer Relationship Management \u2013 enterprise tools and processes focused on the client \n\nrequirements, interaction and overall interaction between the corporate and client. \n\nDTLS - Datagram Transport Layer Security \u2013 protocol used to provide communication security \n\nin UDP protocol communication. \n\nHDFS - Hadoop Distributed File System \u2013 file system used in complex and distributed \n\napplications, providing fast and fault tolerance access to the data. \n\nNASA - National Aeronautics and Space Administration \u2013 United States federal agency focused \n\non technological research and space exploration. \n\nRFID - Radio-Frequency Identification \u2013 identification and tracking of hardware objects using \n\nspecial tags that contain their id, using radio waves.  \n\nSH1 - Secure Hash Algorithm 1 \u2013 cryptographic hash function used to compute message, thus \n\nmaking data secure, before it is transferred between network components.  \n\nSSL - Secure Socket Layer \u2013 standard for secure communication via TCP. The communication \n\ndata is transferred via secure channel, where all the data is encrypted. \n\nTCP \u2013 Transmission Control Protocol \u2013 standard that defines how to establish and maintain a \n\nnetwork communication via which application programs can exchange data. \n\nTLS - Transport Layer Security \u2013 protocol used for providing data security to communication \n\nbetween two applications. \n\nUDP - User Datagram Protocol \u2013 communication protocol which send data packages between \n\nconnected nodes. \n\n\n\n \n\n \n\nWSN \u2013 Wireless Sensor Network -  network consistent of geographically distributed sensor \n\ndevices, used for data collection and system monitoring, connected through wireless. \n\n6LoWPAN \u2013 IPv6 over Low Power Wireless Personal Area Networks \u2013 network where each node \n\nhas its own IP address and system components can communicate and establish internet \n\nconnection. \n\n \n\n\n\n\n\n1. Introduction \n\n \n\n1 \n\n \n\n1 Introduction \n\nIn this chapter, we begin by describing the problem and the purpose of the realization of this work \n\nand then present our motivation as well as the main contributions of this project. \n\n1.1 Problem statement  \n\n \n\nComplex Event Processing (CEP) can be defined as a set of tools and techniques for analyzing and \n\ncontrolling event streams consistent of data, gathered from different sources. While data is being \n\ncollected and before it has been processed, this raw data is useless for management, decision \n\nmaking or performance analytics. CEP engines provide a fast processing and filtering of this data \n\nallowing understanding of what is happening within the system, business opportunity and problem \n\nidentification, and more efficient usage of information for enhancing the operational performance \n\nand security (Luckham, 2008). Due to their popularity, CEP engines have been used in different \n\nsystems, regardless of the enterprise area. Those systems can be considered a data processing \n\nsolution to wide range of information systems in some of the following areas: business process \n\nautomation, schedule and control processes, network monitoring and performance prediction, \n\nfraud and intrusion detection, risk management, military, power grid monitoring, etc. (Carvalho, \n\n2008). Figure 1 presents the interaction of CEP engine with other system components, directly \n\nconnected to it. While sensor values are constantly being streamed, CEP engine must process those \n\nand detect meaningful data, patterns, relations and provide this information to the end user as \n\ncharts, data tables or alerts. Simultaneously, analyzed data is persisted so it could be used for \n\nhistorical analysis. \n\n\n\n1.Introduction \n\n \n\n2 \n\n \n\n \n\nFigure 1 \u2013 Architecture example where data is collected from sensors and is received by CEP engine using input \n\ncontrollers. Then, the core of the system processes the received data and sends it to the end user. Parallelly, after \n\nbeing processed, data may be persisted. \n\nBesides filtering data with simple queries, CEP can express rules that cannot be easily defined in \n\nother paradigms, such as, if-then paradigm, timestamp validation, timeouts, event patterns or even \n\nthe absence of events (Adi, 2006). We still should notice that this data processing and filtering is \n\nnot a totally disruptive technology, for many years\u2019 data warehouses have been responsible for \n\nanalyzing and correlating multiple dimensions of the data. Main difference between those \n\napproaches is the processing timing. Since a data warehouse does not process data instantly it may \n\nnot be considered the best solution for many current applications since there would exist a delay \n\nbetween data reception, persistence and analysis. Instead, data should be processed and events \n\nfired in real-time environment (Oberoi, 2007). Besides financial interest from companies, CEP \n\nengines are constantly being studied and improved by researchers and developers. This enables \n\nconstant advance and growth of many available open-source project, developed and tested by the \n\ncommunity. Also, major companies, such as, Oracle, IBM, Microsoft, etc., have been showing \n\ninterest in event processing and provide their own solutions (Oracle, 2017), (Ali et al., 2009). \n\nHowever, most of the available engines are seen just as filters and do not provide some of the \n\nquality attributes that are required in most of the systems, starting from relatively simple single-\n\ninstance system and up to large processing distributed solution. With the increase of the system \n\nsize and its operational impact, there is a need to provide necessary mechanisms to guarantee its \n\noperability. There are many different quality attributes and, sometimes, it may be necessary to \n\nsacrifice some of those to provide others. For example, it may be necessary to slightly reduce \n\nperformance to guarantee safety, using data encryption or backup management to ensure system\u2019s \n\navailability. Regardless, any computer system should be able to cover at least some of those quality \n\nattributes to be considered reliable. It is important to notice that some of the quality requirements \n\nmay be considered indispensable by the industry standards and in this case, the final system should \n\nprovide at least the required mechanisms. Those standards do vary from area to area but there are \n\navailable basic guidelines, applicable to any system (NPES, 2005). \n\n\n\n1. Introduction \n\n3 \n\n \n\nIn this study, we focus on safety-critical systems, responsible for performing high impact \n\noperations and, therefore, those systems should be carefully designed since their incorrect \n\noperability may result in endangering human lives or property. Those systems should be able to \n\nfunction in different environments while providing fast response, high performance and \n\navailability, security, robustness, fault-tolerance and so on.  \n\nIf we consider the performance, focusing on data processing, we believe that CEP engines would \n\nbe highly beneficial for the safety-critical systems. Since they would reduce the required \n\nprocessing time as well as eliminate data noise, reducing the amount of data to be processed. This \n\napproach would allow faster transformation of data into information. But even while focusing on \n\nthe performance, other quality attributes may not be neglected in critical systems and should \n\ncovered either by the engine itself or by the remaining of the system. Our research question is: Can \n\nCEP engines be used in safety-critical systems? To answer this question, we begin by studying \n\nCEP engines and safety-critical systems, concentrating on their operational environments and \n\nrequired quality attributes. After identifying the attributes that some of the engines provide, we \n\nfocus our attention on two attributes that have been neglected: safety and security. To better \n\nunderstand those attributes, we investigate what security mechanisms can be used and which ones \n\nare the most important in any system. Finally, we provide a solution for data authenticity, as \n\nmechanism added to a CEP engine. Besides our research question, by the end of our study we \n\nexpect to also answer the following questions: What are the general and indispensable \n\nrequirements of a safety-critical systems? What qualities current CEP systems offer? Do CEP \n\nengines provide any security mechanisms that are necessary in a safety-critical system? Which \n\nmechanism could be added to a CEP engine as a security measure? By answering these questions, \n\nwe deliver information about security required in critical systems, specified by the industry \n\nstandards versus security offered by existent CEP engines. In case those engines are not capable \n\nof covering the requirements that means that it will be necessary to either integrate other \n\ncomponents or the system itself should validate the incoming data and guarantee privacy. \n\n1.2 Methodology \n\nWe divided our study in three stages: \n\n\u2022 Study of the applicability of CEP engines in critical systems while describing some of the \n\nexistent solutions as well as the evaluation of their quality attributes. We describe some of \n\nthe studies and quality attributes that were considered by the authors; \n\n\u2022 Identify required quality attributes and consider two of the most neglected: safety and \n\nsecurity. For that purpose, we study some of the most popular CEP engines and provide \n\nthe list of the quality attributes that those engines offer; \n\n\n\n1.Introduction \n\n \n\n4 \n\n \n\n\u2022 While focusing on one engine, ESPER, we propose a security mechanism for validation of \n\ndata authenticity. By adding that mechanism to the engine, we ensure that only reliable \n\ndata is processed. \n\n1.3 Contributions \n\nIn practice, the main contributions of this work are: \n\n\u2022 Definition of the quality attributes in safety-critical systems. The knowledge of required \n\nquality attributes allows not only better understanding of those systems but also provides \n\nthe operation requirements. Those quality attributes have also been discussed in our \n\npublished paper, presented in appendix B; \n\n\u2022 Evaluation of complex event processing engines considering required quality attributes. \n\nThe comparison of those quality attributes allows understanding the applicability of \n\ncomplex event processing in safety-critical systems; \n\n\u2022 Development of a security mechanism, focused on data authenticity, for validation of data \n\nbefore it is processed. Depending on the architecture some of the existent solutions may \n\nnot be the most appropriate or even usable. \n\n1.4 Outline  \n\nThe remainder of this document is organized as follows: section 2 presents the background for our \n\nwork, describing existent studies of CEP engines and safety-critical systems. Then, section 3 \n\ndescribes the application of CEP engines in safety-critical systems as well as quality attributes of \n\nthose systems. Section 4 describes the quality attributes that are important in safety-critical systems \n\nand evaluates CEP engines in terms of those attributes. Section 5 discusses the security \n\ncharacteristics and requirements in safety-critical systems and complex event processing engines, \n\nwhile section 6 describes the proposed solution that focuses on adding security, data authenticity \n\nmechanism to ESPER. Finally, section 7 presents our conclusions and future directions. \n\n \n\n \n\n\n\n2. CEP Engines and Safety Critical Systems \n\n \n\n5 \n\n \n\n2 CEP Engines and Safety Critical Systems  \n\nComplex event processing engines have been studied over the past years. Due to their popularity, \n\nthere are available many studies that evaluate their performance, operational characteristics as well \n\nas the quality attributes. Also, has been increasing the number of safety-critical systems and studies \n\nthat investigate failure detection mechanisms, design specifications, system\u2019s quality and \n\noperability. Since besides CEP engines we study safety-critical systems, in this chapter we provide \n\nan overview of the existent solutions. \n\n2.1 CEP engines \n\nWhile providing a CEP overview, (Aidi, 2006) describes some of the most common areas where \n\ncomplex event processing systems are applied and environments where these engines can explore \n\ntheir full potential. Some of the examples are: bulk transaction monitoring and control, fraud \n\ndetection, sales analysis, CRM, message tracking. The author presents some of the key benefits \n\nbrought by those systems. Similarly, (Oracle, 2012) and (Aidi et al., 2006) emphasize their \n\napproach on financial area and propose solutions using CEP. All the authors state that CEP systems \n\nhave a high potential for processing data when it arrives and can provide data of interest in a \n\nsatisfactory amount of time. Since the main goal of CEP is to be agile and efficient in processing \n\ndata so it can be delivered to the end user as soon as possible, (Cockburn, 2016), (Schmidt, Anicic \n\n&amp; Stuhmer, 2012) and (Ammon et al., 2009) investigate the efficiency of those systems in alarm \n\ntriggering and alert management. Were presented the advantages of the CEP systems and described \n\nhow those can be tuned to provide all the required information. Those systems can be used for \n\ncreating alarms in dangerous environments as well as noncritical businesses that completely rely \n\non getting information on time. Therefore, (Daum, G\u00f6tz &amp; Domaschka, 2012) focused their study \n\nmainly on BPM - Business Process Management Systems and describe if CEP can satisfy all the \n\nrequirements of those systems. The authors present other approaches that may be used to gather \n\nand filter data such as, message broadcasting, long, event management, etc. As conclusion was \n\nstated that CEP could be useful technology in supporting business processes in future when this \n\ntechnology evolves.   \n\nConcerned with performance, Oracle released a white paper with evaluation of their CEP engine \n\n(Oracle, 2008). In the study was used a single instance setup and evaluated the processing latency \n\nwhile constantly injecting data. Latency represents the time between sending event to the engine \n\nand receiving a response, while throughput was tested by loading more and more events into the \n\nsystem to be processed. Both number of connections as well as load where being scaled to provide \n\n\n\n2. CEP Engines and Safety Critical Systems \n\n \n\n6 \n\n \n\nbetter latency understanding. System latency is directly affected by the number of clients that \n\ngenerate and send stream and the system should be able to efficiently handle many connections. \n\nThe authors concluded that this engine is capable of efficiently dealing with up to 1 million events \n\nper second with multiple incoming streams. Also, in (Oracle, 2010) is described the system \n\navailability and fault tolerance. Were performed latency tests while discussing system\u2019s \n\nperformance vs availability and concluded that there is a possibility of tradeoff configuration by \n\nthe user, sacrificing one of those qualities. Data availability is also a requirement of sensor-based \n\ncritical systems. Since the CEP engine itself can provide stream availability while ensuring that no \n\ndata is lost or processed more than one time, the need of the rest of the system to handle those \n\ntasks is reduced. Also, CEP engines availability is discussed by (Saboor &amp; Rengasamy, 2013). \n\nWere described the required CEP design factors, such as, scalability, availability, pattern matching \n\nand caching, and provided a set of guidelines for developing a CEP engine. Authors believe that \n\ntheir overview of the methods and mechanisms will help software developers while building their \n\nown solution. Wahl &amp; Hollunder (2012) completed a performance evaluation of three CEP \n\nengines: Microsoft Stream Insight, Esper and Drools. Besides latency, researchers considered load \n\ntests and measured the consumed memory, CPU and latency/throughput. As the conclusion is \n\nstated that all those engines have very similar latency while system resources consumptions are \n\ndifferent. CPU usage was similar for two of the systems while another one showed much higher \n\nprocessor usage. In contrast, the system that consumes more CPU requires much less RAM than \n\nother two engines. Baldoni, Montanari &amp; Rizzuto (2015) proposed a solution that combines \n\nComplex Event Processing and Hidden Markov Models (HMM) to analyze system failures and \n\ntheir symptoms, using specifically defined metrics. The abnormal conditions are detected using \n\nthe defined rules and alert events are fired. The CEP engine provides all the necessary data as well \n\nas the performance metrics while HMM are used for system state specification and recognition. \n\nThe authors state that it is important to be able to detect failures in system components to be able \n\nto prevent the entire system to be compromised. Hence, this work proposes a failure prediction \n\narchitecture, focused on the traffic control systems, named CASPER. In the study is stated that \n\nCASPER exhibits good accuracy and it can generate predictions with a margin of time that allows \n\nrecovery actions to mitigate the upcoming failure occurrence. To ensure system\u2019s security, the \n\nsystem was developed as black box and as non-intrusive as possible. Each isolated module \n\ncommunicates with other and validate if the other component shows any failures. Exchanged data \n\nis validated by the pre-processing module which confirms each package headers. Also, as part of \n\nthe system, exists failure prediction module, which categorizes the system as safe or unsafe. \n\nOther study used ESPER and other two enterprise CEP engines to evaluate their performance \n\n(Mendes, Bizarro &amp; Marques, 2009).  The authors executed different types of queries, starting \n\nfrom simple operations, such as, selections and aggregations and up to join operations and multiple \n\nqueries. It was possible to observe that CEP engines can achieve high throughput while performing \n\nbasic operations while more complex operations require data to be mapped to memory to provide \n\n\n\n2. CEP Engines and Safety Critical Systems \n\n \n\n7 \n\n \n\nhigher throughput. In this study, while working with simple operations the bottleneck was not in \n\nthe CEP system itself, rather the client API, that connected to the engine, was increasing the \n\nprocessing time. Also, it was observed that the window expiration mode (jumping/sliding window) \n\nhad a significant performance impact. Benchmarking results, which show the latencies of a \n\ncommercial CEP product, were presented in another study.  The CEP engine was the WebLogic \n\nEvent Server, an application server designed specifically for event processing applications that \n\nrequire high throughput and reduced latency, while handling large volumes of events (Alves &amp; \n\nRorke, 2008). Finally, performance tests, using Esper and StreamCruncher, were executed by other \n\nauthors, who divided their evaluation in two parts: latency and throughput. It was concluded that \n\nboth engines have their advantages and performance flaws but Esper is the most mature engine \n\n(Dekkers, 2007).  \n\nAfter considering described studies it is possible to understand that there are numerous CEP \n\napplications in different areas. While some of the authors describe available systems, others focus \n\non performance evaluations and state that some of the engines may be more appropriate to use, \n\ndepending on overall system purpose but, overall, complex event processing systems provide high \n\noperational throughput. \n\n2.2 Safety-critical systems \n\nWhile working with safety-critical systems, a study discussed that besides development design, \n\ndocumentation, testing and review that are necessary phases during the development of a critical \n\nsystem. System design must be carefully developed to guarantee that after the development the \n\nsystem will have the expected operability and that all of its components are correctly integrated. \n\nThe authors state that testing may be challenging since to have a good average result it is always \n\nnecessary to perform a lot of repeated executions. Thus, system trustworthiness can also be assured \n\nusing rigorous mathematical techniques in the review process (Parnas, Schouwen &amp; Kwan, 1990), \n\n(Collins, 2013). Similarly, Aftab &amp; Nadeem (2013) address some techniques that should be used \n\nwhile developing a safety critical system. In the authors\u2019 paper are described formal and informal \n\nanalysis techniques, such as, Fault Hazard Assessment (FHA), Fault Tree Analysis (FTA), Failure \n\nMode Effect Analysis (FMEA) and Deductive cause-consequence analysis (DCCA). Different \n\ntechniques may be used to ensure system safety and, although DCCA has high success rate out of \n\nall safety analysis techniques, it has a major drawback which is the inability to consider unintended \n\nbehaviour and, therefore, fails in providing fault tolerance. While considering the safety of safety-\n\ncritical systems, researchers identified several challenges, such as, encryption and authentication \n\nmechanisms, malicious and unsafe commands, lack of knowledge of the system vulnerabilities, \n\netc. To address those challenges are presented security principles that could be integrated into \n\nsafety-critical systems. Authors state that if systems do not have security mechanisms even small \n\nerror occurrences may end up compromising the entire system. By using the proposed guidelines, \n\n\n\n2. CEP Engines and Safety Critical Systems \n\n \n\n8 \n\n \n\nthe system will be capable to recover from errors without having its performance affected. On the \n\nother hand, Axelsson, et al. (2016) describe an agile methodology while developing a safety-\n\ncritical system. Due to the importance of critical systems agile methodology should be adapted to \n\nintegrate hardware and software components and provide necessary early validation, e.g. by \n\nautomation, continuous integration, feedback, transparency and flow of the system. As the \n\nconclusion of their study, the authors state that agile development methodology cannot guarantee \n\nall the requirements and, therefore, other methods should also be adopted. Since safety-critical \n\nsystems should follow some of the available standards during the entire lifecycle, Youn &amp; Yi \n\n(2014) discuss some of the standards that are more applicable to avionic systems. The authors state \n\nthat in current systems both software and hardware components are equally important and required \n\nto process large amounts of data necessary to control the avionic system. Moreover, besides mutual \n\ninfluence between hardware and software, software malfunction may be related to its \n\ncommunication with the hardware. After describing some of the standards that should be applied \n\nand similarities between those, is declared that the performed study provides a better understanding \n\nnot only in terms of software component of the systems but, also, the hardware requirements.  \n\nAny critical system, besides operability, requires bigger amount of security than any other system \n\nand Oedewald &amp; Gotcheva (2015) state that those systems should be gifted with the ability to \n\nanticipate, monitor, respond and learn system\u2019s activities. This approach would guarantee expected \n\nsystem resilience. In the study are described some of the challenges of introducing security in a \n\ncomplex dynamic network of subcontractors, involved in the construction of a new nuclear power \n\nplant in Finland, Olkiluoto. Was concluded that it may be challenging to introduce safety culture \n\nin studied systems since subcontractor companies should prepare the part of the system, that they \n\ndeveloped, to operate with other system components. Related to security, Zio (2016) discusses \n\nrisks and vulnerabilities in critical infrastructures. After describing main concerns and actions, the \n\nauthor concludes that what usually causes system to be open to hazards, failures, malicious attacks \n\nand errors is the systems\u2019 high degree of inter- and intra-connectedness. Avila &amp; Mart\u00ednez (2015) \n\ndescribe safety-critical system monitoring and failure detection. Was provided a probabilistic \n\napproach for constant online monitoring of the system. Proposed solution may be used in diverse \n\napplications, such as, detection of unauthorized access, irregularities in vital signs and other \n\nvariables in intensive care patients, fraud in financial services, and detection of path deviation in \n\nautonomous vehicles. Different fault types, activities, failures description and understanding are \n\nprovided by Hamill &amp; Goseva-Popstojanova (2014). The authors use NASA study as their base \n\nand describe possible system uncertainties, fault types and activities as well as possible relation in \n\nthose. Was possible to detect fault associations and root causes of some of the failures.  \n\nMany studies of the safety-critical systems focus on the system\u2019s monitoring and system\u2019s failure \n\ndetection (or even part of the system). Also, many authors discuss system security and importance \n\nof prevention while dealing not only with third-parties but, also, inside the system itself. \n\n\n\n3. CEP in Safety-critical systems \n\n \n\n9 \n\n \n\n3 CEP in Safety-critical systems \n\nThere is a variety of quality attributes that should be provided by any information system. \n\nHowever, regardless of the system type and size, one of the main attributes is, of course, \n\nperformance. In case of data processing it may be measured as the amount of data that engine \n\nprocesses per amount of time or by evaluating latency (necessary time to receive data, process \n\nstream and send the response). This is also applicable to safety-critical systems that require on-\n\ntime alert generation. In this chapter, we describe some of the safety-critical systems that \n\nincorporate a CEP engine. This part of the study allows us to understand if there are already \n\navailable safety-critical systems that use complex event processing and what system characteristics \n\nare considered. \n\n3.1 System monitoring \n\nCEP systems have been around for quite some time and have been constantly tested, improved and \n\ndeveloped (Mendes, Bizarro &amp; Marques, 2009). Due to the wide range of possible application \n\ndomains, CEP capabilities have been constantly improving, over the past years. Currently they are \n\nused in a variety of software systems as a customizable tool for data processing and analysis. These \n\nengines can completely adapt to the desired system purpose and are able to process and present \n\nmost important data, based on previously defined rules. Therefore, traditionally, CEP systems are \n\npart of more complex systems, inside which they are used to process incoming information, create \n\nalerts based on a collection of rules, and posteriorly provide filtered and summarized data to the \n\nfinal user (Eckert &amp; Bry, 2009). Consequently, those systems are focused on information \n\nextraction and processing of the important data in real-time environments. Although our focus is \n\non safety-critical applications, in this section, to correctly assess the state-of-the-art, we will also \n\nconsider studies reporting on the application of complex event processing in other areas. \n\nThe design and the implementation of a lightweight and extensible Complex Event Processing \n\nengine, called LiSEP is described by Zappia, Paganelli &amp; Parlanti (2012). Figure 2 shows the \n\nprocessing data flow in LiSEP. During the system design specification, the authors were driven by \n\nthe principle of minimizing dependency on external software components and, therefore, LiSEP \n\ndepends solely on the Java Standard Edition libraries, thus minimizing deployment requirements. \n\nMoreover, the LiSEP logic is strictly focused on core event processing, consequently resulting in \n\na lightweight and minimal implementation.  \n\n \n\n\n\n3. CEP in Safety-critical systems \n\n \n\n10 \n\n \n\n \n\nFigure 2 - LiSEP data flow (Zappia, Paganelli &amp; Parlanti, 2012) \n\nThe proposed solution is complemented by the specification of the Event Processing Language, \n\nbased on the SQL syntax. As a proof of the architecture, is proposed a case study on dangerous \n\ngoods monitoring during maritime transport as a part of Italian Ministry for Economic \n\nDevelopment research project, called SITMAR - Integrated system for goods maritime transport \n\nin multi-modal scenarios. More data-focused approach is presented by Evchina &amp; Lastra (2016). \n\nThis work aims aiding the end users of monitoring systems by delivering the selected information \n\nto each user, based on their role in the system. The described approach combines Semantic Web \n\ntechnologies and Complex Event Processing (CEP) for configuration purposes and run-time data \n\nprocessing and analyzing. The authors state that the final developed solution should be able to \n\nprovide ways to deal with multiple devices and multiple users of the system; should be \n\nreconfigurable to reflect changes in the environment and/or user information needs; and finally, \n\nthe device updates should be delivered to users within reasonable amount of time. Considering \n\nthose requirements, the developed approach provides two major advantages. Firstly, the behavior \n\nof the system could be easily changed by only configuring the underlying ontology and, secondly, \n\nCEP usage at runtime makes system event-driven and reactive to frequent changes in the \n\nenvironment. \n\n3.2 Critical infrastructures monitoring \n\nItria, Daidone &amp; Ceccarelli (2014) present an approach for critical situation detection that uses \n\nCEP architecture for real time event analysis as well as the event correlation. Event analysis \n\nconsists of data processing and event correlation corresponds to establishing a relation between \n\ninput events. Those events are gathered from various sources and are necessary for detecting \n\npatterns and situations of interest in the emergency management context. This solution describes \n\nthe engine, developed in the context of the Secure! Project (Secure, 2016). Figure 3 presents the \n\nproposed architecture. \n\n\n\n3. CEP in Safety-critical systems \n\n \n\n11 \n\n \n\n \n\nFigure 3 \u2013 Proposed architecture. System modules are integrated and are necessary for managing, storing, \n\ncorrelating and aggregating events. Presented module receives micro events and processes those against stored rules. \n\nEvent processing module is based on ESPER correlation engine (Itria, Daidone &amp; Ceccarelli, 2014). \n\nThat solution has two main requirements: the correlation module should be adaptable to the \n\npossible changes of the source environment, and it must process the available historical data to \n\nevaluate the actual events considering what has happened before. After submitting the system for \n\ntesting, the authors concluded that their approach can be easily used and maintained. It is also \n\nextensible to other scenarios where the application requires nearly real-time correlation, like \n\nintrusion detection system (Ficco &amp; Romano, 2011) or monitoring of the critical infrastructures. \n\n3.3 Critical Systems management and predictions \n\nSolution for power grid monitoring, using complex event processing, is presented by Cerullo et al. \n\n(2014). The authors claim to be able to provide a detailed treatment of the security issues resulting \n\nfrom the adoption of Wireless Sensor Networks (WSN) and QoS-enabled IP connections. The \n\nproposed solution attempts enhancing current information security and event management \n\ntechnology by improving its capability of detecting and mitigating attacks targeting the \n\nheterogeneous network infrastructure. Figure 4 presents the grid monitoring infrastructure. \n\n\n\n3. CEP in Safety-critical systems \n\n \n\n12 \n\n \n\n \n\nFigure 4 \u2013 Integration between system components allows understanding of the entire system at the same time. IF \n\npart of the system in compromised the rest of the system is affected and anomaly may be detected. PDC - Phasor \n\nData Concentrator is responsible for collecting and measuring data from PMUs - Phasor Measurement Units that are \n\ndevices that use signals to measure power quantity (Cerullo et al., 2014).  \n\nAs an example, in power grid scenario, the attacker may prevent some of the nodes from sending \n\nevents to the connected collector, thus hiding changes in the power grid conditions. The WSN \n\nsecurity probe generates alarms based on the analysis of the network and periodically calculates \n\nthe package generation rate at every node. The developed engine can correlate those alarms to \n\nprotect the visualization server. Besides improving system performance, the authors introduced a \n\nmechanism that controls the number of exchanged data packages inside the system and attempts \n\nidentifying malicious nodes. Also, communication monitoring allows detection of DDoS attacks \n\nand mitigate traffic attacks. Wang &amp; Kuang (2015) propose a traffic prediction method based on \n\nPredictive Complex Event Processing (PreCEP) and Bayesian networks to improve the system\u2019s \n\nprediction accuracy. The prediction model is trained with historical data and it is used to predict \n\nfuture events based on the recent output of basic CEP engine. Was addressed the prediction \n\nproblem for moving objects that can be vehicles or even pedestrian and concluded that the \n\nperformance of the PreCEP still needs to be improved. Currently the parallel method only works \n\nwhen is learning the structure of models in one context and training models for different context. \n\n3.4 Cloud data management \n\nCloud platform monitoring system, JTangCMS - JTang Cloud Monitoring System, is proposed by \n\nLu et al. (2016). The authors claim that proposed solution can deal with the flexibility, scalability, \n\nefficiency and performance challenges of cloud monitoring. Below (see Figure 5) we present the \n\nsystem architecture. \n\n\n\n3. CEP in Safety-critical systems \n\n \n\n13 \n\n \n\n \n\nFigure 5 - JTangCMS architecture (Lu et al., 2016). Systems components may be considered configurable plugins \n\nwhich may be added or removed on demand. It is possible to use other available components or develop own \n\nmodulus, depending on preferences and operational environments.   \n\nThe system gathers all the data using dissemination framework that allows transferring huge \n\namount of runtime information with high throughput and low latency. For that purpose, is used \n\nDDS - Data Distribution Service which partitions the input into smaller parts. After transferring \n\nall the data, it must be analyzed and, therefore, was authors developed a support system using CEP, \n\nnamed JTangCMS. The performed evaluations of the implemented algorithm and DDS-based data \n\ndelivery system state that JTangCMS is an efficient solution and does support intelligent decision \n\nmaking. In Li, Cao &amp; Liu (2013), the authors propose the overall structure and workflow for a \n\nCEP-based monitoring system, which can be applied to a private cloud to alert system failures. \n\n3.5 Healthcare \n\nHealthcare is another highly important area that could potentially take advantages of CEP systems. \n\nWang et al. (2010) describe real-time healthcare applications and state that CEP engines can \n\nefficiently monitor patient behavior and control medical regulations. Similarly, (Foley &amp; \n\nChurcher, 2009) and (Naqishbandi, Sheriff &amp; Qazi, 2015) propose architecture solutions and \n\nrequired characteristics of the systems using complex event processing in healthcare domain. The \n\nauthors state that CEP engines are highly useful for large and critical data processing and can \n\nimprove medical systems. Bruns et al. (2014) proposed an ambulance coordination architecture \n\nthat provides real-time data processing and delivers comprehensive data to the end users. The \n\ndeveloped architecture consists of two core components: CEP and FSM- Finite State Machines. \n\nFigure 6 presents the ambulance coordination architecture. \n\n \n\n\n\n3. CEP in Safety-critical systems \n\n \n\n14 \n\n \n\n \n\nFigure 6 -  System architecture. There are two components: Coordination Center and Ambulance module, deployed \n\nin each vehicle. Coordination center controls each vehicle state in the fleet. Based on the available information this \n\ncomponent should assign vehicles. Vehicle component constantly analyzes and presents current vehicle state (Bruns \n\net al., 2014).  \n\nCEP engine focuses on gathering and analysis of the sensor data streams, emitted by the \n\nambulance, to automatically detect changes of the operational states defined in the FSM. The \n\nauthors defend that efficient and fast patient care requires reliable and up to date information and, \n\ntherefore, presented an approach that determines the actual state of all ambulances as well as \n\npossible relevant mission incidents. Described solution attempts completing research of \n\n(Brotcorne, Laporte &amp; Semet, 2003), (Li et al., 2011), (Ciampolini, Mello &amp; Storari, 2004).  \n\n3.6 RFID \n\nZappia et al. (2014) also present patient related data and usage of CEP systems in healthcare area. \n\nThe goal is to use RFID technology to be able to support clinical management of the patients. The \n\nproposed solution is focused mainly on the following scenarios: patient identification and tracking \n\nas well as the drug administration. The proposed distributed system is based on event abstraction, \n\nevent aggregation and event transformation, and uses those to offer a hierarchical and distributed \n\ndata processing architecture where data is provided by different processing nodes. Overall, the \n\nprojected solution, based on CEP and RFID technologies, is used to support clinical risk \n\nmanagement by means of detecting possibly dangerous patient conditions as well as patient take \n\ncare. A solution for critical situation detection in elderly daily life is proposed by Xu et al. (2014). \n\nThe study emphases on the personal assistance as well as possible risks and identification of the \n\nrequired assistance situations. These situations are detected by analyzing the received data from \n\nthe sensors. This study is focused on ALL \u2013 Ambient Assisted Living technologies and uses \n\n\n\n3. CEP in Safety-critical systems \n\n \n\n15 \n\n \n\nsensors to monitor welfare parameters and environmental conditions as described by Wolf, \n\nSchmidt &amp; Klein (2009). \n\nAnother RFID solution is proposed by Yao, Chu &amp; Li (2011). Is described an RFID framework, \n\nusing CEP, for managing hospital data, gathered from different sources, and the system focused \n\non detecting patterns and medically significant events. Therefore, the authors created prototypes \n\nthat attempt showing that CEP has the ability of providing alerts to the healthcare professionals as \n\nwell as increasing quality of healthcare and patient safety (see Figure 7). One of the main goals \n\nconsists of identifying the patient and tracking all the necessary procedures since there may be \n\nmistakes from part of the hospital staff.  \n\n \n\nFigure 7 - Designed Framework System data flow may be divided in two parts: Semantic and physical data flows. \n\nCollected data is processed and filtered, to remove noisy data, generating basic events. Basic events are then \n\nprocessed again, using aggregation, etc., and create other events. In the physical data flow, data is received from the \n\nsensors, is processed and posteriorly is delivered to the end-user (Yao, Chu &amp; Li, 2011). \n\nAlso, the system provides all the necessary historical data for emergency handling as well as for \n\nhealth problems, medication identification and response. All those characteristics show that this \n\napproach may reduce errors as well as provide faster and more efficient risk management. \n\n3.7 Controlling system events based on rules \n\nCEP scaling solution for processing CPS - Cyber-Physical System data is showed on elevator \n\nscenario to describe the challenges of CEP technology in a CPS context (Ollesch, 2016). Figure 8 \n\nshows the proposed architecture using Kinect sensor. \n\n\n\n3. CEP in Safety-critical systems \n\n \n\n16 \n\n \n\n \n\nFigure 8 - Architecture of solution in CPS system (Ollesch, 2016). \n\nOne of the main challenges of this architecture is the calculation of the floor, since it may be \n\ncalculated wrongly as well as the sensors themselves are subject to errors and can be disturbed \n\nsince, for example, passengers could obstruct the Kinect sensor. CEP systems are based on rules \n\nand using this example was possible to proof that some parts of the system design should be \n\nadjusted. Those adjusts may not be easy to accomplish, depending on the engine that is used. For \n\nexample, considering ESPER engine (Esper, 2016), its rules are embedded inside the program \n\ncode and cannot be externalized. Consequently, each change affects the source code and it will \n\nrequire new system distribution. Wang et al. (2014) also study ESPER as an example and define \n\nthe event process functions, like event attribution extraction and composition determination. The \n\nauthors investigate the challenges in designing a CEP for Cyber-Physical System, and propose a \n\nsemantic enhancement CPS event model. Balogh et al. (2016) propose a conceptual architecture \n\nfor system monitoring that ensures the correct behavior of the system by using a set of different \n\nmonitoring rules. It was developed a prototype using the VIATRA-CEP Event Processing \n\nLanguage (Viatra, 2016). Posteriorly monitoring rules are distributed over the nodes. The system \n\nevaluation was based on development and monitoring of safety-critical embedded systems in the \n\nrailway domain. \n\nBeer &amp; Heindl (2007) overview the state of art in testing dependable event-based systems and \n\nidentify the challenges that should be addressed in the future. Were considered two case studies: \n\nlarge-scale project for business-unit transportation systems and a small-scale telecommunications \n\nproject for Airbus. The study was focused on testing and the authors state that it is an important \n\ntopic and cost reduction of testing may be achieved by developing new and more efficient \n\ntechniques of requirements tracing as well as test-case design and validation. Part of the study was \n\non (Luckham, 2002) who proposed CEP usage for managing multiple events and event causality \n\nto elicit meaningful events in an event-based information system. This is because CEP can evaluate \n\n\n\n3. CEP in Safety-critical systems \n\n \n\n17 \n\n \n\nincoming data and transform it into out coming events. Lang &amp; Cap\u00edk, (2014) present a procedure \n\nfor performing predictive analysis of complex events occurrence in time critical complex event \n\nprocessing systems. Although the authors developed a system in publish-subscribe architecture, \n\nthere were no considerations of safety nor security. But, it is possible tune the system to perform \n\nbetter or worth according to its data and environment. This system adaptability provides better \n\noperational characteristics and makes it more reliable. Similarly, in other study, was stated that \n\nusing CEP it is possible to identify and apply business intelligence rules over the streams of events \n\nand this technology is critical in an environment where time plays an important role, such as, real \n\ntime decision making (Tendick, Denby &amp; Ju, 2016). In the study were investigated the possibilities \n\nand the use of the available methods and techniques for classification and prediction in complex \n\nevent processing. For this purpose, it was designed and implemented an application \n\nCepPredictiveAnalysis, which uses defined methods for predictions and despite certain limitations, \n\nthe system gives acceptable accuracy in financially-oriented applications.\n\n\n\n4. Quality Attributes \n\n \n\n18 \n\n \n\n4 Quality attributes \n\nIn the previous sections we described CEP engines and Safety-critical systems as well as different \n\napplicational areas of those. Quality attributes transcend system type and purpose and are \n\nnecessary in any system to ensure its correct operability. There are different quality attributes that \n\nmay be covered by the system design and implementation and, below, we describe some of those. \n\nAlso, the software quality attributes determine the quality of the final product and define if the \n\ndeveloped system is operating as expected. Different quality attributes may affect some specific \n\nlayers of the software and it is important to find the most appropriate tradeoff between attributes, \n\ndepending on the system purpose and operational environment (see Figure 9).  \n\n \n\nFigure 9 - Common software quality attributes (Elzinga, 2017). \n\nWhile developing a safety-critical system there is a wide range of standards that must be followed \n\nand those standards define some of the system\u2019s requirements (Bowen &amp; Stavridou, 2002). Those \n\nrequirements may also be translated into system quality attributes and define the system \n\ncharacteristics without getting deep inside into its functionalities. Currently software systems \n\npresent, in most cases, a long list of quality attributes (Laranjeiro, Soydemir &amp; Bernardino, 2015) \n\nand, therefore, we decided to consider in this work the most general ones, which are fundamental \n\nin safety-critical systems. Also, we should mention that different works and authors consider \n\ndifferent number of attributes, some being encapsulated by others. Therefore, we studied quality \n\n\n\n4. Quality Attributes \n\n \n\n19 \n\n \n\nattributes described by (Barbacci et al., 1995), (Sommerville, 2004), (Atoum &amp; Bong, 2015). \n\nHence, the considered quality attributes are: \n\n\u2022 Dependability: can be directly translated into trustworthiness of the developed system and \n\nrepresents the confidence in the correct functioning of its operations. One of the dimensions \n\nof dependability is the fault tolerance that states that failure of a part of the system cannot \n\ncompromise the whole system. Also, should be considered the repair capability of the \n\ndesigned system, which describes if it can recover without any intervention, as expected. \n\n\u2022 Security: ensures that extracted, stored and processed by the system data is not easily \n\nintersected or corrupted. There should not be any intentional disruption by the third parties. \n\nAuthentication mechanism is also a requisite since it allows user identification and extends \n\nup to the possibility of the system to recognize the configured devices and treat them as \n\ntrusted. The collected data will be recognized as viable. System vulnerability should be \n\nreduced as much as possible to prevent possible harm by the attackers and important data \n\nexposure. \n\n\u2022 Reliability: describes the probability of the system of performing designed operations in \n\nexpected time. This attribute is tightened with the availability of the system that states that \n\nthe system should have the ability to work with limited amount of data when it cannot be \n\ncollected. There should be available backup data collectors that would gather at least part \n\nof the necessary data. Therefore, reliability considers not only software but hardware and \n\nfirmware modules that are required for correct system functioning. \n\n\u2022 Safety: this is another quality attribute highly related to the reliability. Thus, safety reflects \n\nthe system\u2019s ability to operate, normally or abnormally, without danger of causing human \n\ninjury or death and without damage to the system\u2019s environment. Some of related safety \n\nterms are: hazard, damage and risk. All of those are considered by the standards and usually \n\nare described as a prevention list of measures instead of qualities. \n\nWe believe that, among others, those are some of the most important requirements of critical \n\nsoftware since those ensure the correct system operability and robustness. Also, chosen attributes \n\nenclose other vital software system characteristics, for example, performance, resilience, \n\navailability, etc. \n\nThere are different systems and it is important to understand what quality attributes authors often \n\nconsider and which ones are mostly not covered. In the previous section we have described the \n\nsafety-critical systems that are presented below. The summary of quality attributes analysis is \n\npresented in Table 1. It is important to notice that some of the solutions may have partially \n\naddressed some of the quality attributes, but we just consider overall approach, the authors focus \n\nand goals in the designed architecture.  \n\n \n\n\n\n4. Quality Attributes \n\n \n\n20 \n\n \n\nTable 1 - Quality attributes \n\n \n\nDependability and reliability are quality attributes that are studied and considered in most of the \n\nexistent solutions. After analyzing the results, we concluded that most of the systems are focused \n\non their performance and operability and do not consider safety neither security. Those quality \n\nattributes are often treated as less important than assuring system\u2019s proper functioning or \n\nperformance. Those are more functional characteristics and any designed and developed system is \n\nexpected to work as intended. Some of the authors consider how their system is affected by security \n\nattributes and if their data is secure and only one study considers risk, hazardous situations \n\nmanagement and system\u2019s awareness of those. It is important to notice that we performed our \n\nanalysis of quality attributes based on authors\u2019 description and system specifications. Though, \n\nsome of the described works may provide parts of considered by us as quality attributes, but those \n\nwere not mentioned. Also, although we just have one level analysis, as previously stated, we \n\ninvestigated authors\u2019 focus and what their work was trying to achieve. \n\n Dependability Reliability Security Safety \n\n(Baldoni, Montanari &amp; Rizzuto, 2015) X  X  \n\n(Zappia, Paganelli &amp; Parlanti, 2012) X    \n\n(Evchina &amp; Lastra, 2016) X X   \n\n(Itria, Daidone &amp; Ceccarelli, 2014) X    \n\n(Cerullo et al., 2014) X  X  \n\n(Wang &amp; Kuang, 2015)  X   \n\n(Lu, et al., 2016) X X   \n\n(Li, Cao &amp; Liu, 2013) X X   \n\n(Bruns et al., 2014)  X   \n\n(Zappia et al., 2014) X    \n\n(Xu et al., 2014) X    \n\n(Yao, Chu &amp; Li, 2011)  X   \n\n(Ollesch, 2016) X    \n\n(Wang et al., 2014) X    \n\n(Balogh et al., 2016) X    \n\n(Beer &amp; Heindl, 2007)    X \n\n(Lang &amp; Cap\u00edk, 2014)  X   \n\n\n\n5. Security in CEP engines \n\n \n\n21 \n\n \n\n5 Security in CEP engines \n\nWe began the second part of our study by investigating some of the standards applied to safety-\n\ncritical systems and, also, standards essential for basic data transferring and management. Since \n\nthere are many available standards, our aim is to identify standards that apply to critical systems, \n\nsuch as powerplant management, and provide not only basic guidelines but specific mechanisms \n\nthat should take part of any critical system. Therefore, we choose the following standards: NIST \n\nSP 800-53, SOC2 and IEEE 603-2009.  \n\n\u2022 NIST SP 800-53 standard is a standard for Security and Privacy Controls for Federal \n\nInformation Systems and Organizations and it is based on other two standards: ISO/IEC \n\n15408 and ISO/IEC 27001 (NIST, 2013). It is one of the obligatory standards for industrial \n\nsystems as well as gasoline pipelines, water storage dams and other national security \n\nsystems (NIST, 2010), (Stouffer &amp; Katzke, 2008). \n\n\u2022 IEEE  603-2009 is a specific standard for Safety Systems for Nuclear Power Generating \n\nStations. It provides some of the operational criteria and minimum functional design \n\nprinciples for the power, instrumentation, and control portions of nuclear power generating \n\nstation safety systems are established (IEEE,2009).  \n\n\u2022 SOC2 focuses on a business\u2019s non-financial reporting controls as they relate to security, \n\navailability, processing integrity, confidentiality, and privacy of a system. It is mostly used \n\nfor cloud services and datacenters as a standard for control and assurance of the \n\nconfidentiality and privacy of information that may be stored or processed by datacenters \n\n(Microsoft, 2016).  \n\nOur evaluation parameters are represented by the necessary mechanisms which are described by \n\nthe standards. Not only at least some of those mechanisms should be present in a safety-critical \n\nsystem but the CEP engines should provide at least basic security. Standards, described above, \n\nallowed us to identify specific security mechanisms that are necessary in any safety-critical system. \n\nMoreover, we believe that at least some of those mechanisms should be integrated in CEP engines. \n\nSince there are many available CEP systems, we chose some of the most popular, more referenced, \n\nthat are large projects and provide enough official documentation. The considered CEP engines \n\nare, as follows:  \n\n\u2022 Apache Flink;  \n\n\u2022 ESPER;  \n\n\u2022 Drools;  \n\n\u2022 Opacle CEP;  \n\n\n\n5. Security in CEP engines \n\n \n\n22 \n\n \n\n\u2022 Sybase Aleri. \n\nAll those engines are available in both standard and enterprise versions. There is one specific \n\ncharacteristic that distinguish CEP engines, their operational language. There are two language \n\nspecification possibilities: stream-oriented (transforming) languages and rule-oriented (detecting) \n\nlanguages (Vincent, 2016), (Won, 2016). The stream-oriented languages provide operations for \n\nprocessing the input streams such as filtering, joining or aggregating to obtain some other output \n\nstreams. The rule-oriented languages use rules for processing streams, clearly separating the \n\ntriggering conditions and the actions to be taken when the conditions are met. The main component \n\nof the stream-oriented systems is the sliding window (Figure 10). There are three types of sliding \n\nwindows: a) time based windows that captures the last segment of an ordered stream for a given \n\ntime interval. For example, showing the relation between current data record and records processed \n\nspecified number of seconds ago; b) tuple based windows, which capture the last number \n\n(parameter) of elements of a stream; c) partitioned windows, which operate similarly to a tuple \n\nbased window, with an additional constraint over the data attributes.  \n\n \n\nFigure 10 \u2013 Example of window that considers and analyzes 5 events which are considered the new events and other \n\nare old events (Oracle, 2017). \n\nThe received stream is partitioned into sub streams and only specific number of the records is \n\nprocessed per stream and their processing results are combined into the final output. Rule-oriented \n\nlanguages use Event-Condition-Action (ECA) rules as a formalism for defining the actions that \n\nshould be executed when specific conditions are met (Flink, 2017). That means that a specific \n\naction is performed if the condition is satisfied. Therefore, a rule is evaluated only when triggered \n\nby a specific event, which can be a primitive event (database operations, temporal events or \n\nexternal notifications) or a combination of primitive events using logic operators (Moraru, 2012). \n\nSince all the considered systems are large projects, there is substantial amount of available \n\ninformation that is constantly being updated. Therefore, table data is based on the white papers, \n\ndocumentation provided by the companies, email lists and forums. As stated above, were chosen \n\n\n\n5. Security in CEP engines \n\n \n\n23 \n\n \n\nthe security mechanisms that we considered the most important (basic), required in any safety-\n\ncritical system and were specified in standards: \n\n\u2022 Access control \u2013 defines different levels of system access and operations usage;  \n\n\u2022 Backups \u2013 data persistence;  \n\n\u2022 Encryption \u2013 may be encryption of the data itself, parts of the data or even communications; \n\n\u2022 Fail-safe procedures: represent the system recovery capabilities and the failure \n\nmanagement; \n\n\u2022 Reporting information security events \u2013 security monitoring and reports;  \n\n\u2022 User identification and authentication \u2013 user management and authentication for system \n\naccess;  \n\n\u2022 Wireless communication policy \u2013 methods that consider communication outside of the \n\nsystem. \n\nBelow we present the results of our study and describe what system\u2019s characteristics are not \n\navailable and which ones are present and how those operate. Table 2 presents the summary of \n\nsecurity mechanisms, described in safety-critical standards, and their availability in the studied \n\nCEP engines (presented in alphabetic order and nothing else). \n\nTable 2 - CEP engines security attributes. \n\n Apache \n\nFlink \n\nDrools Esper Oracle \n\nCEP \n\nSybase \n\nAleri \n\nAccess control NO YES NO YES YES \n\nBackups YES5 NO NO YES4 YES \n\nEncryption NO1 NO NO YES1 YES \n\nFail-safe procedures YES NO3 NO YES YES \n\nReporting \n\ninformation security \n\nevents \n\nNO NO NO YES NO \n\nSystem status \n\nidentification \nYES2 NO NO YES2 YES \n\n                                                 \n1 Encrypted connections and data streams between nodes will be available soon (Flink, 2017).  We consider that \n\ncommunication requirement will also be covered by those mechanisms. \n2 Requires usage of web client to monitor the system. \n3 There is request for the implementation of a possibility to persist the state of the used by the system memory after \n\neach state change and related to that the possibility to system recovery and posterior state restore in case of a crash \n\n(Jboss, 2017). \n4 Uses specific persistent event store. \n5 Apache Kaffka is a messaging system that could be used with Flink and persists incoming data in logs. Output data, \n\nafter being processed by Flink, can be stored in any database (ex. Cassandra, MongoDB, HBase, MySQL, etc.) (Ewen, \n\n2016). \n\n \n\n\n\n5. Security in CEP engines \n\n \n\n24 \n\n \n\nUser identification \n\nand authentication \nYES YES YES YES YES \n\nWireless \n\ncommunication policy \nNO1 NO YES YES YES \n\n \n\nEvaluated CEP engines are presented in the table by the alphabetic order, and below we describe \n\nour conclusions and study, starting with Apache Flink.  \n\n5.1 Apache Flink \n\nApache Flink is the engine that provides standard authentication mechanisms but there is no \n\npossibility for detailed data management access. Ideally, a Flink application may use a variety of \n\ndifferent connectors (Kafka, HDFS, Cassandra, Flume, Kinesis etc.) by means of arbitrary \n\nauthentication methods (Kerberos, SSL/TLS, username/password, etc.). Those connectors are \n\nresponsible for managing the security requirements (identification and authentication). While \n\nsatisfying the security requirements for all the connectors, Flink provides first-class support for \n\nKerberos authentication only. Also, for example, it is possible to enable Hadoop security without \n\nproviding security authentication for the ZooKeeper, or vice versa. Thus, each component \n\n(connection) may use separated authentication (Flink, 2017). While working in a cluster, it is \n\nnecessary to setup public key authentication on the master node as the user who will later execute \n\nall the Flink operations. User credentials that are used by the master node should be also existent \n\non each other node, for master to be able to manage available worker nodes (Flink, 2017). \n\nEncryption feature will be soon developed and will be available in the future versions. Apache \n\nFlink offers reliable execution with strict exactly-once-processing consistency guarantees and \n\ndeals with failures via checkpointing and partial re-execution.  The checkpointing mechanism \n\nconstantly (at regular intervals) creates consistent snapshots of the state of operators, including the \n\ncurrent position of the input streams and if it is necessary (in case of system failure) can replay \n\nparts of the job or the entire job. Job execution is managed by the JobManager and it is responsible \n\nfor coordinating the distributed execution of the dataflow. It tracks the state and progress of each \n\noperator and stream, schedules new operators, and coordinates checkpoints for recovery. In a high-\n\navailability setup, the JobManager persists a minimal set of metadata at each checkpoint to a fault-\n\ntolerant storage and it is possible reconstruct the checkpoint and recover the dataflow execution \n\n(Carbone et al., 2015), (Carbone et al., 2015). However, there are no event mechanisms or logs \n\nregarding system security status. We can say that Flink itself does not necessary considers security, \n\nit is designed to always take part of a system where other components would be responsible for \n\ndata protection. Therefore, excluding cluster management and component/node connection using \n\nuser identification.  \n\n\n\n5. Security in CEP engines \n\n \n\n25 \n\n \n\n \n\nFigure 11 - Apache Flinx web console dashboard. Provides overview of the running and last completed jobs (Flink, \n\n2017) \n\nFor overall system status overview, may be used web console (Flink, 2017). This user interface \n\nprovides summary of the executed jobs and processed results.  \n\n5.2 Drools \n\nSimilarly, Drools is a CEP engine developed as a module responsible for adding event processing \n\ncapabilities into the platform (JBoss, 2017). This engine provides both user authentication as well \n\nas access control. Under the directories of the system it is possible to find the login-config.xml file \n\nwhich contains all the necessary system configurations as well as the user-related information \n\n(users, passwords and roles). This file should only be maintainable for a fixed and small number \n\nof users (Mollenkopf &amp; Tirelli, 2009), (JBoss, 2017). To manage considerable quantity of users \n\nand their roles more efficiently Drools may be integrated with Guvnor (Drools, 2017). This \n\napplication allows editing permissions for different stored rules (JBoss, 2017). This per-rule \n\npermissions allow restricting users that may manage specific system resources and rules, per user\u2019s \n\nrole. Roles represent diverse user groups, providing different permissions as well (Bhochhibhoya, \n\n2015). Drools, as most of the CEP engines, does not provide own data persistence. Since this \n\nengine is written in Java, may be used Java Persistence API (JPA) as described by (\u017d\u00e1kov\u00e1, 2013). \n\nSince this engine does not physically store any memory-mapped data, there is no data encryption \n\nor backups. Fail safe procedures are pendent for implementation and will be available in the future \n\nversions. System status identification and security monitoring are also not considered by Drools. \n\nThere are no reports or logs performed regarding system status. Figure 12 presents the Drools \n\nWorkbench UI, used to manage user\u2019s projects and receive notifications about processing errors. \n\n\n\n5. Security in CEP engines \n\n \n\n26 \n\n \n\n \n\nFigure 12 - Drools Web UI. Presents the project rules and events that are triggered when meaningful events are \n\ndetected. Also in the bottom section, there is error and problems report, generated while running a specific project \n\n(Jboss, 2017). \n\n5.3 ESPER \n\nEsper is probably one of the most known and used CEP engines. However, it is important to notice \n\nthat, as many others, the developers of this system focus mainly on its performance and throughput. \n\nOut of all considered security mechanisms, ESPER still provides user authentication as stated in \n\n(EsperTech, 2017). Similarly, to Drools, user authentication data is written in xml file and it \n\ndescribes the authentication used for the connections. Since this authentication is used for low \n\nlevel management there is no user access control. Since ESPER does not perform any I/O \n\noperations, no data persistence or failure recovery are available (EsperTech, 2017). Although \n\nESPER itself is simply processing system it can provide horizontal scalability, load distribution as \n\nwell as replication in enterprise version, while built on Apache Kafka and Apache Zookeeper. The \n\nfault management and recovery are achieved by combining ESPER with EsperHA module \n\n(EsperTech, 2017).  There are no security metrics or system constant monitoring. More complex \n\nprocessing rules must be written in EPL \u2013 Event Processing language which is very like SQL - \n\nStructured Query Language, used by relational databases for data manipulation. However, \n\ndifferently from databases, ESPER does not stores any data. Instead, the user may define a set of \n\nrules thought which the received data is run. This means that when a specific patter is detected the \n\nevent is triggered and some action is performed.  \n\n\n\n5. Security in CEP engines \n\n \n\n27 \n\n \n\n \n\nFigure 13 - Esper web GUI. On the right side are defined EPL statements, one with data schema and other one with \n\ndesired rule. In the center are presented events and on the right side are shown the results (Klendar, 2017).  \n\nSince this system has standard and enterprise versions, while working with enterprise version there \n\nis available Rich Multi-Window GUI, presented on Figure 13. It may be used as EPL editor, \n\ndebugger and presents the detailed memory use and metrics reporting for existent rules, job \n\nmonitoring and historical job data (with tables, charts and gauges) (EsperTech, 2017).  \n\n5.4 Oracle CEP \n\nOracle CEP also provides basic security and authentication. Although the authentication is per user \n\n(username + password), there are standard user roles/groups that are available: Operator, Monitor, \n\nApplicationAdmin, Deployer, BusinessUser and Admin. This engine supports various security \n\nproviders for authentication, authorization, role and credential mapping. Oracle CEP is configured \n\nto use the file-based providers for both authentication and authorization but there is always a \n\npossibility to configure the system to use an LDAP or DBMS as authentication info provider \n\n(Oracle, 2017).  For data persistence, the engine offers persistence of the output events when, for \n\nexample, those are written in the database. By default, Oracle CEP stores recorded events in a \n\ndatabase that may be posteriorly queried by the application (by specifying the connection and \n\ncredentials). Default database used by this engine is single Berkeley DB instance, bundled with \n\nthe Oracle CEP server. However, there is always the option to change storage system. For example, \n\nit can be a Relational Database Management System such as Oracle Database or Derby (Oracle, \n\n2017). As we have described above, in the future versions Oracle CEP will support encrypted \n\nconnections and data streams between cluster nodes (Flink, 2017).  Fault tolerance is achieved by \n\nhigh availability of the system in active-active architecture (Prassinos, 2009). The active-active \n\napproach requires for a cluster to have at least two nodes that are up at all time and, therefore, this \n\napproach can shorten the failover time. Oracle CEP will choose one server in the cluster to be the \n\nprimary node and the remaining nodes are considered secondary. High availability allows users to \n\nmake the most appropriate performance vs. quality-of-service tradeoff for their environment, \n\n\n\n5. Security in CEP engines \n\n \n\n28 \n\n \n\nincluding a precise recovery option that guarantees that no events are lost (Oracle, 2010). System \n\nmonitoring and management is achieved using web console, Oracle CEP Visualizer (Sybase, \n\n2010).  \n\n \n\nFigure 14 - Oracle CEP rules tab. Allows adding system rules that will be used while analyzing incoming data. This \n\nstatement defines that each time window will retain two events with metric value higher than 5000 (Oracle, 2017). \n\nThis web user interface allows not only manage running jobs and rules, but also perform any \n\nadministrator tasks, such as, view the structure of a system domain, manage security, configure \n\nserver instances, etc. Besides overall engine management it is possible to create processing rules, \n\nusing rules tab, as presented on Figure 14. \n\n5.5 Sybase Aleri \n\nStarting with user management (access controls and authentication), Aleri can use the Pluggable \n\nAuthentication Module (PAM) package found in Linux and Solaris. In PAM authentication, client \n\napplications should connect to the core engine either using command interface, gateway interface \n\nor SQL query interface and must supply a user name and password before they can execute any \n\ncommands. In this case, it is the responsibility of the system administrator to specify the type of \n\nthe authentication that will be performed by the users (Sybase, 2010). It is important to notice that \n\nit is possible to restrict user access even if the authentication is successful. This type of operation \n\ncomplements basic access control and the streaming processor server may be configured to deny \n\nthe authenticated user the ability to query certain streams through the SQL interface or subscribe \n\nto streams through the subscription interface, or to stop the server (Sybase, 2010). Data backup is \n\nan integral part of a data management and protection strategy. It is recommended to backup Sybase \n\nAleri streamed data regularly. Should be backed up two types of data: XML files that define the \n\ndata streams and how they interact (Data Models) as well as generated operational log. If both of \n\nthose are backed up, it is possible to restore the system after any failure. In terms of backup \n\n\n\n5. Security in CEP engines \n\n \n\n29 \n\n \n\ncreation, there are two possibilities: \u201coff-line\u201d backup (back up the data model and log files while \n\nthe streaming platform is down) or in an \u201con-line\u201d backup mode (the data models and log stores \n\nare generated while the platform is running). However, it is important to notice that although in \n\n\u201con-line\u201d mode the system will be running, its current operation will be suspended while the \n\nbackup files are created (Sybase, 2010). Besides backups and restores, system failure management \n\nis performed using system availability. While working in a cluster, if the primary server fails, the \n\nhigh availability configuration detects the failure and promotes the secondary server to primary \n\nstatus with minimal interruption to client requests. Also, since this system is designed to be \n\noperating in a cluster mode, one of the possible identifications of system status is weather the \n\nspecific node is down or not. This can be easily achieved by the status command.  \n\n \n\nFigure 15 - Aleri Studio UI with source stream, responsible for receiving data which posteriorly is sent to other \n\nstream components (filter/aggregate/join/... streams). It is possible to identify data fields that are considered inside \n\nthe stream: Id, Symbol, Price, Shared and Trade Time.  (Sybase, 2010). \n\nOverall system monitoring may be performed either using commands or by accessing Aleri Studio \n\nMonitor (Gadgil, 2012). Finally, Aleri provides encryption, using AES, which protects the data \n\nsent over a network (transferred between clients and the streaming platform), using secure sockets \n\n\u2013 SSL (Sybase, 2010). \n\nIn summary, we state that although all the studied CEP engines provide basic security mechanism \n\n(authentication) there are many other mechanisms that are not considered. Out of all the engines \n\nESPER is the least prepared system to provide data security while Oracle CEP offers many \n\napproaches to secure not only the data but the system itself. That means that if ESPER is integrated \n\nin a critical system it will be necessary for the other system components to provide security and \n\nfailover mechanisms. \n\n\n\n6. An approach for handling security inside CEP engines \n\n \n\n30 \n\n \n\n6 An approach for handling security inside CEP \n\nengines  \n\nWhen safety-critical systems have geographically distributed components that communicate using \n\nWSN (Wireless Sensor Network), one of the most important requirements is data authenticity. It \n\ncan be achieved by using secure communication with transferred data encryption, such as SSL. \n\nBut, while working with sensors with limited processing capabilities, this is not the most \n\nappropriate and lightweight. Moreover, we believe that the CEP engine itself should be able of \n\nevaluating the streamed data before processing it. This approach would remove additional \n\nmechanisms, outside of CEP, and reduce the data management process. Therefore, in this section, \n\nwe propose own security solution. It consists of adding a security mechanism that ensures data \n\nauthenticity and integrity, to one of the most popular CEP engines, ESPER.  \n\n6.1 Security in WSN \n\nThere are different system architectures and it is important to understand their security \n\nrequirements. For example, it is necessary to provide secure data transferring in a system where \n\nall its\u2019 components communicate using Internet while in private network, this type of security and \n\nauthenticity validation may not be required. But since some of the safety-critical systems process \n\nincoming data from the sensors, while focusing on security, it is important to investigate some of \n\nthe available solutions. While dealing with distributed systems, working outside of the internal \n\nnetwork, there are different threats, starting from communication channel and up to the data source \n\nidentification. One of the most common approaches is the use of SSL. Currently most of the \n\nsystems communicate using SSL/TLS secure connection, that uses certificates to provide \n\nencrypted channel between one point and other after initial handshake. This approach in widely \n\nused in TCP network communication and has proven secure enough. But, while working with \n\nsensors with low processing and memory capabilities, this protocol may not be used because the \n\nsensor does not have enough memory to be able to map the certificate to perform the handshake \n\nand authenticate itself (IBM, 2012). An overview of sensor network security mechanisms is \n\nprovided by Granjal, Monteiro &amp; Silva (2015). The authors provide a survey about mechanisms \n\nthat could be used to guarantee security in internet-integrated low-power networks. Were described \n\ndifferent protocols and communication technologies (6LoWPAN, DTLS, CoAP and RPL), suited \n\nto specific application levels, and presented some of the security challenges, requirements and \n\navailable mechanisms. Another security survey was performed by Islam, Shen &amp; Wang (2012). \n\n\n\n6. An approach for handling security inside CEP engines \n\n \n\n31 \n\n \n\nWere defined some of the security requirements, such as, confidentiality, integrity, authenticity, \n\navailability, as well as different attacks that can happen in WSN. After describing some of the \n\nindustry standards, the authors state that although those provide basic guidelines and some security \n\nsolutions, the in-depth specification is done by the developer.  \n\nApplied towards critical systems, Zhang &amp; Zhang (2016) deliver security analysis of general \n\nCyber-Physical Systems, security issues in smart grid and power systems (using SCADA systems), \n\nsecure algorithms, secure state estimation and control. The authors state that attacks in CPSs can \n\ntake various forms, such as inadvertent infiltration through infected devices and network-based \n\nintrusion by exploiting poorly-configured firewalls. If the attacker can access system network it is \n\npossible to spread malware, compromise the communication equipment and inject false \n\ninformation in measured or computed data. The resulting consequences can be severe, e.g., wide \n\narea power blackout in a national power grid or crash and failure of safety-critical infrastructure \n\n(nuclear power plants and military facilities). Jung et al. (2016) focused their study on approach \n\npresented by Chang et al. (2015), concerning security challenges while dealing with user \n\nbiometrical information. Some of the described vulnerabilities are:  \n\n- Off-Line Password Guessing Attack (attempts to input a password until the correct \n\npassword is discovered because many users tend to employ simple, brief passwords for the \n\nsake of convenience);  \n\n- User Impersonation Attack (if an attacker obtains a password, the attacker can pretend to \n\nbe a legal user);  \n\n- Session Key Compromise (if attacker knows shared ids and passwords, can establish \n\ntrustworthy connection);  \n\n- Scalability Problem (the use of the verifier table is inefficient in terms of the computation \n\ntime since the changed values at each phase need to be updated in the verifier table);  \n\n- Absence of a Session Key Verification Process (there necessary additional procedures that \n\nwould verify authentication key and its distribution).  \n\nAfter proposing their own, enhanced scheme, the authors conclude that their solution has enough \n\nefficiency and security to be used in WSN.  \n\nIn the communication environment, authentication and key distribution among trusted nodes are \n\nsome of the most important phases. Chen &amp; Chao (2011) provide a survey on key-distribution \n\ntechniques as well as metrics that are traditionally used to analyze the proposed solutions. Some \n\nof the common metrics are: node resilience \u2013 confidentiality of the data exchanged between nodes; \n\nresource efficiency \u2013 resource consumption; connectivity \u2013 while using shared key, the probability \n\nof nodes determining their shared key; adaptability \u2013 adaptability of distribution scheme to \n\ndifferent environments, ignoring some of the assumptions. Authors overview some of the key \n\n\n\n6. An approach for handling security inside CEP engines \n\n \n\n32 \n\n \n\ndistribution techniques. Node authentication scheme is proposed by Fouchal et al. (2016). The \n\nproposed solution is backed by TPM - Trusted Platform Module which is a specialized chip on a \n\ndevice that stores RSA encryption keys specific to the host system for hardware authentication. \n\nDuring the initialization step each node is configured with its own public and private keys. When \n\nthe node sends a message, it should send its signature and only after the server receives the message \n\nand it is validated it is considered authentic. The authors evaluated power consumption generated \n\nby the approach and concluded that energy cost may be considered low. Other solutions of key \n\ndistributions are provided by (Javanbakht et al., 2014) and (Gandino, Ferrero &amp; Rebaudengo, \n\n2017). The study describes own methodology of key deployment and communication between \n\nnodes and clusters. Both solutions can be tuned to provide better system resilience and neither of \n\nthem overpowers the systems and increases its operational requirements. Finally, applied to a \n\ncritical system, Li et al. (2015) review protocol designed for the healthcare area, proposed by He \n\net al. (2013). The studied solution is designed to be composed of medical sensors (such as ECG \n\nelectrodes, blood pressure and temperature sensors) with limited capacity in storage, computing \n\nand bandwidth. The authors describe some of the available authentication methodologies and \n\nposteriorly focus on the solution proposed by He et al., (2013) and provide their enhancement to \n\nsolve authentication and session agreement key phase. Also, the authors claim solving possible \n\nDoS problem by adding to the available mechanisms new authentication protocol for healthcare \n\napplication, using Wireless Multimedia Sensor Networks - WMSNs with user anonymity. One of \n\nthe requirements in a distributed system is the secure communication between its components. \n\nWhile considering smaller, private systems, security may not be the main requirement since all the \n\ncomponents can communicate using private network which is expected to be secure enough. \n\nHowever, while working with more distributed, geographically, components that communicate \n\nusing Internet, this is a different case. As our case study, we choose sensor networks and security \n\nsystems that use sensors for collecting the required data. Before being able to provide a secure \n\nsolution, it is important to understand not only the challenges of a WSN but also the different types \n\nof the sensors that exist. Those types may influence the security requirements and mechanisms\u2019 \n\nlimitations. (Malan, Welsh &amp; Smith, 2008).  \n\nIt is important to consider that there are architectures working with sensors that may not perform \n\noperationally and energy expensive operations. One study is focused on MICA2, processing \n\nmodule used in WSNs (Crossbow Technology, 2004). Although the authors successfully proposed \n\npublic key infrastructure that could be handled by this sensor, as conclusion, was stated that the \n\nproposed solution could be improved to reduce the memory consumption. Wander, et al. (2005) \n\nalso present other low power controllers, such as, Texas Instruments MSP430 (Bierl, 2000) and \n\nAtmel ATmega128L (Atmel, 2011). Was evaluated the usage of different authentication and \n\nencryption mechanisms in those systems and concluded that some of the hashing algorithms, \n\nspecifically ECC, can be used in low power components. While data encryption requires more \n\n\n\n6. An approach for handling security inside CEP engines \n\n \n\n33 \n\n \n\ncomputational power, hashing functions can offer security with small key sizes. The data exchange \n\nitself is performed over protocol based on SSL but which was simplified to reduce the costs. \n\nAs case study, we choose sensor networks and security systems that use sensors for collecting the \n\nrequired data. Before being able to create a solution that could ensure data security (authenticity \n\nand integrity), it is important to understand not only the challenges of a WSN but also the different \n\ntypes of the sensors that exist. That would allow us to understand how hardware affects the security \n\nmechanisms since by using low power components it is possible to reduce the overall system cost. \n\nFor example, MSP-EXP430G2 controller can be bought for around 10 dollars and ESP8266, \n\ndesigned by Espressif Systems, for around 6 dollars. More powerful controllers provide more \n\nprocessing capabilities but their cost is higher. For example, RaspberryPi costs around 30 dollars \n\nwhile Intel Galileo board costs around 80 dollars. It is important to mention that Arduino \n\ncomponents can be acquired separately and it is possible to design own board starting from scratch \n\nbut that would require additional time and production costs (effort to combine different \n\ncomponents and guarantee that the final product is operating as expected). \n\n6.2 Proposed security mechanism \n\nCurrently most of the systems communicate using SSL/TLS secure connection, which uses \n\ncertificates to provide encrypted channel between one point and other after initial handshake. This \n\napproach in widely used in TCP network communication and has proven secure enough. But, while \n\nworking with sensors with low processing and memory capabilities, this protocol may not be used \n\nbecause the sensor does not have enough memory to be able to map the certificate to perform the \n\nhandshake and authenticate itself. Therefore, it is necessary other approach, with lower hardware \n\nrequirements. One popular method is random key predistribution [52, 53]. As we described in \n\nprevious sections, this method distributes random public keys or cluster keys between nodes that \n\nwould allow them to communicate with each other. Keys are generated randomly and are \n\ndistributed pair wise between nodes. Server stores the matrix which is used for generation of the \n\nkeys as well as for the identification of nodes that share the same key. This approach also requires \n\nperiodically key renewal that would ensure system\u2019s security even if an attacker can get one of the \n\nexistent keys. In this case, server should occasionally distribute the keys and there is always, no \n\nmatter how small, the possibility of this information being caught. One of the possibilities to \n\neliminate this part of communication is the usage of pre-distributed configuration. This means that \n\nall the sensors are manually configured, when system is deployed, with public and private keys \n\nand the server can identify each one of them. One of the main flaws of this approach is that the \n\nsystem is update or the keys renewal would require some trusted third-party entity to perform the \n\ndeploy and manually configure all the system components. When the system is highly \n\ngeographically distributed, this becomes even more of an exhausting task but, on the other hand, \n\nno secret data is transferred at any point. \n\n\n\n6. An approach for handling security inside CEP engines \n\n \n\n34 \n\n \n\n6.2.1 Methodology \n\nAs we have stated above, our goal was to add a security mechanism to ESPER that would ensure \n\ndata authenticity. Since ESPER is available in java and .Net programming languages, we chose \n\n.Net source code. The basic idea of ESPER is to \u201csubscribe\u201d to the specific data conditions/events \n\nthat appear in the collected streams and it is the part of the engine where we added data validation. \n\nAfter receiving the data, the engine must be capable to determine if this data is trustworthy and if \n\nit is, it will be processed, otherwise it is discarded and logged. As mechanisms we used AES \n\nencryption, with 128 bits per key, using symmetric key and SH1 hashing. In Figure 16 we present \n\nthe scheme of implemented approach. \n\n \n\nFigure 16 - Proposed solution for validation of data authenticity. Operational flow is represented using arrows. \n\nOrange boxes represent string values, such as, IDs. Blue ones represent numerical long value which is the sensor \n\nvalue. Green is the final message that is transferred from the sensor to the ESPER and it consists of hashed sensor \n\nID and value. Decision component (dark red) compares the IDs and validates the sensor authenticity. \n\nEach system component is configured only with its personal ID and key that is used to encrypt \n\ntransferred data. Server, on the other hand, besides the key has the knowledge of the expected \n\ncommunication devices (their IDs). When the sensor wants to communicate the current value, it \n\nmust hash its ID and create a message by combining the hashed key and value. After the message \n\nstring has been created, it is encrypted using the key and the sent to the engine. Then, when the \n\nsystem receives the message, it must be decrypted, using symmetric key, so it is possible to validate \n\nthe received message. After decryption, the message is constructed by device ID and the value. \n\nSince this device ID is hashed and it is not possible to remove the hash, ESPER must hash known \n\n\n\n6. An approach for handling security inside CEP engines \n\n \n\n35 \n\n \n\nclients\u2019 IDs and compare if any of the strings match. If the ID is valid, the engine accepts the \n\nreceived value otherwise it is discarded and this event is logged.  \n\nAfter testing the developed solution, we concluded that the engine is capable of successfully \n\nprovide data authenticity and process only the data from trustworthy source. Moreover, the \n\nproposed solution does not require the usage of certificates, reducing the hardware requirements \n\nof the sensors. Since the proposed methodology provides data authenticity and the ESPER became \n\ncapable of detecting trustworthy information, we decided that it is important to evaluate the \n\nperformance cost of the added security. Therefore, we performed execution tests that would \n\ndemonstrate how the execution time is affected, comparing the throughput with and without the \n\ndata authenticity mechanism. The time measurement was performed on the server side, reducing \n\nthe possible overhead from the client. That means that sent messages are previously prepared and \n\nthe engine is constantly receiving the incoming data. As additional comparison, we implemented \n\ncommunication and data transfer using SSL, with authentication and certificates on the server as \n\nwell as the client sides. All the measurements are performed on the server side, starting after \n\nreceiving the first record and finished when expected number of operations has been performed. \n\n6.2.2 Setup \n\nThe machine processing characteristics are, as follows: \n\n\u2022 Intel Core i5-6600K @ 3.5GHz \n\n\u2022 16GB RAM \n\n\u2022 4 cores / 4 logical processors \n\nIt is important to notice that all the tests were performed in the same environment, always using \n\nall the 4 available cores. This means that there were no environment variations regardless of the \n\ntest case (no encryption / with encryption / SSL). \n\n6.2.3 Results \n\nBelow we present the obtained results, complete table of test execution is available in Appendix \n\nA. To better understand that impact, we varied the number of processed records as well as record \n\nsize. First, we considered 2KB per value and then increased it to 5KB. Also, were performed 1 \n\n000 000, 10 000 000 and 100 000 000 operations. \n\n\n\n6. An approach for handling security inside CEP engines \n\n \n\n36 \n\n \n\n \n\nFigure 17 - Execution time, in seconds, with sensor value of 2KB. Each point represents different number of \n\nrecords, starting with 1000000, up to 10000000 and 100000000. Presented numbers are the average of 10 executions \n\nWhile comparing the results, we concluded that, as expected, lowest execution time is obtained \n\nwhile working without any security mechanisms. Secondly, 1.8 times slower, is the execution time \n\nusing SSL. But, using AES encryption and SH1 hashing to guarantee data authenticity, data \n\nprocessing demonstrated to be between 11 and 12 times slower when compared to the performance \n\nwithout encryption and between 6 and 6.5 while comparing with SSL. Then, we increased the \n\nvalue size to 5KB (5KB + 3 bytes for header per message), more than twice the size of the previous \n\nvalue and size that is bigger than one page of text. As we expected, the overall execution time, \n\nregardless of the security layer, has increased significantly.  \n\n\n\n6. An approach for handling security inside CEP engines \n\n \n\n37 \n\n \n\n \n\nFigure 18 - Execution time with 5KB per sensor value. Were performed 1000000, 10000000 and 100000000 \n\noperations. Each value is average from 10 executions. \n\nSimilarly, to the previous results, SLL has average performance impact (in average, requires twice \n\nthe time to process received data) while usage of encryption and hashing results in more than 8 \n\ntimes higher processing time. The obtained results show the overhead that is added by using data \n\nencryption and hashing. As expected, SLL does increases the processing time but still has much \n\nbetter performance than encryption. As previously stated, all the measurements were performed \n\non the ESPER side and the initial handshake between client and server was not considered. \n\nHowever, if the handshake would be performed periodically (to renew the connection) it could \n\npossibly affect the continuous operational results. To better understand the processing capabilities, \n\nwe compared the obtained throughput. \n\n\n\n6. An approach for handling security inside CEP engines \n\n \n\n38 \n\n \n\n \n\nFigure 19 - Throughput obtained during the execution of tests using 5KB of data per value and 100 million of \n\noperations \n\nWhile analyzing the throughput, we observed that the difference in the number of performed \n\noperations per second with and without any security mechanisms is noticeable. Due to the \n\nprocessing capabilities, it was possible to achieve a processing speed of over 37K of messages per \n\nsecond. Although low power sensors are not capable of achieving this throughput, the comparison \n\nallowed us to understand how the performance is affected by using encryption. When using \n\nhashing and AES protocol the throughput reduced more than eight times. \n\n6.2.4 Discussion of results \n\nOverall, we observed that the engine is capable of successfully validate data authenticity and \n\nprocess only the data from trustworthy source. Moreover, the proposed solution does not require \n\nany certificates, reducing the hardware requirements of the sensors. While comparing the obtained \n\nresults, it is possible to conclude that added security mechanisms for validation of data integrity \n\nand authenticity creates big performance overhead, especially while comparing with the security \n\nthat is already provided by SSL. In some tests, the system required up to ten times more time to \n\nprocess all the messages. The main restriction not to use SSL would be the type of the system since \n\nwhile working with components that have more capabilities, SSL would be a better approach that \n\nwould not affect the performance as much. As expected, without any security ESPER can provide \n\nhigh throughput and processes the incoming messages efficiently. But that means that it would be \n\nnecessary to add other security mechanisms as a part of the system but outside of the CEP engine. \n\nThat may be unreasonable since it would be more efficient to validate the data before processing \n\nit. Thus, reducing the amount of data to be processed by the CEP (not trusted data is discarded) \n\nand overall reducing the processed data by the rest of the system (processed data is filtered against \n\nthe CEP rules).   \n\n37495\n\n4219\n\n20911\n\n0\n\n5000\n\n10000\n\n15000\n\n20000\n\n25000\n\n30000\n\n35000\n\n40000\n\nWithout encryption With encryption SSL\n\no\np\ne\nra\n\nti\no\nn\ns \n\np\n/\nse\n\nc\n\nThroughput (5KB p/value and 100M \noperations)\n\n\n\n7. Conclusions and future work \n\n \n\n39 \n\n \n\n7 Conclusions and future work \n\nIn this work, we described the quality attributes of the CEP engines and characteristics that \n\nare required in safety-critical systems. Currently there are some solutions and application \n\nareas, where complex event processing systems are already used and provide better system \n\noperability. While describing some of the main attributes, we focused our attention on safety \n\nand security. This attention to security characteristics is not considered by most of the authors \n\nand available solutions. While, also, considering security mechanisms of CEP engines we \n\ncompared those to understand the level of security, per engine. Currently there are different \n\navailable systems and performed overview describes some of the main mechanisms of those \n\nengines and compares them between each other. Finally, while focusing on adding security to \n\nESPER, we provided evaluation results that show that data encryption and hashing reduce the \n\nengine performance, resulting in up to 12 times higher execution time. This scenario \n\n(execution pattern) is noticeable regardless of the message size as well as number of \n\noperations, increasing accordingly. As additional tests, we used really small amount of data, \n\n32bytes per value. The observation of those results ensured already detected behavior, \n\nproportional increase in execution time to the number of records and use of secure \n\nmechanisms. \n\n7.1 Main conclusions \n\nAfter performing our research, we conclude that safety-critical systems are expected to be able \n\nto safely, correctly and efficiently perform critical operations in specific environment, while \n\nensuring that will not endanger any life or property. Thus, those systems should be carefully \n\ndesigned and have a set of qualities and characteristics that would attempt ensuring their \n\nproper functioning. Currently there are many available standards that determine quality \n\nrequirements of a critical system and characteristics that are mandatory in specific areas. \n\nBesides robustness and performance, one of the main requirements of a safety-critical system \n\nis the security. Managed data as well as the data collection mechanisms, should be protected \n\nagainst outside entities. While focusing on operability, we studied the applicability of the CEP \n\nengines in safety-critical systems, separating authentic and relevant data on input. Therefore, \n\nwe presented some of the most important studies that incorporate the use of CEP engines in \n\nsoftware-critical systems. We described performed studies and some of the authors\u2019 main \n\ngoals and conclusions. After concluding our research and while considering the results, we \n\n\n\n7. Conclusions and future work \n\n \n\n40 \n\n \n\nreport that although the authors consider some of the system characteristics, there are other, \n\nwhich are highly important, and are not considered in many studies.  We believe that security \n\nand safety are equally important quality attributes and have been neglected by some of the \n\navailable solutions. Those may have high impact while dealing with critical data as well when \n\nprocessing the received information. Both safety and security are focused on providing correct \n\nsystem data by regarding authenticity of the received information, system components \n\nsafekeeping.  \n\nIt was determined that most of the studied systems do not provide required security \n\nmechanisms that would be strictly necessary in any safety-critical system. Besides \n\nunderstandable communication requirements, some of the engines don\u2019t even provide \n\noverview of the system (CEP) itself nor security events reporting. Even while not considering \n\nthird-party access, it is necessary to understand current system status. At present, there are \n\nsome protection mechanisms that are already used by most of the developed systems, such as, \n\nauthentication, data encryption, safe connections, hardware authentication and register, etc.  \n\nIt is possible to conclude that one of the basic mechanisms, authentication, is present in all the \n\nstudied engines. However, it is not nearly enough security for a complete safety-critical \n\nsystem. Mostly, CEP engines are expected to provide only data processing, focusing mainly \n\non the operational performance, while the remaining of the system should provide all the \n\nrequired data security. That would be acceptable if there would be no processing overhead. \n\nFor example, during data stream reading from the outside of the system, if the CEP engine is \n\nnot capable of hardware identification as well as the connection encryption, adding those \n\nmechanisms to the system after the data has been received would increase the amount of data \n\nthat would be unnecessary processed. It is more efficient to detect not trustworthy data on the \n\nearly stages, reducing the processing time.  \n\nWhile considering studied engines, we determined that the CEP engine that could potentially \n\nbe used as a part of safety-critical system is the Oracle CEP. This engine provides some of the \n\nbasic safety and security mechanisms and does not creates an additional load on the rest of the \n\nsystem architecture. This engine is followed by Sybase Aleri, Apache Flink and Drools, \n\nordered by the quantity of provided security. Finally, ESPER is the CEP engine that focuses \n\nmainly of the processing. This engine could be an alternative due to its performance, but for it \n\nto be used in safety-critical system, it would be necessary adding security mechanisms outside \n\nof the CEP and that could compromise the overall system reliability.  \n\n\n\n7. Conclusions and future work \n\n \n\n41 \n\n \n\n7.2 Limitations \n\nThe main limitation of performed study is the usage of synthetic workload. Used sensor values \n\nare not real and although those can represent the message itself and allowed us to test the \n\nexecution time of operations, real values could benefit the study even more. Also, the \n\nperformed experiments were not conducted in deployed and working system with ESPER \n\nbeing part of it. In this case the simulated tests were run over ESPER as standalone instance \n\nand not as part of a bigger and more complete system. This testing environment does not \n\ncompletely represent a fully functional system, having all the necessary processing and UI \n\ncomponents. \n\n7.3 Directions for future research \n\nAs future work, we will develop a complete system and add all the necessary hardware \n\ncomponents that would fully represent communication between real sensor and central system. \n\nThis environment modification would allow us to fully test, in a real environment, the \n\ndeveloped solution. While working in real environment it is possible to compare different \n\navailable sensors and understand how their hardware characteristic compare between each \n\nother and which of those have better performance. While working with security and encryption \n\nalgorithms, not only there are different configurations per algorithm, such as, key size, but \n\nalso there is a variety of available encryption solutions. It would be important to understand \n\nthe impact of algorithms on processing capabilities and detect sensors with lower performance. \n\nFinally, it would be important to investigate a security solution that could be integrated as a \n\npart of ESPER, as a final product. That mechanism could provide security certifications to this \n\nCEP engine. \n\n\n\n \n\n42 \n\n \n\nReferences \n\nAftab, A.H, Nadeem, A. (2013). A Survey of Safety Analysis Techniques for Safety Critical \n\nSystems. IJFCC 2013 Vol.2(2): 134-137 ISSN: 2010-3751. \n\nAidi, A. (2006). Complex Event Processing. IBM Haifa Labs \n\nAidi, A., Botzer, D., Nechushtai, D., Sharon, G. (2006). Complex Event Processing for \n\nFinancial Services. Services Computing Workshops, 2006. SCW '06. IEEE. \n\nAli, M., Gerea, C., Sezgin, B., Tarnavski, T., Verona, T., Wang, P., Zabback, P., Kirilov, A., \n\nAnanthanarayan, A., Lu, M., Raizman, A., Krishnan, R., Schindlauer, R., Grabs, T., \n\nBjeletich, S., Chandramouli, B., Goldstein, J., Bhat, S., Li, Y., Di Nicola, V., Wang, \n\nX., Maier, D., Santos, I., Nano, O., Grell, S., Raman, B. S. (2009).  Microsoft CEP \n\nServer and Online Behavioral Targeting. International Conference on Very Large \n\nData Bases (VLDB). \n\nAtmel Corporation. (2011). 8-bit Atmel Microcontroller with 128Kbytes In-System \n\nProgrammable Flash \n\nAtoum, I., Bong, C. (2015). Measuring Software Quality in Use: State-of-the-Art and \n\nResearch Challenges. Measuring Software Quality in Use: State-of-the-Art and \n\nResearch Challenges. \n\nAvila, L. and Mart\u00ednez, E. (2015). An active inference approach to on-line agent monitoring \n\nin safety\u2013critical systems. Advanced Engineering Informatics 29 (2015) 1083\u20131095. \n\nAxelsson, J., Nyfjord, J., Papatheocharous, E., T\u00f6rngren, M. (2016). Notes On Agile and \n\nSafety-Critical Development. ACM SIGSOFT Software Engineering Notes Page 23 \n\nMarch 2016 Volume 41 Number 2. \n\nBaldoni, R., Montanari, L., Rizzuto, M. (2015). On-line failure prediction in safety-critical \n\nsystems. Future Generation Computer Systems 45 (2015) 123\u2013132. \n\nBalogh, L., Istv\u00e1n, D., Istv\u00e1n, R., D\u00e1niel, V., Andr\u00e1s, V. (2016). Distributed and \n\nHeterogeneous Event-based Monitoring in Smart Cyber-Physical Systems. \n\n\n\n \n\n43 \n\n \n\nBarbacci, M., Longstaff, T., Klein, M., Weinstock, C. (1995). Quality Attributes. Software \n\nEngineering Institute Carnegie Mellon University. Technical Report CMU/SEI-95-TR-\n\n021; ESC-TR-95-021 \n\nBeer, A., Heindl., M. (2007). Issues in Testing Dependable Event-Based Systems at a Systems \n\nIntegration Company. Second International Conference on Availability, Reliability \n\nand Security (ARES'07). \n\nBhochhibhoya, R. (2015).   https://github.com/bhochhi/drools-guide/wiki/how-to-integrate-\n\nLDAP-with-drools-workbench-for-authentication-and-authorization%3F. \n\nBierl, L. (2000).  MSP430 Family Mixed-Signal Microcontroller Application Reports. Texas \n\nInstruments \n\nBowen, J., Stavridou, V. (2002). Safety-Critical Systems, Formal Methods and Standards. \n\nSoftware Engineering Journal 8(4). \n\nBrotcorne, L., Laporte, G., Semet, F. (2003). Ambulance location and relocation models. \n\nEuropean journal of operational research, vol. 147, no. 3, pp. 451\u2013463. \n\nBruns, R., Dunkel, J., Billhardt, H., Lujak, M., Ossowski, S. (2014). Using Complex Event \n\nProcessing to Support Data Fusion for Ambulance Coordination. Information Fusion \n\n(FUSION), 2014 17th International Conference. \n\nCarbone, P., Ewen, S., Haridi, S., Katsifodimos, A., Mark, V., Tzoumas, K. (2015). Apache \n\nFlink\u2122: Stream and Batch Processing in a Single Engine. Bulletin of the IEEE \n\nComputer Society Technical Committee on Data Engineering. \n\nCarbone, P., G. Fora, S. Ewen, S. Haridi, and K. Tzoumas. (2015). Lightweight asynchronous \n\nsnapshots for distributed \u00b4 dataflows. arXiv:1506.08603. \n\nCarvalho, J. (2008). Use of Complex Event Processing for Business Optimization. TIBCO \n\nSoftware. Banca &amp; Seguros'08. \n\nCerullo, G., Formicola, V., Iamiglio, P., Sgaglione, L. (2014). Critical Infrastructure \n\nProtection: having SIEM technology cope with network heterogeneity. \n\nChang, I.P., Lee, T.F., Lin, T.H., Liu, C.M. (2015). Enhanced Two-Factor Authentication and \n\nKey Agreement Using Dynamic Identities in Wireless Sensor Networks. Sensors 2015, \n\n15, 29841\u201329854. \n\nChen, C. and Chao, H. (2011). A survey of key distribution in wireless sensor networks. \n\nSecurity snd Communication Networks Security Comm. Networks 2014; 7:2495\u2013\n\n2508. \n\n\n\n \n\n44 \n\n \n\nCiampolini, A., Mello, P., Storari, S. (2004). A multi-agent system for medical services \n\nsynergy and coordination. International ECAI 2004 workshop on Agents applied in \n\nhealth care, J. Nealon, U. Cortes, J. Fox, and A. Moreno, Eds., p. 3846. \n\nCockburn, D. (2016). Dealing with Quality Defects and Rapid Alerts. Available at: \n\nhttp://www.emAmmona.europa.eu/docs/en_GB/document_library/Presentation/2009/\n\n12/WC500017884.pdf. \n\nCollins, I. (2013). Chapter 1: Safety-Critical Computer System Design and Evaluation. \n\nHoward University Department of Electrical and Computer Engineering. \n\nElzinga, T. (2015). Assessing IT solutions with CORA. http://www.coramodel.com/assessing-\n\nit-solutions/ \n\nCrossbow Technology. (2004). MICA2: Wireless Measurement System.     \n\nhttp://www.xbow.com/Products/Product pdf files/Wireless pdf/6020-0042-04 A \n\nMICA2.pdf. \n\nDaum, M., G\u00f6tz, M., Domaschka, J. (2012). Integrating CEP and BPM: how CEP realizes \n\nfunctional requirements of BPM applications. DEBS '12 Proceedings of the 6th ACM \n\nInternational Conference on Distributed Event-Based Systems. Pages 157-166. \n\nDekkers, P. (2007). Master Thesis Computer Science. Complex Event Processing. Radboud \n\nUniversity Nijmegen, Thesis number 574, October 2007. \n\nDrools. (2017). http://www.drools.org/. \n\nEckert, M. and Bry, F. (2009). Complex Event Processing. German language in Informatik \n\nSpektrum. Springer 2009. \n\nEsper. (2017). http://www.espertech.com/products/esper.php \n\nEsperTech. (2017). http://www.espertech.com/esper/release-5.2.0/esper-\n\nreference/html/configuration.html. \n\nEsperTech. (2017). http://www.espertech.com/esper/faq_esper.php \n\nEsperTech. (2017). http://www.espertech.com/products/esperhq.php \n\nEvchina, Y., Lastra, J. L. (2016). Hybrid approach for selective delivery of information \n\nstreams in data intensive monitoring systems. Advanced Engineering Informatics 30 \n\n(2016) 537\u2013552. \n\nEwen, S. (2016). The Stream Processor as a Database. Hadoop Summit. \n\n\n\n \n\n45 \n\n \n\nFelder, R., &amp; Silverman, R. (1988). Learning and Teaching Styles in Engineering Education. \n\nJournal of Engneering Education 78 (7), 674-681. \n\nFicco, M., Romano, L. (2011). A generic intrusion detection and diagnose system based on \n\ncomplex event processing. Proceedings on the 1st International Conference on Data \n\nCompression, Communication, and Processing, p. 275-284. \n\nFlink. (2017). https://ci.apache.org/projects/flink/flink-docs-release-\n\n1.0/quickstart/run_example_quickstart.html. \n\nFlink. (2017). http://apache-flink-user-mailing-list-archive.2336050.n4.nabble.com/Security-\n\nin-Flink-td4202.html. \n\nFlink. (2017). https://ci.apache.org/projects/flink/flink-docs-release-1.2/ops/security-\n\nkerberos.html. \n\nFlink. (2017). https://ci.apache.org/projects/flink/flink-docs-release-0.8/cluster_setup.html. \n\nFlink. (2017) https://ci.apache.org/projects/flink/flink-docs-release-\n\n1.0/quickstart/run_example_quickstart.html. \n\nFoley, J., Churcher, G.E. (2009). Applying Complex Event Processing and Extending Sensor \n\nWeb Enablement to a Health Care Sensor Network Architecture. Conference: \n\nProceedings of the 4th International Conference on Communication System Software \n\nand Middleware. \n\nFouchal, H., Biesa, J., Romero, E., Araujo, A., Taladrez, O.N. (2016). A Security Scheme for \n\nWireless Sensor Networks. Global Communications Conference (GLOBECOM), 2016 \n\nIEEE. \n\nGadgil, M. (2012). Aleri \u2013 Complex Event Processing. \n\nhttps://www.javacodegeeks.com/2012/04/aleri-complex-event-processing.html  \n\nGandino, F., Ferrero, R., Rebaudengo, M. (2017). A Key Distribution Scheme for Mobile \n\nWireless Sensor Networks: q-s-Composite. IEEE Transactions on Information \n\nForensics and Security, Vol. 12, No. 1, January 2017. \n\nGranjal, J., Monteiro, E., Silva, J. (2015). Security in the integration of low-power Wireless \n\nSensor Networks with the Internet: A survey. Ad Hoc Networks 24 (2015) 264\u2013287. \n\nHamill, M. and Goseva-Popstojanova, K. (2014). Exploring fault types, detection activities, \n\nand failure severity in an evolving safety-critical software system. Software Qual J \n\n(2015) 23:229\u2013265. \n\n\n\n \n\n46 \n\n \n\nHe, D.B., Kumar, N., Chen, J.H., Lee, C.C., Chilamkurti, N., Yeo, S.S. (2013). Robust \n\nanonymous authentication protocol for health-care applications using wireless medical \n\nsensor networks. Multimedia Systems: In press, 10 Dec 2013. \n\nHeck, E. v., &amp; Vervest, P. (2007). Smart business networks: how the network wins. \n\nCommunications of the ACM, Vol. 50 No. 6, 28-37. \n\nIBM. (2012). Security Secure Sockets Layer (SSL). Version 5 Release 4. \n\nIEEE. (2009). 603-2009 - IEEE Standard Criteria for Safety Systems for Nuclear Power \n\nGenerating Stations. Revision of IEEE Std 603-1998. \n\nIslam, K., Shen, W. and Wang, X. (2012). Wireless Sensor Network Reliability and Security \n\nin Factory Automation: A Survey. IEEE Transactions On Systems, Man, And \n\nCybernetics\u2014Part C: Applications And Reviews, Vol. 42, No. 6, November 2012. \n\nItria, M.L., Daidone, A., Ceccarelli, A. (2014). A Complex Event Processing Approach for \n\nCrisis-Management Systems. EDCC Workshop Big4CIP. \n\n \n\nJavanbakht, M., Erfani, H., Javadi, H., Daneshjoo, P. (2014). Key Predistribution Scheme for \n\nClustered Hierarchical Wireless Sensor Networks based on Combinatorial Designs. \n\nSecurity Comm. Networks 2014; 7:2003\u20132014. \n\nJBoss. (2017). https://docs.jboss.org/drools/release/5.5.0.Final/drools-guvnor-\n\ndocs/html_single/#d0e42. \n\nJBoss. (2017). \n\nhttps://www.jboss.org/dms/judcon/2012india/presentations/day1track3session2.pdf. \n\nJBoss. (2017). https://issues.jboss.org/browse/DROOLS-1221. \n\nJBoss. (2017). https://docs.jboss.org/drools/release/6.2.0.CR3/drools-\n\ndocs/html/DroolsComplexEventProcessingChapter.html. \n\nJung, J., Moon, J., Lee, D., Won, D. (2016). Efficient and Security Enhanced Anonymous \n\nAuthentication with Key Agreement Scheme in Wireless Sensor Networks. Sensors. \n\nKlendar, N. (2017). https://xakep.ru/2014/12/24/esper/#toc04. \n\nLang, J., Cap\u00edk, Z. (2014). Prediction based on hybrid method in complex event processing. \n\nSAMI 2014. IEEE 12th International Symposium on Applied Machine Intelligence and \n\nInformatics, January 23-25, 2014. Herl\u2019any, Slovakia. \n\n\n\n \n\n47 \n\n \n\nLaranjeiro, N., Soydemir, Seyma., Bernardino, J. (2015) A Survey on Data Quality: \n\nClassifying Poor Data. 21st IEEE Pacific Rim International Symposium on \n\nDependable Computing, PRDC 2015, Zhangjiajie, China, pp. 179-188. \n\nLi, L., Cao, B., Liu, Y. (2013). A study on CEP-based system status monitoring in cloud \n\ncomputing systems. 6th International Conference on Information Management, \n\nInnovation Management and Industrial Engineering, 1, pp. 300\u2013303. \n\nLi, X., Niu, J., Kumari, S., Liao, J., Liang, W., Khan M. (2015). A new authentication protocol \n\nfor healthcare applications using wireless medical sensor networks with user \n\nanonymity. Security Comm. Networks 2016; 9:2643\u20132655. \n\nLi, X., Zhao, Z., Zhu, X., Wyatt, T. (2011). Covering models and optimization techniques for \n\nemergency response facility location and planning: a review. Mathematical Methods \n\nof Operations Research, vol. 74, no. 3, pp. 281\u2013310.  \n\nLu, X., Yin, J., Xiong, N., Deng, S., He, G., Yu, H. 2016. JTangCMS: An efficient monitoring \n\nsystem for cloud platforms. Information Sciences 370\u2013371 (2016) 402\u2013 423. \n\nLuckham, D. (2008).  The Power of Events: An Introduction to Complex Event Processing in    \n\nDistributed Enterprise Systems. International Workshop on Rules and Rule Markup \n\nLanguages for the Semantic Web, pp 3-3 \n\nLuckham, D. (2002). The Power of Event. Addison Wesley. \n\nMalan, D. J., Welsh, M., Smith, M. D. (2008). Implementing public-key infrastructure for \n\nsensor networks. ACM Transactions on Sensor Networks (TOSN) 4.4 (2008): 22. \n\n Mendes, M., Bizarro, P., Marques, P.  A Performance Study of Event Processing Systems. \n\n(2009).  Performance Evaluation and Benchmarking. Volume 5895 of the series \n\nLecture Notes in Computer Science pp 221-236. \n\nMicrosoft. (2017). https://www.microsoft.com/en-us/trustcenter/Compliance/SOC. \n\nMollenkopf, A., Tirelli, E. (2009). Applying Drools Fusion Complex Event Processing (CEP) \n\nfor Real-Time Intelligence. JBoss World Chicago 2009. \n\nMoraru, A. (2012). Methods for Complex Event Processing. Doctoral degree. \n\nNaqishbandi, T., Sheriff, I., Qazi, S. (2015). Big Data, CEP and IoT: Redefining Holistic \n\nHealthcare Information Systems and Analytics. International Journal of Engineering \n\nResearch &amp; Technology (IJERT). Vol. 4 Issue 01. \n\n\n\n \n\n48 \n\n \n\nNIST. (2013). Security and Privacy Controls for Federal Information Systems and \n\nOrganizations. NIST Special Publication 800-53, Revision 4. \n\nNIST. (2010). Guide for Applying the Risk Management Framework to Federal Information \n\nSystems. Computer Security Division Information Technology Laboratory National \n\nInstitute of Standards and Technology Gaithersburg, MD 20899-8930. \n\nNPES. (2005). Standards: What Are They and Why Are They Important? NPES Standards \n\nBluebook \n\nOberoi, S. (2007). Introduction to Complex Event Processing &amp; Data Streams. A white-paper \n\nby Real-Time innovations. \n\nOedewald, P. and Gotcheva, N. (2015). Safety culture and subcontractor network governance \n\nin a complex safety critical project. Reliability Engineering and System Safety 141 \n\n(2015) 106\u2013114. \n\nOllesch, J. (2016). Doctoral Symposium: Adaptive Steering of Cyber-Physical Systems with \n\nAtomic Complex Event Processing Services. DEBS \u201916 June 20 - 24, 2016, Irvine, \n\nCalifornia, USA. \n\nOracle. (2012). Financial Services Data Management: Big Data Technology in Financial \n\nServices. An Oracle White Paper. \n\nOracle.  (2008). Oracle Complex Event Processing Performance. An Oracle White Paper. \n\nOracle. (2010). Oracle Complex Event Processing High Availability. An Oracle White Paper. \n\nOracle. (2017). \n\nhttps://docs.oracle.com/cd/E13213_01/wlevs/docs30/config_server/security.html \n\nOracle. (2017). \n\nhttps://docs.oracle.com/cd/E13157_01/wlevs/docs30/config_server/security.html \n\nOracle. (2017). https://docs.oracle.com/cd/E12839_01/doc.1111/e14302/server_tasks.html \n\nOracle. (2010). Oracle Complex Event Processing High Availability. An Oracle White Paper.  \n\nParnas, D.L., Schouwen, A.P., Kwan, S.P. (1990). Evaluation of SafetyCritical Software. \n\nCommunications of the ACM Volume 33 Issue 6, June 1990, Pages 636-648. \n\nPrassinos A. (2009). Active / Active Configurations with Oracle Active Data Guard. \n\nDistinguished Member of Technical Staff MorphoTrak, SAFRAN Group. Oracle Open \n\nWorld 2009. \n\n\n\n \n\n49 \n\n \n\nSaboor, M., Rengasamy, R. (2013). Designing and Developing Complex Event Processing \n\nApplications. Sapient corporation. \n\nSchmidt, K., Anicic, D., Stuhmer, R. (2012). Event-driven Reactivity: A Survey and \n\nRequirements Analysis. \n\nSecure. (2016). Secure! Project, http://secure.eng.it/ \n\nSommerville, I. (2004). Software Engineering (7th Edition). Pearson Addison Wesley. \n\nStouffer, K. and Katzke, S. (2008). Industrial Control System Security and NIST SP 800-53 \n\nOverview. National Institute of Standards and Technology. \n\nSybase. (2010). Administrators Guide, Sybase Aleri Streaming Platform 3.1. Sybase, Inc. \n\nSybase. (2010). Frequently Asked Questions (FAQ), Sybase Aleri Streaming Platform 3.1. \n\nhttp://infocenter.sybase.com/help/topic/com.sybase.infocenter.dc01297.0311/pdf/FA\n\nQ.pdf%3Fnoframes%3Dtrue. Sybase, Inc. \n\nSybase. (2010). Product Overview, Sybase Aleri Streaming Platform 3.1. \n\nhttp://infocenter.sybase.com/help/topic/com.sybase.infocenter.dc01286.0311/pdf/Pro\n\nductOverview.pdf?noframes=true. Sybase, Inc. \n\nSybase. (2010). Introduction to Data Modeling and the Aleri Studio. Sybase Aleri Streaming \n\nPlatform 3.1. Sybase, Inc. \n\nTendick, P., Denby, L., Ju, W. (2016). Statistical methods for complex event processing and \n\nreal time decision making. WIREs Comput Stat 2016, 8:5\u201326. \n\nViatra. (2016). VIATRA-CEP Documentation. https://wiki.eclipse.org/VIATRA/CEP. \n\nVincent, P. (2016). http://www.complexevents.com/2016/05/12/cep-tooling-market-survey-\n\n2016/. \n\nWahl, A. and Hollunder, B. Performance Measurement for CEP Systems. (2012). Service \n\nComputation: The Fourth International Conferences on Advanced Service Computing. \n\nWander, Arvinderpal S., et al. \"Energy analysis of public-key cryptography for wireless sensor \n\nnetworks.\" Pervasive Computing and Communications, 2005. PerCom 2005. Third \n\nIEEE International Conference on. IEEE, 2005. \n\nWang, D., Rundensteiner, E., Wang, H., Ellison, R. (2010). Active complex event processing: \n\napplications in realtime health care. Proceedings of the VLDB. Volume 3 Issue 1-2, \n\nSeptember 2010, Pages 1545-1548. \n\n\n\n \n\n50 \n\n \n\nWang, Y., Kuang, L. (2015). Traffic prediction method based on complex event processing \n\nand adaptive bayesian networks. The 2015 International Academic Research \n\nConference, 3-6 August, University of London. \n\nWang, Y., Zhou, X., Shan, L., Miao, K. (2014). Study on Complex Event Processing for CPS: \n\nAn Event Model Perspective. \n\nWhite, S., Alves, A., Rorke, D. (2008). WebLogic event server: a lightweight, modular \n\napplication server for event processing. In Proc. of DEBS 2008. \n\nWolf, P., Schmidt, A., Klein, M. (2009). Applying Semantic Technologies for Context-Aware \n\nAAL Services: What we can learn from SOPRANO. Workshop on Applications of \n\nSemantic Technologies 09. \n\nWon, T. (2016). https://tedwon.atlassian.net/wiki/display/SE/CEP#CEP-CEPProducts. \n\nYao, W., Chu, C., Li, Z. (2011). Leveraging complex event processing for smart hospitals \n\nusing RFID. Journal of Network and Computer Applications, 34, 799\u2013 810. \n\nYoun, W. and Yi, B. (2014). Software and hardware certification of safety-critical avionic \n\nsystems: A comparison study. Computer Standards &amp; Interfaces 36 (2014) 889\u2013898. \n\n\u017d\u00e1kov\u00e1, I. (2013). Drools Fusion and Utilization of Complex Event Processing in Web \n\nApplications. Master\u2019s Thesis. \n\nZappia, I., Paganelli, F., Parlanti, D. (2012). A lightweight and extensible Complex Event \n\nProcessing system for sense and respond applications. Expert Systems with \n\nApplications 39, 10408\u201310419. \n\nZappia, I., Ciofi, L., Paganelli, F., Iadanza, E., Gherardelli, M., Giuli, D. (2014). A distributed \n\napproach to Complex Event Processing in RFID-enabled hospitals. Euro Med Telco \n\nConference (EMTC). \n\nZhang, L. and Zhang, H. (2016). A Survey on Security and Privacy in Emerging Sensor \n\nNetworks: From Viewpoint of Close-Lo Won op. Sensors. \n\n \n\nZio, E. (2016). Challenges in the vulnerability and risk analysis of critical infrastructures. \n\nReliability Engineering and System Safety 152 (2016) 137\u2013150. \n\n\n\n \n\n51 \n\n \n\n Appendix A \u2013 Test executions \n\nBelow we present the results of executed test, per run. Time values are in seconds. \n\n2048 bytes p/sensor value \n\n \n\nN\u00ba of records Without encryption With encryption With SSL \n\n1000000 15 168 24 \n\n 14 165 26 \n\n 14 170 26 \n\n 14 173 27 \n\n 13 169 26 \n\n 14 168 26 \n\n 14 174 24 \n\n 15 178 24 \n\n 14 177 26 \n\n 14 167 27 \n\n \n\nN\u00ba of records Without encryption With encryption With SSL \n\n10000000 137 1458 247 \n\n 140 1698 254 \n\n 126 1630 267 \n\n 142 1638 250 \n\n 139 1668 267 \n\n 139 1444 257 \n\n 139 1685 248 \n\n 140 1682 244 \n\n 142 1638 267 \n\n 142 1605 255 \n\n \n\nN\u00ba of records Without encryption With encryption With SSL \n\n100000000 1390 15426 2527 \n\n 1341 15182 2585 \n\n 1350 15191 2568 \n\n 1207 15894 2467 \n\n 1319 15334 2490 \n\n 1380 15187 2416 \n\n\n\n \n\n52 \n\n \n\n 1367 15361 2437 \n\n 1277 15369 2550 \n\n 1370 15192 2562 \n\n 1343 15490 2488 \n\n5120 bytes p/sensor value \n\n \n\nN\u00ba of records Without encryption With encryption With SSL \n\n1000000 27 250 52 \n\n 27 255 52 \n\n 27 253 52 \n\n 28 255 50 \n\n 27 252 50 \n\n 27 248 51 \n\n 27 258 52 \n\n 27 252 51 \n\n 26 255 51 \n\n 27 255 51 \n\n \n\nN\u00ba of records Without encryption With encryption With SSL \n\n10000000 274 2563 512 \n\n 273 2517 513 \n\n 274 2500 509 \n\n 274 2515 511 \n\n 273 2541 505 \n\n 253 2540 489 \n\n 255 2521 512 \n\n 282 2497 490 \n\n 274 2541 498 \n\n 276 2507 505 \n\n \n\nN\u00ba of records Without encryption With encryption With SSL \n\n100000000 2645 23569 4657 \n\n 2678 23515 4825 \n\n 2677 23374 4784 \n\n 2643 24016 4635 \n\n 2684 24001 4913 \n\n 2658 23560 4893 \n\n 2676 23781 4860 \n\n 2648 23566 4877 \n\n 2692 23570 4690 \n\n\n\n \n\n53 \n\n \n\n 2671 24020 4682 \n\n \n\n32 bytes p/sensor value \n\n \n\nN\u00ba of records Without encryption With encryption With SSL \n\n1000000 4 89 10 \n\n 4 88 11 \n\n 4 88 12 \n\n 4 89 11 \n\n 6 87 12 \n\n 3 88 11 \n\n 6 89 11 \n\n 4 89 11 \n\n 4 89 10 \n\n 6 89 12 \n\n \n\nN\u00ba of records Without encryption With encryption With SSL \n\n10000000 55 888 97 \n\n 55 826 101 \n\n 50 854 102 \n\n 38 912 97 \n\n 46 895 102 \n\n 45 927 102 \n\n 45 846 100 \n\n 51 851 97 \n\n 50 900 101 \n\n 41 924 100 \n\n \n\nN\u00ba of records Without encryption With encryption With SSL \n\n100000000 423 8128 1021 \n\n 409 8120 971 \n\n 507 9249 1031 \n\n 507 8266 1008 \n\n 433 8203 964 \n\n 426 8105 1000 \n\n 430 8140 1024 \n\n 440 8341 980 \n\n 433 9342 1021 \n\n 500 8196 1016 \n\n \n\n\n\n \n\n54 \n\n \n\n Appendix B \u2013 Published paper \u2013 \n\nCOMPLEXIS\u201917 \n\nON THE USE OF CEP IN SAFETY-CRITICAL SYSTEMS \n \n\nVeronika Abramova1, Bruno Cabral2 and Jorge Bernardino 1,2 \n1 Polytechnic Institute of Coimbra, ISEC - Coimbra Institute of Engineering, Coimbra, Portugal                                           \n\n2 University of Coimbra \u2013 CISUC, Centre for Informatics and Systems of University Coimbra, Coimbra, Portugal                                                                                                                                   \n\na21190319@alunos.isec.pt, bcabral@dei.uc.pt, jorge@isec.pt \n\nKeywords: Safety-critical, CEP, Systems, Event processing. \n\nAbstract: Safety-critical systems have to continuously manage risks, in order to handle hazardous situations and still be \n\nable to fulfil their purpose. While being composed by a variety of software, as well as hardware components, \n\nit is necessary for each part of these systems, alone and as a whole, to exhibit a required set of characteristics, \n\nnecessary to ensure the correct system functioning. Complex Event Processing (CEP) systems have been used \n\nin a diversity of applications and, while they focus on fast data gathering and processing as well as in providing \n\nintelligence to their users, there is incomplete information about how they are adequate to integrate safety-\n\ncritical systems. In this paper we investigate if the mainstream off-the-shelf CEP systems are suitable for \n\nsafety-critical applications. We describe the use of complex event processing engines in safety-critical \n\nsystems and how some authors enhance those to better correspond to the critical system requirements. We \n\ndemonstrate that, although dependability is well handled in most CEP systems, the same cannot be assumed \n\nabout security and safety attributes. \n\n\n\n \n\n55 \n\n \n\n1 INTRODUCTION \n\nSafety-critical systems are projected and designed to \n\nbe used in avionics, medical devices, automotive \n\nbraking systems, nuclear power plant management, \n\nflight management systems, chemical processes, \n\nnuclear power plants and other potentially life \n\nthreatening systems, when failure in the system \n\nendangers human lives directly or indirectly. \n\nTherefore, these systems should be able to provide the \n\nrequired safety functions and overall system integrity \n\n(Knight, 2002). In order to be able to mitigate the \n\npotential impact of hazardous situations, safety-critical \n\nsystems must be certified by a regulatory agency to \n\nensure their correct operation. Consequently, it is \n\nimportant that systems in use are reliable while it is \n\npossible to detect design and functional problems. \n\nAlso, those should be able to meet some of the most \n\nimportant quality attributes, such as dependability, \n\nreliability, safety and security (Malm et al., 2011). It is \n\nimportant to mention that those are complex systems, \n\nwhich are mostly build using different operational \n\nmodules and systems combined together, such as \n\nComplex Event Processing (CEP) systems. CEP \n\nsystems have been around for quite some time and \n\nhave been constantly tested, improved and developed \n\n(Mendes, Bizarro &amp; Marques, 2009). Due to the wide \n\nrange of possible application domains, CEP system \n\ncapabilities have been constantly improving over the \n\npast years. Figure 1 presents an example of a CEP \n\nsystem architecture \u2013 ESPER. \n\n \n\n \n\nFigure 1: ESPER architecture (Esper, 2016). \n\nCurrently they are used in a variety of software \n\nsystems as a customizable tool for data processing and \n\nanalysis. These systems have the ability to completely \n\nadapt to the desired system purpose and be able to \n\nprocess and present most important data, based on \n\npreviously defined rules. Therefore, traditionally, CEP \n\nsystems are part of more complex systems, inside \n\nwhich they are used to process incoming information, \n\ncreate alerts based on a collection of rules, and \n\nposteriorly provide filtered and summarized data to the \n\nfinal user (Eckert &amp; Bry, 2009). Consequently, those \n\nsystems are focused on information extraction and \n\nprocessing of important data in real-time \n\nenvironments. \n\nWe investigate if current off-the-shelf CEP \n\nsystems are suitable for usage in safety-critical \n\napplications, and are capable of performing designed \n\noperations in the required (acceptable) time. As our \n\nmain contribution, we study some critical systems that \n\nuse CEP engines, as well the improvements that were \n\nmade to these CEP engines by some of the authors. We \n\nstart by identifying the key quality attributes of safety-\n\ncritical systems and use these to study how some of the \n\navailable systems manage those requirements. This \n\nanalysis allowed us to identify different characteristics \n\nof CEP systems that require more research.  \n\nThe remainder of the paper is structured as follows: \n\nsection 2 presents the state of the art and some of the \n\napplication areas of CEP systems. Section 3 describes \n\nsome of the most important quality attributes for \n\nsafety-critical systems. Section 4 studies the usage of \n\nCEP in safety-critical applications and Section 5 \n\nevaluates if those quality attributes were considered by \n\nthe authors and describes possible gaps of usage of \n\nCEP in safety-critical systems in some of the existent \n\nstudies. Finally, Section 6 presents our conclusions \n\nand proposes some future research directions. \n\n2 STATE OF THE ART  \n\nCEP systems have been used in a large number of \n\nsystems for data processing and alarm triggering. \n\nAlthough our focus is on safety-critical applications, \n\nin this section, to correctly assess the state-of-the-art, \n\nwe will also consider works reporting on the \n\napplication of complex event processing in other areas. \n\nFor example, (Aidi, 2006) describes some of the \n\nmost common areas of application of complex event \n\nprocessing systems, where these engines are capable \n\nof exploring their full potential. The author presents \n\nsome of the key benefits brought by those systems. A \n\nmore focused study is performed by (Oracle, 2012) \n\nand (Aidi et al., 2006), who emphasize their approach \n\non financial area and propose solutions using CEP \n\nengines. All of the authors state that CEP systems have \n\na high potential for processing data when it arrives and \n\nare capable of providing data of interest in a \n\nsatisfactory amount of time. Since the main goal of \n\nCEP is to be agile and efficient in data presentation to \n\nthe end user, (Cockburn, 2016), (Schmidt, Anicic &amp; \n\nStuhmer, 2012) and (Ammon et al., 2009) investigate \n\nthe efficiency of those systems in alarm triggering and \n\nalert management. These authors present the \n\nadvantages of CEP systems in those cases and describe \n\n\n\n \n\n56 \n\n \n\nhow those can be tuned to be able to provide all the \n\nrequired information. Those systems may be focused \n\non alarms in dangerous environments as well as \n\nnoncritical businesses that completely rely on getting \n\ninformation in time. Therefore, (Daum, G\u00f6tz &amp; \n\nDomaschka, 2012) focused mainly on BPM - Business \n\nProcess Management Systems and describe if CEP are \n\ncapable of satisfying all the requirements of those \n\nsystems.  \n\nHealthcare is another highly important area that \n\ncould potentially take advantages of CEP systems. \n\n(Wang et al., 2010) describe real-time healthcare \n\napplications and state that CEP engines can efficiently \n\nmonitor patient behaviour and control medical \n\nregulations. Similarly, (Foley &amp; Churcher, 2009) and \n\n(Naqishbandi, Sheriff &amp; Qazi, 2015) propose \n\narchitecture solutions and required characteristics of \n\nthe systems using complex event processing in \n\nhealthcare domain. Authors state that CEP engines are \n\nhighly useful for large and critical data processing and \n\nare capable of improving medical systems.  \n\nOur work presents some of the available solutions \n\nand studies, performed by other authors, which focus \n\non application of CEP engines in safety-critical \n\nsystems. We attempt describing some of the systems \n\ndeveloped by them and some of the authors\u2019 \n\nconclusions.  \n\n3 SAFETY-CRITICAL \n\nREQUIREMENTS  \n\nWhile developing a safety-critical system there is a \nwide range of standards that must be followed as well \nas system requirements (Bowen &amp; Stavridou, 2002). \nThose requirements may be also translated into system \nquality attributes and define the system characteristics \nwithout getting deep inside into its functionalities. \nCurrently software systems present, in most cases, a \nlong list of quality attributes (Laranjeiro, Soydemir  &amp; \nBernardino, 2015) and, therefore, we decided to \nconsider in this work the most general ones, which are \nfundamental in safety-critical systems (see Figure 2). \n \n\nFigure 2: Quality attributes. \n\nWe based our choice on the available standards and \nattributes presented by (Barbacci et al., 1995), \n\n(Sommerville, 2004), (Atoum &amp; Bong, 2015). \nTherefore, the considered quality attributes are: \n? Dependability. Can be directly translated into \n\ntrustworthiness of the developed system and \nrepresents the confidence in the correct \nfunctioning of its functions. One of the \ndimensions of dependability is fault tolerance \nthat states that failure in a part of the system \ncannot compromise the whole system. Also, \nshould be considered the repair capability of the \ndesigned system, which describes if the system \nis capable of recovering without any \nintervention, as expected. \n\n? Security. Ensure that extracted, stored and \nprocessed by the system data is not easily \nintersected or corrupted. There should not be \nintentional disruption by the third parties. \nAuthentication mechanism is also a requisite \nsince it allows user identification and extends up \nto the possibility of the system to recognize the \nconfigured devices and treat them as trusted. \nThe collected data will be recognized as viable \nmodifications and not by others. System \nvulnerability should be reduced as much as \npossible in order to prevent possible harm by \nattackers and important data exposure. \n\n? Reliability. Describes the probability of the \nsystem of performing designed operations in \nexpected time. This attribute is tightened with \nthe availability of the system that states that the \nsystem should have the ability to work with \nlimited amount of data when it cannot be \ncollected. There should be available backup data \ncollectors that would gather at least part of the \nnecessary data. Therefore, reliability considers \nnot only software but hardware and firmware \nmodules that are required for correct system \nfunctioning. \n\n? Safety. This is another quality attribute highly \nrelated to the reliability. Thus, safety reflects the \nsystem\u2019s ability to operate, normally or \nabnormally, without danger of causing human \ninjury or death and without damage to the \nsystem\u2019s environment. Some of related safety \nterms are: hazard, damage and risk. All of those \nare considered by the standards and usually are \ndescribed as a prevention list of measures \ninstead of qualities. \n\n \nWe believe that, among others, those are some of the \nmost important requirements of critical software. \nAlso, chosen attributes enclose other vital software \nsystem characteristics, for example, performance, \nresilience, availability, etc. \n\n\n\n \n\n57 \n\n \n\n4 CEP IN SAFETY-CRITICAL \n\nSYSTEMS \n\n(Baldoni, Montanari &amp; Rizzuto, 2015) proposed a \n\nsolution that combines Complex Event Processing \n\n(CEP) and Hidden Markov Models (HMM) to analyse \n\nsystem failures and their symptoms considering \n\nspecifically defined metrics. The anomalies conditions \n\nare detected using the defined rules and creating alert \n\nevents. CEP provides all the necessary data as well as \n\nperformance metrics while HMM are used for system \n\nstate specification and recognition. Authors state that \n\nit is important to be able to detect faults in system \n\ncomponents in order to be able to prevent the entire \n\nsystem to be compromised. Hence, this work proposes \n\na failure prediction architecture, focused on the traffic \n\ncontrol systems, named CASPER. Authors state that \n\nCASPER exhibits pretty good accuracy and it is able \n\nto generate predictions with a margin of time that \n\nallows recovery actions to mitigate the upcoming \n\noccurrence of a failure of the system.  \n\nConsidering usage of CEP in different domains and \n\nwith increased interest in CEP systems, (Zappia, \n\nPaganelli &amp; Parlanti, 2012) describe the design and the \n\nimplementation of a lightweight and extensible \n\nComplex Event Processing engine, called LiSEP. \n\nDuring the system design specification, authors were \n\ndriven by the principle of minimizing dependency on \n\nexternal software components and, therefore, LiSEP \n\ndepends solely on the Java Standard Edition libraries, \n\nthus minimizing deployment requirements. Moreover, \n\nthe LiSEP logic is strictly focused on core event \n\nprocessing, consequently resulting in a lightweight \n\nand minimal implementation. The proposed solution is \n\ncomplemented by the specification of the Event \n\nProcessing Language, based on the SQL syntax. As a \n\nproof of the architecture, authors propose \n\nexperimenting the use of the LiSEP engine in a case \n\nstudy on dangerous goods monitoring during maritime \n\ntransport as a part of Italian Ministry for Economic \n\nDevelopment research project, called SITMAR - \n\nIntegrated system for goods maritime transport in \n\nmulti-modal scenarios. More data-focused approach is \n\npresented by (Evchina &amp; Lastra, 2016). This work \n\naims aiding end users of monitoring systems by \n\ndelivering selected information to each user based on \n\ntheir role in the system. The proposed approach \n\ncombines Semantic Web (SW) technologies and \n\nComplex Event Processing (CEP) for configuration \n\npurposes and run-time data processing and analysing. \n\nAuthors state that final developed solution should be \n\nable to provide ways to deal with multiple devices and \n\nmultiple users of the system; should be reconfigurable \n\nto reflect changes in the environment and/or user \n\ninformation needs; and finally, the device updates \n\nshould be delivered to users within reasonable amount \n\nof time. Considering those requirements, the \n\ndeveloped approach provides two major advantages. \n\nFirstly, the behaviour of the system could be easily \n\nchanged by configuring only underlying ontology and, \n\nsecondly, CEP usage at runtime makes system event-\n\ndriven and reactive to frequent changes in the \n\nenvironment. \n\n(Itria, Daidone &amp; Ceccarelli, 2014) present an \n\napproach for critical situation detection that uses CEP \n\narchitecture for real time event analysis as well as \n\nevent correlation. While event analysis consists of data \n\nprocessing, event correlation corresponds to \n\nestablishing a relation between input events that were \n\ngathered from various sources, for detecting patterns \n\nand situations of interest in the emergency \n\nmanagement context. This solution describes the \n\nengine, developed in the context of the Secure! Project \n\n(Secure, 2016). That solution has two main \n\nrequirements: the correlation module has to be \n\nadaptable to the possible changes of the source \n\nenvironment, and it has to process available historical \n\ndata in order to evaluate the actual events considering \n\nalso what has happened before. After submitting the \n\nsystem for testing, authors state that their approach can \n\nbe easily used and maintained. It is also extensible to \n\nother scenarios where the application requires nearly \n\nreal-time correlation, like intrusion detection system \n\n(Ficco &amp; Romano, 2011) and monitoring of critical \n\ninfrastructures. \n\nSolution for power grid monitoring using CEP is \n\npresented by (Cerullo et al., 2014). Authors claim to \n\nbe able to provide a detailed treatment of the security \n\nissues resulting from the adoption of Wireless Sensor \n\nNetworks and QoS-enabled IP connections. The \n\nproposed solution attempts enhancing current \n\ninformation security and event management \n\ntechnology, by improving its capability of detecting \n\nand mitigating attacks targeting the heterogeneous \n\nnetwork infrastructure. As an example, in power grid \n\nscenario, the attacker may prevent some nodes from \n\nsending events to the connected collector, thus hiding \n\nchanges in the power grid conditions. The WSN \n\nsecurity probe generates alarms based on the analysis \n\nof the network and periodically calculates the package \n\ngeneration rate at every node and the developed engine \n\nis capable of correlating those alarms to protect the \n\nvisualization server. (Wang &amp; Kuang, 2015) propose \n\na traffic prediction method based on Predictive \n\nComplex Event Processing (PreCEP) and Bayesian \n\nnetworks to improve the prediction accuracy. The \n\nprediction model is trained with historical data and it \n\nis used to predict future events based on the recent \n\noutput of basic CEP engine. Authors address the \n\nprediction problem for moving objects that can be \n\nvehicles or even pedestrian and conclude that the \n\n\n\n \n\n58 \n\n \n\nperformance of PreCEP still needs to be improved. \n\nCurrently the parallel method only works when \n\nlearning the structure of models and training models \n\nfor different context. \n\nCloud platform monitoring system, JTangCMS - \n\nJTang Cloud Monitoring System, is proposed by \n\n(Xingjian et al, 2016). Authors claim that proposed \n\nsolution can deal with the flexibility, scalability, \n\nefficiency and performance challenges of cloud \n\nmonitoring. The system gathers all the data using \n\ndissemination framework that allows transferring huge \n\namount of runtime information with high throughput \n\nand low latency using DDS - Data Distribution Service \n\nwhich partitions the input into smaller parts. After \n\ntransferring all the data, it has to be analysed and, \n\ntherefore, was developed a decision-making support \n\nsystem using CEP, named JTangCMS. Performed \n\nevaluations of the implemented algorithm and DDS-\n\nbased data delivery system state that JTangCMS is \n\nefficient solution and does support intelligent decision \n\nmaking. In (Li, Cao &amp; Liu, 2013) authors propose the \n\noverall structure and workflow for a CEP-based \n\nmonitoring system, which can be applied to a private \n\ncloud to alert system failures. \n\n(Bruns et al., 2014) proposed ambulance \n\ncoordination architecture that provides real-time data \n\nprocessing and deliver comprehensive data to the end \n\nusers. The developed architecture consists of two core \n\ncomponents: CEP and FSM- Finite State Machines. \n\nCEP focuses on gathering and analysis of the sensor \n\ndata streams, emitted by the ambulance in order to \n\nautomatically detect changes of the operational states \n\ndefined in the FSM. Authors defend that efficient and \n\nfast patient care requires reliable and up to date \n\ninformation and, therefore, present an approach that \n\ndetermines the actual state of all ambulances as well as \n\npossible relevant mission incidents. Presented solution \n\nattempts completing research of (Brotcorne, Laporte \n\n&amp; Semet, 2003), (Li et al., 2011), (Ciampolini, Mello \n\n&amp; Storari, 2004). (Zappia et al., 2014) also present \n\npatient related data and usage of CEP systems in \n\nhealthcare area. The goal is to use RFID technology to \n\nbe able to support clinical management of the patients. \n\nProposed solution is focused mainly on the following \n\nscenarios: patient identification and tracking, and drug \n\nadministration. The proposed distributed system is \n\nbased on event abstraction, event aggregation and \n\nevent transformation, and uses those to offer a \n\nhierarchical and distributed data processing \n\narchitecture where CEP used data is provided by \n\ndifferent processing nodes. Overall, the projected \n\nsolution, based on CEP and RFID technologies, is used \n\nto support clinical risk management by means of \n\ndetecting possibly dangerous patient conditions as \n\nwell as patient take care. Solution for critical situation \n\ndetection in elderly daily life is proposed by (Xu et al., \n\n2014). Authors focus their study on personal \n\nassistance as well as possible risks and identification \n\nof the required assistance situations. These situations \n\nare detected by analysing data received from the \n\nsensors. This study is focused on ALL \u2013 Ambient \n\nAssisted Living technologies and uses sensors to \n\nmonitor welfare parameters and environmental \n\nconditions as described by (Wolf, Schmidt &amp; Klein, \n\n2009). \n\nAnother RFID solution is proposed by (Yao, Chu \n\n&amp; Li, 2011). Authors propose an RFID framework, \n\nusing CEP, for managing hospital data, gathered from \n\ndifferent sources, and try detecting patterns and \n\nmedically significant events. Therefore, authors \n\ncreated prototypes that attempt showing that CEP has \n\nthe ability of providing alerts to the healthcare \n\nprofessionals as well as increasing quality of \n\nhealthcare and patient safety. One of the main goals \n\nconsists of identifying the patient and tracking all the \n\nnecessary procedures since there may be mistakes \n\nfrom part of the hospital staff. Also, the use of the \n\nsystem provides all the necessary historical data for \n\nemergency handling as well as for health problems and \n\nmedication identification and response. All of those \n\ncharacteristics show that this approach may reduce \n\nerrors as well as provide faster and more efficient risk \n\nmanagement. \n\nCEP scaling solution for processing CPS - Cyber-\n\nPhysical System data (Ollesch, 2016) uses elevator \n\nexample to describe the challenges of CEP technology \n\nin a CPS context. One of the main aspects is the \n\ncalculation of the floor, since it may be calculated \n\nwrongly as well as the sensors themselves are subject \n\nto errors and can be disturbed (in the example was \n\nconsidered the use of Kinect sensor) since, for \n\nexample, passengers would obstruct the Kinect sensor. \n\nCEP systems are based on rules and using this example \n\nwas possible to proof that some parts of the system \n\ndesign should be adjusted. Considering Esper system \n\n(Esper, 2016) as example, its rules are embedded \n\ninside program code and cannot be externalized. \n\nConsequently, each change affects the source code of \n\nthe CEP application. In particular, (Wang et al., 2014) \n\nalso study Esper as example and define the event \n\nprocess functions, like event attribution extraction and \n\ncomposition determination. Authors investigate the \n\nchallenges in designing a CEP method for Cyber-\n\nPhysical System, and propose a semantic enhancement \n\nCPS event model. (L\u00e1szl\u00f3 et al., 2016) propose a \n\nconceptual architecture for system monitoring that \n\nensures the correct behaviour of the system \n\nconsidering a set of different monitoring rules. It was \n\ndeveloped a prototype using the VIATRA-CEP Event \n\nProcessing Language (Viatra, 2016). Posteriorly \n\nmonitoring rules are distributed over the nodes. \n\nSystem evaluation was based on development and \n\n\n\n \n\n59 \n\n \n\nmonitoring of safety-critical embedded systems in the \n\nrailway domain. \n\n(Beer &amp; Heindl, 2007) overview the state of art in \n\ntesting dependable event-based systems and identify \n\nthe challenges that have to be addressed in the future. \n\nAuthors consider two case studies during their testing: \n\nlarge-scale project for business-unit transportation \n\nsystems and a small-scale telecommunications project \n\nfor AIRBUS. Authors\u2019 main focus is on testing and \n\nthey state that it is an important topic and cost \n\nreduction of testing may be achieved by developing \n\nnew and more efficient techniques of requirements \n\ntracing as well as test-case design and validation. \n\nAuthors based part of their work on (Luckham, 2002) \n\nwho proposed CEP usage for managing multiple  \n\n \n\n \n\nevents and event causality in order to elicit \n\nmeaningful events in an event-based information \n\nsystem. This is because CEP can analyse incoming \n\ndata and transform it into out coming events. (Lang &amp; \n\nCap\u00edk, 2014) present a procedure for performing \n\npredictive analysis of complex events occurrence in \n\ntime critical complex event processing systems. \n\nSimilarly, to (Tendick, Denby &amp; Ju, 2016), authors \n\nstate that using CEP it is possible to identify and apply \n\nbusiness intelligence rules over the streams of events \n\nand this technology is critical in an environment where \n\ntime plays an important role, such as, real time \n\ndecision making. Authors analyse the possibilities and \n\nuse of the available methods and techniques for \n\nclassification and prediction in complex event \n\nprocessing. For this purpose, it was designed and \n\nimplemented an application CepPredictiveAnalysis, \n\nwhich uses defined methods for predictions and \n\ndespite certain limitations, the system gives acceptable \n\naccuracy in financially-oriented applications. \n\nOver the next section we present our analysis of the \n\ndescribed solutions, concerning previously stated \n\nquality attributes.  \n\n5 REQUIREMENTS ANALYSIS  \n\nAfter briefly describing the considered quality \n\nattributes in Section 2, we consider that it is important \n\nto confirm whether described systems and solutions of \n\nCEP systems in safety-critical applications consider \n\nany of those. \n\n \n\n \n\nThe summary of quality attributes analysis is \n\npresented in Table 1. It is important to notice that some \n\nof the solutions may have partially addressed some of \n\nthe quality attributes, but we just consider overall \n\napproach and the authors focus and goals in the \n\ndesigned architecture.  \n\nAfter analysing the results, we concluded that most \n\nof the systems are focused on their performance and \n\noperability and do not consider safety neither security. \n\nThose quality attributes are often considered less \n\nimportant than assuring system proper functioning or \n\nperformance. Most of the authors, as expected, \n\nconsider the proper functioning of their systems and \n\nfocus on Dependability and Reliability attributes. \n\nThose are more functional characteristics and any \n\ndesigned and developed system is expected to work as \n\nintended. Some of the authors consider how their \n\n Dependability Reliability Security Safety \n\n(Baldoni, Montanari &amp; Rizzuto, 2015 X  X  \n\n(Zappia, Paganelli &amp; Parlanti, 2012) X    \n\n(Evchina &amp; Lastra, 2016) X X   \n\n(Itria, Daidone &amp; Ceccarelli, 2014) X    \n\n(Cerullo et al., 2014) X  X  \n\n(Wang &amp; Kuang, 2015)  X   \n\n(Lu, et al., 2016) X X   \n\n(Li, Cao &amp; Liu, 2013) X X   \n\n(Bruns et al., 2014)  X   \n\n(Zappia et al., 2014) X    \n\n(Xu et al., 2014) X    \n\n(Yao, Chu &amp; Li, 2011)  X   \n\n(Ollesch, 2016) X    \n\n(Wang et al., 2014) X    \n\n(L\u00e1szl\u00f3 et al., 2016) X    \n\n(Beer &amp; Heindl, 2007)    X \n\n(Lang &amp; Cap\u00edk, 2014)  X   \n\nTable 1: Quality attributes \n\n\n\n \n\n60 \n\n \n\nsystem is affected by security attributes and if their \n\ndata is secure and only one study considers risk and \n\nhazardous situations management and system \n\nawareness of those. It is important to notice that we \n\nperformed our analysis of quality attributes based on \n\nauthors\u2019 description and designed system \n\nspecifications.  \n\nThough, some of the described works may provide \n\nparts of considered by us quality attributes, but those \n\nwere not mentioned. Also, although we just have one \n\nlevel analysis, as previously stated, we investigated \n\nauthors\u2019 main focus and what their work was trying to \n\nachieve. \n\n6 CONCLUSIONS AND FUTURE \n\nDIRECTIONS \n\nSafety-critical systems are necessary to perform \n\ncritical operations if safe environment that will not \n\nendanger any life or property. Thus, those systems \n\nshould be carefully designed and have a set of qualities \n\nand characteristics that would attempt ensuring their \n\nproper functioning. In this paper we present some of \n\nthe most important studies that incorporate the use of \n\nCEP engines in software-critical systems. We describe \n\nperformed studies and some of the authors main goals \n\nand conclusions. After considering the main system \n\ncharacteristics and quality attributes we attempt \n\ninvestigate which of those are considered in the \n\nselected investigations. \n\nWe conclude that there are some characteristics, \n\nwhich are highly important, that are not considered by \n\nall the authors. Those may have high impact while \n\ndealing with critical data as well when processing \n\nreceived information. Both safety and security are \n\nfocused on providing correct system data by \n\nconcerning authenticity of the received information, \n\nsystem components safekeeping. Our goal was to \n\nanalyse some of the available solutions of application \n\nof CEP engines in safety-critical environments and \n\ndescribe some of the most common areas where those \n\nare used. We believe that there are still some system \n\ncharacteristics that have not been fully covered by \n\nexisting works and we presented two of those, namely, \n\nsafety and security. \n\nAfter concluding our research and while \n\nconsidering the results, we believe that security and \n\nsafety are equally important quality attributes and have \n\nbeen neglected by some of the available solutions. \n\nTherefore, as our future research direction, we will \n\ninvestigate some of the mechanisms that should be \n\nconsidered in safety-critical systems and that would \n\nprovide necessary system safety. Currently, there are \n\nsome protection mechanisms that are already used by \n\nmost of the developed systems, such as, \n\nauthentication, data encryption, safe connections, \n\nhardware authentication and register, etc. As future \n\nwork we consider investigating methods from which \n\nsafety-critical systems could benefit and that would \n\nnot compromise systems performance. \n\nREFERENCES \n\nAidi, A. 2006. Complex Event Processing. IBM Haifa Labs \n\nAidi, A., Botzer, D., Nechushtai, D., Sharon, G. 2006. \n\nComplex Event Processing for Financial Services. \n\nServices Computing Workshops, 2006. SCW '06. IEEE \n\nAmmon, R., Emmersberger, C., Springer, F., Wolff, C. \n\n2009. Event-Driven Business Process Management and \n\nits Practical Application Taking the Example of DHL \n\nAtoum, I., Bong, C. 2015. Measuring Software Quality in \n\nUse: State-of-the-Art and Research Challenges. \n\nMeasuring Software Quality in Use: State-of-the-Art and \n\nResearch Challenges \n\nBaldoni, R., Montanari, L., Rizzuto, M. 2015. On-line failure \n\nprediction in safety-critical systems. Future Generation \n\nComputer Systems 45 (2015) 123\u2013132 \n\nBalogh, L., Istv\u00e1n, D., Istv\u00e1n, R., D\u00e1niel, V., Andr\u00e1s, V. \n\n2016. Distributed and Heterogeneous Event-based \n\nMonitoring in Smart Cyber-Physical Systems \n\nBarbacci, M., Longstaff, T., Klein, M., Weinstock, C. 1995. \n\nQuality Attributes. Software Engineering Institute \n\nCarnegie Mellon University. Technical Report \n\nCMU/SEI-95-TR-021; ESC-TR-95-021 \n\nBeer, A., Heindl., M. 2007. Issues in Testing Dependable \n\nEvent-Based Systems at a Systems Integration \n\nCompany. Second International Conference on \n\nAvailability, Reliability and Security (ARES'07) \n\nBowen, J., Stavridou, V. 2002. Safety-Critical Systems, \n\nFormal Methods and Standards.  Software Engineering \n\nJournal 8(4) \n\nBrotcorne, L., Laporte, G., Semet, F. 2003. Ambulance \n\nlocation and relocation models. European journal of \n\noperational research, vol. 147, no. 3, pp. 451\u2013463 \n\nBruns, R., Dunkel, J., Billhardt, H., Lujak, M., Ossowski, S. \n\n2014. Using Complex Event Processing to Support Data \n\nFusion for Ambulance Coordination. Information \n\nFusion (FUSION), 2014 17th International Conference  \n\nCerullo, G., Formicola, V., Iamiglio, P., Sgaglione, L. 2014. \n\nCritical Infrastructure Protection: having SIEM \n\ntechnology cope with network heterogeneity. \n\nCiampolini, A., Mello, P., Storari, S. 2004. A multi-agent \n\nsystem for medical services synergy and coordination. in \n\nInternational ECAI 2004 workshop on Agents applied in \n\nhealth care, J. Nealon, U. Cortes, J. Fox, and A. Moreno, \n\nEds., p. 3846 \n\nCockburn, D. 2016. Dealing with Quality Defects and \n\nRapid Alerts. Available at: \n\nhttp://www.emAmmona.europa.eu/docs/en_GB/docum\n\nent_library/Presentation/2009/12/WC500017884.pdf \n\nDaum, M., G\u00f6tz, M., Domaschka, J. 2012. Integrating CEP \n\nand BPM: how CEP realizes functional requirements of \n\nBPM applications. DEBS '12 Proceedings of the 6th \n\n\n\n \n\n61 \n\n \n\nACM International Conference on Distributed Event-\n\nBased Systems. Pages 157-166 \n\nEckert, M. and Bry, F. 2009. Complex Event Processing. \n\nGerman language in Informatik Spektrum, Springer \n\n2009 \n\nEsper. 2016. http://www.espertech.com/products/esper.php \n\nEvchina, Y., Lastra, J. L. 2016. Hybrid approach for \n\nselective delivery of information streams in data \n\nintensive monitoring systems. Advanced Engineering \n\nInformatics 30 (2016) 537\u2013552 \n\nFicco, M., Romano, L. 2011. A generic intrusion detection \n\nand diagnose system based on complex event \n\nprocessing. Proceedings on the 1st International \n\nConference on Data Compression, Communication, and \n\nProcessing, p. 275-284 \n\nFoley, J., Churcher, G.E. 2009. Applying Complex Event \n\nProcessing and Extending Sensor Web Enablement to a \n\nHealth Care Sensor Network Architecture. Conference: \n\nProceedings of the 4th International Conference on \n\nCOMmunication System softWAre and MiddlewaRE \n\n(COMSWARE 2009) \n\nKnight, J. C. 2002.  Safety critical systems: challenges and \n\ndirections. Proceedings of the 24th International \n\nConference on Software Engineering, ICSE '02. Pages \n\n547-550 \n\nLang, J., Cap\u00edk, Z. 2014. Prediction based on hybrid method \n\nin complex event processing. SAMI 2014. IEEE 12th \n\nInternational Symposium on Applied Machine \n\nIntelligence and Informatics, January 23-25, 2014. \n\nHerl\u2019any, Slovakia \n\nNuno Laranjeiro, Seyma Nur Soydemir, Jorge Bernardino: \n\nA Survey on Data Quality: Classifying Poor Data. 21st \n\nIEEE Pacific Rim International Symposium on \n\nDependable Computing, PRDC 2015, Zhangjiajie, \n\nChina, pp. 179-188. \n\nLi, L., Cao, B., Liu, Y. 2013. A study on CEP-based system \n\nstatus monitoring in cloud computing systems, in: 2013 \n\n6th International Conference on Information \n\nManagement, Innovation Management and Industrial \n\nEngineering, 1, pp. 300\u2013303 \n\nLi, X., Zhao, Z., Zhu, X., Wyatt, T. 2011. Covering models \n\nand optimization techniques for emergency response \n\nfacility location and planning: a review. Mathematical \n\nMethods of Operations Research, vol. 74, no. 3, pp. 281\u2013\n\n310 \n\nLu, X., Yin, J., Xiong, N., Deng, S., He, G., Yu, H. 2016. \n\nJTangCMS: An efficient monitoring system for cloud \n\nplatforms. Information Sciences 370\u2013371 (2016) 402\u2013\n\n423 \n\nLuckham, D. 2002. The Power of Event, Addison Wesley \n\nMalm, T., Vuori, M., Rauham\u00e4ki, J., Veps\u00e4l\u00e4inen, T., \n\nKoskinen, J., Sepp\u00e4l\u00e4, J., Virtanen, H., Hietikko, M., \n\nKatara, M. 2011.  Safety-critical software in machinery \n\napplications. VTT,  Espoo, Finland \n\nMassimiliano, L. I., Daidone, A., Ceccarelli, A. 2014. A \n\nComplex Event Processing Approach for Crisis-\n\nManagement Systems \n\nMendes, M., Bizarro, P. and Marques, P. 2009. A \n\nPerformance Study of Event Processing Systems. \n\nVolume 5895 of the series Lecture Notes in Computer \n\nScience pp 221-236 \n\nNaqishbandi, T., Sheriff, I., Qazi, S. 2015. Big Data, CEP \n\nand IoT: Redefining Holistic Healthcare Information \n\nSystems and Analytics. International Journal of \n\nEngineering Research &amp; Technology (IJERT). Vol. 4 \n\nIssue 01 \n\nOllesch, J. 2016. Doctoral Symposium: Adaptive Steering of \n\nCyber-Physical Systems with Atomic Complex Event \n\nProcessing Services. DEBS \u201916 June 20 - 24, 2016, \n\nIrvine, California, USA \n\nOracle. 2012. Financial Services Data Management: Big \n\nData Technology in Financial Services. An Oracle \n\nWhite Paper \n\nSecure. 2016. Secure! Project, http://secure.eng.it/ \n\nSchmidt, K., Anicic, D., Stuhmer, R. 2012. Event-driven \n\nReactivity: A Survey and Requirements Analysis \n\nSommerville, I. 2004. Software Engineering (7th Edition). \n\nPearson Addison Wesley \u00a9 \n\nTendick, P., Denby, L., Ju, W. 2016. Statistical methods for \n\ncomplex event processing and real time decision \n\nmaking. WIREs Comput Stat 2016, 8:5\u201326 \n\nViatra. 2016. VIATRA-CEP Documentation. \n\nhttps://wiki.eclipse.org/VIATRA/CEP \n\nWang, D., Rundensteiner, E., Wang, H., Ellison, R. 2010. \n\nActive complex event processing: applications in real-\n\ntime health care. Proceedings of the VLDB. Volume 3 \n\nIssue 1-2, September 2010, Pages 1545-1548 \n\nWang, Y., Kuang, L. 2015. Traffic prediction method based \n\non complex event processing and adaptive bayesian \n\nnetworks. The 2015 International Academic Research \n\nConference, 3-6 August, University of London \n\nWang, Y., Zhou, X., Shan, L., Miao, K. 2014. Study on \n\nComplex Event Processing for CPS: An Event Model \n\nPerspective. \n\nWolf, P., Schmidt, A., Klein, M. 2009. Applying Semantic \n\nTechnologies for Context-Aware AAL Services: What \n\nwe can learn from SOPRANO In: Workshop on \n\nApplications of Semantic Technologies 09 \n\nXu, Y., Wolf, P., Stojanovic, N., Happel, H. 2014. Semantic-\n\nbased Complex Event Processing in the AAL Domain. \n\nMechatronic and Embedded Systems and Applications \n\n(MESA), IEEE/ASME 10th International Conference \n\nYao, W., Chu, C., Li, Z. 2011. Leveraging complex event \n\nprocessing for smart hospitals using RFID. Journal of \n\nNetwork and Computer Applications, 34 (2011) 799\u2013\n\n810 \n\nZappia, I., Paganelli, F., Parlanti, D. 2012. lightweight and \n\nextensible Complex Event Processing system for sense \n\nand respond applications. Expert Systems with \n\nApplications 39 (2012) 10408\u201310419 \n\nZappia, I., Ciofi, L., Paganelli, F., Iadanza, E., Gherardelli, \n\nM., Giuli, D. 2014. A distributed approach to Complex \n\nEvent Processing in RFID-enabled hospitals. Euro Med \n\nTelco Conference (EMTC) \n\n \n\n \n\n\n\n \n\n62 \n\n \n\n Appendix C \u2013 Draft paper \n\nTo be submitted to International Journal of Critical Infrastructure Protection \n\nCEP and safety requirements in safety-critical systems \n\nFirst Authora, Second Authorb, Third Authora,b,3 \n\naFirst affiliation, Address, City and Postcode, Country \nbSecond affiliation, Address, City and Postcode, Country  \n\n \n\nAbstract \n\nCEP engines have been gaining interest over the past years and are widely used as part of more complex systems. Since these \n\nengines are useful for processing data streams, their top-quality attributes consist of providing high performance (throughput) and \n\nlow latency. Any working system and, especially, a critical system, should be capable of efficiently handling incoming data streams \n\nand produce correct outputs. With the growing ubiquity of CEP, there is an emerging uncertainty if these engines should be used \n\nas part of safety-critical systems, even if they are one of the best solutions for serving nearly real-time alerts based on complex data \n\nanalysis. This doubt arises from the fact that in safety-critical systems, not only performance and functional characteristics should \n\nbe addressed but, also, safety and security, among other quality attributes. These quality attributes can be neglected in many systems \n\nbut are of the utmost importance in critical environments. In this paper, we investigate how CEP engines, such as Apache Flink, \n\nDrools, Esper, Oracle CEP and Sybase Aleri are being used as part of critical systems and determine if they provide the safety \n\nmechanisms required by industry standards. Also, we propose a security mechanism for assuring data authenticity and integrity \n\ninside one of the most used CEP engines today, ESPER \n\n \n\n\u00a9 2012 Published by Elsevier Ltd. Selection and/or peer-review under responsibility of \n\nGlobal Science and Technology Forum Pte Ltd \n\n \n\nKeywords: Type your keywords here, separated by semicolons ;  \n\n1. Introduction \n\nData is being constantly produced, and devices used for implementing de \u201cInternet of Things\u201d (IoT), such as \n\nsensors, RFID readers, mobile and personal apparels, or even web and mobile apps play an important role in the \n\nmassive production of data that we are witnessing today.  Thus, despite the growing volume of data, it is necessary to \n\ncontinue to efficiently process, filter and extract important information from data on time. CEP engines are designed \n\nto process large amounts of streaming data in the lowest possible execution time. This operational design can provide \n\nimportant information in nearly real-time, while data is being constantly streamed, CEP engines process it against \n\npreviously specified rules and direct any important information to the final user as quickly as possible. The quicker \n\nthis information reaches the top management and decision makers, the better it is for the business intelligence. Thus, \n\n                                                 \n* Corresponding author. Tel.: +0-000-000-0000 ; fax: +0-000-000-0000 . \n\nE-mail address: author@institute.xxx . \n\n\n\n \n\n63 \n\n \n\nCEP engines have been a popular solution in financial, management and other decision-support areas. For example, in \n\nthe financial area, trading opportunities must be evaluated in very limited amount of time, reducing the possibility of \n\nincome loss. Also, CEP filtering capabilities allow to distinguish important data from noise or any non-relevant data. \n\nDecision makers should be informed on time and CEP systems can ensure that only important information will be \n\ndelivered to them. Same requirements apply to any Business Process Management system as well to the sensor-reliant \n\nsystems. Those systems are designed to continuously receive and process incoming data and provide the possibility of \n\ngenerating a variety of alerts and messages to the end user.  \n\nPerformance and robustness of the system are always the focus but we believe that, these days, security is a quality \n\nattribute of software systems of the utmost importance. Cybercrimes and unauthorized data access are ever important \n\nthreats that any company should be protected from. While dealing with security and information safety there are \n\ndifferent mechanisms and techniques that may be used, depending on the system purpose and design. Safety-critical \n\nsystems are responsible for performing critical operations with high impact on human lives, as well as on society, and \n\nmaterial losses in case of failure. Safety-critical systems should respect and follow industry standards regarding design, \n\nimplementation, operation and security issues. Since safety-critical systems such as, water storage, petroleum stations, \n\natomic stations, among others, usually must deal with streaming sensor data, we believe that the usage of CEP engines \n\nwould provide performance and time-saving benefits. However, as previously mentioned, we must still address system \n\nsecurity issues since a safety-critical system should not be compromised to the point of endangering anything or \n\nanyone. \n\n \n\n \n\nFig. 1. Architecture of the system that uses CEP engine to receive and process data and posteriorly this data is sent to the rest of the system to be \n\nadditionally processed and displayed to the user, as well as persisted \n\nOver the past years, many studies have been done on CEP engines, focused on evaluating their processing \n\ncapabilities and throughput [43-45] (Moazafari et al., 2013), (Mozafi et al., 2012), (Karakostas, 2013). Other even \n\nattempted to enhance their results by integrating other mechanisms and, therefore, increasing the amount of processed \n\ndata while reducing streaming latency [46], [47] (Ray et al., 2013), (Grabs &amp; Lu, 2011). However, we believe that \n\nhigh operational throughput should not be considered the only requirement for CEP systems. So far most of the existent \n\nstudies do not cover other quality attributes, such as, safety and security, while focusing mainly on performance \n\ncharacteristics. Therefore, our study describes safety and security mechanisms of CEP engines and investigates if \n\nnowadays CEP engines can be used in safety-critical systems, where even a small software specification error, design \n\nflaw, or the lack of full clarification and specification of the system components can contribute to, or cause, a system \n\nfailure or the injury, and even death, of people. For example, nuclear power plants are systems that besides processing \n\nlarge amounts of incoming sensor data must provide security status and alerts on time. The system must not report \n\nincorrect warnings or fail to raise alarms when necessary. Safety-critical systems must be compliant with both industry \n\nand legal standards, such as we will describe later, which are responsible for optimizing system safety in the design, \n\ndevelopment, use and maintenance, as well as specify their integration with hardware components in the operational \n\nenvironment. Some of the standards are general and could be applied to any system but, depending on the area, there \n\nare also specific requirements. \n\n\n\n \n\n64 \n\n \n\nIn this paper, we focus on system security and provide security mechanisms that should be used in safety-critical \n\nsystems, based on some of the available standards. Since our main goal is to evaluate if CEP engines are suitable to \n\nbe used in a safety-critical system, we study five of most used CEP engines: Apache Flink; Drools; Esper; Oracle \n\nCEP, and Sybase Aleri and evaluate if these systems provide any security or just focus on system performance. Finally, \n\nwe propose a security mechanism for validation of data authenticity and integrity, as part of the ESPER CEP engine, \n\nthus moving security concerns inside ESPER. Having security by design within CEP engines is essential to make them \n\ncompliant with SCS standards without relying on third-party dependencies. We evaluate the impact of our mechanism \n\nin the performance of the ESPER engine and compare it with other alternatives.  \n\nThe remainder of paper is structured as follows: Section 2 describes the state of the art and CEP engines \n\ncharacteristics. Section 3 describes the proposed security mechanism while Section 4 presents the results of the \n\nexecution tests. Finally, Section 5 are the conclusions and future work. \n\n2. State of the art \n\nDue to the popularity of CEP engines and their broad use in different areas, over the past years, several studies \n\nhave been done to evaluate their quality attributes [49-51]. The most commonly evaluated attribute has been \n\nperformance, in detail, the quantity of data that an engine can process per amount of time or latency (necessary time \n\nto receive data, process stream and send the response). Oracle released a white paper with the performance evaluation \n\nof their CEP engine [35]. In that study, a single instance setup was used and the processing latency measured, while \n\nthe system was constantly under data injection. Both number of connections and load size where being scaled to \n\nprovide a better understanding of the latency of the system. The authors concluded that the engine is capable of \n\nefficiently dealing with up to 1 million events per second. In other evaluation, the authors measured Oracle\u2019s CEP \n\navailability and perform latency to provide an overview of the system operability. While discussing the system\u2019s \n\nperformance vs availability, it was concluded that it is possible to sacrifice one of those qualities while working in \n\ncluster environment [30].  \n\nCEP engines availability has also been addressed and guidelines for the development of a highly available CEP \n\nengines have been proposed in [40]. After describing CEP design considerations are presented considerations for \n\ndevelopment of an engine, such as development language, component isolation, data management, testing and \n\ndebugging, etc. \n\nA performance evaluation of three CEP engines: Microsoft StreamInsight, Esper and Drools is described in other \n\nstudy. Besides latency, researchers considered load tests and measured the consumed memory, CPU and \n\nlatency/throughput [36]. Was concluded that all those engines have very similar latency while system resources \n\nconsumptions are different. CPU usage was similar for two of the systems while another one showed much higher \n\nprocessor usage. In contrast, the system that consumes more CPU requires much less RAM than other two engines. \n\nSimilarly, in [37], the authors performed tests using Esper and other two enterprise CEP engines (that were not \n\ndisclosed). The authors executed different types of queries, starting from simple operations, such as, selections and \n\naggregations and up to join operations and multiple queries. It was possible to observe that CEP engines can achieve \n\nhigh throughput while performing basic operations while more complex operations require data to be mapped to \n\nmemory to provide higher throughput. In this study, while working with simple operations the bottleneck was not in \n\nthe CEP system itself, rather the client API, that connected to the engine, was increasing the processing time. Also, it \n\nwas observed that the window expiration mode (jumping/sliding window) had a significant performance impact. \n\nBenchmarking results, which show the latencies of a commercial CEP product, were presented in another study.  The \n\nCEP engine was the WebLogic Event Server, an application server designed specifically for event processing \n\napplications that require high throughput and reduced latency, while handling large volumes of events [38]. Finally, \n\nperformance tests, using Esper and StreamCruncher, were executed by other authors, who divided their evaluation in \n\ntwo parts: latency and throughput. It was concluded that both engines have their advantages and performance flaws \n\nbut Esper is the most mature engine [39]. \n\nWhile working with safety-critical systems, was discussed that besides development design, documentation, testing \n\nand review that are necessary phases during the development of a critical system. System design must be carefully \n\ndeveloped to guarantee that after the development the system will have the expected operability and that all of its \n\ncomponents are correctly integrated. The authors state that testing may be challenging since to have a good average \n\nresult it is always necessary to perform a lot of repeated executions. Thus, system trustworthiness can also be assured \n\nusing rigorous mathematical techniques in the review process [41, 42]. Similarly, in [43], are presented different \n\ntechniques that should be used while developing a safety critical system. In the authors\u2019 paper are described formal \n\n\n\n \n\n65 \n\n \n\nand informal analysis techniques, such as, Fault Hazard Assessment (FHA), Fault Tree Analysis (FTA), Failure Mode \n\nEffect Analysis (FMEA) and Deductive cause-consequence analysis (DCCA). Different techniques may be used to \n\nensure system safety and, although DCCA has high success rate out of all safety analysis techniques, it has a major \n\ndrawback which is the inability to consider unintended behaviour and, therefore, fails in providing fault tolerance. \n\nWhile considering the safety of safety-critical systems, researchers identified several challenges, such as, encryption \n\nand authentication mechanisms, malicious and unsafe commands, lack of knowledge of the system vulnerabilities, \n\netc. To address those challenges are presented security principles that could be integrated into safety-critical systems. \n\nAuthors state that if systems do not have security mechanisms even small error occurrences may end up compromising \n\nthe entire system. By using the proposed guidelines, the system will be capable to recover from errors without having \n\nits performance affected [55]. \n\nThe previous works either focus on CEP engines or on safety-critical systems, addressing either processing \n\ncapabilities or security in critical systems. It is important to understand that safety-critical systems also rely on \n\nperformance and operability, to be able to detect hazardous events as fast as possible. Taking that into consideration, \n\nwe believe that safety-critical systems could benefit from using CEP engines. But, although complex-event processing \n\nsystems guarantee performance, there has not been enough efforts in assuring the security side of these systems. \n\nTherefore, we study some of the security mechanisms that should be used in critical environments and investigate if \n\nthose are provided by the most popular CEP engines. \n\nSince there are many available standards, our aim is to identify standards that apply to critical systems, such as \n\npowerplant management, and provide not only basic guidelines but specific mechanisms that should take part of any \n\ncritical system. For our study were chosen the following standards: NIST SP 800-53, SOC2 and IEEE 603-2009. NIST \n\nSP 800-53 standard is a standard for Security and Privacy Controls for Federal Information Systems and Organizations \n\nand it is based on other two standards: ISO/IEC 15408 and ISO/IEC 27001 [1]. NIST SP 800-53 is one of obligatory \n\nstandards for industrial systems as well as gasoline pipelines, water storage dams and other national security systems \n\n[2, 3]. IEEE  603-2009 is a specific standard for Safety Systems for Nuclear Power Generating Stations. It establishes \n\nsome of the operational criteria and minimum functional design principles for the power, instrumentation, and control \n\nportions of nuclear power generating stations [4]. On the other hand, SOC2 focuses on a business\u2019s non-financial \n\nreporting controls as they relate to security, availability, processing integrity, confidentiality, and privacy of a system. \n\nThis standard is mostly used for cloud services and datacentres as a standard for control and assurance of the \n\nconfidentiality and privacy of the information that is stored or processed [5].  \n\nStandards, described above, allowed us to identify specific security mechanisms that are necessary in any safety-\n\ncritical system. Moreover, we believe that at least some of those mechanisms should be integrated in the CEP engines. \n\nSince there are many available CEP systems, we chose some of the most popular, more referenced, that are large \n\nprojects and provide enough official documentation. Considered CEP engines are, as follows: Apache Flink; Drools; \n\nEsper; Oracle CEP, and Sybase Aleri. All those engines are available in both standard and enterprise versions. There \n\nis one specific characteristic that distinguish CEP engines, their operational language. There are two language \n\nspecifications: stream-oriented (transforming) languages and rule-oriented (detecting) languages [6,7]. The stream-\n\noriented languages provide operations for processing the input streams such as filtering, joining or aggregating to \n\nobtain some other output streams. The rule-oriented languages use rules for processing streams, clearly separating the \n\ntriggering conditions and the actions to be taken when the conditions are met. The main component of the stream-\n\noriented systems is the sliding window. There are three types of sliding widows:  \n\ntime based windows: that captures the last segment of an ordered stream for a given time interval. For example, \n\nreturning the relation between current item and items from some (parameter) seconds ago;  \n\ntuple based windows: which captures the last number (parameter) elements of a stream;  \n\npartitioned windows: which operates similarly to a tuple based window but has a condition over one of the data \n\nrecord attributes.  \n\nThe received stream is partitioned into sub streams and only specific number of the records is processed per stream \n\nand their processing results are combined into the final output. Rule-oriented languages use Event-Condition-Action \n\n(ECA) rules as a formalism for defining the actions that should be executed when specific conditions are met [16]. \n\nThat means that a specific action is performed if the condition is satisfied. Therefore, a rule is evaluated only when \n\ntriggered by a specific event, which can be a primitive event (database operations, temporal events or external \n\nnotifications) or a combination of primitive events using logic operators [8]. \n\nTable 1 presents the summary of security mechanisms, described in safety-critical standards, and their availability \n\nin the studied CEP engines (presented in alphabetic order and nothing else). Since all the considered systems are large \n\nprojects, there is substantial amount of available information that is constantly being updated. Therefore, table data is \n\n\n\n \n\n66 \n\n \n\nbased on the white papers, documentation provided by the companies, email lists and forums. As stated above, were \n\nchosen the security mechanisms that we considered the most important (basic), required in any safety-critical system \n\nand were specified in standards: Access control \u2013 defines different levels of system access and operations usage; \n\nBackups \u2013 data persistence; Encryption \u2013 may be encryption of the data itself, parts of the data or even communication \n\nchannels; Fail-safe procedures: represent the system recovery capabilities and failure management; Reporting \n\ninformation security events \u2013 security monitoring and reports; User identification and authentication \u2013 user \n\nmanagement and authentication for system access; Wireless communication policy \u2013 methods that focus on \n\ncommunications outside of the system. \n\nTable 1. CEP engines and important security mechanisms. \n\n Apache Flink Drools Esper Oracle CEP Sybase Aleri \n\nAccess control NO YES NO YES YES \n\nBackups YES5 NO NO YES4 YES \n\nEncryption NO1 NO NO YES1 YES \n\nFail-safe procedures YES NO3 NO YES YES \n\nReporting information security \n\nevents \n\nNO NO NO YES NO \n\nSystem status identification YES2 NO NO YES2 YES \n\nUser identification and \n\nauthentication \n\nYES YES YES YES YES \n\nWireless communication policy NO1 NO YES YES YES \n\n \n\n1 Encrypted connections and data streams between nodes will be available soon [9].  We consider that communication requirement will also be \n\ncovered by those mechanisms.  \n\n2 Requires usage of web client to monitor the system. \n\n3 There is request for the implementation of a possibility to persist the state of the used by the system memory after each state change and \n\nrelated to that the possibility to system recovery and posterior state restore in case of a crash [10]. \n\n4 Uses specific persistent event store \n\n5 Apache Kaffka is a messaging system that could be used with Flink and persists incoming data in logs. Output data, after being processed by \n\nFlink, can be stored in any database (ex. Cassandra, MongoDB, HBase, MySQL, etc.) [15]. \n\n2.1. Apache Flink \n\nApache Flink is the engine that provides standard authentication mechanisms but there is no possibility for detailed \n\ndata management access. Ideally, a Flink application may use a variety of different connectors (Kafka, HDFS, \n\nCassandra, Flume, Kinesis etc.) by means of arbitrary authentication methods (Kerberos, SSL/TLS, \n\nusername/password, etc.). Those connectors are responsible for managing the security requirements (identification \n\nand authentication). While satisfying the security requirements for all the connectors, Flink provides first-class support \n\nfor Kerberos authentication only. Also, for example, it is possible to enable Hadoop security without providing security \n\nauthentication for the ZooKeeper, or vice versa. Thus, each component (connection) may use separated authentication \n\n[11]. While working in a cluster, it is necessary to setup public key authentication on the master node as the user who \n\nwill later execute all the Flink operations. User credentials that are used by the master node should be also existent on \n\neach other node, for master to be able to manage available worker nodes [12]. Encryption feature will be soon \n\ndeveloped and will be available in the future versions. Apache Flink offers reliable execution with strict exactly-once-\n\nprocessing consistency guarantees and deals with failures via checkpointing and partial re-execution.  The \n\ncheckpointing mechanism constantly (at regular intervals) creates consistent snapshots of the state of operators, \n\nincluding the current position of the input streams and if it is necessary (in case of system failure) can replay parts of \n\n\n\n \n\n67 \n\n \n\nthe job or the entire job. Job execution is managed by the JobManager and it is responsible for coordinating the \n\ndistributed execution of the dataflow. It tracks the state and progress of each operator and stream, schedules new \n\noperators, and coordinates checkpoints for recovery. In a high-availability setup, the JobManager persists a minimal \n\nset of metadata at each checkpoint to a fault-tolerant storage and it is possible reconstruct the checkpoint and recover \n\nthe dataflow execution [13, 14]. However, there are no event mechanisms or logs regarding system security status. \n\nFor overall system status overview, may be used web console [16]. This user interface provides summary of the \n\nexecuted jobs and processed results. \n\n2.2. Drools \n\nSimilarly, Drools is a CEP engine developed as a module responsible for adding event processing capabilities into \n\nthe platform [17]. This engine provides both user authentication as well as access control. Under the directories of the \n\nsystem it is possible to find the login-config.xml file which contains all the necessary system configurations as well \n\nas the user-related information (users, passwords and roles). This file should only be maintainable for a fixed and \n\nsmall number of users [18,19]. To manage considerable quantity of users and their roles more efficiently Drools may \n\nbe integrated with Guvnor [22]. This application allows editing permissions for different stored rules [23]. This per-\n\nrule permissions allow restricting users that may manage specific system resources and rules, per user\u2019s role. Roles \n\nrepresent diverse user groups, providing different permissions as well [20]. Drools, as most of the CEP engines, does \n\nnot provide own data persistence. Since this engine is written in Java, may be used Java Persistence API (JPA) as \n\ndescribed by [21]. Since this engine does not physically store any memory-mapped data, there is no data encryption \n\nor backups. Fail safe procedures are pendent for implementation and will be available in the future versions. System \n\nstatus identification and security monitoring are also not considered by Drools. There are no reports or logs performed \n\nregarding system status. \n\n2.3. ESPER \n\nEsper is probably one of the most known and used CEP engines. However, it is important to notice that, as many \n\nothers, the developers of this system focus mainly on its performance and throughput. Out of all considered security \n\nmechanisms, ESPER still provides user authentication as stated in [24]. Similarly, to Drools, user authentication data \n\nis written in xml file and it describes the authentication used for the connections. Since this authentication is used for \n\nlow level management there is no user access control. Since ESPER does not perform any I/O operations, no data \n\npersistence or failure recovery are available [25]. There is no security metrics or system constant monitoring. However, \n\nwith enterprise version is accessible Rich Multi-Window GUI that may be used as editor, debugger and metrics \n\nreporting tool for existent rules, job monitoring and historical job data (with tables, charts and gauges) [26]. \n\n2.4. Oracle CEP \n\nOracle CEP also provides basic security and authentication. Although the authentication is per user (username + \n\npassword), there are standard user roles/groups that are available: Operator, Monitor, ApplicationAdmin, Deployer, \n\nBusinessUser and Admin. This engine supports various security providers for authentication, authorization, role and \n\ncredential mapping. Oracle CEP is configured to use the file-based providers for both authentication and authorization \n\nbut there is always a possibility to configure the system to use an LDAP or DBMS as authentication info provider [27, \n\n28].  For data persistence, the engine offers persistence of the output events when, for example, those are written in \n\nthe database. By default, Oracle CEP stores recorded events in a database that may be posteriorly queried by the \n\napplication (by specifying the connection and credentials). Default database used by this engine is single Berkeley DB \n\ninstance, bundled with the Oracle CEP server. However, there is always the option to change storage system. For \n\nexample, it can be a Relational Database Management System such as Oracle Database or Derby [29]. As we have \n\ndescribed above, in the future versions Oracle CEP will support encrypted connections and data streams between \n\ncluster nodes [9].  Fault tolerance is achieved by high availability of the system in active-active architecture. The \n\nactive-active approach requires for a cluster to have at least two nodes that are up at all time and, therefore, this \n\napproach can shorten the failover time. Oracle CEP will choose one server in the cluster to be the primary node and \n\nthe remaining nodes are considered secondary. High availability allows users to make the most appropriate \n\nperformance vs. quality-of-service tradeoff for their environment, including a precise recovery option that guarantees \n\nthat no events are lost [30]. System monitoring and management is achieved using web console, Oracle CEP Visualizer \n\n\n\n \n\n68 \n\n \n\n[31]. This web user interface allows not only manage running jobs and rules, but also perform any administrator tasks, \n\nsuch as, view the structure of a system domain, manage security, configure server instances, etc. \n\n2.5. Sybase Aleri \n\nStarting with user management (access controls and authentication), Aleri can use the Pluggable Authentication \n\nModule (PAM) package found in Linux and Solaris. In PAM authentication, client applications should connect to the \n\ncore engine either using command interface, gateway interface or SQL query interface and must supply a user name \n\nand password before they can execute any commands. In this case, it is the responsibility of the system administrator \n\nto specify the type of the authentication that will be performed by the users [31]. It is important to notice that it is \n\npossible to restrict user access even if the authentication is successful. This type of operation complements basic access \n\ncontrol and the streaming processor server may be configured to deny the authenticated user the ability to query certain \n\nstreams through the SQL interface or subscribe to streams through the subscription interface, or to stop the server [31]. \n\nData backup is an integral part of a data management and protection strategy. It is recommended to backup Sybase \n\nAleri streamed data regularly. Should be backed up two types of data: XML files that define the data streams and how \n\nthey interact (Data Models) as well as generated operational log. If both of those are backed up, it is possible to restore \n\nthe system after any failure. In terms of backup creation, there are two possibilities: \u201coff-line\u201d backup (back up the \n\ndata model and log files while the streaming platform is down) or in an \u201con-line\u201d backup mode (the data models and \n\nlog stores are generated while the platform is running). However, it is important to notice that although in \u201con-line\u201d \n\nmode the system will be running, its current operation will be suspended while the backup files are created [31]. \n\nBesides backups and restores, system failure management is performed using system availability. While working in a \n\ncluster, if the primary server fails, the high availability configuration detects the failure and promotes the secondary \n\nserver to primary status with minimal interruption to client requests. Overall system monitoring may be performed \n\neither using commands or by accessing Aleri Studio Monitor [32]. Finally, Aleri provides encryption, using AES, \n\nwhich protects the data sent over a network (transferred between clients and the streaming platform), using secure \n\nsockets \u2013 SSL [33, 34]. \n\nIn summary, we state that although all the studied CEP engines provide basic security mechanism (authentication) \n\nthere are many other mechanisms that are not considered. Out of all the engines ESPER is the least prepared system \n\nto provide data security while Oracle CEP offers many approaches to secure not only the data but the system itself. \n\nThat means that if ESPER is integrated in a critical system it will be necessary for the other system components to \n\nprovide security and failover mechanisms. \n\n3. Proposed security mechanism \n\nWhen safety-critical systems have geographically distributed components that communicate using WSN (Wireless \n\nSensor Network), one of the most important requirements is data authenticity. It can be achieved by using secure \n\ncommunication with transferred data encryption, such as SSL. But, while working with sensors with limited \n\nprocessing capabilities, this is not the most appropriate and lightweight. Moreover, we believe that the CEP engine \n\nitself should be able of evaluating the streamed data before processing it. This approach would remove additional \n\nmechanisms, outside of CEP, and reduce the data management process. Therefore, in this section, we propose our \n\nown security solution. It consists of adding a security mechanism that ensures data authenticity and integrity, to one \n\nof the most popular CEP engines, ESPER. \n\nThere are different system architectures and it is important to understand their security requirements. For example, \n\nit is necessary to provide secure data transferring in a system where all its components communicate using the Internet \n\nwhile in private network, this type of security and authenticity validation may not be required. As case study, we \n\nchoose sensor networks and security systems that use sensors for collecting the required data. Before being able to \n\ncreate a solution that could ensure data security (authenticity and integrity), it is important to understand not only the \n\nchallenges of a WSN but also the different types of the sensors that exist. That overview allows us to understand how \n\nhardware affects the security mechanisms since by using low power components it is possible to reduce the overall \n\nsystem cost. For example, MSP-EXP430G2 controller can be bought for around 10 dollars and ESP8266, designed \n\nby Espressif Systems, for around 6 dollars. More powerful controllers provide more processing capabilities but their \n\ncost is higher. For example, RaspberryPi costs around 30 dollars while Intel Galileo board costs around 80 dollars. It \n\nis important to mention that Arduino components can be acquired separately and it is possible to design own board \n\n\n\n \n\n69 \n\n \n\nstarting from scratch but that would require additional time and production costs (effort to combine different \n\ncomponents and guarantee that the final product is operating as expected). \n\nCurrently most of the systems communicate using SSL/TLS secure connection, that uses certificates to provide \n\nencrypted channel between one point and other after initial handshake. This approach in widely used in TCP network \n\ncommunication and has proven secure enough. But, while working with sensors with low processing and memory \n\ncapabilities, this protocol may not be used because the sensor does not have enough memory to be able to map the \n\ncertificate to perform the handshake and authenticate itself. Therefore, it is necessary other approach, with lower \n\nhardware requirements. One popular method is random key predistribution [52, 53]. As we described in previous \n\nsections, this method distributes random public keys or cluster keys between nodes that would allow them to \n\ncommunicate with each other. Keys are generated randomly and are distributed pair wise between nodes. Server stores \n\nthe matrix which is used for generation of the keys as well as for the identification of nodes that share the same key. \n\nThis approach also requires periodically key renewal that would ensure system\u2019s security even if an attacker can get \n\none of the existent keys. In this case, server should occasionally distribute the keys and there is always, no matter how \n\nsmall, the possibility of this information being caught. One of the possibilities to eliminate this part of communication \n\nis the usage of pre-distributed configuration. This means that all the sensors are manually configured, when system is \n\ndeployed, with public and private keys and the server can identify each one of them. One of the main flaws of this \n\napproach is that the system is update or the keys renewal would require some trusted third-party entity to perform the \n\ndeploy and manually configure all the system components. When the system is highly geographically distributed, this \n\nbecomes even more of an exhausting task but, on the other hand, no secret data is transferred at any point. \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\nFig. 2. Example of network that uses random key predistribution mechanism, proposed by [54]. All the nodes are connected to the same network \n\nand share pairwise key. Then, there is a mater node, server, which communicates outside of the network. \n\nAs we have stated above, our goal was to add a security mechanism to ESPER that would ensure data authenticity. \n\nSince ESPER is available in java and .Net programming languages, we chose .Net source code. The basic idea of \n\nESPER is to \u201csubscribe\u201d to the specific data conditions/events that appear in the collected streams and it is the part of \n\nthe engine where we added data validation. After receiving the data, the engine must be capable to determine if this \n\ndata is trustworthy and if it is, it will be processed, otherwise it is discarded and logged. As mechanisms we used AES \n\nencryption, with 128 bits per key, using symmetric key and SH1 hashing. In Figure 3, we present the implemented \n\napproach. \n\n\n\n \n\n70 \n\n \n\n \n\nFig. 3. Proposed solution for validation of data authenticity. Operational flow is represented using arrows. Orange boxes represent string values, \n\nsuch as, IDs. Blue ones represent numerical long value which is the sensor value. Green is the final message that is transferred from the sensor to \n\nthe ESPER and it consists of hashed sensor ID and value. Decision component (dark red) compares the IDs and validates the sensor authenticity. \n\n \n\nEach system component is configured only with its personal ID and key that is used to encrypt transferred data. \n\nServer, on the other hand, besides the key has the knowledge of the expected communication devices (their IDs). \n\nWhen the sensor wants to communicate the current value, it must hash its ID and create a message by combining the \n\nhashed key and value. After the message string has been created, it is encrypted using the key and the sent to the \n\nengine. Then, when the system receives the message, it must be decrypted, using symmetric key, so it is possible to \n\nvalidate the received message. After decryption, the message is constructed by device ID and the value. Since this \n\ndevice ID is hashed and it is not possible to remove the hash, ESPER must hash known clients\u2019 IDs and compare if \n\nany of the strings match. If the ID is valid, the engine accepts the received value otherwise it is discarded and this \n\nevent is logged.  \n\n4. Experimental results \n\nTo evaluate the performance impact of proposed solution were executed different tests, while measuring the \n\nprocessing time and throughput. Machine processing characteristics used to evaluate proposed solutions are, as \n\nfollows: \n\n\u2022 Intel Core i5-6600K @ 3.5GHz \n\n\u2022 16GB RAM \n\n\u2022 4 cores / 4 logical processors \n\n\u2022 Kingston Savage 250GB SSD \n\nTo better understand the performance impact, we varied the number of processed records as well as the record size. \n\nFirst, we considered 2KB per value (meaning that the total message had 2KB + 3 bytes for the header) and then \n\nincreased it to 5KB. Also, were performed 1,000,000, 10,000,000 and 100,000,000 total operations (messages sent to \n\nESPER). The time measurement was done on the server side, reducing the possible overhead of the client. That means \n\nthat sent messages are previously prepared and the engine is constantly receiving the incoming data. As additional \n\ncomparison, we implemented communication and data transfer using SSL, with authentication and certificates on \n\nserver and client sides. All the measurements are performed on the server side, starting after receiving the first record \n\nand finished when expected number of operations has been performed. Also, the initial handshake time was also \n\nexcluded. \n\nIt is important to notice that all the tests were executed in the same environment, always using all the 4 available \n\nprocessor\u2019s cores. This means that there were no environment variations regardless of the test case (no encryption / \n\nwith encryption / SSL). Figure 4 presents the obtained execution time while using 2KB per record value. \n\n \n\nFig. 4. Execution time, in seconds, with sensor value of 2KB. Each point represents different number of records, starting with 1,000,000, up to \n\n10,000,000 and 100,000,000. Presented numbers are the average of 10 executions. \n\n1M 10M 100M\n\nWithout\nencryption\n\n14 139 1334\n\nWith\nencryption\n\n171 1615 15363\n\nSSL 26 256 2509\n\n0\n\n5000\n\n10000\n\n15000\n\n20000\n\nE\nxe\n\ncu\nti\n\no\nn\n\n T\nim\n\ne\n (\n\ns)\n\n2KB p/value\n\n\n\n \n\n71 \n\n \n\n \n\nWhile comparing the results, we concluded that, as expected, lowest execution time is obtained while working \n\nwithout any security mechanisms. Secondly, 1.8 times slower, is the execution time using SSL. But, using AES \n\nencryption and SH1 hashing to guarantee data authenticity, data processing demonstrated to be between 11 and 12 \n\ntimes slower when compared to the performance without encryption and between 6 and 6.5 while comparing with \n\nSSL. Then, we increased the value size to 5KB (5KB + 3 bytes for header per message), more than twice the size of \n\nthe previous value and size that is bigger than one page of text. As we expected, the overall execution time, regardless \n\nof the security layer, has increased significantly (see Figure 5). \n\n \n\nFig. 5. Execution time with 5KB per sensor value. Were performed 1,000,000, 10,000,000 and 100,000,000 operations. Each value is average \n\nfrom 10 executions. \n\nSimilarly, to the previous results, SLL has average performance impact (in average, requires twice the time to \n\nprocess received data) while usage of encryption and hashing results in more than 8 times higher processing time. The \n\nobtained results show the overhead that is added by using data encryption and hashing. As expected, SLL does \n\nincreases the processing time but still has much better performance than encryption. As previously stated, all the \n\nmeasurements were performed on the ESPER side and the initial handshake between client and server was not \n\nconsidered. However, if the handshake would be performed periodically (to renew the connection) it could possibly \n\naffect the continuous operational results. To better understand the processing capabilities, we compared the obtained \n\nthroughput (see Figure 6). \n\n \n\n \n\nFig. 6. Throughput obtained during the execution of tests using 5KB of data per value and 100 million of operations. \n\nWhile analyzing the throughput, we observed that the difference in the number of performed operations per second \n\nwith and without any security mechanisms is noticeable. Due to the processing capabilities, it was possible to achieve \n\na processing speed of over 37K of messages per second. Although low power sensors are not capable of achieving \n\nthis throughput, the comparison allowed us to understand how the performance is affected by using encryption. When \n\nusing hashing and AES protocol the throughput reduced more than eight times. \n\n1M 10M 100M\n\nWithout\nencryption\n\n27 271 2667\n\nWith encryption 253 2524 23697\n\nSSL 51 504 4782\n\n0\n\n5000\n\n10000\n\n15000\n\n20000\n\nE\nxe\n\ncu\nti\n\no\nn\n\n T\nim\n\ne\n (\n\ns) 5KB p/value\n\n37495\n\n4219\n\n20911\n\n0\n\n10000\n\n20000\n\n30000\n\n40000\n\nWithout encryption With encryption SSL\n\no\np\n\ne\nra\n\nti\no\n\nn\ns \n\np\n/s\n\ne\nc\n\nThroughput (5KB p/value and 100M \noperations)\n\n\n\n \n\n72 \n\n \n\nOverall, we observed that the engine is capable of successfully validate data authenticity and process only the data \n\nfrom trustworthy source. Moreover, the proposed solution does not require any certificates, reducing the hardware \n\nrequirements of the sensors. While comparing the obtained results, it is possible to conclude that added security \n\nmechanisms for validation of data integrity and authenticity creates big performance overhead, especially while \n\ncomparing with the security that is already provided by SSL. In some tests, the system required up to ten times more \n\ntime to process all the messages. The main restriction not to use SSL would be the type of the system since while \n\nworking with components that have more capabilities, SSL would be a better approach that would not affect the \n\nperformance as much. As expected, without any security ESPER can provide high throughput and processes the \n\nincoming messages efficiently. But that means that it would be necessary to add other security mechanisms as a part \n\nof the system but outside of the CEP engine. That may be unreasonable since it would be more efficient to validate \n\nthe data before processing it. Thus, reducing the amount of data to be processed by the CEP (not trusted data is \n\ndiscarded) and overall reducing the processed data by the rest of the system (processed data is filtered against the CEP \n\nrules).  \n\n5. Conclusions and Future work \n\nIn this paper, we described some of the most popular CEP engines and addressed the problems in their security \n\nmechanisms. We can conclude that one of the basic mechanisms, authentication, is present in every of the studied \n\nengines. However, it is not nearly enough security for deployed safety-critical system. Mostly, CEP engines are \n\nexpected to provide only data processing, focusing mainly on the operational performance, while the remaining of the \n\nsystem should provide all the required data security. That would be acceptable if there would be no processing \n\noverhead, resulted after processing the unnecessary data. For example, during data stream reading from the outside of \n\nthe system, if the CEP engine is not capable of hardware identification as well as connection encryption, adding those \n\nmechanisms outside of CEP engine would require additional queue processing of events, resulting in at least 1.5x \n\nprocessing time. \n\nMost of the studied systems do not provide required security mechanisms that would be strictly necessary in any \n\nsafety-critical system. Besides understandable communication requirements, some of the engines don\u2019t even provide \n\noverview of the system (CEP) itself nor security events reporting. Even while not considering third-party access, it is \n\nnecessary to understand current system status. Therefore, we concluded that the CEP engine that could potentially be \n\nused as a part of safety-critical system is Oracle CEP. This engine provides some of the basic safety and security \n\nmechanisms and does not creates an additional load on the rest of the system\u2019s architecture. This engine is followed \n\nby Sybase Aleri, Apache Flink and Drools, ordered by the quantity of provided security. Finally, ESPER is the CEP \n\nengine that focuses mainly on the processing and achieving best throughput. This engine could be an alternative due \n\nto its performance, but for it to be used in safety-critical system, it would be necessary adding security mechanisms \n\noutside of the CEP and that could compromise the overall system reliability. \n\nThe proposed solution, using data encryption and hashing for guaranteeing data integrity, can solve part of the \n\nsecurity issues of a CEP engine while as a part of a more complex distributed system. One of our wain constrains were \n\nthe processing and memory characteristics of the system sensors. To better understand how system performance is \n\naffected by usage of encryption, we compared the execution time of 1,000,000, 10,000,000 and 100,000,000 \n\noperations with encryption, without and with SSL. While comparing the results, we concluded that data hashing and \n\nencryption create huge system overhead and reduce overall system performance. On this case SSL, would be more \n\nefficient approach but only when used in environments where sensors can store certificates, perform handshake and \n\nuse the encrypted channel for communication. As future work, we will evaluate the performance of ESPER while \n\nusing other encryption algorithms to see how the encryption key size affects the throughput. \n\n \n\nReferences \n\n[1] NIST. Security and Privacy Controls for Federal Information Systems and Organizations. 2013. NIST Special \n\nPublication 800-53, Revision 4. \n\n[2] NIST. Guide for Applying the Risk Management Framework to Federal Information Systems. 2010.  Computer \n\nSecurity Division Information Technology Laboratory National Institute of Standards and Technology Gaithersburg, \n\nMD 20899-8930. \n\n[3] Stouffer, K. and Katzke, S. Industrial Control System Security and NIST SP 800-53 Overview. 2008. National \n\nInstitute of Standards and Technology. \n\n\n\n \n\n73 \n\n \n\n[4] 603-2009 - IEEE Standard Criteria for Safety Systems for Nuclear Power Generating Stations. 2009. Revision \n\nof IEEE Std 603-1998. \n\n[5] Microsoft. https://www.microsoft.com/en-us/trustcenter/Compliance/SOC. \n\n[6] Vincent, P. http://www.complexevents.com/2016/05/12/cep-tooling-market-survey-2016/. \n\n[7] https://tedwon.atlassian.net/wiki/display/SE/CEP#CEP-CEPProducts. \n\n[8] Moraru, A. Methods for Complex Event Processing. 2012. Doctoral degree. \n\n[9] http://apache-flink-user-mailing-list-archive.2336050.n4.nabble.com/Security-in-Flink-td4202.html. \n\n[10] https://issues.jboss.org/browse/DROOLS-1221. \n\n[11] Flink. https://ci.apache.org/projects/flink/flink-docs-release-1.2/ops/security-kerberos.html. \n\n[12] Flink. https://ci.apache.org/projects/flink/flink-docs-release-0.8/cluster_setup.html. \n\n[13] Carbone, P., Ewen, S., Haridi, S., Katsifodimos, A., Mark, V., Tzoumas, K. Apache Flink\u2122: Stream and Batch \n\nProcessing in a Single Engine. 2015. Bulletin of the IEEE Computer Society Technical Committee on Data \n\nEngineering. \n\n[14] P. Carbone, G. Fora, S. Ewen, S. Haridi, and K. Tzoumas. Lightweight asynchronous snapshots for distributed \n\n\u00b4 dataflows. arXiv:1506.08603, 2015. \n\n[15] Ewen, S. The Stream Processor as a Database. 2016. Hadoop Summit. \n\n[16] Flink. https://ci.apache.org/projects/flink/flink-docs-release-1.0/quickstart/run_example_quickstart.html. \n\n[17] JBoss. https://docs.jboss.org/drools/release/6.2.0.CR3/drools-\n\ndocs/html/DroolsComplexEventProcessingChapter.html. \n\n[18] Mollenkopf, A., Tirelli, E. Applying Drools Fusion Complex Event Processing (CEP) for Real-Time \n\nIntelligence. 2009. JBoss World Chicago 2009. \n\n[19] JBoss. https://docs.jboss.org/drools/release/5.5.0.Final/drools-guvnor-docs/html_single/#d0e42 \n\n[20] JBoss. https://github.com/bhochhi/drools-guide/wiki/how-to-integrate-LDAP-with-drools-workbench-for-\n\nauthentication-and-authorization%3F \n\n[21] \u017d\u00e1kov\u00e1, I. Drools Fusion and Utilization of Complex Event Processing in Web Applications. 2013. Master\u2019s \n\nThesis. \n\n[22] Drools. http://www.drools.org/. \n\n[23] JBoss. https://www.jboss.org/dms/judcon/2012india/presentations/day1track3session2.pdf \n\n[24] EsperTech. http://www.espertech.com/esper/release-5.2.0/esper-reference/html/configuration.html. \n\n[25] EsperTech. http://www.espertech.com/esper/faq_esper.php \n\n[26] EsperTech. http://www.espertech.com/products/esperhq.php \n\n[27] Oracle. https://docs.oracle.com/cd/E13213_01/wlevs/docs30/config_server/security.html \n\n[28] Oracle. https://docs.oracle.com/cd/E13157_01/wlevs/docs30/config_server/security.html \n\n[29] Oracle. https://docs.oracle.com/cd/E12839_01/doc.1111/e14302/server_tasks.html \n\n[30] Oracle. Oracle Complex Event Processing High Availability. 2010. An Oracle White Paper.  \n\n[31] Sybase. Administrators Guide, Sybase Aleri Streaming Platform 3.1. 2010. Sybase, Inc. \n\n[32] Gadgil, M. Aleri \u2013 Complex Event Processing. 2012. https://www.javacodegeeks.com/2012/04/aleri-complex-\n\nevent-processing.html  \n\n[33] Sybase. Frequently Asked Questions (FAQ), Sybase Aleri Streaming Platform 3.1. 2010. \n\nhttp://infocenter.sybase.com/help/topic/com.sybase.infocenter.dc01297.0311/pdf/FAQ.pdf%3Fnoframes%3Dtrue \n\n[34] Sybase. Product Overview, Sybase Aleri Streaming Platform 3.1. 2010. \n\nhttp://infocenter.sybase.com/help/topic/com.sybase.infocenter.dc01286.0311/pdf/ProductOverview.pdf?noframes=tr\n\nue \n\n[35] Oracle. Oracle Complex Event Processing Performance. 2008. An Oracle White Paper. \n\n[36] Wahl, A. and Hollunder, B. Performance Measurement for CEP Systems. 2012. SERVICE COMPUTATION \n\n2012: The Fourth International Conferences on Advanced Service Computing. \n\n[37] Mendes, M., Bizarro, P., Marques, P.  A Performance Study of Event Processing Systems. 2009. Performance \n\nEvaluation and Benchmarking. Volume 5895 of the series Lecture Notes in Computer Science pp 221-236. \n\n[38] White, S., Alves, A., Rorke, D. WebLogic event server: a lightweight, modular application server for event \n\nprocessing. In Proc. of DEBS 2008. \n\n[39] Dekkers, P. Master Thesis Computer Science. Complex Event Processing. Radboud University Nijmegen, \n\nThesis number 574, October 2007. \n\n[40] Saboor, M., Rengasamy, R. DESIGNING AND DEVELOPING COMPLEX EVENT PROCESSING \n\nAPPLICATIONS. 2013. Sapient corporation. \n\n\n\n \n\n74 \n\n \n\n[41] Parnas, D.L., Schouwen, A.P., Kwan, S.P. Evaluation of SafetyCritical Software. 1990. Communications of \n\nthe ACM Volume 33 Issue 6, June 1990, Pages 636-648. \n\n[42] Collins, I. Chapter 1: Safety-Critical Computer System Design and Evaluation. 2013. Howard University \n\nDepartment of Electrical and Computer Engineering. \n\n[43] Aftab, A.H, Nadeem, A. A Survey of Safety Analysis Techniques for Safety Critical Systems. 2013. IJFCC \n\n2013 Vol.2(2): 134-137 ISSN: 2010-3751."}]}}}