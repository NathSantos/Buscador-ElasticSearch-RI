{"add": {"doc": {"field": [{"@name": "docid", "#text": "BR-TU.14593"}, {"@name": "filename", "#text": "20952_PROJETO_Rafael_de_Souza_Andrade.pdf"}, {"@name": "filetype", "#text": "PDF"}, {"@name": "text", "#text": "1\n\nUNIVERSIDADE FEDERAL DE SANTA CATARINA - UFSC \nCURSO SISTEMA DE INFORMA\u00c7\u00c3O \n\n \n \n \n \n \n \n\nTRABALHO DE CONCLUS\u00c3O DE CURSO \n \n \n \n \n \n \n \n \n \n\nARQUITETURA DE TOLER\u00c2NCIA A FALHAS EM SISTEMAS WEB \n \n \n \n \n\nRafael de Souza Andrade \nProfessor Orientador: Lau Cheuk Lung \n\n\u00c1rea de Concentra\u00e7\u00e3o: Sistema de Informa\u00e7\u00e3o \n \n \n \n \n \n \n \n \n \n \n \n \n\nFlorian\u00f3polis, SC \n2009\n\n\n\n 2\n\nRAFAEL DE SOUZA ANDRADE \n\n \n \n \n \n \n \n \n\nARQUITETURA DE TOLER\u00c2NCIA A FALHAS EM SISTEMAS WEB \n \n \n \n \n \n \n \n \n \n \n \n \n\nTrabalho de Conclus\u00e3o de Curso \napresentado Universidade Federal de \nSanta Catarina (UFSC), Florian\u00f3polis/SC, \ncomo requisito para conclus\u00e3o do Curso de \nGradua\u00e7\u00e3o em Sistema de Informa\u00e7\u00e3o. \n \n \n \n\n   Orientador: Lau Cheuk Lung \n \n \n \n \n \n \n \n \n \n \n \n \n \n\nFlorian\u00f3polis, SC \n2009\n\n\n\n 3\n\nTOLERANCIA A FALHAS EM UM SISTEMA WEB 2.0 \n \n \n\nRAFAEL DE SOUZA ANDRADE \n\n \nEste Trabalho de Conclus\u00e3o de Curso (TCC) foi julgado adequado para obten\u00e7\u00e3o da \n\ngradua\u00e7\u00e3o em Sistema de Informa\u00e7\u00e3o e aprovado em sua forma final junto a \nUniversidade Federal de Santa Catarina - UFSC, Florian\u00f3polis/SC. \n\n \n \n \n \n\n............................................................................................. \nMaria Marta Leite \n\nCoordenadora de Cursos \n \n \n \n\nApresentada \u00e0 Banca Examinadora, integrada pelos Professores: \n \n \n \n\n............................................................................................. \nLau Cheuk Lung, Dr  \n\nOrientador \n \n \n \n \n\n............................................................................................. \nCarlos Barros Montez \nBanca Examinadora \n\n \n \n \n \n\n............................................................................................. \nFrank Augusto Siqueira \n\nBanca Examinadora\n\n\n\n 4\n\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n\n \n \n\n \n\n\u201c... A imagina\u00e7\u00e3o \u00e9 mais importante que a ci\u00eancia, porque a ci\u00eancia \u00e9 \n\nlimitada, ao passo que a imagina\u00e7\u00e3o abrange o mundo inteiro... \n\n\u201cAlbert Einstein\u201d \n\n\n\n 5\n\n \n\n \n\nAGRADECIMENTOS \n\n \n\n  \n\n  \n\n \n\n \n\n\n\n 6\n\n \n\n \n\nRESUMO \n\n \n\n \n\nANDRADE, Rafael de Souza. Toler\u00e2ncia a falhas em um Sistema Web 2.0 \n. 2009 f. Trabalho de Conclus\u00e3o de Curso (Sistema de Informa\u00e7\u00e3o) \u2013 Universidade \nFederal de Santa Catarina - UFSC, Florian\u00f3polis, 2009. \n\n \n\nO presente trabalho tem como objetivo desenvolver uma arquitetura que \n\ngaranta a toler\u00e2ncia a falhas em sistemas Web 2.0. Para o desenvolvimento da \n\narquitetura proposta foram utilizados conceitos de clusteriza\u00e7\u00e3o de servidores de \n\naplica\u00e7\u00f5es (Jboss) e tamb\u00e9m replica\u00e7\u00e3o de dados em Banco de dados Mysql, \n\ngarantindo assim principalmente toler\u00e2ncia a falhas de hardware, para manter a alta \n\ndisponibilidade de sistemas Web 2.0 mesmo com algum de seus servidores fora do \n\nar. O resultado almejado foi alcan\u00e7ando ao se verificar que a arquitetura proposta \n\ngarante que mesmo em caso de falha de um servidor de aplica\u00e7\u00e3o ou de algum \n\nservidor de banco de dados, o sistema continua com o comportamento padr\u00e3o, sem \n\nque o usu\u00e1rio perceba o problema ocorrido. \n\n \n\nPalavras-chave: Toler\u00e2ncia a falhas, Banco de dados Distribu\u00eddos, Clusteriza\u00e7\u00e3o de \nServidores de Aplica\u00e7\u00f5es, Web 2.0.\n\n\n\n 7\n\n \n\n \n\nABSTRACT \n\n \n\n \n\nANDRADE, Rafael de Souza. Toler\u00e2ncia a falhas em um Sistema Web 2.0 \n. 2009 f. Trabalho de Conclus\u00e3o de Curso (Sistema de Informa\u00e7\u00e3o) \u2013 Universidade \nFederal de Santa Catarina - UFSC, Florian\u00f3polis, 2009. \n\n \n\nThis present paper aims to develop an architecture that ensures fault \n\ntolerance in Web 2.0 systems. For the development of the proposed architecture \n\nwere used concepts of clustering application servers (Jboss) and also data \n\nreplication in MySql Database servers, that architecture ensures mainly hardware \n\nfaults, to maintain high availability of Web 2.0 systems even with some of its servers \n\ndown. The desired result was succeed from the fact that the proposed architecture \n\nensures that even in case of failure of an application server or any database server, \n\nthe system continues with the default behavior without the User notices the problem \n\noccurred. \n\n \n\nKey-words: Fault Tolerance, Distributed Databases, Application Server Clustering, \nWeb 2.0 \n\n \n\n \n\n\n\n 8\n\n \n\nSUM\u00c1RIO \n\n \n\n1 INTRODU\u00c7\u00c3O ................................................................................................................ 9 \n1.1 CONTEXTUALIZA\u00c7\u00c3O DO TEMA E PROBLEMA .............................................. 9 \n\n1.2 OBJETIVOS ........................................................................................................ 9 \n\n1.2.1 Objetivo Geral ............................................................................................................. 10 \n1.2.2 Objetivos Espec\u00edficos ................................................................................................. 10 \n1.3 JUSTIFICATIVA ................................................................................................ 10 \n\n1.4 ESTRUTURA DO ESTUDO .............................................................................. 11 \n\n2 REVIS\u00c3O DA LITERATURA ........................................................................................ 12 \n2.1 TOLER\u00c2NCIA A FALHAS ................................................................................. 12 \n\n2.1.1 Dependabilidade ......................................................................................................... 13 \n2.1.2 Toler\u00e2ncia a falhas ..................................................................................................... 19 \n2.1.3 Fases na Toler\u00e2ncia a Falhas ..................................................................................... 20 \n2.1.4 Mascaramento de Falhas ........................................................................................... 23 \n2.1.5 Redund\u00e2ncia .............................................................................................................. 23 \n2.2 BANCO DE DADOS .......................................................................................... 30 \n\n2.2.1 Banco de dados Relacional ........................................................................................ 31 \n2.3 BANDO DE DADOS DISTRIBU\u00cdDOS ................................................................ 33 \n\n2.3.1 Porque usar Sistemas de Banco de Dados Distribu\u00eddo? ............................................. 34 \n2.3.2 Caracter\u00edsticas de um sistema de Banco de dados Distribu\u00eddo ................................... 34 \n2.3.3 Complica\u00e7\u00f5es de sistemas em banco de dados distribu\u00eddos ...................................... 36 \n2.3.4 Arquitetura de SGBD Distribu\u00eddos .............................................................................. 36 \n2.4 APLICA\u00c7\u00d5ES WEB .......................................................................................... 37 \n\n2.4.1 Toler\u00e2ncia a falhas em aplica\u00e7\u00f5es web 2.0................................................................. 38 \n2.4.2 Clusteriza\u00e7\u00e3o de Servidores de Aplica\u00e7\u00e3o(Jboss) ...................................................... 39 \n\n3 DESENVOLVIMENTO DO SISTEMA ........................................................................... 40 \n3.1 REGRAS DE NEG\u00d3CIO DO SISTEMA ............................................................. 40 \n\n3.2 BANCO DE DADOS MYSQL............................................................................. 42 \n\n3.3 CLUTERIZA\u00c7\u00c3O DE MYSQL ........................................................................... 42 \n\n3.4 SERVIDOR DE APLICA\u00c7\u00d5ES JBOSS ............................................................. 42 \n\n3.4.1 Clusteriza\u00e7\u00e3o com Jboss ............................................................................................ 43 \n3.4.2 Configurando o cluster e os nodes ............................................................................. 43 \n3.4.3 Arquiteturas de servi\u00e7o ............................................................................................... 47 \n3.4.4 Pol\u00edticas de Balanceamento ....................................................................................... 49 \n3.4.5 Replica\u00e7\u00f5es de Sess\u00f5es e Load Balance para aplica\u00e7\u00f5es Web ................................. 50 \n3.5 ARQUITETURA PROPOSTA ............................................................................ 52 \n\n3.5.1 Camada Cliente .......................................................................................................... 53 \n3.5.2 Camada de Aplica\u00e7\u00e3o ................................................................................................. 54 \n3.5.3 Camada de Banco de Dados ...................................................................................... 56 \n3.5.4 Configura\u00e7\u00e3o da arquitetura proposta ......................................................................... 56 \n\n\n\n 9\n\n3.5.5 Avalia\u00e7\u00e3o de Desempenho ......................................................................................... 64 \n\n4 TRABALHOS FUTUROS .............................................................................................. 67 \n\n5 CONSIDERA\u00c7\u00d5ES FINAIS .......................................................................................... 68 \n\n6 REFER\u00caNCIAS ............................................................................................................. 69 \n\n7 ANEXOS ....................................................................................................................... 73 \n\n\n\n1 INTRODU\u00c7\u00c3O \n\n \n\n Este trabalho visa desenvolver uma aplica\u00e7\u00e3o que utiliza banco de dados \n\ndistribu\u00eddos, e tamb\u00e9m garante toler\u00e2ncia a falhas utilizando cluster em servidores \n\nde aplica\u00e7\u00f5es, que seria o sistema de clustering do servidor de aplica\u00e7\u00f5es Jboss. \n\n \n\n1.1 CONTEXTUALIZA\u00c7\u00c3O DO TEMA E PROBLEMA \n\n \n\nEstamos presenciando um crescimento cada vez maior da Internet, aonde \n\npraticamente tudo em nossas vidas pode ser feito pela mesma. E isso fez com que \n\nsurgisse uma forte demanda de novas plataformas para desenvolvimento de \n\naplica\u00e7\u00f5es Web, por exemplo, Internet banking, e-commerce, e-learing e etc. Todos \n\nestes s\u00e3o exemplos reais que aplica\u00e7\u00f5es web t\u00eam crescido muito e que continuar\u00e3o \n\nassim no futuro. \n\nAtualmente estamos vivendo a fase em que todos os sistemas, al\u00e9m de \n\nrobustos e confi\u00e1veis, devem ser amig\u00e1veis para os usu\u00e1rios finais. A chamada Web \n\n2.0, aonde a intera\u00e7\u00e3o do usu\u00e1rio com seus sistemas se torna f\u00e1cil, amig\u00e1vel e muito \n\nmais interessante, \u00e9 um exemplo dessa nova tend\u00eancia. \n\nPor\u00e9m, atualmente a maioria das aplica\u00e7\u00f5es desenvolvidas n\u00e3o oferece \n\nsuporte com garantias de toler\u00e2ncia a falhas. Como por exemplo, se um de seus \n\nservidores desliga por alguma falha, o sistema deixa de funcionar. Desta forma, a \n\ncomunidade cientifica da \u00e1rea tem proposto diversas solu\u00e7\u00f5es tecnol\u00f3gicas para \n\ndesenvolvimento de aplica\u00e7\u00f5es tolerante a faltas para garantir que mesmo em caso \n\nde algumas falhas parciais os sistemas possam continuar operacionais. \n\nGarantias de toler\u00e2ncia a faltas t\u00eam sido muito estudadas, mas somente para \n\nsistemas cr\u00edticos, e hoje em dia tem aumentado a necessidade de se ter essas \n\ngarantias em sistemas web, para o funcionamento correto dos mesmos. \n\nComo podemos garantir que um sistema \u00e9 tolerante a falhas? \n\n \n\n1.2 OBJETIVOS \n\n \n\nO objetivo \u00e9 definido como alvo que se pretende atingir e tamb\u00e9m orienta a \n\nrevis\u00e3o da literatura e a metodologia do estudo.  \n\n A seguir apresentam-se os objetivos que este trabalho atingir\u00e1. \n\n\n\n \n\n \n\n10 \n\n1.2.1 Objetivo Geral \n\n \n\nDesenvolver uma aplica\u00e7\u00e3o web utilizando banco de dados distribu\u00eddos e \n\ntoler\u00e2ncia a falhas atrav\u00e9s de clusteriza\u00e7\u00e3o de servidores de aplica\u00e7\u00e3o. \n\n \n\n1.2.2 Objetivos Espec\u00edficos \n\n \n\na) Desenvolver a revis\u00e3o de literatura; \n\nb) Realizar um benchmark de banco de dados distribu\u00eddos para escolher o que tiver \n\nmelhor desempenho; \n\nc) Desenvolver um sistema tolerante a falhas aplicando t\u00e9cnicas de clustering de \n\nservidores de aplica\u00e7\u00f5es; \n\nd) Fazer an\u00e1lise completa de um sistema web utilizando as t\u00e9cnicas e diagramas \n\nUML; \n\ne) Desenvolver um sistema web completo para um usu\u00e1rio final. \n\n \n\n1.3 JUSTIFICATIVA \n\n \n\nAplica\u00e7\u00f5es Web est\u00e3o cada dia mais presentes em nossas vidas, por\u00e9m, at\u00e9 \n\nhoje, n\u00e3o \u00e9 poss\u00edvel garantir o seu correto funcionamento em cem por cento dos \n\ncasos. Devido a esse fato, est\u00e3o sendo sempre estudadas e aperfei\u00e7oadas formas \n\nde garantir o melhor funcionamento de sistemas. \n\nAt\u00e9 pouco tempo atr\u00e1s, os \u00fanicos sistemas que usavam t\u00e9cnicas de toler\u00e2ncia \n\na falhas eram sistemas cr\u00edticos, em que sua execu\u00e7\u00e3o n\u00e3o poderia ser parada \n\nnunca. Por\u00e9m atualmente esta necessidade vem crescendo cada vez em todos \n\nsistemas conhecidos, desde sistemas de bancos a sistemas internos de empresas.  \n\nNossa depend\u00eancia nesses sistemas fez quem o os mesmo n\u00e3o pudessem \n\nparar de ser executados de forma alguma, e por isso est\u00e3o sendo estudadas \n\nt\u00e9cnicas que garantam cem por cento do funcionamento de novos sistemas, \n\nprincipalmente sistemas Web. \n\nEst\u00e3o sendo lan\u00e7adas novas id\u00e9ias de garantir o funcionamento destes \n\nsistemas, assim como a arquitetura proposta neste trabalho, que visa garantir o \n\nfuncionamento de sistemas web 2.0 a falhas, principalmente falhas de hardware. \n\n\n\n \n\n \n\n11 \n\n1.4 ESTRUTURA DO ESTUDO \n\n \n\nNeste presente trabalho de conclus\u00e3o ser\u00e3o abordados os seguintes temas:  \n\nNo cap\u00edtulo I, Introdu\u00e7\u00e3o. \n\nNo cap\u00edtulo II, Revis\u00e3o da Literatura \u2013 Toler\u00e2ncia a falhas, Banco de Dados, \n\nBanco de dados Distribu\u00eddos, Aplica\u00e7\u00f5es Web. \n\n No cap\u00edtulo III, Desenvolvimento do sistema. \n\nNo cap\u00edtulo IV, Trabalhos Futuros.  \n\nNo cap\u00edtulo V, Considera\u00e7\u00f5es Finais.  \n\nNo cap\u00edtulo VI, Refer\u00eancias.  \n\nNo cap\u00edtulo VII, Anexos.  \n\n\n\n2 REVIS\u00c3O DA LITERATURA \n\n \n\n Nesta etapa, apresentam-se os conceitos que d\u00e3o o embasamento te\u00f3rico \n\nnecess\u00e1rio para o entendimento do tema desenvolvido. \n\n \n\n2.1 TOLER\u00c2NCIA A FALHAS \n\n \n\nHoje em dia, computadores e sistemas atuam cada vez mais na vida das \n\npessoas, em quase todas as tarefas que s\u00e3o efetuadas pela sociedade h\u00e1 intera\u00e7\u00e3o \n\ncom algum sistema. Por\u00e9m, garantir que o funcionamento de um sistema ap\u00f3s sofrer \n\nfalhas se torna cada vez mais essencial para todos esses sistemas.  \n\nTodos os sistemas est\u00e3o sujeitos a falhas, sejam elas falhas de software ou \n\nfalhas de hardware. Entretanto, o mais importante \u00e9 a conseq\u00fc\u00eancia dessas falhas, ou \n\nmelhor, saber tratar estas falhas para n\u00e3o ter conseq\u00fc\u00eancia no sistema em andamento.  \n\nToler\u00e2ncia a falhas n\u00e3o era tratado por sistemas convencionais at\u00e9 pouco \n\ntempo, e sendo s\u00f3 utilizados por sistemas cr\u00edticos, como por exemplo, avi\u00f5es, sondas \n\nentre outros. Mas, devido \u00e0 grande populariza\u00e7\u00e3o dos sistemas e das redes de \n\ncomputadores, fez com que houvesse um aumento na depend\u00eancia tecnol\u00f3gica em \n\ngrande parte da popula\u00e7\u00e3o. Segundo WEBER (1999, p.12), \u201c[...] Com a espantosa \n\npopulariza\u00e7\u00e3o de redes, fornecendo os mais variados servi\u00e7os, aumentou a \n\ndepend\u00eancia tecnol\u00f3gica de uma grande parcela da popula\u00e7\u00e3o aos servi\u00e7os oferecidos. \n\nFalhas nesses servi\u00e7os podem ser catastr\u00f3ficas para a seguran\u00e7a da popula\u00e7\u00e3o ou \n\npara a imagem e reputa\u00e7\u00e3o das empresas.\u201d \n\nOt\u00e1vio Alc\u00e2ntara (2008) entende que toler\u00e2ncia a falhas em sistemas de \n\ncomputa\u00e7\u00e3o \u00e9: \n \n\n\u201cAlvo de estudo desde a d\u00e9cada de 50. O primeiro pesquisador a apresentar \ntrabalhos na \u00e1rea foi Jonh Von Neuman que desenvolveu trabalhos de como \naumentar a confiabilidade aplicando redund\u00e2ncia de circuitos. Outros \npesquisadores tamb\u00e9m contribu\u00edram bastante para a fundamenta\u00e7\u00e3o da \u00e1rea, \u00e9 \nv\u00e1lido citar os nomes de Avizienis que projetou o computador STAR (Self-\nTesting And Repairing) um dos primeiros projetos a ter como foco um longo \nper\u00edodo de miss\u00e3o sem interven\u00e7\u00f5es humanas.\u201d \n \n \n\nConfiabilidade e disponibilidade em sistemas est\u00e3o sendo cada vez mais \n\ndesejados, o que criou uma nova necessidade para os desenvolvedores de sistemas. \n\n\n\n \n\n \n\n13 \n\nO termo ainda utilizado para definir um sistema com essas caracter\u00edsticas, por\u00e9m est\u00e1 \n\nentrando em desuso, \u00e9 Toler\u00e2ncia a Falhas, que foi utilizado pela primeira vez em 1967 \n\npor Avizienis, e a partir disto tem sido muito usado por toda comunidade. Atualmente \n\nest\u00e1 sendo cada vez mais utilizado um novo termo para definir a confiabilidade de \n\ndisponibilidade em sistemas, este termo \u00e9 Dependabilidade, que ser\u00e1 melhor definido a \n\ndiante neste trabalho. \n\n \n\n2.1.1 Dependabilidade \n\n \n\nDependabilidade, apesar de ser um termo relativamente novo no mercado, \u00e9 \n\numa das principais caracter\u00edsticas buscadas por sistemas hoje em dia, pois \n\ndependabilidade \u00e9 o atributo de um sistema que diz o quanto um sistema \u00e9 tolerante a \n\nfalhas. \n\nDe acordo com Algirdas Aviz? ienis, (200?) sistemas s\u00e3o formados por cinco \n\natributos b\u00e1sicos: funcionalidade, usabilidade, performance (desempenho), custo, e \n\ndependabilidade.  \n\nDependabilidade em sistemas computacionais \u00e9 a habilidade que um sistema \n\ntem de prover um servi\u00e7o de forma confi\u00e1vel e garantindo a integridade dos dados \n\nenviados pelo mesmo. \n\nEste atributo de um sistema n\u00e3o pode ser medido numericamente, por\u00e9m os \n\natributos que a dependibilidade possui podem ser mensurados, e assim podemos \n\ncalcular a confian\u00e7a de um sistema. \n\nDe acordo com Pradhan, (1996), \u201cos principais atributos da dependabilidade \n\ns\u00e3o: confiabilidade, disponibilidade, seguran\u00e7a de funcionamento (safety), seguran\u00e7a \n\n(security), mantenabilidade (maintainability), testabilidade e comprometimento do \n\ndesempenho (perfomability).\u201c \n\nA figura abaixo mostra uma \u00e1rvore com os atributos e significados da \n\ndependabilidade. \n\n\n\n \n\n \n\n14 \n\n \nFigura 1: Atributos da Dependabilidade \nFonte: Algirdas Aviz? ienis \n \n\n Estes atributos da dependabilidade ser\u00e3o melhor especificados abaixo: \n\na) Confiabilidade \u2013 este atributo se refere \u00e0 caracter\u00edstica de o sistema atender a \n\nespecifica\u00e7\u00e3o feita para o mesmo, durante um tempo previsto, essa caracter\u00edstica fica \n\nmelhor especificada por Weber (2002) aonde diz que \u201c[...] \u00e9 a capacidade de atender a \n\nespecifica\u00e7\u00e3o, dentro de condi\u00e7\u00f5es definidas, durante certo per\u00edodo de funcionamento \n\ne condicionado a estar operacional no in\u00edcio do per\u00edodo.\u201d \n\nConfiabilidade \u00e9 a principal caracter\u00edstica da dependabilidae, qualquer sistema \n\nque deseja ter alta dependabilidade deve ter alta confiabilidade. \n\n Exemplos de sistemas que precisam desta caracter\u00edstica s\u00e3o sistemas de \n\navia\u00e7\u00e3o e explora\u00e7\u00e3o espacial, pois s\u00e3o sistemas em que n\u00e3o podem ter falhas nem no \n\nmenor espa\u00e7o de tempo, e tamb\u00e9m porque s\u00e3o sistemas que n\u00e3o \u00e9 poss\u00edvel se \n\narrumar em tempo real. \n\nComo dito anteriormente, este atributo pode ser mensurado, e por isso se trata \n\nde um dado probabil\u00edstico, por\u00e9m est\u00e1 caracter\u00edstica n\u00e3o pode ser confundida com \n\ndisponibilidade, pois como o exemplo de avi\u00f5es, estes sistemas podem ter alta \n\nconfiabilidade quando est\u00e3o operando, mas precisam de corre\u00e7\u00f5es e reparos a cada \n\npouso, fazendo assim com que n\u00e3o tenha uma alta disponibilidade.  \n\n \n\n\n\n \n\n \n\n15 \n\nb) Disponibilidade \u2013 esta caracter\u00edstica est\u00e1 mais vis\u00edvel em sistemas que precisa \n\nestar dispon\u00edveis sempre que for necess\u00e1rio, ou seja, n\u00e3o h\u00e1 um tempo fixo de \n\nfuncionamento, devendo estar sempre dispon\u00edvel. Exemplos de sistemas que possuem \n\nalta disponibilidade s\u00e3o: servidores, banco de dados, entre outros. \n\nDe acordo com (Weber, 200?), \u201c[...] Um sistema pode ser altamente dispon\u00edvel \n\nmesmo apresentando per\u00edodos de inoperabilidade, quando est\u00e1 sendo reparado, desde \n\nque esses per\u00edodos sejam curtos e n\u00e3o comprometam a qualidade do servi\u00e7o\u201d. \n\nEsta caracter\u00edstica, assim como confiabilidade, \u00e9 muito desejada por usu\u00e1rios \n\natualmente, pois todos querem sistemas confi\u00e1veis e estejam sempre dispon\u00edveis para \n\neles. \n\n \n\nc) Seguran\u00e7a de funcionamento - esta caracter\u00edstica consiste em garantir que o \n\nsistema n\u00e3o trabalhe de forma incorreta, ou seja, sempre garantir\u00e1 que o sistema \n\ntrabalhar\u00e1 de forma correta, e se o mesmo detectar falha no seu funcionamento, ele o \n\nlevar\u00e1 para um estado aonde n\u00e3o causar\u00e1 danos e nem de repostas erradas. \n\nUm exemplo de sistema com alta seguran\u00e7a de funcionamento s\u00e3o os trens, que \n\nquando o sistema identifica algum problema de funcionamento, o mesmo controla sua \n\nacelera\u00e7\u00e3o e para em lugar seguro. \n\nEsta caracter\u00edstica tamb\u00e9m pode ser medida quantitativamente, fazendo assim \n\ncom que se possa calcular a seguran\u00e7a de funcionamento de um sistema. \n\n \n\nd) Comprometimento de Desempenho - esta caracter\u00edstica consiste em garantir que o \n\nsistema, mesmo ap\u00f3s falhas, consiga garantir certo desempenho primeiramente \n\nacordado, ou seja, o desempenho do sistema poder\u00e1 piorar ap\u00f3s falhas, mas somente \n\nat\u00e9 um certo ponto, garantindo seu desempenho. \n\n \n\ne) Mantenabilidade - esta caracter\u00edstica significa a facilidade que se tem para dar \n\nmanuten\u00e7\u00e3o ao sistema, ou seja, mensurar o tempo que leva para corrigir um defeito \n\nno sistema, lembrando que corrigir o problema consiste em localizar, recuperar e \n\ncolocar em opera\u00e7\u00e3o novamente.  \n\n \n\nf) Testabilidade - de acordo com (Weber, 2002), \u201ctestabilidade \u00e9 a capacidade de \n\ntestar certos atributos internos ao sistema ou facilidade de realizar certos testes\u201d. \n\n \n\n\n\n \n\n \n\n16 \n\nComo foi visto, dependabilidade \u00e9 uma caracter\u00edstica cada vez mais buscada em \n\nsistemas, que antes era somente vista em sistemas cr\u00edticos, mas que agora est\u00e1 sendo \n\nbuscada por empresas para garantir a qualidade de seus servi\u00e7os, e a partir disso viu-\n\nse a necessidade de se trazer estes atributos para sistemas comerciais usado \n\nmundialmente. \n\n \n\n2.1.1.1 Formas de se Alcan\u00e7ar Dependabilidade \n\n \n\nPara garantir que um sistema tenha o atributo da dependabilidade, \u00e9 necess\u00e1rio \n\nimplementar m\u00e9todos e t\u00e9cnicas, pois atrav\u00e9s destes podemos garantir que um sistema \n\npossua dependabilidade ou n\u00e3o. Toler\u00e2ncia a falhas, na verdade, \u00e9 um atributo de \n\nDependabilidade, por\u00e9m como atualmente usu\u00e1rios n\u00e3o est\u00e3o acostumados com o \n\ntermo citado, o texto foi inicialmente chamado de toler\u00e2ncia a falhas. Al\u00e9m de toler\u00e2ncia \n\na falhas, sistema que tem dependabilidade possui outras caracter\u00edsticas, entre elas \n\npodemos listar: preven\u00e7\u00e3o de falhas, remo\u00e7\u00e3o de falhas, previs\u00e3o de falhas, e tamb\u00e9m, \n\ntoler\u00e2ncia a falhas. \n\nA tabela abaixo mostra a classifica\u00e7\u00e3o de dos m\u00e9todos e t\u00e9cnicas para alcan\u00e7ar \n\na dependabilidade. \n\nT\u00e9cnica Fun\u00e7\u00e3o \n\nPreven\u00e7\u00e3o \nde falhas \n\nImpede a ocorr\u00eancia ou introdu\u00e7\u00e3o de falhas. Envolve a sele\u00e7\u00e3o de metodologias \nde projeto e de tecnologias adequadas para seus componentes. \n\nToler\u00e2ncia a \nfalhas \n\nFornece o servi\u00e7o esperado mesmo na presen\u00e7a de falhas. T\u00e9cnicas comuns: \nmascaramento de falhas, detec\u00e7\u00e3o de falhas, localiza\u00e7\u00e3o, confinamento, \nrecupera\u00e7\u00e3o, reconfigura\u00e7\u00e3o, tratamento. \n\nValida\u00e7\u00e3o Remo\u00e7\u00e3o de falhas, verifica\u00e7\u00e3o da presen\u00e7a de falhas. \n\nPrevis\u00e3o de \nfalhas Estimativas sobre presen\u00e7a de falhas e estimativas sobre conseq\u00fc\u00eancias de falhas. \n\nTabela 1 \u2013 T\u00e9cnicas para alcan\u00e7ar dependabilidade. \nFonte: Weber, T. Toler\u00e2ncia a falhas: conceitos e exemplos. \n \n\nAntes de se estudar especificamente cada uma destas t\u00e9cnicas \u00e9 necess\u00e1rio \n\nentender como falhas ocorrem em sistemas, existem tr\u00eas tipos b\u00e1sicos de problemas \n\nque s\u00e3o definidos de acordo com seus n\u00edveis em rela\u00e7\u00e3o ao sistema. Esses tipos \n\nb\u00e1sicos s\u00e3o chamados de: falha, erro e defeito. \n\nA parte de toler\u00e2ncia a falhas ser\u00e1 especificada separadamente, pois \u00e9 a t\u00e9cnica \n\nque deseja se aprofundar mais neste trabalho. \n\n \n\n\n\n \n\n \n\n17 \n\n2.1.1.2 Falha, erro e defeito \n \n\n \n\n De acordo com Ot\u00e1vio Alc\u00e2ntara (2008): \n\n \nFalha \u00e9 um defeito f\u00edsico, imperfei\u00e7\u00e3o que atinge um componente de hardware \nou software. Podemos tomar como exemplo uma solda fria que gera um mau \ncontato entre dois componentes, ou um algoritmo que gera um la\u00e7o infinito, ou \nseja, falhas est\u00e3o associadas ao universo f\u00edsico dos sistemas. \n \n\n Uma falha pode gerar um erro no sistema, o erro \u00e9 a representa\u00e7\u00e3o da falha na \n\nparte de informa\u00e7\u00e3o do sistema. Normalmente se tem um erro quando uma falha \n\ncorrompe uma informa\u00e7\u00e3o entre outros. \n\n Segundo Wez (2005), \u201cO defeito (failure) \u00e9 um desvio na especifica\u00e7\u00e3o, e ocorre \n\nem conseq\u00fc\u00eancia de um erro. Nesta etapa, o sistema j\u00e1 est\u00e1 em estado err\u00f4neo, a \n\ninforma\u00e7\u00e3o j\u00e1 est\u00e1 corrompida e conseq\u00fcentemente ir\u00e1 gerar um defeito. O defeito \u00e9 \n\npercebido pelo usu\u00e1rio, por isso os defeitos est\u00e3o associados ao universo do usu\u00e1rio.\u201d  \n\nNa figura abaixo tem um exemplo simplificado do funcionamento de falha, erro e \n\ndefeito.  \n\n \n\nFigura 2: Modelo de tr\u00eas universos \nFonte: Weber, T. Toler\u00e2ncia a falhas: conceitos e exemplos. \n \n \n As falhas podem sem categorizadas em duas formas, as falhas f\u00edsicas e as \n\nfalhas humanas. \n\n As falhas f\u00edsicas s\u00e3o as falhas relacionadas ao hardware do sistema, relacionada \n\naos componentes deste sistema, atualmente a maioria das falhas f\u00edsicas j\u00e1 s\u00e3o \n\ntratadas pelos sistemas, ou seja, n\u00e3o \u00e9 vis\u00edvel para o usu\u00e1rio. \n\n O principal problema atualmente para os sistemas, principalmente os sistemas \n\ncr\u00edticos s\u00e3o as falhas de software, que s\u00e3o falhas humanas, decorrentes de \n\n\n\n \n\n \n\n18 \n\nespecifica\u00e7\u00f5es erradas, implementa\u00e7\u00f5es erradas ou qualquer outro problema \n\nrelacionado a uma falha humana.  \n\n A seguir mostra-se uma tabela comparativa com as estat\u00edsticas referentes \u00e0s \n\ndisponibilidades de acordo com o tipo do sistema. \n\n \n\n \nSistemas tradicionais Redes cliente-servidor (n\u00e3o \n\ntolerantes a falhas) N\u00e3o tolerante a falhas Tolerante a falhas \nMean time to failure: 6 a 12 \nsemanas Indisponibilidade \nap\u00f3s defeito: 1 a 4 h \n\nMean time to failure: \n21 anos (Tandem) \n\nDisponibilidade m\u00e9dia: 98% \n\nDefeitos: Defeitos: Defeitos: \nHardware 50% Software 65% Projeto 60% \nSoftware 25% Opera\u00e7\u00f5es 10% Opera\u00e7\u00f5es 24% \nComunica\u00e7\u00f5es / ambiente 15% Hardware 8% F\u00edsicos 16% \nOpera\u00e7\u00f5es 10% Ambiente 7% \nTabela 2: Causas usuais de defeitos em sistemas de computa\u00e7\u00e3o \nFonte: Weber, T. Toler\u00e2ncia a falhas: conceitos e exemplos. \n \n\n2.1.1.3 Preven\u00e7\u00e3o de Falhas \n\n \n\nPreven\u00e7\u00e3o de falhas \u00e9 garantido por t\u00e9cnicas de controle de qualidade que s\u00e3o \n\nimplementadas durante a fase de projeto e desenvolvimento do software ou hardware. \n\nEstas t\u00e9cnicas garantem que o desenvolvimento estar\u00e1 correto, e assim, far\u00e1 com que \n\nn\u00e3o haja falhas, exemplos de t\u00e9cnicas para preven\u00e7\u00e3o a falhas, \u00e9 uma especifica\u00e7\u00e3o \n\ncorreta de um sistema, de forma formal, ou regras r\u00edgidas para desenvolver um \n\nhardware. \n\n \n\n2.1.1.4 Remo\u00e7\u00e3o de Falhas \n\n \n\nRemo\u00e7\u00e3o de falhas \u00e9 uma t\u00e9cnica usada tanto na parte de desenvolvimento do \n\nsistema como tamb\u00e9m durante seu ciclo de vida de opera\u00e7\u00e3o.  \n\nPara utilizar esta t\u00e9cnica durante o desenvolvimento de um sistema, \u00e9 \n\nnecess\u00e1rio seguir tr\u00eas etapas, s\u00e3o elas: verifica\u00e7\u00e3o, diagn\u00f3stico e corre\u00e7\u00e3o. \n\nVerifica\u00e7\u00e3o \u00e9 a fase aonde se checa se o sistema em desenvolvimento esta de \n\nacordo com o que foi especificado para o mesmo, e se for verificado que o sistema n\u00e3o \n\nest\u00e1 sendo desenvolvido de forma correta, segue-se para a fase de diagn\u00f3stico, que \n\n\n\n \n\n \n\n19 \n\nconsiste em se verificar o que n\u00e3o esta de acordo com o que deveria estar, e assim, \n\ncorrigir os erros. \n\n \n\n2.1.1.5 Previs\u00e3o de falhas \n\n \n\nPrevis\u00e3o de falhas consiste na t\u00e9cnica aonde se faz estat\u00edsticas qualitativas e \n\nquantitativas para se fazer testes nos sistemas, e se verificar o comportamento do \n\nmesmo. \n\nA partir destes testes estat\u00edsticos, faz-se um estudo para verificar se o \n\ncomportamento do sistema de alguma forma ficar\u00e1 de forma incorreta no futuro, e \n\nassim poder corrigi-los antes mesmo de o erro acontecer. \n\n \n\n2.1.2 Toler\u00e2ncia a falhas \n\n \n\nComo dito anteriormente, a fase de toler\u00e2ncia a falhas consiste em que uma \n\nmensagem enviada pelo sistema chegar\u00e1 de forma correta mesmo ap\u00f3s sofrer falhas, \n\nnormalmente esta t\u00e9cnica utiliza t\u00e9cnicas de detec\u00e7\u00e3o de erros e de t\u00e9cnicas de \n\nrecupera\u00e7\u00e3o de sistema. \n\nDe acordo com Weber (2002), preven\u00e7\u00e3o e remo\u00e7\u00e3o de falhas: \n\n \n\u201c[...] n\u00e3o s\u00e3o suficientes quando o sistema exige alta confiabilidade ou alta \ndisponibilidade. Nesses casos o sistema deve ser constru\u00eddo usando t\u00e9cnicas \nde toler\u00e2ncia a falhas. Essas t\u00e9cnicas garantem funcionamento correto do \nsistema mesmo na ocorr\u00eancia de falhas e s\u00e3o todas baseadas em \nredund\u00e2ncia, exigindo componentes adicionais ou algoritmos especiais\u201d. \n \n\nA toler\u00e2ncia a falhas pode ser classificada de duas formas diferentes: \n\n\u2022 Mascaramento; \n\n\u2022 Detec\u00e7\u00e3o, localiza\u00e7\u00e3o e reconfigura\u00e7\u00e3o. \n\nMascaramento de falhas consiste em fazer com que o sistema, mesmo em \n\nestado err\u00f4neo, n\u00e3o mostra para o usu\u00e1rio, ou seja, mesmo com um erro, o \n\nfuncionamento do sistema continua de forma normal. Esta t\u00e9cnica \u00e9 mais utilizada em \n\nsistemas que n\u00e3o podem ficar em estado err\u00f4neo esperando para serem corrigidos. \n\nJ\u00e1 detec\u00e7\u00e3o, localiza\u00e7\u00e3o e reconfigura\u00e7\u00e3o s\u00e3o quando um erro \u00e9 encontrado, e \n\nautomaticamente existem mecanismos que fazem a localiza\u00e7\u00e3o do erro a sua corre\u00e7\u00e3o, \n\ncomo dito anteriormente, esta t\u00e9cnica \u00e9 mais usada para sistemas que pode \n\npermanecer em estado err\u00f4neo por um per\u00edodo de tempo at\u00e9 ser corrigido. \n\n\n\n \n\n \n\n20 \n\nA toler\u00e2ncia a falhas \u00e9 separada em fases, essas fases ser\u00e3o melhores \n\nespecificadas nos pr\u00f3ximos t\u00f3picos. \n\n \n\n2.1.3 Fases na Toler\u00e2ncia a Falhas \n\n \nComo j\u00e1 dito anteriormente, um sistema tolerante a falhas visa principalmente \n\nalcan\u00e7ar a dependabilidade, ou seja, busca garantir que um sistema funcione \n\ncorretamente mesmo ap\u00f3s que o sistema tenha alguma falha. Para garantir que um \n\nsistema tenha a dependabilidade, existem fases definidas entre a detec\u00e7\u00e3o de falhas e \n\na corre\u00e7\u00e3o das mesmas, segundo (ANDERSON, T.; LEE, 1981), estas fases s\u00e3o \n\ndefinidas como: Detec\u00e7\u00e3o de erros, confinamento e avalia\u00e7\u00e3o de erros, recupera\u00e7\u00e3o de \n\nerros e tratamento de falhas. \n\nEstas fases ser\u00e3o melhores explicadas nos t\u00f3picos abaixo. \n\na) Detec\u00e7\u00e3o de erros - trata-se de umas das principais caracter\u00edsticas a ser analisada \n\nna toler\u00e2ncia a falhas, pois com a detec\u00e7\u00e3o de erros \u00e9 que se pode definir a \n\nconfiabilidade de algum sistema. \n\nAs falhas em sistemas dificilmente s\u00e3o detectadas diretamente em sistemas, \u00e9 \n\nnecess\u00e1rio que aconte\u00e7a erros no sistema para assim identific\u00e1-los. Para isso \u00e9 \n\nnecess\u00e1rio fazer muitos testes no sistema, e assim identificar o maior n\u00famero poss\u00edvel \n\nde falhas no sistema, o ideal seria identificar todas as falhas, por\u00e9m sabe-se que hoje \n\nem dia, devido \u00e0 complexidade dos sistemas em desenvolvimento \u00e9 quase imposs\u00edvel \n\natingir tal medida. \n\n Para garantir a efici\u00eancia desta fase, \u00e9 necess\u00e1rio que os testes estejam de \n\nacordo com algumas propriedades, elas s\u00e3o: \n\n\u2022 Um teste ideal deve se basear somente na especifica\u00e7\u00e3o do sistema, ou \n\nseja, sem conhecimento de como foi desenvolvido, este tipo de teste \u00e9 \n\nchamado de teste \u201ccaixa preta\u201d; \n\n\u2022 O teste deve ser completo e correto, ou seja, todos os erros poss\u00edveis \n\ndevem ser detectados; \n\n\u2022 Teste deve ser independente do sistema, pois eles tamb\u00e9m podem falhar, \n\ne isso n\u00e3o pode se refletir no sistema. \n\nO teste do tipo caixa preta \u00e9 o mais importante, pois desconsidera a \n\nimplementa\u00e7\u00e3o do sistema e garante somente que ele deve funciona de acordo com o \n\nque foi especificado. \n\n\n\n \n\n \n\n21 \n\nExistem avalia\u00e7\u00f5es de v\u00e1rias formas de se testar os sistemas, as principais \n\nformas de teste existentes s\u00e3o: \n\n\u2022 Testes de Replica\u00e7\u00e3o: este tipo de teste \u00e9 um dos mais comuns e um dos \n\nmais eficientes para garantir a rendabilidade de um sistema, este tipo de \n\nteste consiste em \u201ccopiar\u201d um componente do sistema, e assim tendo os \n\ndois componentes fazer uma vota\u00e7\u00e3o dos resultados dos mesmos, e a \n\npartir disso comparar os resultados obtidos a fim de detectar os erros. \n\n\u2022 Testes de Timing: este teste \u00e9 bastante usado para quando um \n\ncomponente ou um sistema tem restri\u00e7\u00f5es quanto ao tempo de resposta, \n\nele simplesmente faz uma requisi\u00e7\u00e3o ao sistema e cronometra o tempo \n\nde resposta, e se o tempo exceder o que foi decidido ele estar\u00e1 em \n\nestado de erro. \n\n\u2022 Testes Estruturais e Codifica\u00e7\u00e3o: de acordo com N\u00e9lio Pereira (2002), \n\n\u201c[...] Em quaisquer dados, dois tipos gerais de testes s\u00e3o poss\u00edveis: testes \n\nde sem\u00e2ntica e estruturais. Testes Sem\u00e2nticos tentam garantir se o valor \n\n\u00e9 consistente com o resto do sistema. Testes Estruturais s\u00f3 consideram a \n\ninforma\u00e7\u00e3o e garantem que internamente a estrutura dos dados \u00e9 como \n\ndeveria ser. A forma mais comum de teste estrutural \u00e9 a codifica\u00e7\u00e3o, que \n\n\u00e9 usada intensamente em hardware. Nela, bits extras s\u00e3o adicionados \n\naos dados, de forma que \u00e9 poss\u00edvel detectar se existe algum bit \n\ncorrompido. Tal teste tamb\u00e9m pode ser usado em software, sendo \n\naplicado \u00e0s estruturas de dados.\u201d \n\n\u2022 Testes de Diagn\u00f3sticos: s\u00e3o testes executados a partir de dados de \n\nentrada no sistema, e com o conhecimento pr\u00e9vio do resultado que o \n\nsistema dever\u00e1 \u201cdar\u201d ao teste, e a partir disso se o resultado n\u00e3o se \n\nenquadra com o esperado, \u00e9 verificado um erro no sistema. \n\n \n\nb) Confinamento e avalia\u00e7\u00e3o de erros - sistemas n\u00e3o s\u00e3o constantemente monitorados, \n\npor isso, at\u00e9 se descobrir que ouve uma falha no mesmo, ele pode j\u00e1 ter se propagado \n\nno sistema, atrav\u00e9s da comunica\u00e7\u00e3o entre os componentes do sistema. Portanto se faz \n\nnecess\u00e1rio determinar exatamente o quanto esta falha afetou o sistema, e descobrir \n\nquais componentes do mesmo foram afetados por ela. Ap\u00f3s descoberto onde ocorreu a \n\n\n\n \n\n \n\n22 \n\nfalha, \u00e9 necess\u00e1rio saber o fluxo que a mesma percorreu dentro do sistema, para assim \n\nse determinar o que causou o problema.  \n\n \n\nc) Recupera\u00e7\u00e3o de erros - uma vez que o erro foi descoberto e sua extens\u00e3o avaliada, \n\n\u00e9 necess\u00e1rio retirar este erro do sistema, e para isso existem duas t\u00e9cnicas, que \n\nser\u00e3o explicadas abaixo. \n\n\u2022 Recupera\u00e7\u00e3o para Tr\u00e1s (Backward Recovery): Esta t\u00e9cnica \u00e9 uma das \n\nmais utilizadas para a recupera\u00e7\u00e3o de erros, ela consiste em fazer o \n\nsistema voltar para um estado anterior ao qual ocorreu o erro, esperando \n\nque este estado esteja livre de erros, e para isso utiliza checkpoints \n\nperi\u00f3dicos para garantir estes pontos de retorno. Esta t\u00e9cnica se mostrou \n\nmuito confi\u00e1vel, por\u00e9m ela consome um certo processamento por parte do \n\nsistema, para sempre estar atualizando estes checkpoints e tamb\u00e9m para \n\nfazer o rollback do sistema exige bastante processamento. \n\n\u2022 Recupera\u00e7\u00e3o para Frente (Forward Recovery): esta t\u00e9cnica consiste em \n\nconduzir o sistema para um estado ainda n\u00e3o ocorrido, para tentar assim \n\ntornar o estado livre de falhas, por\u00e9m esta t\u00e9cnica \u00e9 dificilmente \n\nimplementada, pois necessita uma avalia\u00e7\u00e3o muito precisa dos erros do \n\nsistema, para assim saber para qual estado deve levar o sistema. Esta \n\nt\u00e9cnica n\u00e3o consegue ser gen\u00e9rica, pois depende muito de regras de \n\nnegocio de cada aplica\u00e7\u00e3o, fazendo assim que dependendo da situa\u00e7\u00e3o \n\nleve o sistema para estados diferentes diante de um mesmo erro. \n\nA tabela abaixo descreve resumidamente o funcionamento destas t\u00e9cnicas: \n\n \n\n \nTabela 3 \u2013 T\u00e9cnicas de Recupera\u00e7\u00e3o \nFonte: Weber, T. Toler\u00e2ncia a falhas: conceitos e exemplos.  \n \n\n\n\n \n\n \n\n23 \n\nd) Tratamento de falhas - mesmo ap\u00f3s todos os tratamentos dos erros citados acima, \n\no sistema ainda n\u00e3o est\u00e1 totalmente livre de falhas, pois estes erros podem ser alguma \n\nfalha de um componente entre outros exemplos. \n\nPortanto \u00e9 necess\u00e1rio identificar o ponto de falha do sistema para assim poder \n\nrealmente reparar a falha ocorrida para a mesma n\u00e3o venha a se repetir. Se for uma \n\nfalha persistente do sistema, deve isolar esta falha para garantir que o sistema n\u00e3o \n\nentre mais neste estado faltoso.  \n\n \n\n2.1.4 Mascaramento de Falhas \n\n \n\nMascaramento de Falhas \u00e9 a garantia de que o sistema enviar\u00e1 uma resposta \n\ncerta ao usu\u00e1rio mesmo sofrendo alguma falha no caminho desta repostas, ou seja, a \n\nfalha causada no sistema n\u00e3o se transforma em um erro, e assim \u00e9 visto como erro no \n\nsistema, fazendo assim com que n\u00e3o se necessite ser tratada esta falha, pois ser\u00e1 \n\ninvis\u00edvel para o usu\u00e1rio. \n\nPor\u00e9m em caso de falhas permanentes nos sistemas, de hardware ou de \n\nsoftware \u00e9 necess\u00e1rio ainda assim corrigir este erro. \n\nSegundo (Weber, Tais, 2006), existem alguns mecanismos para o \n\nmascaramento de falhas em sistemas, como mostrado na tabela abaixo. \n\n \n\nTabela 4 \u2013 Mecanismos para mascaramento de Falhas \nFonte: Weber, T. Toler\u00e2ncia a falhas: conceitos e exemplos.  \n\n \n\nA redund\u00e2ncia \u00e9 a principal t\u00e9cnica e a mais utilizada para garantir que o \n\nsistema seja tolerante a falhas. Esta t\u00e9cnica ser\u00e1 melhor descrita a seguir. \n\n \n\n2.1.5 Redund\u00e2ncia \n\n \n\nA forma mais utilizada e mais comum para garantir a toler\u00e2ncia a falhas em \n\nsistemas \u00e9 a redund\u00e2ncia, segundo (CREVELING, C.J., 1956), \u201c... Redund\u00e2ncia para \n\naumento de confiabilidade \u00e9 quase t\u00e3o antiga como a hist\u00f3ria dos computadores.  \n\n\n\n \n\n \n\n24 \n\nQuase todas as t\u00e9cnicas utilizadas para garantir que um sistema seja tolerante a \n\nfalhas usam alguma forma de redund\u00e2ncia, tanto que atualmente no mercado, sistemas \n\ntolerantes a falhas s\u00e3o chamados de sistemas redundantes. \n\nExistem v\u00e1rias formas de redund\u00e2ncia em sistemas, entre elas podemos citas: \n\n\u2022 Redund\u00e2ncia de Hardware; \n\n\u2022 Redund\u00e2ncia de Software; \n\n\u2022 Redund\u00e2ncia Temporal; \n\n\u2022 Redund\u00e2ncia de informa\u00e7\u00e3o. \n\n \n\nVale lembrar, que apesar de redund\u00e2ncia ser uma das t\u00e9cnicas mais utilizadas \n\npara alcan\u00e7ar a dependabilidade, ela sempre tem um custo relacionado, ou seja, para \n\nfazer redund\u00e2ncia de hardware, por exemplo, sempre se ter\u00e1 um custo elevado para se \n\ncomprar dois componentes de cada que se deseja fazer a redund\u00e2ncia, por isso \u00e9 \n\nimportante estudar bem a viabilidade de se utilizar esta t\u00e9cnica em projetos. \n\nTodas estas formas s\u00e3o utilizadas, por\u00e9m, a redund\u00e2ncia de software e \n\nhardware s\u00e3o as mais usadas no mercado. Todas estas formas ser\u00e3o melhores \n\nespecificadas abaixo. \n\n \n\n2.1.5.1 Redund\u00e2ncia de Hardware \n\n \n\nEsta t\u00e9cnica de redund\u00e2ncia \u00e9 uma das mais utilizada para garantir um sistema \n\ntolerante a falhas, ela se baseia na id\u00e9ia de se adicionar um componente a mais no \n\nsistema, que seja id\u00eantico a um j\u00e1 existente, e a partir disto, toda requisi\u00e7\u00e3o feita no \n\nsistema, ser\u00e1 atendida pelos dois componentes, e assim, \u00e9 feita uma vota\u00e7\u00e3o para \n\nverificar a resposta correta. \n\nEm algumas situa\u00e7\u00f5es esses hardwares redundantes podem ser usados para \n\nsubstituir automaticamente um hardware que venha a ter problemas dentro do sistema.  \n\nTr\u00eas formas de redund\u00e2ncia de hardware s\u00e3o estudadas na literatura, elas s\u00e3o: \n\nredund\u00e2ncia passiva ou est\u00e1tica, redund\u00e2ncia ativa ou din\u00e2mica, redund\u00e2ncia h\u00edbrida.  \n\nAbaixo segue uma tabela comparativa entre os tipos de redund\u00e2ncia de \n\nhardware citadas. \n\n\n\n \n\n \n\n25 \n\n \nTabela 5 \u2013 Redund\u00e2ncia de Hardware \nFonte: Adaptado por Andrade, Rafael \n \n\n \n\nEstas formas de redund\u00e2ncia ser\u00e3o melhores especificadas abaixo: \n\n \n\na) Redund\u00e2ncia de Hardware Passiva - esta t\u00e9cnica \u00e9 usada principalmente para o \n\nmascaramento de falhas, ou seja, o sistema n\u00e3o saber\u00e1 que ocorreu a falha, e dar\u00e1 \n\numa resposta correta o usu\u00e1rio final.  \n\nEsta t\u00e9cnica consiste em que todos os elementos redundantes do sistema \n\nexecutem a mesma tarefa requisitada, e enviam suas respostas para um votador \n\ncentral, que verifica todas as respostas enviadas e escolhe a correta para \u201cresponder\u201d \n\nao sistema somente a correta. Existem dois exemplos de utiliza\u00e7\u00e3o desta t\u00e9cnica, uma \n\ndelas \u00e9 a TMR(triple Modular Redundancy) e a NMR (N-Modular Redundancy). \n\nDe acordo com (Weber, Ta\u00eds), \u201c... TMR mascara falhas em um componente de \n\nhardware triplicando o componente e votando entre as sa\u00eddas para determina\u00e7\u00e3o do \n\nresultado. A vota\u00e7\u00e3o pode ser por maioria (2 em 1) ou vota\u00e7\u00e3o por sele\u00e7\u00e3o do valor \n\nm\u00e9dio.\u201d Apesar de ser uma t\u00e9cnica simples, como tem somente um votador no sistema, \n\nfaz com que o mesmo se torne um ponto critico de falha no sistema, pois \u00e9 ele quem \n\nda as resposta para o sistema, ent\u00e3o se ele falhar o sistema apresentar\u00e1 um erro. \n\nA figura a seguir ilustra o funcionamento da t\u00e9cnica TMR. \n\n\n\n \n\n \n\n26 \n\n \nFigura 3 \u2013 Exemplo de TMR \nFonte: Pradhan, D. (Editor), Fault-Tolerant Computer System Design. \n \n\nb) Redund\u00e2ncia de Hardware Ativa ou Din\u00e2mica - nesta t\u00e9cnica, a toler\u00e2ncia a falhas \n\n\u00e9 aplicada atrav\u00e9s da detec\u00e7\u00e3o, localiza\u00e7\u00e3o e recupera\u00e7\u00e3o de falhas, por\u00e9m esta \n\nt\u00e9cnica n\u00e3o mascara um erro, sendo assim, o caso ocorra uma falha, o sistema saber\u00e1 \n\ne em tempo real a corrigir\u00e1. \n\n Redund\u00e2ncia din\u00e2mica pode ser usada em sistemas que n\u00e3o s\u00e3o cr\u00edticos, ou \n\nseja, que possam ficar em estado de erro por um certo per\u00edodo de tempo at\u00e9 a \n\ncorre\u00e7\u00e3o de falha. Normalmente esta t\u00e9cnica \u00e9 mais empregada devido ao alto custo \n\nde se fazer replica\u00e7\u00e3o de todos os componentes que possam ser faltosos no sistema \n\npara garantir o mascaramento de falhas. \n\nA figura a seguir mostra o fluxo desta t\u00e9cnica. \n\n \nFigura 4 \u2013 Redund\u00e2ncia Ativa \nFonte: Weber, T. Toler\u00e2ncia a falhas: conceitos e exemplos. \n \n\nUm exemplo de uso desta t\u00e9cnica \u00e9 o m\u00f3dulo estepe (standby sparing), que \n\npode ser classificados de duas formas, o modo alimentado (hot standby), que consiste \n\n\n\n \n\n \n\n27 \n\nem um m\u00f3dulo estepe sempre conectado ao sistema, e o modo n\u00e3o alimentado (cold \n\nstandby), que consiste em o m\u00f3dulo s\u00f3 iniciar seu funcionamento quando conectado. \n\n \n\nc) Redund\u00e2ncia h\u00edbrida - esta t\u00e9cnica combina as vantagens de redund\u00e2ncia passiva \n\ncom a ativa, ou seja, quando o sistema tem uma falha, ela \u00e9 detectada, localizada e \n\ncorrigida e tamb\u00e9m garante com que a resposta do sistema seja correta, garantindo \n\nassim que a falha n\u00e3o seja vis\u00edvel. \n\nA seguir a figura ilustra o funcionamento desta t\u00e9cnica. \n\n \nFigura 5: Exemplo de redund\u00e2ncia hibrida \nFonte Pradhan, D. (Editor), Fault-Tolerant Computer System Design, Redund\u00e2ncia de Software \n \n\nEsta t\u00e9cnica se refere ao uso de c\u00f3digos extras, ou at\u00e9 mesmo de sistemas \n\ncompletos, para garantir que a mensagem enviada pelo sistema esteja realmente \n\ncorreta.  \n\nRedund\u00e2ncia de software esta sendo muito utilizada, pois simplesmente replicar \n\nhardwares n\u00e3o vai garantir que um software ir\u00e1 funcionar, pois como software, na sua \n\nmaioria, \u00e9 independente do hardware, se o mesmo n\u00e3o funcionar em um dos \n\ncomponentes, a chance de n\u00e3o funcionar nos outros tamb\u00e9m ser\u00e1 grande, causando \n\nassim um erro ao sistema.   \n\n\n\n \n\n \n\n28 \n\nComo disse (Weber, 2008), \u201c... Componentes id\u00eanticos de software v\u00e3o \n\napresentar erros id\u00eanticos. Assim n\u00e3o basta copiar um programa e execut\u00e1-lo em \n\nparalelo ou executar o mesmo programa duas vezes em tempos diferentes. Erros de \n\nprogramas id\u00eanticos v\u00e3o se apresentar, com grande probabilidade, de forma \n\nid\u00eantica...\u201d. \n\nFalhas em hardware, normalmente s\u00e3o aleat\u00f3rias, e ocorrem devido a algum \n\nproblema no componente ou no ambiente em que o mesmo se encontra, j\u00e1 falhas em \n\nsoftware normalmente ocorrem devido a problemas de implementa\u00e7\u00e3o, ou a problemas \n\nde especifica\u00e7\u00e3o do mesmo. \n\nExistem outras formas de garantir a toler\u00e2ncia a falhas em software, pois \n\nsomente replicar o software pode se mostrar n\u00e3o confi\u00e1vel, entre elas podemos citar, \n\ndiversidade (ou programa\u00e7\u00e3o n-vers\u00f5es), blocos de recupera\u00e7\u00e3o e self checking \n\nsoftware. \n\n \n\na) Diversidade - diversidade \u00e9 uma t\u00e9cnica para alcan\u00e7ar a toler\u00e2ncia a falhas, que \n\ninicia com uma especifica\u00e7\u00e3o de um problema que precisa ser solucionado, e a partir \n\ndeste, s\u00e3o implementados v\u00e1rias solu\u00e7\u00f5es diferentes para o mesmo, ou seja, a partir \n\nde uma especifica\u00e7\u00e3o s\u00e3o criadas v\u00e1rias especifica\u00e7\u00f5es. \n\nO uso desta t\u00e9cnica requer o uso de um votador tamb\u00e9m, para a partir das \n\nvers\u00f5es diferentes implementadas \u00e9 feito uma vota\u00e7\u00e3o dos resultados obtidos. O \n\ncomponente que faz essa vota\u00e7\u00e3o precisa ser livre de falhas tamb\u00e9m, ou a \n\nconfiabilidade obtida por esta t\u00e9cnica se prejudica. \n\nSegundo (Weber, 2002), \u201c... Diversidade pode ser utilizada em todas as fases do \n\ndesenvolvimento de um programa, desde sua especifica\u00e7\u00e3o at\u00e9 o teste, dependendo \n\ndo tipo de erro que se deseja detectar (erro de especifica\u00e7\u00e3o, de projeto, ou de \n\nimplementa\u00e7\u00e3o).\u201d Este tipo de projeto citado \u00e9 chamado de projeto diversit\u00e1rio, pois \n\nutiliza diferentes equipes que desenvolvem o mesmo sistema, por\u00e9m utilizando \n\nmetodologias diferentes. \n\nO uso desta t\u00e9cnica n\u00e3o garante totalmente que um sistema estar\u00e1 livre de \n\nfalhas, pois, de acordo com (Weber, 2002), \u201c... V\u00e1rios fatores influenciam a efic\u00e1cia da \n\nprograma\u00e7\u00e3o diversit\u00e1ria: as equipes podem trocar algoritmos entre si, os membros das \n\nequipes podem, por forma\u00e7\u00e3o, tender a adotar os mesmos m\u00e9todos de \n\ndesenvolvimento, ou as equipes podem buscar suporte nas mesmas fontes...\u201d. \n\n \n\n\n\n \n\n \n\n29 \n\nb) Blocos de Recupera\u00e7\u00e3o - bloco de recupera\u00e7\u00e3o \u00e9 um m\u00e9todo de redund\u00e2ncia de \n\nsoftware desenvolvida por Randell, esta t\u00e9cnica tamb\u00e9m usa um votador para decidir \n\nse uma resposta do sistema est\u00e1 correta ou n\u00e3o. \n\nO sistema prov\u00ea v\u00e1rias codifica\u00e7\u00f5es do mesmo m\u00e9todo ou dele inteiro mesmo, \n\nda mesma forma do que a t\u00e9cnica de diversidade. \n\nO votador envia uma requisi\u00e7\u00e3o para o sistema, e espera uma resposta, ap\u00f3s \n\nisso ele verifica a resposta enviada pelo sistema, e se for decidido que a resposta est\u00e1 \n\nerrada, ou seja, que o componente teve alguma falha na execu\u00e7\u00e3o, ele faz um rollback \n\ndo sistema para o estado anterior a execu\u00e7\u00e3o do m\u00e9todo, e a partir disso envia uma \n\nnova requisi\u00e7\u00e3o para o segundo m\u00f3dulo do sistema at\u00e9 obter uma resposta que ele \n\nconsidere correta. \n\nPortanto ao contr\u00e1rio da t\u00e9cnica de Diversidade, o votador n\u00e3o envia a \n\nrequisi\u00e7\u00e3o para todos os m\u00f3dulos replicados, e sim envia somente as requisi\u00e7\u00f5es at\u00e9 \n\nconseguir uma mensagem considerada correta. \n\nEste votador precisa ser implementado de forma simples e r\u00e1pida para n\u00e3o \n\nafetar o desempenho do sistema no total. \n\nEsta t\u00e9cnica tamb\u00e9m se mostra complicada, pois al\u00e9m de precisar fazer a \n\nverifica\u00e7\u00e3o da resposta recebida pelos m\u00f3dulos, o sistema tem que fazer todo o \n\ntratamento de checkpoints para poder fazer o rollback do sistema em caso de falha. \n\n \n\nc) Self checking software - este tipo de software \u00e9 normalmente desenvolvido para \n\nsistemas que precisam ter uma disponibilidade extremamente alta, ou seja, sistemas \n\nextremamente cr\u00edticos, que sua falha pode ter conseq\u00fc\u00eancias enormes. \n\nEstes tipos de softwares s\u00e3o sistemas que cont\u00e9m v\u00e1rias checagens extras, \n\nnormalmente com muitos checkpoints e m\u00e9todos de rollback implementados, e tamb\u00e9m \n\ntem outras execu\u00e7\u00f5es dentro deles, as quais ficam buscando erros e corrigindo o \n\nsistema em tempo real, para garantir sua integridade. \n\nApesar de ser um tipo de redund\u00e2ncia de software n\u00e3o muito conhecida na \n\nliteratura, ela se mostra muito eficiente no que se prop\u00f5e a fazer. \n\nEsta t\u00e9cnica tem sido usada em aplica\u00e7\u00f5es cr\u00edticas, como sistemas para avi\u00f5es \n\ne aparelhos de redes. \n\n \n\n \n\n\n\n \n\n \n\n30 \n\n2.1.5.2 Redund\u00e2ncia Temporal \n\n \n\nRedund\u00e2ncia temporal consiste em usar um maior tempo para executar \n\nopera\u00e7\u00f5es relacionadas \u00e0 toler\u00e2ncia a falhas, ou seja, \u00e9 usada para sistemas que \n\npodem ter um tempo de resposta maior. Esta t\u00e9cnica normalmente se baseia em repetir \n\na execu\u00e7\u00e3o de um m\u00e9todo falho, e para isso, utiliza o mesmo hardware e software da \n\nexecu\u00e7\u00e3o anterior, ou seja, n\u00e3o \u00e9 necess\u00e1rio nenhuma redund\u00e2ncia de hardware nem \n\nde software, e sim somente reexecutar a fun\u00e7\u00e3o faltosa no sistema. \n\nFalhas de tempo ocorrem normalmente devido as complexas intera\u00e7\u00f5es que os \n\nsistemas executam, essa falha tem crescido cada vez mais, pois os sistemas tem se \n\ntornado cada vez mais complexos.  \n\nEsta t\u00e9cnica tamb\u00e9m \u00e9 bastante usada para fazer rollbacks, normalmente \n\nt\u00e9cnicas de rollbacks e a uni\u00e3o de redund\u00e2ncia temporal junto com redund\u00e2ncia de \n\nhardware ou software. \n\n \n\n2.1.5.3 Redund\u00e2ncia de Informa\u00e7\u00e3o \n\n \n\nEsta forma de redund\u00e2ncia se refere \u00e0 adi\u00e7\u00e3o de informa\u00e7\u00e3o nos dados \n\nenviados para poder disponibilizar a detec\u00e7\u00e3o de falhas, o mascaramento de falhas ou \n\nat\u00e9 mesmo a toler\u00e2ncia a falhas. De acordo com (Keitel, 1999) \"... Um exemplo deste \n\ntipo de redund\u00e2ncia \u00e9 incorporar c\u00f3digos para detec\u00e7\u00e3o de erros e c\u00f3digos para \n\ncorre\u00e7\u00e3o de erros que geralmente s\u00e3o usados em circuitos l\u00f3gicos\u201d. \n\nOutro exemplo cl\u00e1ssico de redund\u00e2ncia de informa\u00e7\u00e3o s\u00e3o os c\u00f3digos de \n\nparidade, que consiste em que para cada numero de bits n, ser\u00e1 armazenado n+1 bits. \n\nEste bit a mais apenas mostra se o n\u00famero n de bits anteriores a ele \u00e9 par, ou impar de \n\nacordo com o tipo de paridade usada. Esta t\u00e9cnica \u00e9 usada para detec\u00e7\u00e3o de falhas \n\nsimples, que ocorrem em somente um bit dos dados. \n\n \n\n2.2 BANCO DE DADOS \n\n  \n\nA quantidade de informa\u00e7\u00e3o necess\u00e1ria hoje em dia para qualquer empresa no \n\nmercado, fez com que as mesmas buscassem outras formas de armazenar a \n\ninforma\u00e7\u00e3o, e com isso, uma das principais id\u00e9ias lan\u00e7adas foram os bancos de dados, \n\nque s\u00e3o conjuntos de registros organizados, a fim de retirar informa\u00e7\u00e3o dos mesmos. \n\n\n\n \n\n \n\n31 \n\nBancos de dados j\u00e1 est\u00e3o incorporados no dia a dia de todas as pessoas, pois \n\ntudo que envolve algum sistema, tudo que precisa de algum componente \n\ncomputacional normalmente tem um banco de dados por tr\u00e1s do mesmo. \n\nBanco de dados foi criado no ano de 1955, e a partir disso seu uso s\u00f3 foi \n\naumentado, e como dito, quase tudo que fazemos hoje em dia envolve sistemas, e \n\nsistemas quase sempre tem banco de dados.  \n\nPara controlar e manipular os banco de dados existem sistemas pr\u00f3prios, os \n\nchamados Sistemas de Gerenciamento de Banco de Dados (SGBD), de acordo com \n\n(Korth &amp; Silliberchatz), SGBDs s\u00e3o \u201c... M\u00f3dulo de programa que fornece a interface \n\nentre os dados de baixo n\u00edvel armazenados num banco de dados e os aplicativos ou as \n\nsolicita\u00e7\u00f5es submetidas aos sistemas. \n\nSGBDs s\u00e3o sistemas para controle e gerenciamento de banco de dados, eles \n\ndisponibilizam interface para incluir, alterar e consultar dados, com ele, o controle do \n\nbanco de dados fica desacoplado do servidor, facilitando o uso do mesmo. \n\nO tipo mais comum de banco de dados usado no mercado atualmente \u00e9 o banco \n\nde dados relacional, que ser\u00e1 melhor explicado a seguir. \n\n \n\n2.2.1 Banco de dados Relacional \n\n \nBanco de dados relacional \u00e9 uma forma de representar dados do mundo real em \n\nforma de tabelas, e atrav\u00e9s dos relacionamentos destas tabelas, mostrar os \n\nrelacionamentos poss\u00edveis que as mesmas possuem. \n\nEste tipo de banco de dados \u00e9 baseado no Modelo relacional, e por isso seus \n\nmodelos s\u00e3o representados de forma matem\u00e1tica e atrav\u00e9s de rela\u00e7\u00f5es entre estes \n\nobjetos.  \n\nAs rela\u00e7\u00f5es neste tipo de banco s\u00e3o definidas como \u201cum modelo formado por \n\nrela\u00e7\u00f5es (no sentido matem\u00e1tico) entre os dom\u00ednios. Cada tupla \u00e9 um elemento do \n\nconjunto rela\u00e7\u00e3o\". \n\nO banco de dados relacional \u00e9 baseado em alguns conceitos, como tabelas, \n\nregistros, chaves, colunas entre outros. Abaixo ser\u00e3o explicados de forma melhor cada \n\num destes. \n\n \n\n \n\n\n\n \n\n \n\n32 \n\n2.2.1.1 Entidades e atributos \n\n \n\nToda a Informa\u00e7\u00e3o de um banco de dados relacional \u00e9 armazenada em Tabelas, \n\nque na linguagem do modelo relaciona, tamb\u00e9m s\u00e3o chamadas de Entidades.  \n\nUma tabela \u00e9 uma simples estrutura de linhas e colunas. Em uma tabela, cada \n\nlinha cont\u00e9m um mesmo conjunto de colunas. Em um banco de dados podem existir \n\numa ou centenas de tabelas, sendo que o limite pode ser imposto tanto pela ferramenta \n\nde software utilizada, quanto pelos recursos de hardware dispon\u00edveis no equipamento.  \n\nAs tabelas associam-se entre si atrav\u00e9s de regras de relacionamentos, estas \n\nregras consistem em associar um ou v\u00e1rios atributo de uma tabela com um ou v\u00e1rios \n\natributos de outra tabela. \n\nEstas tabelas possuem atributos (colunas) que s\u00e3o o que determina as \n\ncaracter\u00edsticas dos elementos que s\u00e3o desta tabela. \n\n \n\n2.2.1.2  Chave Prim\u00e1ria \n\n \n\nChave primaria \u00e9 a coluna de uma tabela, ou seja, um atributo desta tabela, que \n\nidentifica as entidades desta tabela. Normalmente nesta coluna s\u00e3o usados n\u00fameros \n\nou identificadores \u00fanicos poss\u00edveis, ou seja, identificadores que nunca se repetir\u00e3o. \n\nQuando \u00e9 definida uma chave primaria para uma tabela, estamos dizendo ao \n\nbanco de dados que nunca poder\u00e1 haver dois objetos com o mesmo valor para este \n\natributo. \n\nAp\u00f3s ter definido um campo como sendo a Chave Prim\u00e1ria da tabela, o pr\u00f3prio \n\nbanco de dados, garante que n\u00e3o sejam inseridos dados duplicados no campo que \u00e9 a \n\nchave prim\u00e1ria. Por exemplo, se o usu\u00e1rio tentar cadastrar um pedido com o mesmo \n\nn\u00famero de um pedido j\u00e1 existente, o registro n\u00e3o ser\u00e1 cadastrado e uma mensagem de \n\nerro ser\u00e1 emitida. \n\n \n\n2.2.1.3  Relacionamentos  \n\n \n\nUm relacionamento em banco de dados relacional \u00e9 a associa\u00e7\u00e3o entre \n\nentidades distintas, o relacionamento consiste em \u201ca liga\u00e7\u00e3o de um campo de uma \n\ntabela X com um campo de uma tabela Y, por meio da inclus\u00e3o do campo chave da \n\ntabela Y como um campo (conhecido como chave estrangeira) da tabela X.\u201d \n\n\n\n \n\n \n\n33 \n\nConforme citado acima, chave estrangeira \u00e9 a representa\u00e7\u00e3o de uma coluna de \n\numa tabela externa na tabela desejada, criando assim um relacionamento entre as \n\nduas tabelas. \n\n \n\n2.3 BANDO DE DADOS DISTRIBU\u00cdDOS \n\n \n\nDefini-se de acordo com Bell e Grimson, 1992, \u201csistema de banco de dados \n\ndistribu\u00eddo (SBDD) como uma cole\u00e7\u00e3o de dados inter-relacionados que se encontram \n\nfisicamente distribu\u00eddos pelos n\u00f3s de uma rede de computadores\u201d. \n\nUm sistema gerenciador de banco de dados distribu\u00eddo (SGBDD) \u00e9 um software \n\nque gerencia um banco de dados distribu\u00eddo de tal modo que os aspectos da \n\ndistribui\u00e7\u00e3o ficam transparentes para o usu\u00e1rio. Assim, o usu\u00e1rio tem a ilus\u00e3o de \n\nintegra\u00e7\u00e3o l\u00f3gica de dados, sem requerer integra\u00e7\u00e3o f\u00edsica do banco de dados. O \n\nusu\u00e1rio de um sistema de banco de dados distribu\u00eddo \u00e9 incapaz de saber a origem das \n\ninforma\u00e7\u00f5es, tendo impress\u00e3o de estar acessando um \u00fanico banco de dados. \n\nEnquanto um sistema gerenciador de banco de dados centralizado (SGDB) \n\ngerencia um \u00fanico banco de dados, o SGBDD \u00e9 respons\u00e1vel pelo gerenciamento \n\nglobal e local. \n\nCada n\u00f3 de um banco de dados distribu\u00eddo \u00e9 capaz de processar transa\u00e7\u00f5es \n\nlocais, as quais acessam apenas dados daquele \u00fanico n\u00f3, ou pode participar na \n\nexecu\u00e7\u00e3o de transa\u00e7\u00f5es globais, que fazem acesso a dados em diversos n\u00f3s. A \n\nexecu\u00e7\u00e3o de transa\u00e7\u00f5es globais requer comunica\u00e7\u00f5es entre os n\u00f3s, que podem ser \n\nfeitos atrav\u00e9s de cabos, fibras \u00f3ticas, linhas telef\u00f4nicas, liga\u00e7\u00f5es de microondas, canais \n\nde sat\u00e9lite, etc. \n\nSe o projeto de um sistema distribu\u00eddo \u00e9 executado top-down, isso \u00e9, sem um \n\nsistema j\u00e1 existente, \u00e9 conveniente desenvolver um sistema homog\u00eaneo. Todavia, em \n\nalguns casos onde a cria\u00e7\u00e3o de banco de dados distribu\u00eddos for feita pela integra\u00e7\u00e3o de \n\nv\u00e1rios bancos de dados j\u00e1 existentes (chamados bottom-up), ser\u00e1 necess\u00e1rio um \n\nSGBDD heterog\u00eaneo, capaz de fornecer interoperabilidade entre os bancos de dados \n\nlocais. \n\n \n\n \n\n \n\n\n\n \n\n \n\n34 \n\n2.3.1 Porque usar Sistemas de Banco de Dados Distribu\u00eddo? \n\n \n\nExistem diversas raz\u00f5es para construir um banco de dados distribu\u00eddo, como o \n\npartilhamento de dados, confiabilidade, disponibilidade e acelera\u00e7\u00e3o de processamento \n\nde consultas. Entretanto, juntamente com essas vantagens h\u00e1 diversas desvantagens, \n\ncomo o custo de desenvolvimento do software, maior potencial para exist\u00eancia de erros \n\ne crescente sobrecarga de processamento. \n\nA principal vantagem de sistemas de bancos de dados distribu\u00eddos \u00e9 a \n\ncapacidade de dividir e fazer acesso a dados de uma maneira confi\u00e1vel e eficiente. \n\nPois, se uma serie de n\u00f3s diferentes est\u00e3o conectados, ent\u00e3o um usu\u00e1rio em um n\u00f3 \n\npode ser capaz de fazer acesso a dados dispon\u00edveis em um outro n\u00f3. Cada n\u00f3 \u00e9 capaz \n\nde reter um grau de controle sobre dados armazenados localmente. \n\nCaso ocorra uma falha em um dos n\u00f3s do sistema distribu\u00eddo, os n\u00f3s \n\nremanescentes podem ser capazes de continuar operando, aumentando a \n\nconfiabilidade e disponibilidade. Al\u00e9m disso, quando uma consulta envolve dados em \n\ndiversos n\u00f3s, \u00e9 poss\u00edvel dividi-la em subconsultas que podem ser executadas em \n\nparalelo, acelerando seu processamento. \n\n \n\n2.3.2 Caracter\u00edsticas de um sistema de Banco de dados Distribu\u00eddo \n\n \n\nA seguir s\u00e3o descritas algumas caracter\u00edsticas do SBDD, que fazem com que \n\nestes sistemas proporcionem in\u00fameras vantagens a seus usu\u00e1rios. \n\n \n\n2.3.2.1 Gerenciamento transparente de dados distribu\u00eddos e replicados \n\n \n\nTranspar\u00eancia \u00e9 a separa\u00e7\u00e3o da sem\u00e2ntica de alto n\u00edvel de um sistema dos \n\ndetalhes da implementa\u00e7\u00e3o. Um sistema transparente esconde detalhes de \n\nimplementa\u00e7\u00e3o de usu\u00e1rios. Podemos citar v\u00e1rios tipos de transpar\u00eancia em banco de \n\ndados como, por exemplo: transpar\u00eancia de distribui\u00e7\u00e3o, de replica\u00e7\u00e3o e de \n\nfragmenta\u00e7\u00e3o dos dados. \n\nEm um SBDD, os programas de aplica\u00e7\u00e3o n\u00e3o sabem e n\u00e3o precisam saber \n\nonde os dados est\u00e3o localizados. O SGBDD encontra os dados, onde quer que eles \n\nestejam, sem o envolvimento do programa de aplica\u00e7\u00e3o. \n\n\n\n \n\n \n\n35 \n\nTranspar\u00eancia de replica\u00e7\u00e3o refere-se ao fato de que os programas de \n\naplica\u00e7\u00f5es n\u00e3o sabem se os dados est\u00e3o replicados ou n\u00e3o. Se estiverem, o SGBDD \n\nassegurar\u00e1 que todas as copias sejam atualizadas consistentemente, sem o \n\nenvolvimento do programa de aplica\u00e7\u00e3o. \n\n \n\n2.3.2.2 Independ\u00eancia de dados \n\n \n\nIndepend\u00eancia dos dados, de acordo com Ozsuu e Valdureiez, 1999, \u201c... \u00e9 uma \n\nforma de transpar\u00eancia fundamental que se procura em um SGBD.\u201d Refere-se \u00e0 \n\nimpossibilidade das aplica\u00e7\u00f5es dos usu\u00e1rios em alterar a defini\u00e7\u00e3o e organiza\u00e7\u00e3o dos \n\ndados e vice-versa. Ou seja, os dados s\u00e3o armazenados de forma independente dos \n\nprogramas que o utilizam. \n\n \n\n2.3.2.3 Aumento do desempenho (performance) \n\n \nO desempenho aumenta em SBGDD devido principalmente a dois fatores. \n\nPrimeiro, o SGBDD fragmenta o esquema conceitual de modo que os dados s\u00e3o \n\narmazenados pr\u00f3ximos aos pontos nos quais s\u00e3o mais utilizados. Assim, cada local \n\npossui apenas uma parte do banco de dados, minimizando a sobrecarga de \n\nprocessamento, Um segundo fator \u00e9 o paralelismo. Quando uma consulta envolve \n\ndados em diversos n\u00f3s, \u00e9 poss\u00edvel dividi-la em subconsultas que podem ser \n\nexecutadas em paralelo, acelerando seu processamento. \n\n \n\n2.3.2.4 Confiabilidade e disponibilidade atrav\u00e9s de transa\u00e7\u00f5es distribu\u00eddas \n\n \nUma caracter\u00edstica importante de sistema de banco de dados distribu\u00eddos \u00e9 a \n\ncapacidade de dividir e prover acesso a dados de uma maneira confi\u00e1vel e eficiente. \n\nUma falha em um dos n\u00f3s, ou em um link de comunica\u00e7\u00e3o que fa\u00e7a com que um \n\nou mais sites fiquem inalcan\u00e7\u00e1veis, n\u00e3o prejudicar\u00e1 o sistema como um todo. Os n\u00f3s \n\nremanescentes podem ser capazes de continuar operando, aumentando a \n\nconfiabilidade de disponibilidade. \n\n \n\n \n\n \n\n\n\n \n\n \n\n36 \n\n2.3.3 Complica\u00e7\u00f5es de sistemas em banco de dados distribu\u00eddos \n\n \n\nA complexidade em sistemas distribu\u00eddos aumenta a devido a v\u00e1rios fatores. Um \n\ndeles refere-se \u00e0 distribui\u00e7\u00e3o dos dados. N\u00e3o \u00e9 essencial que cada site da rede possua \n\no banco de dados completo e sim que um banco de dados resida em mais de um site. \n\nPortanto, \u00e9 necess\u00e1rio definir como ser\u00e1 a distribui\u00e7\u00e3o e replica\u00e7\u00e3o (ou n\u00e3o) dos dados. \n\nOutro fator refere-se a falhas (de hardware ou software) nos sites ou na rede de \n\ncomunica\u00e7\u00e3o que possam vir a ocorrer na execu\u00e7\u00e3o de uma atualiza\u00e7\u00e3o de dados. O \n\nsistema deve ter certeza de que os efeitos ser\u00e3o refletidos nos dados residentes nestes \n\nsites indispon\u00edveis assim que o sistema retornar ao normal. \n\nA maior desvantagem do sistema de banco de dados distribu\u00eddo \u00e9 a \n\ncomplexidade adicional requerida para assegurar a pr\u00f3pria coordena\u00e7\u00e3o entre os n\u00f3s. \n\nDevido a esta complexidade \u00e9 requerido hardware e software adicionais, o que leva a \n\num aumento de custos de desenvolvimento, potencialidade de defeitos e da sobrecarga \n\nde processamento. A tabela a seguir resume os principais complicadores em SGBD \n\ndistribu\u00eddos. \n\n \n\nProjeto - como distribuir o banco de dados \n- distribui\u00e7\u00e3o dos dados replicados \n\nProcessamento de consultas - convers\u00e3o de transa\u00e7\u00f5es de usu\u00e1rios em \ninstru\u00e7\u00f5es de dados \n- problema de otimiza\u00e7\u00e3o \n\nControle de concorr\u00eancia - sincroniza\u00e7\u00e3o de acessos concorrentes \n- consist\u00eancia e isolamento de efeitos de \ntransa\u00e7\u00f5es \n- gerenciamento de deadlocks \n\nConfiabilidade - como manter o sistema imune \u00e0 falhas \n- atomicidade e durabilidade \n\nTabela 6: Fatores complicadores de SGBD distribu\u00eddo. \nFonte: Adaptado por Andrade, Rafael \n \n\n2.3.4 Arquitetura de SGBD Distribu\u00eddos \n\n \n\nUma arquitetura define a estrutura de um sistema: identifica\u00e7\u00e3o, defini\u00e7\u00e3o da \n\nfun\u00e7\u00e3o e inter-relacionamento e intera\u00e7\u00f5es entre os componentes do sistema. Na \n\narquitetura data-l\u00f3gica \u00e9 formada pelo esquema interno local de cada site, o esquema \n\nconceitual local de cada site, e o esquema conceitual global e esquema externos. \n\nO esquema interno local (EIL) refere-se aos aspectos relacionados ao \n\narmazenamento f\u00edsico dos dados do site. O esquema conceitual local (ECL) refere-se \u00e0 \n\n\n\n \n\n \n\n37 \n\nestrutura l\u00f3gica (informa\u00e7\u00f5es) do banco de dados. O esquema conceitual global (ECG) \n\n\u00e9 formado pela uni\u00e3o dos esquemas conceituais locais, permitindo uma vis\u00e3o global \n\ndos dados. Finalmente o n\u00edvel mais externo, os esquemas externos (EE) s\u00e3o as vis\u00f5es \n\ndefinidas aos usu\u00e1rios globais. \n\nEsta arquitetura \u00e9 denominada ponto-a-ponto (peer-to-peer) devido ao fato de \n\nque cada site possui SGBD completo, diferente da arquitetura cliente servidor que \n\nconcentra o gerenciamento dos dados em servidores, enquanto nos clientes ficam as \n\ninterfaces e aplica\u00e7\u00f5es. \n\n \n \n\n \nFigura 6: Arquitetura data-l\u00f3gica de SGBD distribu\u00eddo. \nFonte: MANICA, Heloisa. Banco de dados distribuidos heterogeneos: Arquiteturas, tecnologias e \n\ntend\u00eancias. \n \nQuando um projeto de banco de dados distribu\u00eddos \u00e9 realizado a partir de base \n\nde dados j\u00e1 existentes, \u00e9 chamado de bottom-up. Deste modo, surge uma nova \n\narquitetura data-l\u00f3gica de multi-SGBD. A maior diferen\u00e7a entre esta arquitetura e a \n\ndata-l\u00f3gica \u00e9 a forma de mapeamento entre esquemas. \n\n \n\n2.4 APLICA\u00c7\u00d5ES WEB \n\n \n\nAplica\u00e7\u00f5es web s\u00e3o as aplica\u00e7\u00f5es desenvolvidas para serem usadas nos browsers \n\ndos usu\u00e1rios, sem a necessidade de nenhum outro \u201cprograma\u201d espec\u00edfico, somente um \n\n\n\n \n\n \n\n38 \n\nacesso a internet, e devido a esse fato este tipo de sistema vem se popularizando cada \n\nvez mais. \n\n Atualmente a maioria das solu\u00e7\u00f5es usadas pelas empresas tende a ser web, \n\ndevido ao fato de serem aplica\u00e7\u00f5es centralizadas em um \u00fanico servidor, e fazendo com \n\nque qualquer usu\u00e1rio tenha acesso a ele facilmente atrav\u00e9s de uma URI, que consiste \n\nno endere\u00e7o onde fica localizada a aplica\u00e7\u00e3o na web. \n\n Estas aplica\u00e7\u00f5es tem se popularizado mais na ultima d\u00e9cada, devido \u00e0 melhoria \n\nna infra-estrutura das redes e da web em si, permitindo altas velocidades de acesso \n\npara sistemas, fazendo assim com que se pudessem criar aplica\u00e7\u00f5es cada vez mais \n\nrobustas e mais completas. \n\n Por\u00e9m as aplica\u00e7\u00f5es web est\u00e3o atualmente sofrendo grandes altera\u00e7\u00f5es, pois \n\nal\u00e9m de completas e robustas, os usu\u00e1rios est\u00e3o cobrando que as mesmas sejam cada \n\nvez mais intuitivas e f\u00e1ceis de usar, e isso tem se tornado um ponto vital para \n\naplica\u00e7\u00f5es web.  \n\n E nesta tend\u00eancia estamos vivendo a web 2.0, que se baseia completamente na \n\nid\u00e9ia de que os sistemas devem ter uma alta usabilidade, ou seja, devem ser f\u00e1ceis de \n\nusar, e sempre intuitivos para os usu\u00e1rios, al\u00e9m de serem cada vez mais \u201cbonitos\u201d, \n\naonde as novas tecnologias tem se mostrado muito eficiente. \n\n Umas das tecnologias atuais mais conhecidas para a web 2.0 \u00e9 o Flex, uma \n\nlinguagem de programa\u00e7\u00e3o desenvolvida pela Adobe, que \u00e9 baseada em Action Script \n\npara programar a parte de interface com o usu\u00e1rio. O Flex forma arquivos swf (flash) \n\npara gerar a intera\u00e7\u00e3o com o usu\u00e1rio final, disponibilizando assim uma melhor interface \n\npara o usu\u00e1rio. \n\n \n\n2.4.1 Toler\u00e2ncia a falhas em aplica\u00e7\u00f5es web 2.0 \n\n \n\nA maioria das aplica\u00e7\u00f5es web 2.0 n\u00e3o tem suporte a alguma t\u00e9cnica de toler\u00e2ncia a \n\nfalhas, tornando assim seus servi\u00e7os vulner\u00e1veis a qualquer falha, de hardware ou \n\nsoftware.  \n\nO que torna suas aplica\u00e7\u00f5es n\u00e3o confi\u00e1veis, pois caso algum servidor falhe a \n\naplica\u00e7\u00e3o ir\u00e1 \u201ctravar\u201d para o usu\u00e1rio. \n\nEste trabalho prop\u00f5e uma arquitetura para aplica\u00e7\u00f5es web 2.0 que garantir\u00e1 a \n\ntoler\u00e2ncia a falhas de hardware, e tamb\u00e9m possibilitando toler\u00e2ncias a falhas de \n\nsoftware, conforme ser\u00e1 melhor especificado abaixo. \n\n\n\n \n\n \n\n39 \n\nA arquitetura proposta se baseia no servidor de aplica\u00e7\u00e3o Jboss juntamente com \n\nBanco de dados Mysql. Ela se prop\u00f5e a criar clusters de servidores de aplica\u00e7\u00e3o \n\njuntamente com clusters de banco de dados, garantindo assim que caso algum dos \n\nservidores caia a aplica\u00e7\u00e3o n\u00e3o \u201ctrave\u201d para o usu\u00e1rio. \n\nO servidor de aplica\u00e7\u00f5es Jboss se trata do servidor de aplica\u00e7\u00e3o mais usado para \n\naplica\u00e7\u00f5es web Java no mercado, est\u00e1 no mercado h\u00e1 muitos anos e \u00e9 muito est\u00e1vel. \n\nEle oferece suporte para clusteriza\u00e7\u00e3o, cache entre outras funcionalidades que o \n\ngarantem como um dos melhores servidores. \n\n \n\n2.4.2 Clusteriza\u00e7\u00e3o de Servidores de Aplica\u00e7\u00e3o(Jboss) \n\n \n\nClusteriza\u00e7\u00e3o \u00e9 a possibilidade de poder rodar aplica\u00e7\u00f5es em diversos servidores, \n\ncom esta forma, uma aplica\u00e7\u00e3o poder\u00e1 continuar rodando mesmo em caso de falha de \n\nalgum dos servidores dispon\u00edveis dentro do cluster.  \n\nPara fazer clusteriza\u00e7\u00e3o com o Jboss, a forma mais simples \u00e9 disponibilizar v\u00e1rios \n\nservidores dentro de uma mesma rede, e rod\u00e1-los com a configura\u00e7\u00e3o \u2013c all. Assim \n\ntodos iniciam dentre de um cluster desta rede. \n\nAtrav\u00e9s da clusteriza\u00e7\u00e3o \u00e9 poss\u00edvel garantir que aplica\u00e7\u00f5es tenham uma \n\ndisponibilidade muito maior na rede, pois ela garante que mesmo com a falha de algum \n\nservidor, a aplica\u00e7\u00e3o continuar\u00e1 rodando transparentemente para o usu\u00e1rio final. \n\nA clusteriza\u00e7\u00e3o do Jboss utiliza o framework Jgroups para fazer o controle do \n\ncluster, tendo sempre uma maquina considerada a \u201cchefe\u201d e as outras enviando \n\nrequisi\u00e7\u00f5es a ela. \n\nJgroups \u00e9 um framework para comunica\u00e7\u00e3o multicast confi\u00e1vel, ou seja, \u00e9 um \n\nframework que trabalha com grupos de maquinas trabalhando em conjunto e cont\u00e9m \n\nfun\u00e7\u00f5es de cria\u00e7\u00e3o, dele\u00e7\u00e3o de grupos, assim como entrar e sair dos mesmos, e \n\ntamb\u00e9m envia avisos a todos os componentes do grupo sobre aviso ou entrada de um \n\nnovo componente neste grupo. \n\nEste framework garante que as mensagens trocadas entre os servidores do cluster \n\nrealmente sejam entregues entre eles, pois em caso de falha existem formas de \n\ngarantir o envio, como reenvio ou ent\u00e3o confirma\u00e7\u00e3o de recebimento do mesmo.  \n\nA arquitetura utilizada ser\u00e1 melhor especificada no t\u00f3pico de desenvolvimento do \n\nsistema. \n\n \n\n\n\n \n\n \n\n40 \n\n3 DESENVOLVIMENTO DO SISTEMA \n\n \n\nO sistema a ser desenvolvido ser\u00e1 um sistema web desenvolvido para a \n\nempresa Direseg Seguros, que se trata de uma corretora de seguros. O sistema ter\u00e1 \n\nusu\u00e1rios finais, portanto se trata de uma aplica\u00e7\u00e3o real, e n\u00e3o somente aplica\u00e7\u00e3o de \n\ntestes. \n\nEle ser\u00e1 desenvolvido totalmente voltado a web 2.0, usando as ultimas \n\ntecnologia para a interface com seus usu\u00e1rio, como Flex, uma linguagem de \n\nprograma\u00e7\u00e3o desenvolvida pela Adobe, aonde \u00e9 usado Action Script para gerar \n\nsistemas totalmente em flash. \n\nO sistema tamb\u00e9m ter\u00e1 t\u00e9cnicas para toler\u00e2ncia a falhas, principalmente de \n\nhardware, as t\u00e9cnicas utilizadas para esta aplica\u00e7\u00e3o foram o clusteriza\u00e7\u00e3o de \n\nservidores de aplica\u00e7\u00e3o, usando servidores de aplica\u00e7\u00e3o Jboss 4.0.2, e tamb\u00e9m \n\nt\u00e9cnicas de replica\u00e7\u00e3o de banco de dados, usando banco de dados Mysql. \n\nAs t\u00e9cnicas utilizadas no desenvolvimento do sistema ser\u00e3o melhor explicadas \n\nnos t\u00f3picos abaixo. \n\n \n\n3.1 REGRAS DE NEG\u00d3CIO DO SISTEMA \n\n \n\nO sistema a ser desenvolvido ser\u00e1 um sistema Web com garantias de Toler\u00e2ncia \n\na falhas, principalmente, falhas de hardware.  \n\nO sistema ser\u00e1 desenvolvido em Java, utilizando servidores de aplica\u00e7\u00e3o Jboss, \n\nvers\u00e3o 4.2.3, e utilizar\u00e1 banco de dados Mysql. As tecnologias usadas no \n\ndesenvolvimento dos mesmos s\u00e3o as seguintes: \n\n\u2022 Mentawai - Framework para controle de navega\u00e7\u00e3o e comunica\u00e7\u00e3o com a \n\ntecnologia Flex \n\n\u2022 Spring - Framework consolidado no mercado, que cont\u00e9m todos controle \n\nde sess\u00f5es, inje\u00e7\u00e3o de depend\u00eancia, entre outros. \n\n\u2022 Hibernate - Framework usado para comunica\u00e7\u00e3o com banco de dados, \n\nmuito consolidado no mercado tamb\u00e9m. \n\n\u2022 Flex - Tecnologia desenvolvida pela Adobe para aplica\u00e7\u00f5es RIA (Rich \n\nInternet Application), que s\u00e3o aplica\u00e7\u00e3o avan\u00e7adas desenvolvidas para \n\nWeb, voltada a web 2.0 \n\n\n\n \n\n \n\n41 \n\n \n\nA aplica\u00e7\u00e3o ser\u00e1 desenvolvida completamente voltada \u00e0 web 2.0, utilizando flex \n\ncomo camada de vis\u00e3o, que torna a intera\u00e7\u00e3o com sistema mais f\u00e1cil e mais bonita \n\npara o usu\u00e1rio final. Ela tamb\u00e9m ter\u00e1 um usu\u00e1rio final real, que necessita alta \n\ndisponibilidade na aplica\u00e7\u00e3o. \n\nO sistema ser\u00e1 desenvolvido para uma corretora de seguros, e se trata de um \n\nsistema para administra\u00e7\u00e3o dos segurados que a mesma possui, como tamb\u00e9m servir\u00e1 \n\npara pedidos e cota\u00e7\u00f5es de novos seguros. \n\nEle ser\u00e1 separado em tr\u00eas m\u00f3dulos inicialmente, o primeiro para os \n\nadministradores da corretora, aonde poder\u00e3o ver todos seus clientes, assim como os \n\nseguros de cada cliente, poder\u00e3o ver tamb\u00e9m os pedidos de cota\u00e7\u00f5es novos, assim \n\ncomo relat\u00f3rios completos de produ\u00e7\u00e3o de seus produtores entre outros. \n\nO segundo m\u00f3dulo ser\u00e1 para revendedoras de autom\u00f3veis, que, a cada venda \n\nde um novo ve\u00edculo, enviar\u00e1 um pedido de cota\u00e7\u00e3o de seguros para o sistema, e assim \n\nos administradores da corretora poder\u00e3o calcular e enviar a resposta em tempo real \n\npara a revendedora, facilitando assim o trabalho de ambos. \n\nO terceiro m\u00f3dulo a ser desenvolvido ser\u00e1 um m\u00f3dulo para administradoras de \n\ncondom\u00ednio, aonde se formar\u00e1 uma parceria com as mesmas, e elas tamb\u00e9m far\u00e3o \n\npedidos de cota\u00e7\u00f5es de seguros e ter\u00e3o as respostas em tempo real. As regras de \n\nneg\u00f3cio do sistema est\u00e3o melhor especificadas no ANEXO A. \n\nO sistema dever\u00e1 contar com garantias de toler\u00e2ncia a falhas, principalmente \n\nfalhas de hardware, e para isso foram utilizadas t\u00e9cnicas de clusteriza\u00e7\u00e3o de servidores \n\nde aplica\u00e7\u00e3o e tamb\u00e9m t\u00e9cnicas de replica\u00e7\u00e3o de banco de dados. Todas estas \n\nt\u00e9cnicas ser\u00e3o melhor especificadas posteriormente. \n\nO desenvolvimento do sistema foi feito usando t\u00e9cnicas de desenvolvimento \n\nr\u00e1pido, chamado SCRUM, que se baseia na id\u00e9ia de entregas constantes para o \n\nusu\u00e1rio final, para que o mesmo consiga visualizar o desenvolvimento do sistema. As \n\nentregas do sistema est\u00e3o sendo feitas mensalmente, para garantir que o usu\u00e1rio final \n\nconsiga ver a evolu\u00e7\u00e3o do sistema a cada m\u00eas. \n\n \n\n \n\n \n\n\n\n \n\n \n\n42 \n\n3.2 BANCO DE DADOS MYSQL \n\n \n\nO banco de dados Mysql \u00e9 atualmente o banco de dados open source mais usado \n\nno mercado, demonstrando grande maturidade e tamb\u00e9m um \u00f3timo desempenho. \n\nFoi escolhido utilizar este banco devido ao fato de ser o \u00fanico banco de dados \n\nopen source com caracter\u00edsticas de replica\u00e7\u00e3o e clusteriza\u00e7\u00e3o de dados nativo, tendo \n\nem vista que os outros bancos estudados tamb\u00e9m t\u00eam essa possibilidade porem s\u00e3o \n\nsolu\u00e7\u00f5es desenvolvidas por terceiros, sem ter a garantia de funcionamento das \n\nmesmas. \n\nPara instala\u00e7\u00e3o do banco de dados foram usadas configura\u00e7\u00f5es padr\u00f5es de \n\ninstala\u00e7\u00e3o. A partir disso foram feitas as configura\u00e7\u00f5es do cluster de banco de dados \n\nconforme mostrado abaixo. \n\n \n\n3.3 CLUTERIZA\u00c7\u00c3O DE MYSQL \n\n \nMySql Cluster \u00e9 um banco de dados de alta disponibilidade constru\u00eddo utilizando \n\numa arquitetura \u00fanica e interface SQL padr\u00e3o. O sistema consiste de um n\u00famero de \n\nprocessos de comunica\u00e7\u00e3o, ou n\u00f3s que podem ser distribu\u00eddas atrav\u00e9s de m\u00e1quinas \n\npara garantir a disponibilidade cont\u00ednua em caso de falha de servidor ou rede. Mysql \n\nCluster usa um mecanismo de armazenagem, que consiste em um conjunto de dados \n\nn\u00f3s para armazenamento de dados que pode ser acessado atrav\u00e9s do padr\u00e3o SQL \n\ncom o Mysql ou atrav\u00e9s do NDB API para acesso em tempo real. \n\n A API NDB \u00e9 uma linguagem de programa\u00e7\u00e3o para aplica\u00e7\u00f5es orientada a \n\nobjetos para o Cluster Mysql que implementa indexs, busca, transa\u00e7\u00f5es e tratamentos \n\nde eventos. \n\n O cluster de Mysql garante a toler\u00e2ncia a falhas em qualquer n\u00f3 do cluster, para \n\nisso, ele se auto reconfigura para garantir seu funcionamento.  \n\n \n\n3.4 SERVIDOR DE APLICA\u00c7\u00d5ES JBOSS \n\n \nO servidor de aplica\u00e7\u00f5es Jboss \u00e9 atualmente considerado o mais robusto e de \n\nmelhor qualidade no mercado, e uma das suas maiores caracter\u00edsticas \u00e9 o fato de o \n\nmesmo ser open source, ou seja, ele \u00e9 aberto \u00e0 comunidade. O Jboss \u00e9 um servidor \n\n\n\n \n\n \n\n43 \n\ncertificado pela SUN, garantindo assim sua compatibilidade com as aplica\u00e7\u00f5es Java \n\nmais utilizadas no mercado. \n\n \n\n3.4.1 Clusteriza\u00e7\u00e3o com Jboss \n\n \nClusteriza\u00e7\u00e3o \u00e9 a possibilidade de poder rodar aplica\u00e7\u00f5es em diversos \n\nservidores, com esta forma, uma aplica\u00e7\u00e3o poder\u00e1 continuar rodando mesmo em caso \n\nde falha de algum dos servidores dispon\u00edveis dentro do cluster.  \n\nPara fazer clusteriza\u00e7\u00e3o com o Jboss, a forma mais simples \u00e9 disponibilizar \n\nv\u00e1rios servidores dentro de uma mesma rede, e rod\u00e1-los com a configura\u00e7\u00e3o \u2013c all. \n\nAssim todos iniciam dentre de um cluster desta rede. \n\n Atrav\u00e9s da clusteriza\u00e7\u00e3o \u00e9 poss\u00edvel garantir que aplica\u00e7\u00f5es tenham uma \n\ndisponibilidade muito maior na rede, pois ela garante que mesmo com a falha de algum \n\nservidor, a aplica\u00e7\u00e3o continuar\u00e1 rodando transparentemente para o usu\u00e1rio final. \n\n \n\n3.4.2  Configurando o cluster e os nodes \n\n \n\nCada inst\u00e2ncia de um servidor Jboss que est\u00e1 em uma m\u00e1quina, ser\u00e1 \n\nconsiderado como node, ou seja, uma parte do cluster. Este node deve especificar em \n\nqual cluster ele est\u00e1. Para configurar isto \u00e9 necess\u00e1rio configurar o arquivo cluster-\n\nservice.xml do node. Para que os nodes perten\u00e7am ao mesmo cluster, \u00e9 necess\u00e1rio \n\nque todos possuam a mesma configura\u00e7\u00e3o no cluster-service.xml. Abaixo est\u00e1 um \n\nexemplo de como ficaria a configura\u00e7\u00e3o padr\u00e3o para configurar um cluster. \n\n\n\n \n\n \n\n44 \n\n \n\nFigura 7: Exemplo de configura\u00e7\u00e3o de um node. \nFonte: Brian Stansberry, 200? \n \n \nPara formar um cluster, \u00e9 necess\u00e1rio que todos os nodes estejam com \n\nexatamente o mesmo PartitionName e ParititionConfig, pois eles configuram a \n\nlocaliza\u00e7\u00e3o e nome do cluster. \n\nPara fazer a parte de comunica\u00e7\u00e3o entre os nodes, o Jboss usa um framework \n\nconhecido chamado de Jgroups, este framework ser\u00e1 melhor explicado abaixo. \n\n \n3.4.2.1 Jgroups \n \n\nO Jboss usa o Jgroups para fazer a comunica\u00e7\u00e3o ponto-a-ponto entre os nodes \n\ndo seu cluster, com ele cada node do cluster pode enviar os mensagens para os outros \n\ne descobrir se houve falha entre outras coisas. \n\nPara configurar o Jgroups dentro do Jboss, normalmente \u00e9 feito dentro do \n\nPartitionConfig dos nodes, e l\u00e1 \u00e9 configur\u00e1vel o tipo de transporte da comunica\u00e7\u00e3o, o \n\ntempo para timeout de uma requisi\u00e7\u00e3o entre outras coisas. A figura abaixo ilustra um \n\nexemplo de um node com Jgroups configurado usando UDP multicast para fazer a \n\ncomunica\u00e7\u00e3o entre ele e os outros nodes. \n\n\n\n \n\n \n\n45 \n\n \nFigura 8: Configurando o JGroups \nFonte: Brian Stansberry, 200? \n \n \n\nO Jgroups possui v\u00e1rios protocolos poss\u00edveis para fazer a comunica\u00e7\u00e3o com seu \n\ncluster, entre elas podemos citar UDP, TCP, e TUNNEL. \u00c9 poss\u00edvel usar somente um \n\ndeste protocolo em cada node do cluster. \n\nPara poder fazer a comunica\u00e7\u00e3o entre os nodes, o cluster precisa sempre \n\nmanter atualizado sua lista com todos os nodes que est\u00e3o nele, para que o load \n\nbalancer saiba qual node est\u00e1 com falha e qual est\u00e1 ativo. Para fazer essa \n\ncomunica\u00e7\u00e3o se usa os protocolos de descobrimento. Esses protocolos s\u00e3o baseados \n\nno protocolo escolhido para fazer a comunica\u00e7\u00e3o. \n\n \n\n\n\n \n\n \n\n46 \n\nEsses protocolos podem ser dos seguintes tipos: \n\nPING - usado pelo transporte UDP, ele consiste em o node mestre enviar uma \n\nrequisi\u00e7\u00e3o para todos nodes do servidor, e os mesmo responde com um pacote UDP \n\npara ele.  \n\nTCPPING \u2013 usado pelo transporte TCP, ele consiste em uma lista de IP\u2019s \n\nconhecida, e assim o node envia uma requisi\u00e7\u00e3o para todos os ips cadastrados. \n\nMPING \u2013 usado pelo transporte TCP, funciona exatamente como o PING do \n\nUDP, ele envia uma mensagem para todos os nodes que estiverem na configura\u00e7\u00e3o. \n\nA tabela baixo mostrar\u00e1 cada protocolo e que tipo de transporte utilizar para ele. \n\n \nProtocolo de \n\nDescobrimento \nProtocolo de Transporte \n\nPING UDP \nTCPPING TCP \nMPING TCP \n\nTabela 7: Protocolos de descobrimento x protocolos de Transporte \nFonte: Adaptado por ANDRADE, Rafael \n \n \nQuando um node sofre alguma falha e fica indispon\u00edvel, \u00e9 necess\u00e1rio informar o \n\nload balance para que o mesmo n\u00e3o tente se conectar com ele, e para isso, \u00e9 utilizado \n\nos protocolos de detec\u00e7\u00e3o de falhas. Existem tr\u00eas tipos deste protocolo citado.  A \n\nprimeira dela \u00e9 o FD, que consiste em um node do cluster enviar sempre uma \n\nmensagem pergunta se o vizinho do mesmo est\u00e1 \u201cvivo\u201d, ou seja, est\u00e1 dispon\u00edvel, se o \n\nnode vizinho n\u00e3o responde, o node que enviou a mensagem envia uma mensagem de \n\nSUSPECT para o cluster. Quando o coordenador do grupo recebe esta mensagem, ele \n\nteste novamente se o node est\u00e1 indispon\u00edvel e atualiza a vis\u00e3o do cluster, retirando o \n\nque est\u00e1 fora. \n\nOutra forma de detectar falhas \u00e9 o FD_SOCK, ele \u00e9 usado para enviar sempre \n\nmensagens perguntando se o vizinho est\u00e1 vivo pode aumentar muito o trafego de \n\ninforma\u00e7\u00e3o dentro da rede, por exemplo, se o servidor est\u00e1 muito carregado e o timeout \n\ndo FD \u00e9 muito baixo, ele ir\u00e1 enviar falsas mensagens de SUSPECT, pois \u00e9 somente \n\numa demora na comunica\u00e7\u00e3o. O FD_SOCK faz somente uma conex\u00e3o TCP no node \n\nao lado, e somente se n\u00e3o for poss\u00edvel t\u00e3o conex\u00e3o \u00e9 que o mesmo envia a mensagem \n\nSUSPECT pra o cluster. Este protocolo \u00e9 mais usado para redes que tem muita \n\ncomunica\u00e7\u00e3o aonde todos os nodes s\u00e3o acessados freq\u00fcentemente. \n\n\n\n \n\n \n\n47 \n\nExiste tamb\u00e9m o FD_SIMPLE, que \u00e9 um protocolo que tamb\u00e9m envia \n\nmensagens de \u201cvc-est\u00e1-vivo\u201d para um node qualquer do cluster, se o node n\u00e3o \n\nresponder a mensagem enviada, um contador com o numero de falhas de cada node \u00e9 \n\nincrementado, quando o contador chega ao limite, \u00e9 enviado uma mensagem de \n\nSUSPECT para o cluster. \n\n \n\n3.4.3 Arquiteturas de servi\u00e7o \n\n \n\nA arquitetura do servi\u00e7o de cluster \u00e9 muito importante para o administrador do \n\nsistema. Mas os desenvolvedores est\u00e3o mais preocupados com a arquitetura para o \n\ncliente. O Jboss suporta dois tipos de arquitetura para clusters, o client-side-interceptos \n\n(tamb\u00e9m chamados de proxies ou stubs), e tamb\u00e9m os load balancers. \n\n \n\n3.4.3.1 Client-Side Interceptors \n\n \n\nA maioria dos servi\u00e7os do Jboss \u00e9 feito atrav\u00e9s do cliente que obt\u00e9m um stub \n\n(ou Proxy) que \u00e9 implementado pelo servidor e enviado para o cliente. Assim o cliente \n\nenvia as requisi\u00e7\u00f5es para esse stub gerado e assim esse stub redireciona para o \n\nservidor de acordo com as necessidades. \n\nEste objeto tem o conhecimento sobre o cluster, como o IP de todos nodes do \n\ncluster, o algoritmo para fazer o balanceamento entre os nodes, e tamb\u00e9m como fazer \n\nem caso de falha em uma requisi\u00e7\u00e3o. A imagem abaixo mostra como fica a arquitetura \n\nutilizando client-side interceptors. \n\n\n\n \n\n \n\n48 \n\n \nFigura 9: arquitetura de client-side Interceptor. \nFonte: Adaptado por ANDRADE, Rafael \n \n \n3.4.3.2 Load Balancer \n\n \n\nAlguns servi\u00e7os do Jboss, como servi\u00e7os HTTP, n\u00e3o requerem um cliente que \n\nfa\u00e7a o download de nada. Por exemplo, o cliente de uma aplica\u00e7\u00e3o web seria um Web \n\nbrowser, que envia uma requisi\u00e7\u00e3o e a recebe diretamente do servidor. Para estes \n\ncasos \u00e9 usado o load balancer, ele processa todas as requisi\u00e7\u00f5es enviadas e as \n\nencaminha para o node do cluster de acordo. Normalmente o load balancer \u00e9 parte do \n\ncluster e o cliente precisa conhecer somente o load balancer. A figura abaixo ilustra \n\nesta arquitetura. \n\n\n\n \n\n \n\n49 \n\n \nFigura 10: Arquitetura do load-balander \nFonte: Adaptado por ANDRADE, Rafael \n\n \n\n3.4.4 Pol\u00edticas de Balanceamento \n\n \n\nEm ambas as arquiteturas citadas, \u00e9 usado algum tipo de pol\u00edtica de \n\nbalanceamento, que \u00e9 feita para determinar para qual node do cluster envia uma \n\nrequisi\u00e7\u00e3o quando houver falha. \n\nAtualmente existem tr\u00eas formas para o balanceamento de requisi\u00e7\u00f5es, elas s\u00e3o \n\no Round - Robin, o First Avaliable e o First AvailableIdenticalAllProxies, eles ser\u00e3o \n\nmelhor explicados abaixo. \n\nRound - Robin \u2013 cada chamada para o servidor \u00e9 enviada para um node novo. O \n\nnode \u00e9 selecionado aleatoriamente da lista. \n\nFirst Avaliable \u2013 um dos nodes dispon\u00edveis \u00e9 selecionado como o principal e \n\nusado para receber todas as requisi\u00e7\u00f5es enviadas. Quando houver alguma mudan\u00e7a \n\nna lista de nodes dispon\u00edveis, um novo node principal ser\u00e1 eleito. \n\nFirst AvailableIdenticalAllProxies \u2013 \u00e9 semelhante ao First Avaliable, por\u00e9m para \n\nselecionar um novo principal, este \u00e9 o mesmo para todos clientes da mesma \u201cfam\u00edlia\u201d. \n\nEstas pol\u00edticas de balanceamentos s\u00e3o muito importantes para decidir qual a \n\nnecessidade do sistema sendo desenvolvido. Cada uma delas tem sua forma \n\n\n\n \n\n \n\n50 \n\nespecifica de funcionamento e cada uma se ad\u00e9qua melhor de acordo com a \n\nnecessidade. \n\n \n\n3.4.5 Replica\u00e7\u00f5es de Sess\u00f5es e Load Balance para aplica\u00e7\u00f5es Web \n\n \n\nReplica\u00e7\u00e3o de sess\u00f5es \u00e9 usado para replicar, ou seja, copiar todos os dados de \n\numa sess\u00e3o de um node do Jboss para os outros. Isso \u00e9 importante, pois se um dos \n\nnodes tem algum problema, e fica indispon\u00edvel, outro node v\u00e3o ser capazes de \n\nrecuperar esta sess\u00e3o. Para isso \u00e9 necess\u00e1rio ter duas fun\u00e7\u00f5es no servidor, o session \n\nstate replication e Load-Balance das requisi\u00e7\u00f5es que v\u00e3o chegar. \n\nSession state replication \u00e9 feito diretamente pelo Jboss, ele \u00e9 executado de \n\nforma default quando rodado na configura\u00e7\u00e3o all. Mas para rod\u00e1-lo, \u00e9 necess\u00e1rio \n\nconfigurar no arquivo web.xml da sua aplica\u00e7\u00e3o e colocar a tag&lt;distributable />. \n\nJ\u00e1 para o load-balance \u00e9 necess\u00e1rio usar outros programas para fazerem, o jeito \n\nmais comum de fazer isso \u00e9 utilizando o servidor Apache junto com mod_jk, um m\u00f3dulo \n\npara o mesmo. \n\nMod_jk foi desenvolvido especialmente para que o servidor Apache consiga \n\nencaminhar requisi\u00e7\u00f5es para um servlet, como o Jboss, ele tamb\u00e9m consegue fazer o \n\nload-balance das requisi\u00e7\u00f5es HTTP que chegam ao servidor. \n\n \n\n3.4.5.1 Configurando Apache o Mod_jk \n\n \n\nPara aplicar load-balance no servidor, \u00e9 necess\u00e1rio instalar o servidor web \n\nApache, e tamb\u00e9m o seu m\u00f3dulo mod_jk. \n\nPara configurar o Apache para usar o mod_jk \u00e9 necess\u00e1rio alterar o arquivo \n\nhttpd.conf e incluir os seguintes comandos. \n\n \n\n# Include mod_jk\u2019s specific configuration file \nInclude conf/mod-jk.conf \n \nDepois, \u00e9 criado um arquivo chamado mod-jk.conf, que \u00e9 colocado na pasta \n\nApache_home/conf. O arquivo ficar\u00e1 como mostrado na imagem abaixo. \n\n\n\n \n\n \n\n51 \n\n \nFigura 11: Configurar Apache para usar mod_jk \nFonte: Adaptado por ANDRADE, Rafael \n \n \nA configura\u00e7\u00e3o mais importante da imagem acima \u00e9 a Jkmount, que diz para o \n\nservidor Apache quais requisi\u00e7\u00f5es devem ser tratadas pelo mod-jk, no exemplo acima, \n\ntodas as requisi\u00e7\u00f5es HTTP com application ser\u00e3o redirecionadas para o mod_jk. \n\n\n\n \n\n \n\n52 \n\nAp\u00f3s a configura\u00e7\u00e3o do mod_jk \u00e9 necess\u00e1rio configurar os work nodes, que fica \n\nno arquivo conf/worker.properties. Este arquivo serve para configurar os diferentes \n\nservlets, ou aplica\u00e7\u00f5es que est\u00e3o nos servidores e tamb\u00e9m configura como funcionar\u00e1 \n\no load-balance. O arquivo abaixo exemplifica as configura\u00e7\u00f5es dos workers. \n\n \n \n\n \nFigura 12: Configura\u00e7\u00e3o dos workers nodes \nFonte: Adaptado por ANDRADE, Rafael \n \nA imagem acima mostra a configura\u00e7\u00e3o que faz com que o mod_jk use o load-\n\nbalance do tipo round Robin com sticky sessions em dois servidores Jboss tomcat. \n \n\n3.5 ARQUITETURA PROPOSTA \n\n \n\nPara a garantia a toler\u00e2ncia a falhas de hardware, a solu\u00e7\u00e3o mais utilizada \n\natualmente \u00e9 a clusteriza\u00e7\u00e3o ou replica\u00e7\u00e3o de hardware, que apesar de ser custosa, \n\npois necessidade redund\u00e2ncia de hardwares se mostra eficiente neste ponto. \n\n\n\n \n\n \n\n53 \n\n A arquitetura proposta neste artigo se baseia em clusteriza\u00e7\u00e3o de servidores de \n\naplica\u00e7\u00e3o Jboss juntamente com replica\u00e7\u00e3o de dados Mysql, conforme mostrado figura \n\nabaixo. \n\n \n\n \n\n \nFigura 13: Arquitetura proposta \nFonte: Adaptado por Andrade, Rafael \n \n\nEsta arquitetura est\u00e1 dividida em quatro camadas, elas s\u00e3o a camada Cliente, \n\ncamada de Aplica\u00e7\u00e3o e camada de Dados. Cada camada ser\u00e1 melhor especificada nos \n\npr\u00f3ximos t\u00f3picos. \n\n \n\n3.5.1 Camada Cliente \n\n \n\nA camada de Cliente consiste na parte aonde usu\u00e1rio final realmente participa, \n\nou seja, onde ficaria o \u201cconsumidor\u201d da aplica\u00e7\u00e3o, por se tratar de uma aplica\u00e7\u00e3o web, \n\no consumidor dela \u00e9 o pr\u00f3prio browser do usu\u00e1rio, fazendo assim que para acessar a \n\naplica\u00e7\u00e3o ele necessite somente uma conex\u00e3o a internet. A camada de cliente envia \n\nsempre dois requests para os servidores replicados, para garantir que o mesmo \n\nrequest seja recebido pelos dois. \n\n\n\n \n\n \n\n54 \n\n3.5.2 Camada de Aplica\u00e7\u00e3o \n\n \n\n A camada de Aplica\u00e7\u00e3o consiste em dois servidores que cont\u00e9m configurado \n\nneles o servidor HTTP Apache, o servidor Apache est\u00e1 no mercado desde 1996, e \n\natualmente \u00e9 o servidor mais est\u00e1vel e mais utilizado, sempre se mantendo atualizado \n\ncom os padr\u00f5es HTTP. Juntamente com o servidor Apache existe seu complemento o \n\nmod_jk, que consiste em um complemento usado para se trabalhar com o servidor \n\nApache juntamente com servlets, especialmente servlets Java.  \n\n O mod_jk \u00e9 um conector usado pelo Apache para se conectar ao servidor de \n\naplica\u00e7\u00e3o Apache Tomcat usando o protocolo de comunica\u00e7\u00e3o AJP. Neste servidor \n\nocorre o load balancing das aplica\u00e7\u00f5es, ou seja, ele seleciona qual dos servidores ir\u00e1 \n\nretornar a resposta para o browser do usu\u00e1rio. O mod_jk trabalha com loading balance \n\nfeito por Java, aonde ele tem a listagem de servidores dispon\u00edveis para acesso e a \n\npartir de um algoritmo chamado Round Robin ele seleciona o mais apropriado para dar \n\na resposta a esse usu\u00e1rio. Nele tamb\u00e9m \u00e9 configurada uma op\u00e7\u00e3o chamada sticky \n\nsessions, que se trata de uma configura\u00e7\u00e3o que diz que um request feito por algum \n\nbrowser ser\u00e1 sempre respondido pelo mesmo servidor, isso \u00e9 utilizado para diminuir o \n\noverheading entre os servidores de aplica\u00e7\u00e3o para replicar os dados das sess\u00f5es dos \n\nusu\u00e1rios. \n\n Estes servidores trabalham em cluster utilizando o Jgroups que ser\u00e1 melhor \n\nexplicado abaixo, eles trabalham em cluster de forma que mant\u00e9m todos os dados de \n\ntodas as sess\u00f5es de usu\u00e1rios que est\u00e3o usando o sistema em todos eles, ou seja, \n\nocorre uma replica\u00e7\u00e3o das sess\u00f5es de usu\u00e1rios, ele procedimento \u00e9 chamado de State \n\nReplication. \n\n Os servidores mant\u00eam uma lista de todos ips onde est\u00e3o os outros servidores, e \n\nassim ele enviam requisi\u00e7\u00f5es ips para os outros com os dados necess\u00e1rios referentes \n\n\u00e0s sess\u00f5es dos usu\u00e1rios. Isso garante que em caso de falha em alguns dos servidores, \n\nqualquer outro poder\u00e1 continuar tratando a sess\u00e3o do usu\u00e1rio corretamente sem que o \n\nmesmo perceba a falha ocorrida.  \n\n Al\u00e9m dos servidores com o Apache, na camada de Aplica\u00e7\u00e3o cont\u00e9m mais dois \n\nservidores com o container Jboss, trabalhando em cluster, comunicando-se entre si. O \n\ncontainer Jboss. O Jboss cont\u00e9m internamente a ele, o servidor de aplica\u00e7\u00f5es Tomcat, \n\ntamb\u00e9m desenvolvido pela Apache, o Tomcat trata-se do servidor de aplica\u00e7\u00e3o mais \n\nutilizado no mercado em conjunto com o Jboss, pois trabalha de acordo com as \n\n\n\n \n\n \n\n55 \n\nespecifica\u00e7\u00f5es W3C, e tamb\u00e9m trabalha de forma otimizada com o servidor HTTP \n\nApache. Nestes servidores \u00e9 onde a aplica\u00e7\u00e3o est\u00e1, ou seja, \u00e9 neste servidor aonde \n\nocorre o deploy da aplica\u00e7\u00e3o. \n\n O cliente final nunca v\u00ea este servidor, ele somente se comunica com os \n\nservidores onde est\u00e1 configurado o servidor Apache, e o mesmo redireciona para estes \n\nservidores. \n\n \n\n3.5.2.1 Jgroups \n\n \n\nJgroups \u00e9 uma ferramenta para envio de mensagens multicast confi\u00e1vel. Ele se \n\nbaseia na comunica\u00e7\u00e3o P2P entre os nodes dos clusters, ele pode ser baseado nos \n\nseguintes protocolos de comunica\u00e7\u00e3o: UDP, TCP e JMS. A principal caracter\u00edstica do \n\nmesmo \u00e9 a garantia de envio das mensagens entre os nodes, em caso de falha de \n\nalguma mensagem, ela ser\u00e1 reenviada. \n\nJgroups tamb\u00e9m trabalha com o grupo, ou seja, ele controla todo o cluster, \n\nmantendo sempre uma lista atualizada de quem est\u00e1 conectado ou n\u00e3o no cluster, e \n\nquando h\u00e1 entrada de algum novo node, ele avisa a todos os outros para atualizarem \n\nsua listagem. \n\nA arquitetura do Jgroups \u00e9 especificada conforme mostrado abaixo:  \n\n \nFigura 14: Arquiteura Jgroups \nFonte: http://www.jgroups.org/manual/html/ch01.html#ArchitectureFig \n\n\n\n \n\n \n\n56 \n\nA arquitetura consiste em tr\u00eas partes: \n\n \n\nA API channel de comunica\u00e7\u00e3o entre a aplica\u00e7\u00e3o e o Jgroups. \n\nO Building Blocks que servem para facilitar o uso do Jgroups e dar uma maior \n\nabstra\u00e7\u00e3o para quem usar o framework. Nesta camada tamb\u00e9m \u00e9 aonde \u00e9 \n\nimplementado os protocolos de garantia de envio das mensagens. \n\nE o Protocol Stack, que consiste na implementa\u00e7\u00e3o da comunica\u00e7\u00e3o \n\nespecificada pelo canal. \n\nJgroups \u00e9 atualmente o framework mais utilizado para a comunica\u00e7\u00e3o confi\u00e1vel \n\nentre grupos, utilizado no Jboss, Tomcat, Jetty, entre outros casos de sucesso. \n\n \n\n3.5.3 Camada de Banco de Dados \n\n \n\nA camada de Banco de dados consiste em mais dois servidores aonde somente \n\nroda o banco de dados Mysql. Estes servidores se comunicam entre si de forma \n\nmaster-slave, para garantir a replica\u00e7\u00e3o de dados sempre atualizada. Ou seja, \u00e9 criado \n\num cluster de banco de dados utilizando Mysql. \n\nA camada de Aplica\u00e7\u00e3o se comunica com esta camada utilizando JDBC, que se \n\ntrata de uma interface para conectar Java a banco de dados. A camada de aplica\u00e7\u00e3o \n\nao tentar se comunicar com o banco de dados, caso o servidor principal esteja fora do \n\nar, a aplica\u00e7\u00e3o se comunica com o pr\u00f3ximo servidor de banco de dados do cluster. \n\n \n\n3.5.4 Configura\u00e7\u00e3o da arquitetura proposta \n\n \n\n Para configurar os servidores utilizados na arquitetura proposta foram feitos os \n\nseguintes passos. \n\n \n\n3.5.4.1 Configura\u00e7\u00f5es dos servidores de aplica\u00e7\u00e3o (servidor 3, servidor 4, servidor 5, \n\nservidor 6) \n\n \n\n Os servidores do cluster ser\u00e3o chamados de node 1 e node 2, e neles rodar\u00e1 os \n\nservidores de aplica\u00e7\u00e3o (Jboss), o IP interno do servidor 3 \u00e9 192.168.1.159, do servidor \n\n4 \u00e9 192.168.1.158, do servidor 5 \u00e9 192.168.1.8 e do servidor 6 \u00e9 192.168.1.2. \n\n\n\n \n\n \n\n57 \n\nPrimeiramente para rodar um cluster no servidor Jboss \u00e9 somente necess\u00e1rio inici\u00e1-lo \n\ncom a configura\u00e7\u00e3o all que assim ele ter\u00e1 as configura\u00e7\u00f5es necess\u00e1rias para o cluster. \n\n Ser\u00e3o formados dois cluster, um utilizando o servidor 3 e servidor 4 e outro \n\nutilizando o servidor 5 e servidor 6, portanto somente essas maquinas se comunicar\u00e3o \n\nentre si, e assim o servidor 3 n\u00e3o ter\u00e1 comunica\u00e7\u00e3o com servidor 5 e assim por diante. \n\n Ap\u00f3s isso, \u00e9 necess\u00e1rio configurar os dados referentes \u00e0 localiza\u00e7\u00e3o, nome e \n\noutros dados de cada node do cluster, e para isso, o Jboss utiliza o Jgroups, e para a \n\nconfigura\u00e7\u00e3o deste cluster foram usadas as seguintes configura\u00e7\u00f5es. Estas \n\nconfigura\u00e7\u00f5es s\u00e3o feitas no arquivo JBOSS_HOME\\server\\all\\deploy\\ cluster-\n\nservice.xml. \n\n \nFigura 15: Configura\u00e7\u00e3o do Node 1 do cluster \nFonte: Adaptado por ANDRADE, Rafael \n\n \n\n\n\n \n\n \n\n58 \n\n Para a aplica\u00e7\u00e3o do cluster, foi escolhido a op\u00e7\u00e3o de utilizar as configura\u00e7\u00f5es \n\nusando TCP, pois apesar de ter uma carga maior na rede, ele garante melhor a entrega \n\ndos pacotes entre os servidores. \n\n As principais configura\u00e7\u00f5es usadas ser\u00e3o explicadas abaixo: \n\n TCP - identifica que o sistema usar\u00e1 o protocolo TCP para fazer a comunica\u00e7\u00e3o \n\nentre os nodes; \n\n TCPPING \u2013 identifica o protocolo usado para fazer a busca dos servidores \n\ndispon\u00edveis para o Cluster; \n\n MERGE2 \u2013 \u00e9 usado para que em caso de falha da rede, os coordenadores dos \n\ngrupos possam restaurar o cluster; \n\n FD_SOCK \u2013 identifica o tipo de detec\u00e7\u00e3o de falha usado no cluster;  \n\n VERIFY_SUSPECT \u2013 identifica o que leva um cluster a identificar outro como \n\nsuspeito de estar em falha; \n\n pbcast.NAKACK \u2013 Identifica a forma de garantia de entrega das mensagens \n\nusadas no cluster; \n\n pbcast.GMS \u2013 identifica a forma usada para garantir a entrada de novos nodes \n\nno cluster; \n\n pbcast.STABLE \u2013 Identifica que est\u00e1 sendo usado um garbagge collector para \n\ntodo cluster, pois se for guardar todas as mensagens enviadas entre os nodes, poder\u00e1 \n\nocorrer uma falta de mem\u00f3ria nos nodes; \n\n pbcast.STATE_TRANSFER \u2013 identifica que cada node novo que entrar no \n\ncluster ir\u00e1 receber o estado do cluster. \n\n \n\n E assim o primeiro servidor est\u00e1 pronto para rodar em cluster, faltando somente \n\nconfigurar o segundo servidor do cluster, o node 2. \n\n Para configurar o node 2 do cluster, se utiliza as mesmas configura\u00e7\u00f5es do node \n\n1, mudando somente o IP de identifica\u00e7\u00e3o dos servidores, e assim sua configura\u00e7\u00e3o \n\nficar\u00e1 conforme mostrado a seguir: \n\n \n\n\n\n \n\n \n\n59 \n\n \n\nFigura 16: Configura\u00e7\u00e3o do Node 2 do cluster. \nFonte: Adaptado por ANDRADE, Rafael \n\n \n\n Com estas configura\u00e7\u00f5es citadas acima, estar\u00e1 pronto a configura\u00e7\u00e3o do cluster, \n\ne ao iniciar os servidores, poder\u00e1 se verificar ambos se comunicando. A figura a seguir \n\nexemplifica essa comunica\u00e7\u00e3o: \n\n\n\n \n\n \n\n60 \n\n \n\nFigura 17: Exemplo do Cluster para node que est\u00e1 entrando \nFonte: Adaptado por ANDRADE, Rafael \n \n\n \n\nFigura 18: Exemplo de um coordenador do Cluster \nFonte: Adaptado por ANDRADE, Rafael \n \n\n Lembrando que para iniciar os servidores \u00e9 necess\u00e1rio somente ir na pasta \n\nJBOSS_HOME\\bin e executar o comando run \u2013c all \u2013b 0.0.0.0. \n\n O comando \u2013c all identifica que ser\u00e1 rodado o servidor com todas as \n\nconfigura\u00e7\u00f5es de cluster e cache, e a identifica\u00e7\u00e3o \u2013b 0.0.0.0 se fez necess\u00e1rio para \n\nque as m\u00e1quinas se identifiquem na rede, sem isso o cluster n\u00e3o se \u201cencontra\u201d. \n\n Para adicionar novas aplica\u00e7\u00f5es no cluster, a melhor forma de fazer \u00e9 usar o \n\nFarm Deploy do Jboss, pois ele garante que todos os sistemas rodando em todos os \n\nn\u00f3s do cluster ser\u00e3o iguais. Ele funciona de forma que ao colocar uma aplica\u00e7\u00e3o na \n\n\n\n \n\n \n\n61 \n\npasta JBOSS_HOME\\server\\all\\farm, e assim ele inicializar\u00e1 a aplica\u00e7\u00e3o e  tamb\u00e9m \n\nenviara esta aplica\u00e7\u00e3o para todos nodes do cluster, para que assim o outros nodes \n\ntamb\u00e9m tenham a aplica\u00e7\u00e3o. \n\n E assim o clusteriza\u00e7\u00e3o de servidores estar\u00e1 pronta. As configura\u00e7\u00f5es \n\nmostradas se repetem para o servidor 5 e servidor 6, por isso n\u00e3o foram mostradas. \n\n \n\n3.5.4.2 Configura\u00e7\u00e3o dos servidores de Banco de dados \n\n \n\nPara configurar a replica\u00e7\u00e3o de dados nos banco de dados, foram feitos alguns \n\npassos, que ser\u00e3o explicados abaixo.  \n\n \n\n3.5.4.2.1 Configura\u00e7\u00e3o do Master \n\n \n\n Ao iniciar a configura\u00e7\u00e3o de replica\u00e7\u00e3o de dados no Mysql, \u00e9 necess\u00e1rio \n\nprimeiramente configurar o servidor que ser\u00e1 considerado o \u201cmaster\u201d, ou seja, todas as \n\nrequisi\u00e7\u00f5es da aplica\u00e7\u00e3o ser\u00e3o enviadas para ele, e ele repassar\u00e1 essas requisi\u00e7\u00f5es \n\npara os bancos de dados \u201cslaves\u201d. Devido um dos requisitos inicialmente especificados \n\npara o sistema, todos servidores dever\u00e3o ser Windows, por isso as configura\u00e7\u00f5es \n\nmostradas s\u00e3o para servidores Windows, tendo alguma diferen\u00e7a para servidores \n\nusando Linux. \n\n Por conven\u00e7\u00e3o, vamos chamar a pasta aonde foi instalado o Mysql de \n\nMYSQL_HOME. \n\n Assim, inicia-se alterando o arquivo my.ini, que fica no diret\u00f3rio \n\nMYSQL_HOME\\MySql Server 5.1\\my.ini, neste arquivo est\u00e3o as principais \n\nconfigura\u00e7\u00f5es do banco de dados, como o tipo de dados que ser\u00e3o usado, charset, \n\nentre outros. Inicialmente \u00e9 necess\u00e1rio configurar o banco para que use a rede, \n\nportanto se fez necess\u00e1rio retirar as seguintes linhas da configura\u00e7\u00e3o: \n\n \n\n#skip-networking \n#bing-address = 127.0.0.1 \n \n\n Ap\u00f3s isso, \u00e9 necess\u00e1rio dizer ao banco qual database ele dever\u00e1 ter logs (para \n\nposteriormente serem lidos pelos servidores slaves). Como neste trabalho desejamos \n\n\n\n \n\n \n\n62 \n\nconfigurar a replica\u00e7\u00e3o para a base \u201cdireseg\u201d, as configura\u00e7\u00f5es de log ficaram como \n\nmostra a imagem abaixo: \n\n \n\nlong-bin = C:/mysql-bin.log \n\nbinlog-do-db=direseg \n\nserver-id=l \n\n \n\n Ap\u00f3s alterar estas configura\u00e7\u00f5es, \u00e9 necess\u00e1rio reiniciar o banco de dados, para \n\nque assim ele comece a utilizar o log. Seguido a estas configura\u00e7\u00f5es, \u00e9 necess\u00e1rio \n\nobter as informa\u00e7\u00f5es sobre o arquivo de log usado pelo banco de dados \u201cmaster\u201d, para \n\npoder posteriormente configurar os \u201cslaves\u201d, e isso se faz usando os seguintes \n\ncomandos no Mysql: \n\n \n\nUSE direseg;  \n\nFLUSH TABLES WITH READ LOCK;  \n\nSHOW MASTER STATUS; \n\n \n\nAo executar isto, foi obtida a seguinte resposta: \n\n \nFigura 19: Exemplo tabela mysql \nFonte: Adaptado por ANDRADE, Rafael \n\n \n \n \u00c9 importante anotar os dados que aparecem, pois eles dever\u00e3o ser usados \n\nposteriormente para configurar os slaves. \n\n Ap\u00f3s isto, o banco de dados \u201cmaster\u201d da replica\u00e7\u00e3o est\u00e1 pronto. Agora falta \n\nsomente configurar os slaves. \n\n \n\n\n\n \n\n \n\n63 \n\n3.5.4.2.2 Configura\u00e7\u00e3o dos Slaves \n\n \n\nPara configurar os \u201cslaves\u201d, primeiramente \u00e9 necess\u00e1rio criar o database direseg \n\nnos mesmo, e ap\u00f3s isso, \u00e9 necess\u00e1rio alterar as configura\u00e7\u00f5es do arquivo my.ini para \n\ninformar os dados referentes a replica\u00e7\u00e3o e localiza\u00e7\u00e3o do servidor \u201cm\u00e1ster\u201d. A figura \n\nabaixo ilustrar as configura\u00e7\u00f5es usadas no servidor \u201cslave\u201d. \n\n \nFigura 20: Configura\u00e7\u00e3o do banco de dados \u201cslave\u201d \nFonte: Adaptado por ANDRADE, Rafael \n\n \n \nAp\u00f3s aplicar as configura\u00e7\u00f5es, \u00e9 necess\u00e1rio reiniciar o banco de dados. E assim, \n\npara que o \u201cslave\u201d esteja em conformidade com o \u201cm\u00e1ster\u201d, se utiliza o seguinte \n\ncomando:  \n\n \n\nLOAD DATA FROM MASTER; \n\n \n\nE assim, o \u201cslave\u201d ter\u00e1 todos os dados do banco \u201cmaster\u201d, dados somente do \n\nschema \u201cdireseg\u201d, pois \u00e9 o \u00fanico que interessa para no momento. \n\nAp\u00f3s isso, \u00e9 necess\u00e1rio para a thread Slave do banco de dados, para atualizar \n\nas informa\u00e7\u00f5es referentes ao arquivo de log e posi\u00e7\u00e3o do arquivo do m\u00e1ster (os dados \n\nobtidos anteriormente com o comando SHOW MASTER STATUS;), e para isso foi \n\nexecutado o comando: \n\n \n\nSLAVE STOP; \n\n \n\nE logo ap\u00f3s o comando: \n\nCHANGE MASTER TO MASTER_HOST='192.168.1.153', MASTER_USER='root', \n\nMASTER_PASSWORD='jexpadm', MASTER_LOG_FILE=\u2019mysql-bin.000002\u2019, \n\nMASTER_LOG_POS=106;  \n\n\n\n \n\n \n\n64 \n\n Este comando adiciona ou altera as configura\u00e7\u00f5es dos referentes ao banco de \n\ndados m\u00e1ster. E as vari\u00e1veis usadas s\u00e3o: \n\n\u2022 MASTER_HOST \u2013 IP da m\u00e1quina que possui o banco de dados m\u00e1ster \n\n\u2022 MASTER_USER \u2013 usu\u00e1rio que est\u00e1 na m\u00e1quina m\u00e1ster, que ser\u00e1 usado para \n\nobter os dados. \n\n\u2022 MASTER_PASSWORD \u2013 senha do usu\u00e1rio. \n\n\u2022 MASTER_LOG_FILE \u2013 qual arquivo est\u00e1 sendo usado pelo m\u00e1ster para salvar \n\ntodas as transa\u00e7\u00f5es feitas nele. \n\n\u2022 MASTER_LOG_POS \u2013 posi\u00e7\u00e3o a qual o arquivo ser\u00e1 lido para manter sempre \n\natualizado. \n\n Com estas configura\u00e7\u00f5es prontas, \u00e9 apenas necess\u00e1rio executar o comando: \n\n START SLAVE; \n\n E assim a replica\u00e7\u00e3o entre os servidores est\u00e1 pronta, todas as requisi\u00e7\u00f5es e \n\ntransa\u00e7\u00f5es que ocorrerem no banco de dados m\u00e1ster ser\u00e1 replicada para os slaves.\n\n Lembrando que para fazer a replica\u00e7\u00e3o, \u00e9 necess\u00e1rio uma rede local, e a porta \n\n3306 dever\u00e1 estar liberada no firewall, pois o firewall do Windows bloqueia esta porta \n\npara conex\u00f5es externas. \n\n E com estas configura\u00e7\u00f5es ficar\u00e1 pronta a replica\u00e7\u00e3o de dados usando Mysql. \n\nLembrando que as configura\u00e7\u00f5es se repetem nos dois n\u00f3s do cluster, alterando \n\nsomente o ip das m\u00e1quinas usadas. \n\n3.5.5 Avalia\u00e7\u00e3o de Desempenho \n\n \n\nVisando verificar o desempenho da infra-estrutura proposta foram executados \n\ntestes em uma rede local de 10mbps compostas por computadores Intel Dual Core de \n\n1.6 GHz com 2gb de mem\u00f3ria RAM e sistema operacional Microsoft Windows XP. Os \n\ncomputadores foram configurados conforme mostrado na arquitetura proposta \n\nmostrada anteriormente. \n\nA primeira analise de desempenho feita nesta arquitetura foi o tempo de \n\nresposta a uma requisi\u00e7\u00e3o enviada ao servidor comparada com o n\u00famero de servi\u00e7os \n\ndispon\u00edveis no cluster. A mensagem enviada para o servidor foi uma requisi\u00e7\u00e3o HTTP, \n\n\n\n \n\n \n\n65 \n\ne a resposta do servidor \u00e9 sempre uma resposta de cont\u00e9m 0 bytes, tendo somente os \n\nbytes do protocolo HTTP. De acordo com o gr\u00e1fico abaixo, quando se tem somente um \n\nservi\u00e7o o tempo de resposta do servidor \u00e9 de 40ms(milissegundos), e quando se coloca \n\nmais um servi\u00e7o no cluster, o n\u00famero praticamente dobra, passando a ~70ms, e assim \n\nse percebe um crescimento com o n\u00famero de servi\u00e7os. Os testes foram executados \n\ncom mensagens de tamanho de 0-256k-512k bytes, e os resultados completos est\u00e3o \n\nmais especificados abaixo. \n\nTempo de Resposta x N\u00famero de Servi\u00e7os\n\n0,00\n\n20,00\n\n40,00\n\n60,00\n\n80,00\n\n100,00\n\n120,00\n\n140,00\n\n1 Servi\u00e7o 2 Servi\u00e7os 3 Servi\u00e7os\n\nN\u00famero de servi\u00e7os\n\nT\ne\n\nm\np\n\no\n d\n\ne\n r\n\ne\ns\n\np\no\n\ns\nta\n\n(m\ns\n\n)\n\n0 bytes\n\n256 kbytes\n\n512 kbytes\n\n \nFigura 21: Desempenho do servi\u00e7o \nFonte: Adaptado por Andrade, Rafael \n\n \n\n \n\nOutra an\u00e1lise de desempenho feita foi a de tempo de resposta considerando o \n\nn\u00famero de clientes fazendo a requisi\u00e7\u00e3o ao servidor. A mensagem a ser enviada foi de \n\n512kbytes, que seria a simula\u00e7\u00e3o de uma listagem no servidor. O n\u00famero de cliente \n\nvariou entre 10 e 80 clientes. Tamb\u00e9m foram feitos de acordo com o n\u00famero de \n\nservi\u00e7os dispon\u00edveis. Para fazer estes testes, foi implementado um client em Java, que \n\ncria threads de disparo de requisi\u00e7\u00f5es para o servidor, cada thread envia 100 \n\nrequisi\u00e7\u00f5es ao servidor, e ap\u00f3s isso \u00e9 calculado o tempo m\u00e9dio de resposta entre \n\nessas requisi\u00e7\u00f5es. O \u00fanico problema identifica nesta abordagem \u00e9 que o Java tem um \n\ntempo de resposta maior do que o Flex, por isso os dados ficaram acima do que \n\n\n\n \n\n \n\n66 \n\nrealmente seria calculado usando clients em Flex. Os resultados obtidos est\u00e3o \n\nmostrados no gr\u00e1fico abaixo \n\nTempo de Resposta x N\u00famero de Clientes\n\n0\n\n50\n\n100\n\n150\n\n200\n\n250\n\n10 CLIENTS 20 CLIENTS 30 CLIENTS 40 CLIENTS 50 CLIENTS 60 CLIENTS 70 CLIENTS 80 CLIENTS\n\nn\u00famero de clients\n\nT\ne\n\nm\np\n\no\n d\n\ne\n R\n\ne\ns\n\np\no\n\ns\nta\n\n(m\ns\n\n)\n\n1 SERVI\u00c7O\n\n2 SERVI\u00c7OS\n\n3 SERVIC\u00c7OS\n\n \nFigura 22: Desempenho do servi\u00e7o x N\u00famero de Clientes \nFonte: Adaptado por Andrade, Rafael \n \n\nComo pode ser visto no gr\u00e1fico, a tempo de resposta aumenta de forma est\u00e1vel \n\nde acordo com o n\u00famero de clientes enviando requisi\u00e7\u00f5es, pode-se comprovar uma \n\nm\u00e9dia de aumento de cerca de 15% no tempo de resposta para cada aumento de 10 \n\nClientes enviando requisi\u00e7\u00f5es, o que \u00e9 considerado um desempenho muito bom para \n\naplica\u00e7\u00f5es web. Sendo que uma requisi\u00e7\u00e3o chegando at\u00e9 80ms \u00e9 praticamente \n\nimpercept\u00edvel para o ser humano, e o maior tempo de resposta obtido \u00e9 ~200ms. \n\n N\u00e3o \u00e9 poss\u00edvel calcular especificamente o overhead causado para detector de \n\nfalhas usado no servidor Jboss, mas de acordo com o que foi especificado na \n\ndocumenta\u00e7\u00e3o do pr\u00f3prio servidor, o overhead causado pelos detectores de falhas \u00e9 \n\npraticamente nulo, aumentando de 2 a 5 por cento somente o tempo de resposta a uma \n\nrequisi\u00e7\u00e3o.  \n\n \n\n\n\n \n\n \n\n67 \n\n4 TRABALHOS FUTUROS \n\n \n\nPara o futuro, pretendo fazer maior garantia de toler\u00e2ncia a falhas, n\u00e3o somente \n\na falhas de hardware, como tamb\u00e9m a falhas de desenvolvimento como outras, para \n\nassim ter uma garantia maior na confiabilidade do sistema. \n\nA aplica\u00e7\u00e3o em desenvolvimento est\u00e1 em fase alpha, e em desenvolvimento, \n\nportanto um dos principais trabalhos futuros ser\u00e1 a finaliza\u00e7\u00e3o da mesma. \n\nOutro trabalho futuro \u00e9 o desenvolvimento de t\u00e9cnicas de replica\u00e7\u00e3o de \n\nservidores em m\u00e1quinas virtuais, diminuindo assim o custo de implanta\u00e7\u00e3o da \n\narquitetura proposta neste trabalho. \n\n \n\n\n\n \n\n \n\n5 CONSIDERA\u00c7\u00d5ES FINAIS \n\n \n\nAtualmente o desenvolvimento de aplica\u00e7\u00e3o Web est\u00e1 cada vez maior, e diante \n\ndesta nova realidade, est\u00e3o sendo necess\u00e1rias novas formas de garantia para garantir \n\na confiabilidade desses sistemas.  \n\nComo a web \u00e9 ainda uma forma de utiliza\u00e7\u00e3o pouco confi\u00e1vel, muito sujeita a \n\nfalhas, como quedas de conex\u00e3o, quedas de luz, entre outras, as garantias de \n\ntoler\u00e2ncia a essas falhas em sistemas web est\u00e1 se tornando mais necess\u00e1ria. \n\nO trabalho mostra uma forma de garantir a toler\u00e2ncia a falhas, que se mostra \n\nbastante confi\u00e1vel, que garante que em caso de falhas de qualquer um dos servidores, \n\na transfer\u00eancia para outro servidor ficar\u00e1 invis\u00edvel para o usu\u00e1rio final. \n\nA replica\u00e7\u00e3o de dados utilizada mostrou-se interessante para garantir \u00e0 \n\ntoler\u00e2ncia a falha em algum dos servidores de banco de dados, pois em caso de falha, \n\npode-se automaticamente conectar-se a outro, e este ter\u00e1 os dados id\u00eanticos ao outro. \n\nA forma utilizada para a garantia a falhas mostrou-se eficiente, por\u00e9m, \u00e9 uma \n\nforma com um custo elevado para desenvolvimento, tanto com hardwares, pois a \n\narquitetura proposta necessita muitas maquinas na mesma, como tamb\u00e9m custo de \n\nimplementa\u00e7\u00e3o, pois n\u00e3o existe quase material sobre os temas escolhidos, e isso faz \n\ncom que o custo de busca e implementa\u00e7\u00e3o destas tecnologias se torne custoso. \n\nPor se tratar de um sistema que ter\u00e1 usu\u00e1rios reais finais, o processo de \n\ndesenvolvimento do mesmo foi tratado como um projeto de Sistema, por isso foram \n\ndesenvolvidos documentos e outras formas de evid\u00eancia para garantir a qualidade do \n\nmesmo, o que ajudou bastante no desenvolvimento do mesmo, que mesmo em fase \n\nalpha de seu desenvolvimento se mostra bastante maturo. \n\n \n\n \n\n\n\n \n\n \n\n6 REFER\u00caNCIAS \n\nWIKIPEDIA. Dispon\u00edvel em: \nhttp://en.wikipedia.org/wiki/Replication_(computer_science). Acesso em: 12 jul. \n2008. \n \nCLUSTER BANCO DE DADOS. Dispon\u00edvel em: \nhttp://www.docs.mussicorp.net/guiacluster/clusterbancodedados.php. Acesso \nem: 12 jul. 2008 \n \nREPLICATION AND DATABASE MIRRORING. Dispon\u00edvel em: \nhttp://msdn.microsoft.com/en-us/library/ms151799.aspx. Acesso em: 22 jul. \n2009. \n \nDISTRIBUTED DATABASE. Dispon\u00edvel em: \nhttp://en.wikipedia.org/wiki/Distributed_database. Acesso em 15 ago. 2008 \n \nOracle9i Database Administrator's Guide, Dispon\u00edvel em: \nhttp://www.cs.uvm.edu/oracle9doc/server.901/a90117/ds_conce.htm, Acesso \nem: 22 set. 2008 \n \nOracle\u00ae Database Advanced Replication 10g Release 1 (10.1). Dispon\u00edvel em: \nhttp://stanford.edu/dept/itss/docs/oracle/10g/server.101/b10732/toc.htm. Acesso \nem: 30 set. 2008 \n \nOracle Data Replication and Integration. Dispon\u00edvel em: \nhttp://www.oracle.com/technology/products/dataint/index.html. Acesso em: 23 \nabr. 2009. \n \nOracle Replication. Dispon\u00edvel em: \nhttp://searchoracle.techtarget.com/news/article/0,289142,sid41_gci905154,00.ht\nml?Exclusive=True. Acesso em 23 abr. 2009. \n \nDatabase Oracle Advanced Replication Tutorial. Dispon\u00edvel em: \nhttp://www.roseindia.net/software-tutorials/detail/13572. Acesso em: 23 abr. \n2009. \n \nDo It Yourself (DIY) Oracle replication. Dispon\u00edvel em: \nhttp://it.toolbox.com/blogs/data-ruminations/do-it-yourself-diy-oracle-replication-\n12894. Acesso em: 23 abr. 2009-10-26 \n \n\n\n\n \n\n \n\nIan Gilfillan. Database Replication in Mysql. Dispon\u00edvel em: \nhttp://www.databasejournal.com/features/mysql/article.php/3355201/Database-\nReplication-in-MySQL.htm. Acesso em 28 abr. 2009. \n \nStep-by-Step how to Setup MYSQL Database Replication. Dispon\u00edvel em: \nhttp://aciddrop.com/2008/01/10/step-by-step-how-to-setup-mysql-database-\nreplication/. Acesso em: 28 abr. 2009. \n \nMysql Replication. Dispon\u00edvel em: \nhttp://dev.mysql.com/doc/refman/5.0/en/replication.html. Acesso em: 28 abr. \n2009. \n \nFalko Timme. How To Set Up Database Replication In Mysql. Dispon\u00edvel em: \nhttp://www.howtoforge.com/mysql_database_replication. Acesso em: 28 abr. \n2009. \n \nDaniel. Setting up database replication on Mysql. Dispon\u00edvel em: \nhttp://www.gra2.com/article.php/setting-up-database-replication-on-mysql. \nAcesso em: 30 abr. 2009. \n \nDatabase Replication In Mysql. Dispon\u00edvel em: http://librenix.com/?inode=8118. \nAcesso em: 30 abr. 2009. \n \nSlony-I 1.0.5 (PostgreSQL Database Replication). Dispon\u00edvel em: \nhttp://www.postgresql.org/about/news.233. Acesso em: 30 abr. 2009. \n \nPostgreSQL - Replication and High Availability. Dispon\u00edvel em: \nhttp://edoceo.com/liber/db-postgresql-replication. Acesso em: 30 abr. 2009. \n \nPGCluster. Dispon\u00edvel em: http://pgcluster.projects.postgresql.org/. Acesso em: \n30 abr. 2009. \n \nSlony-I. Dispon\u00edvel em: http://slony1.projects.postgresql.org/. Acesso em: 30 \nabr.2009. \n \nDBBalancer. Dispon\u00edvel em: http://sourceforge.net/projects/dbbalancer/. Acesso \nem 30 abr. 2009. \n \nPgPool. Dispon\u00edvel em: http://pgpool.projects.postgresql.org/. Acesso em 30 abr. \n2009. \n \nPostgreSQL table comparator. Dispon\u00edvel em: http://pg-\ncomparator.projects.postgresql.org/. Acesso em 30 abr. 2009. \n \n\n\n\n \n\n \n\nDatabase replication under Postgres. Dispon\u00edvel em: \nhttp://archives.postgresql.org/pgsql-interfaces/1999-12/msg00191.php. Acesso \nem 5 mai. 2009. \n \nDatabase Replication. Dispon\u00edvel em: \nhttp://www.cs.mcgill.ca/~kemme/disl/replication.html, Acesso em: 5 mai. 2009. \n \nPostgreSQL + Replication. Dispon\u00edvel em: \nhttp://www.commandprompt.com/products/mammothreplicator/. Acesso em: 5 \nmai. 2009. \n \nIrina Sourikova. PostgreSQL Replicator. Dispon\u00edvel em: \nhttp://www.google.com.br/url?sa=t&amp;source=web&amp;ct=res&amp;cd=9&amp;url=http%3A%2F\n%2Fwww.rhic.bnl.gov%2FRCF%2FUserInfo%2FMeetings%2FTechnology%2FIri\nna_Sourikova_techMeet.ppt&amp;ei=U70YSfuzIIyi8gTM1sCfCw&amp;usg=AFQjCNHdOq\nqGew5a31NxDnRS77YI8DMx2w&amp;sig2=pmHi-11Ra4vvvNA5e7moAA. Acesso \nem: 10 mai. 2009. \n \nFault-Tolerant system. Dispon\u00edvel em: http://en.wikipedia.org/wiki/Fault-\ntolerant_system. Acesso em: 12 mai. 2009. \n \nWalter Heimerdinger , Charles B. Weinstock. Conceptual Framework for System \nFault Tolerance, A. Dispon\u00edvel em: \nhttp://www.sei.cmu.edu/library/abstracts/reports/92tr033.cfm. Acesso em: 12 mai. \n2009. \n \nFault Tolerance Concepts. Dispon\u00edvel em: \nhttp://hissa.nist.gov/chissa/SEI_Framework/framework_8.html. Acesso em: 12 \nmai. 2009. \n \nPankaj Jalote. Fault Tolerance in Distributed Systems. 1Ed. 2006. \n \nTaisy Weber. Conceitos de Dependabilidade. Dispon\u00edvel em: \nhttp://www.inf.ufrgs.br/~taisy/disciplinas/textos/ConceitosDependabilidade.PDF. \nAcesso em: 12 mai. 2009. \n \nJboss 4 Clustering Guide. Dispon\u00edvel em: \nhttp://www.google.com.br/url?sa=t&amp;source=web&amp;ct=res&amp;cd=2&amp;url=http%3A%2F\n%2Fdocs.jboss.org%2Fjbossas%2Fguides%2Fclusteringguide%2Fr2%2Fen%2F\npdf%2Fjboss4-\nclustering.pdf&amp;ei=Db8YSeeYKaCm8ASpvtmTCw&amp;usg=AFQjCNGhTq0da0et4y1\n07ANECQHxC1XHmQ&amp;sig2=Lv0DMdrTd71O-hUuxUzl4w. Acesso em: 22 mai. \n2009. \n \n\n\n\n \n\n \n\nJboss Clustering. Dispon\u00edvel em: \nhttp://docs.jboss.org/jbossas/jboss4guide/r4/html/cluster.chapt.html. Acesso em: \n22 mai. 2009. \n \nIvelin Ivanov. J2EE Clustering with Jboss. Dispon\u00edvel em: \nhttp://onjava.com/pub/a/onjava/2003/08/20/jboss_clustering.html?page=1. \nAcesso em: 26 mai. 2009. \n \nSamson Kittoli. JBoss AS5 Clustering Guide. Dispon\u00edvel em: \nhttp://www.jboss.org/community/wiki/jbossas5clusteringguide. Acesso em: 26 \nmai. 2009. \n \nBrian Stansberry, Galder Zamarreno. JBoss Application Server Clustering Guide. \nDispon\u00edvel em: http://www.jboss.org/file-\naccess/default/members/jbossas/freezone/docs/Clustering_Guide/beta422/html/i\nndex.html. Acesso em: 26 mai. 2009. \n \nWeb 2.0. Dispon\u00edvel em: http://pt.wikipedia.org/wiki/Web_2.0. Acesso em: 30 \nago. 2009. \n \nTim O'Reilly. What Is Web 2.0. Dispon\u00edvel em: \nhttp://oreilly.com/web2/archive/what-is-web-20.html. Acesso em: 30 ago. 2009. \n \n \n \n \n \n \n \n \n \n \n \n \n \n\n\n\n \n\n \n\n7 ANEXOS \n\nAnexo A \u2013 An\u00e1lise de Requisitos \n\n \n\n\n\n \n\n \n\nANEXO A \n\n \n \n \n \n \n \n \n \n \n \n \n\n \n \n \n \n\nDIR_WEB \nAn\u00e1lise de Requisitos \n\n \n \n \n \n \n\nVers\u00e3o:01.00 \n\nData:10 maio, 2009 \n\nIdentificador do documento:documento_requisitos\n\nLocaliza\u00e7\u00e3o:docs/requisitos \n\n \n\n \n\n \n \n \n\n\n\n \n\nHist\u00f3rico de revis\u00f5es \n \nVers\u00e3o  \n(XX.YY) \n\nData  \n(DD/MMM/YYYY) \n\nAutor Descri\u00e7\u00e3o Localiza\u00e7\u00e3o \n\n01.00 10/05/2009 Rafael Andrade Cria\u00e7\u00e3o Docs/requisitos \n\n\n\n76 \n\n \n\nIntrodu\u00e7\u00e3o \n\nProp\u00f3sito \nEsse documento apresenta o conjunto de requisitos funcionais e n\u00e3o funcionais do \nprojeto. A especifica\u00e7\u00e3o de requisitos envolve o conjunto de necessidades que \ndevem ser atendidas para que os objetivos do projeto sejam plenamente atingidos, e \nas restri\u00e7\u00f5es que devem ser observadas durante o processo de desenvolvimento. \nEla deve tamb\u00e9m estabelecer o relacionamento entre estes objetivos e restri\u00e7\u00f5es. \n\nP\u00fablico Alvo \nEsse documento destina-se aos analistas de sistemas, respons\u00e1veis pela concep\u00e7\u00e3o \ntecnol\u00f3gica e modelagem da solu\u00e7\u00e3o do projeto e aos desenvolvedores. \n \n \n \n\n\n\n77 \n\n \n\nAn\u00e1lise da Necessidade \n\nDescri\u00e7\u00e3o do Projeto \n Projeto para administra\u00e7\u00e3o e Pedido de novos seguros para a corretora \nDireseg. \n\nObjetivos \n Desenvolver uma aplica\u00e7\u00e3o que tenha todas funcionalidades referentes a \nadministra\u00e7\u00e3o, cota\u00e7\u00e3o, relat\u00f3rios para a corretora Direseg. \n\nMetas \n O projeto quando conclu\u00eddo dever\u00e1 atender os seguintes crit\u00e9rios: \n \n\na) Os usu\u00e1rios das vendedoras de autom\u00f3veis poder\u00e3o pedir cota\u00e7\u00f5es em \ntempo real para o seguro dos autos vendidos. \n\nb) Os usu\u00e1rios da corretora poder\u00e3o calcular e enviar a resposta aos pedidos em \ntempo real. \n\nc) Os usu\u00e1rios da corretora poder\u00e3o cadastrar seguros de todos seus clientes. \nd) Os usu\u00e1rios da corretora poder\u00e3o cadastrar produtores para fazer parcerias. \ne) Os usu\u00e1rios das produtoras poder\u00e3o ver relat\u00f3rios de produ\u00e7\u00e3o, e tamb\u00e9m de \n\nrelat\u00f3rios de seguros. \n \n\nJustificativas \n Atualmente verificou-se a demanda para um servi\u00e7o unificado de \n\nadministra\u00e7\u00e3o da corretora e tamb\u00e9m para pedidos de novos seguros. \n\n\n\n78 \n\n \n\nRequisitos Funcionais \n\n \n\nM\u00f3dulo Administrador \n \nRQ0001_00 O sistema deve permitir que todos funcion\u00e1rios da corretora tenha login pr\u00f3prio.  \nAutor Rafael Andrade Data 12/03/2009 \nSolicitante Marcelo \nPrioridade Alta \nStatus Pendente \n\n \n\nRQ0002_00 O sistema deve listar os usu\u00e1rios cadastrados \nAutor Rafael Andrade Data 12/03/2009 \nSolicitante Portal Unimed \u2013 Rodrigo \nPrioridade Alta \nStatus Pendente \n \n \nRQ0003_00 O sistema deve permitir que os administradores vejam todos pedidos de cota\u00e7\u00e3o, \n\ncom filtros. \nAutor Rafael Andrade Data 12/03/2009 \nSolicitante Portal Unimed \u2013 Rodrigo \nPrioridade Alta \nStatus Pendente \n \n \nRQ0004_00 O sistema deve permitir o cadastro de Ramos \nAutor Rafael Andrade Data 12/03/2009 \nSolicitante Portal Unimed - Vivian \nPrioridade Alta \nStatus Pendente \n\n \n \nRQ0005_00 O sistema deve permitir o cadastro de Tipos de cliente \nAutor Rafael Andrade Data 12/03/2009 \nSolicitante Portal Unimed - Vivian \nPrioridade Alta \nStatus Pendente \n \n \nRQ0006_00 O sistema deve permitir o cadastro de Segurados \nAutor Rafael Andrade Data 12/03/2009 \nSolicitante Portal Unimed - Vivian \nPrioridade Alta \nStatus Pendente \n \n \nRQ0007_00 O sistema deve permitir o cadastro de Seguros \nAutor Rafael Andrade Data 12/03/2009 \nSolicitante Portal Unimed - Vivian \nPrioridade Alta \nStatus Pendente \n \n \n \n \n \n\n\n\n79 \n\n \n\nRQ0008_00 O sistema deve permitir o cadastro de Produtores \nAutor Rafael Andrade Data 12/03/2009 \nSolicitante Portal Unimed - Vivian \nPrioridade Alta \nStatus Pendente \n \n \nRQ0009_00 O sistema deve permitir o cadastro de usu\u00e1rios para produtores \nAutor Rafael Andrade Data 12/03/2009 \nSolicitante Portal Unimed - Vivian \nPrioridade Alta \nStatus Pendente \n \n \nRQ0010_00 O sistema deve permitir o cadastro de Segudoras \nAutor Rafael Andrade \nSolicitante Portal Unimed - Vivian \nPrioridade Alta \nStatus Pendente \n \n \nRQ0011_00 O sistema deve permitir o cadastro de Bancos \nAutor Rafael Andrade \nSolicitante Portal Unimed - Vivian \nPrioridade Alta \nStatus Pendente \n \n \nRQ0012_00 O sistema deve permitir o cadastro de Perfis de usu\u00e1rio \nAutor Rafael Andrade \nSolicitante Portal Unimed - Vivian \nPrioridade Alta \nStatus Pendente \n \n \nRQ0013_00 O sistema deve permitir o cadastro de Comiss\u00f5es de Seguro \nAutor Rafael Andrade \nSolicitante Portal Unimed - Vivian \nPrioridade Alta \nStatus Pendente \n \n \nRQ0014_00 O sistema deve permitir o cadastro de Pagamentos de Parcelas de Seguros \nAutor Rafael Andrade \nSolicitante Portal Unimed - Vivian \nPrioridade Alta \nStatus Pendente \n \n \nRQ0015_00 O sistema deve permitir o cadastro de Pagamentos de Parcelas de Seguros \nAutor Rafael Andrade \nSolicitante Portal Unimed - Vivian \nPrioridade Alta \nStatus Pendente \n \n \nRQ0016_00 O sistema deve permitir o cadastro de Perfil de Segurados \nAutor Rafael Andrade \nSolicitante Portal Unimed - Vivian \nPrioridade Alta \nStatus Pendente \n\n\n\n80 \n\n \n\n \n \nRQ0017_00 O sistema deve permitir o cadastro Coberturas para os Ramos de Seguro \nAutor Rafael Andrade \nSolicitante Portal Unimed - Vivian \nPrioridade Alta \nStatus Pendente \n \n \nRQ0018_00 O sistema deve permitir o cadastro de Sinistros \nAutor Rafael Andrade \nSolicitante Portal Unimed - Vivian \nPrioridade Alta \nStatus Pendente \n  \n \nRQ0019_00 O sistema deve permitir o cadastro e envio de Solicita\u00e7\u00e3o entre os usu\u00e1rios do \n\nsistema \nAutor Rafael Andrade \nSolicitante Portal Unimed - Vivian \nPrioridade Alta \nStatus Pendente \n \n \nRQ0020_00 O sistema deve gerar relat\u00f3rios de produ\u00e7\u00e3o, filtrados por Produtor, Ramo, \n\nSeguradora, Cliente entre outros \nAutor Rafael Andrade \nSolicitante Portal Unimed - Vivian \nPrioridade Alta \nStatus Pendente \n \n \nRQ0021_00 O sistema deve gerar relat\u00f3rios de clientes, produtores, seguradoras e de todos \n\ncadastros do sistema. \nAutor Rafael Andrade \nSolicitante Portal Unimed - Vivian \nPrioridade Alta \nStatus Pendente \n \n \nRQ0022_00 O sistema deve gerar relat\u00f3rios de comiss\u00e3o, por data. \nAutor Rafael Andrade \nSolicitante Portal Unimed - Vivian \nPrioridade Alta \nStatus Pendente \n \n\nM\u00f3dulo Concession\u00e1ria \n \nRQ0023_00 O sistema deve permitir o cadastro de Pedidos de cota\u00e7\u00e3o de seguros \nAutor Rafael Andrade \nSolicitante Portal Unimed - Vivian \nPrioridade Alta \nStatus Pendente \n \n \nRQ0024_00 O sistema deve permitir o envio de arquivos anexados aos pedidos de cota\u00e7\u00e3o \nAutor Rafael Andrade \nSolicitante Portal Unimed - Vivian \nPrioridade Alta \nStatus Pendente \n\n\n\n81 \n\n \n\nRQ0025_00 O sistema deve permitir visualizar as cota\u00e7\u00f5es prontas recebidas. \nAutor Rafael Andrade \nSolicitante Portal Unimed - Vivian \nPrioridade Alta \nStatus Pendente \n \n \nRQ0026_00 O sistema deve gerar relat\u00f3rio de produ\u00e7\u00e3o do produtor. \nAutor Rafael Andrade \nSolicitante Portal Unimed - Vivian \nPrioridade Alta \nStatus Pendente \n \n \nRQ0027_00 O sistema deve gerar relat\u00f3rio de comiss\u00e3o do produtor, por data. \nAutor Rafael Andrade \nSolicitante Portal Unimed - Vivian \nPrioridade Alta \nStatus Pendente \n \n\nM\u00f3dulo Administradora \n \nRQ0028_00 O sistema deve permitir o cadastro de Pedidos de cota\u00e7\u00e3o de seguros \nAutor Rafael Andrade \nSolicitante Portal Unimed - Vivian \nPrioridade Alta \nStatus Pendente \n \n \nRQ0029_00 O sistema deve permitir o envio de arquivos anexados aos pedidos de cota\u00e7\u00e3o \nAutor Rafael Andrade \nSolicitante Portal Unimed - Vivian \nPrioridade Alta \nStatus Pendente \n \n \nRQ0030_00 O sistema deve permitir visualizar as cota\u00e7\u00f5es prontas recebidas. \nAutor Rafael Andrade \nSolicitante Portal Unimed - Vivian \nPrioridade Alta \nStatus Pendente \n \n \nRQ0031_00 O sistema deve gerar relat\u00f3rio de produ\u00e7\u00e3o do produtor. \nAutor Rafael Andrade \nSolicitante Portal Unimed - Vivian \nPrioridade Alta \nStatus Pendente \n \n \nRQ0032_00 O sistema deve gerar relat\u00f3rio de comiss\u00e3o do produtor, por data. \nAutor Rafael Andrade \nSolicitante Portal Unimed - Vivian \nPrioridade Alta \nStatus Pendente \n \n\n\n\n82 \n\n \n\nRequisitos N\u00e3o-Funcionais \n\n \n\nConfiabilidade e Robustez \n \nRQ0033_00 O sistema dever\u00e1 rodar\u00e1 no servidor Jboss 4.0.2 \nAutor Rafael Andrade Data 13/03/2009 \nSolicitante Portal Unimed \u2013 Rodrigo \nPrioridade - \nStatus Pendente \n \n \nRQ0034_00 O sistema dever\u00e1 rodar em SO Windows \nAutor Rafael Andrade Data 13/03/2009 \nSolicitante Portal Unimed \u2013 Rodrigo \nPrioridade - \nStatus Pendente \n \n\nIntera\u00e7\u00e3o e Usabilidade \n \nRQ0035_00 O sistema dever\u00e1 ser desenvolvido utilizando a tecnologia Flex \nAutor Rafael Andrade Data 13/03/2009 \nSolicitante Portal Unimed \u2013 Rodrigo \nPrioridade -  \nStatus Pendente \n \n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n\n\n83 \n\n \n\nAnexo B \u2013 Artigo \n\n \n\nUma Infraestrutura para Toler\u00e2ncia a Faltas em Sistemas para \nWeb 2.0 \n\n    Rafael de Souza Andrade \n\n \n\nCentro Tecnol\u00f3gico \u2013 Universidade Federal de Santa Catarina (UFSC) \nCEP 88040-900 \u2013 Florian\u00f3polis \u2013 SC \u2013 Brazil \n\n \nDepartamento de Inform\u00e1tica e Estat\u00edstica \n\nUniversidade Federal de Santa Catarina (UFSC) \u2013 Florian\u00f3polis, SC \u2013 Brazil \nrafa86@inf.ufsc.br \n\n \nResumo. Este artigo mostra uma t\u00e9cnica de se garantir uma melhor toler\u00e2ncia a falhas para \n\naplica\u00e7\u00f5es web, principalmente aplica\u00e7\u00f5es web 2.0. Para garantir esta maior toler\u00e2ncia, \n\nforam utilizadas t\u00e9cnicas de clusteriza\u00e7\u00e3o de servidores de aplica\u00e7\u00e3o Jboss, juntamente com \n\nreplica\u00e7\u00e3o de banco de dados utilizando Mysql. Adicionalmente o artigo faz verifica\u00e7\u00f5es de \n\ndesempenho na arquitetura proposta, para verificar seu uso real. \nPalavras chave: Web 2.0, Toler\u00e2ncia a Falhas, Clusteriza\u00e7\u00e3o de Jboss, Mysql. \n\n \n\nAbstract. This article shows a technique to ensure a better fail tolerance for web \n\napplications, especially web 2.0 applications. To ensure that greater tolerance were used \n\ntechniques of clustering application server Jboss, along with database replication data \n\nusing Mysql. Additionally the article makes checks of performance in the proposed \n\narchitecture, to verify actual usage. \n\nKeywords: Web 2.0, Fault-Tolerance, Jboss Clustering, Mysql. \n\n \n\n1 Introdu\u00e7\u00e3o \n\nEstamos presenciando um crescimento cada vez maior da Internet, aonde praticamente \ntudo em nossas vidas pode ser feito pela mesma. E isso fez com que surgisse uma forte \ndemanda de novas plataformas para desenvolvimento de aplica\u00e7\u00f5es  Web, por exemplo, \nInternet banking, e-commerce, e-learning e etc. Todos estes s\u00e3o exemplos reais que aplica\u00e7\u00f5es \nweb t\u00eam crescido muito e que continuar\u00e3o assim no futuro. \n\nAtualmente estamos vivendo a fase em que todos sistemas, al\u00e9m de robustos e \nconfi\u00e1veis, devem ser amigaveis para os usu\u00e1rios finais. A chamada Web 2.0, aonde a \nintera\u00e7ao do usu\u00e1rio com seus sistemas se torna f\u00e1cil, amigavel e muito mais interessante, \u00e9 \num exemplo dessa nova tend\u00eancia. \n\nPor\u00e9m, atualmente a maioria das aplica\u00e7\u00f5es desenvolvidas n\u00e3o oferece suporte com \ngarantias de tol\u00earancia a falhas. Como por exemplo, se um de seus servidores desliga por \nalguma falha, o sistema deixa de funcionar. Desta forma, a comunidade cientifica da \u00e1rea tem \nproposto diversas solu\u00e7\u00f5es tecnol\u00f3gicas para desenvolvimento de aplica\u00e7\u00f5es tolerante a faltas \npara garantir que mesmo em caso de algumas falhas parciais os sistemas possam continuar \noperacionais. \n\nGarantias de toler\u00e2ncia a faltas tem sido muito estudadas, mas somente para sistemas \ncr\u00edticos, e hoje em dia tem aumentado a necessidade de se ter essas garantias em sistemas \nweb, para o funcionamento correto dos mesmos. \n\n\n\n84 \n\n \n\nEste artigo visa realizar um estudo de t\u00e9cnicas de toler\u00e2ncia a faltas para sistemas web \n2.0. A arquitetura proposta neste trabalho garantir\u00e1 a toler\u00e2ncia a faltas, principalmente faltas \nde parada (crash), onde acontecem erros indesejaveis ou at\u00e9 mesmo perdas devido ao \ndesligamento acidental de sistemas cr\u00edticos. \n\n2 Aplica\u00e7\u00f5es Web \n\nAplicacoes web s\u00e3o as aplica\u00e7\u00f5es desenvolvidas para serem usadas nos browsers dos \nusu\u00e1rios, sem a necessidade de nenhum outro \u201cprograma\u201d especifico, somente um acesso a \ninternet, e devido a essa simplicidade este tipo de modelo vem se popularizando cada vez \nmais entre os usu\u00e1rios da Internet. \n\nAtualmente a maioria das solu\u00e7\u00f5es usadas pelas empresas tendem a ser web, devido ao \nfato de serem aplica\u00e7\u00f5es centralizadas em um unico servidor, e fazendo com que qualquer \nusu\u00e1rio tenha acesso a ele facilmente atrav\u00e9s de uma URI, que consiste no endere\u00e7o aonde \nfica localizada a aplica\u00e7\u00e3o na web. \n\nEstas aplica\u00e7\u00f5es tem se popularizado mais na ultima decada, devido a melhoria na \ninfraestrutura das redes e da web em si, permitindo altas velocidades de acesso para sistemas, \nfazendo assim com que se pudesse criar aplica\u00e7\u00f5es cada vez mais robustas e mais completas. \n\nPor\u00e9m, as aplica\u00e7\u00f5es web est\u00e3o atualmente sofrendo grandes altera\u00e7\u00f5es, pois al\u00e9m de \ncompletas e robustas, os usu\u00e1rios est\u00e3o demandando que as mesmas sejam cada vez mais \nintuitivas e f\u00e1ceis de usar, e isso tem se tornado um ponto vital para aplica\u00e7\u00f5es web.  \n\nE nesta tend\u00eancia estamos vivendo a web 2.0, que se baseia completamente na id\u00e9ia de \nque os sistemas devem ter um alta usabilidade, ou seja, devem ser faceis de usar, e sempre \nintuitivos para os usu\u00e1rios, al\u00e9m de serem cada vez mais bem elaborados, aonde as novas \ntecnologias tem se mostrado muito eficiente. \n\nUmas das tecnologias atuais mais conhecidas para a web 2.0 \u00e9 o Flex, uma linguagem de \nprograma\u00e7\u00e3o desenvolvida pela Adobe, que \u00e9 baseada em Action Script para programar a \nparte de interface com o usu\u00e1rio. O Flex forma arquivos swf(flash) para gerar a intera\u00e7\u00e3o com \no usu\u00e1rio final, disponibilizando assim uma melhor interface para o usu\u00e1rio. \n\n3 Toler\u00e2ncia a faltas em aplica\u00e7\u00f5es web 2.0 \n\nA maioria das aplica\u00e7\u00f5es web 2.0 n\u00e3o tem suporte para toler\u00e2ncia a faltas, tornando assim \nseus servi\u00e7os vulner\u00e1veis a qualquer falha, de hardware ou software. O que torna suas \naplica\u00e7\u00f5es n\u00e3o confi\u00e1veis, pois caso algum servidor falhe a aplica\u00e7\u00e3o se torna indispon\u00edvel \npara o usu\u00e1rio. \n\nA arquitetura proposta se baseia no servidor de aplica\u00e7\u00e3o Jboss juntamente com Banco de \ndados MySql. Ela se prop\u00f5e a criar clusters de servidores de aplica\u00e7\u00e3o juntamente com \nclusters de banco de dados, garantindo assim que caso algum dos servidores caia a aplica\u00e7\u00e3o \nn\u00e3o \u201ctrave\u201d para o usu\u00e1rio. \n\nO servidor de aplica\u00e7\u00f5es jboss se trata do servidor de aplica\u00e7\u00e3o mais usado para \naplica\u00e7\u00f5es web Java no mercado, est\u00e1 no mercado a muitos anos e \u00e9 muito est\u00e1vel. Ele \noferece suporte para clusteriza\u00e7\u00e3o, cache entre outras funcionalidades que o garantem como \num dos melhores servidores do mercado. \n\n \n\n3.1 Clusteriza\u00e7\u00e3o de Servidores de Aplica\u00e7\u00e3o(Jboss) \n\nClusteriza\u00e7\u00e3o \u00e9 a possibilidade de poder rodar aplica\u00e7\u00f5es em diversos servidores, com esta \nforma, uma aplica\u00e7\u00e3o poder\u00e1 continuar rodando mesmo em caso de falha de algum dos \nservidores dispon\u00edveis dentro do cluster.  \n\n\n\n85 \n\n \n\nPara fazer clusterizacao com o Jboss, a forma mais simples \u00e9 disponibilizar v\u00e1rios \nservidores dentro de uma mesma rede, e rod\u00e1-los com a configura\u00e7\u00e3o \u2013c all. Assim todos \niniciam dentro de um cluster desta rede. \n\nAtrav\u00e9s da clusteriza\u00e7\u00e3o \u00e9 poss\u00edvel garantir que as aplica\u00e7\u00f5es tenham uma disponibilidade \nmuito maior na rede, pois ela garante que mesmo com a falha de algum servidor, a aplica\u00e7\u00e3o \ncontinuar\u00e1 rodando transparentemente para o usu\u00e1rio final. \n\nA clusteriza\u00e7\u00e3o do jboss utiliza o framework Jgroups para fazer o controle do cluster, \ntendo sempre uma maquina considerada o l\u00edder e as outras enviando requisi\u00e7\u00f5es a ele. \n\nJgroups \u00e9 um framework para comunicacao multicast confi\u00e1vel, ou seja, \u00e9 um framework \nque trabalha com grupos de maquinas trabalhando em conjunto e cont\u00e9m fun\u00e7\u00f5es de cria\u00e7\u00e3o, \ndele\u00e7\u00e3o de grupos, assim como entrar e sair dos mesmos, e tamb\u00e9m envia avisos a todos os \ncomponentes do grupo sobre sa\u00edda ou entrada de um componente neste grupo. \n\nEste framework garante que as mensagens trocadas entre os servidores do cluster \nrealmente sejam entregues entre eles, pois em caso de falha existem formas de garantir o \nenvio, como reenvio ou entao confirma\u00e7\u00e3o de recebimento do mesmo.  \n\nA arquitetura utilizada para este artigo ser\u00e1 melhor especificada na se\u00e7\u00e3o 4. \n \n\n3.2 Banco de Dados Mysql \n\n \nO banco de dados Mysql \u00e9 atualmente o banco de dados open source mais usado no \n\nmercado, demonstrando grande maturidade e tamb\u00e9m um \u00f3timo desempenho. Foi escolhido \nutilizar este banco devido ao fato de ser o \u00fanico banco de dados open source com \ncaracter\u00edsticas de replica\u00e7\u00e3o e clusteriza\u00e7\u00e3o de dados nativo, tendo em vista que os outros \nbancos estudados tamb\u00e9m tem essa possibilidade, por\u00e9m s\u00e3o solu\u00e7\u00f5es desenvolvidas por \nterceiros, sem ter a garantia de funcionamento das mesmas. \n\nPara instala\u00e7\u00e3o do banco de dados foram usadas configura\u00e7\u00f5es padr\u00f5es de instala\u00e7\u00e3o. A \npartir disso foram feitas as configura\u00e7\u00f5es do cluster de banco de dados conforme mostrado \nabaixo. \n\n \n\n3.3 Clusteriza\u00e7\u00e3o de MySql \n\n \nMySQL Cluster \u00e9 um banco de dados de alta disponibilidade constru\u00eddo utilizando um \n\numa arquitetura \u00fanica e interface SQL padr\u00e3o. O sistema consiste de um n\u00famero de processos \nde comunica\u00e7\u00e3o, ou n\u00f3s que podem ser distribu\u00eddas atrav\u00e9s de m\u00e1quinas para garantir a \ndisponibilidade cont\u00ednua em caso de falha de servidor ou rede. MySQL Cluster usa um \nmecanismo de armazenagem, que consiste em um conjunto de dados n\u00f3s para armazenamento \nde dados que pode ser acessado atrav\u00e9s do padr\u00e3o SQL com o MySQL ou atrav\u00e9s do NDB \nAPI para acesso em tempo real. \n A API NDB \u00e9 uma linguagem de programa\u00e7\u00e3o para aplica\u00e7\u00f5es orientada a objetos \npara o Cluster Mysql que implementa indexs, busca, transa\u00e7\u00f5es e tratamentos de eventos. \n O cluster de Mysql garante a toler\u00e2ncia a faltas em qualquer n\u00f3 do cluster, para isso, \nele se auto reconfigura para garantir seu funcionamento.  \n\n4 Arquitetura proposta \n\nPara a garantia a toler\u00e2ncia a faltas de hardware, a solu\u00e7\u00e3o mais utilizada atualmente \u00e9 \na clusteriza\u00e7\u00e3o ou replica\u00e7\u00e3o de hardware, que apesar de ser custosa, pois necessidade \nredund\u00e2ncia de hardwares se mostra eficiente neste ponto. \n\n\n\n86 \n\n \n\nA arquitetura proposta neste artigo se baseia em clusteriza\u00e7\u00e3o de servidores de \naplica\u00e7\u00e3o Jboss juntamente com replica\u00e7\u00e3o de dados Mysql, conforme mostrado figura \nabaixo. \n\n \n \n\n \nFigura 1: Arquitetura proposta \nFonte: \n \nEsta arquitetura est\u00e1 dividida em tr\u00eas camadas, que s\u00e3o a camada Cliente, camada de \nAplica\u00e7\u00e3o e camada de Dados. Cada camada ser\u00e1 melhor especificada nas pr\u00f3ximas se\u00e7\u00f5es. \n \n\n4.1 Camada Cliente \n\nA camada de Cliente consiste na parte aonde usu\u00e1rio final realmente participa, ou seja, onde \nficaria o \u201cconsumidor\u201d da aplica\u00e7\u00e3o, por se tratar de uma aplica\u00e7\u00e3o web, o consumidor dela \u00e9 \no pr\u00f3prio browser do usu\u00e1rio, fazendo assim que para acessar a aplica\u00e7\u00e3o ele necessite \nsomente uma conex\u00e3o a internet. A camada de cliente envia sempre dois requests para os \nservidores replicados, para garantir que o mesmo request seja recebido pelos backups. \n \n\n4.2 Camada de Aplica\u00e7\u00e3o \n\nA camada de Aplica\u00e7\u00e3o consiste em dois servidores que cont\u00e9m configurado neles o servidor \nHTTP Apache, o servidor Apache est\u00e1 no mercado desde 1996, e atualmente \u00e9 o servidor \nmais est\u00e1vel e mais utilizado, sempre se mantendo atualizado com os padr\u00f5es HTTP. \nJuntamente com o servidor Apache existe seu complemento o mod_jk, que consiste em um \ncomplemento usado para se trabalhar com o servidor Apache juntamente  com servlets, \nespecialmente servlets Java. O mod_jk \u00e9 um conector usado pelo Apache para se conectar ao \nservidor de aplica\u00e7\u00e3o Apache Tomcat usando o protocolo de comunica\u00e7\u00e3o AJP. Neste \nservidor ocorre o load balancing das aplica\u00e7\u00f5es, ou seja, ele seleciona qual dos servidores ir\u00e1 \n\n\n\n87 \n\n \n\nretornar a resposta para o browser do usu\u00e1rio. O mod_jk trabalha com loading balance feito \npor java, aonde ele tem a listagem de servidores dispon\u00edveis para acesso e a partir de um \nalgoritmo chamado Round Robin ele seleciona o mais apropriado para dar a resposta a esse \nusu\u00e1rio. Nele tamb\u00e9m \u00e9 configurado uma op\u00e7\u00e3o chamada sticky sessions, que se trata de uma \nconfigura\u00e7\u00e3o que diz que um request feito por algum browser ser\u00e1 sempre respondido pelo \nmesmo servidor, isso \u00e9 utilizado para diminuir o overheading entre os servidores de aplica\u00e7\u00e3o \npara replicar os dados das sess\u00f5es dos usu\u00e1rios. \n\nEstes servidores trabalham em cluster utilizando o Jgroups que ser\u00e1 melhor explicado \nabaixo, eles trabalham em cluster de forma que mant\u00e9m todos os dados de todas as sess\u00f5es de \nusu\u00e1rios que est\u00e3o usando o sistema em todos eles, ou seja, ocorre uma replica\u00e7\u00e3o das sess\u00f5es \nde usu\u00e1rios, ele procedimento \u00e9 chamado de State Replication. \n\nOs servidores mant\u00e9m uma lista de todos ips onde est\u00e3o os outros servidores, e assim \nele enviam requisi\u00e7\u00f5es ips para os outros com os dados necess\u00e1rios referentes as sess\u00f5es dos \nusu\u00e1rios. Isso garante que em caso de falha em alguns dos servidores, qualquer outro poder\u00e1 \ncontinuar tratando a sess\u00e3o do usu\u00e1rio corretamente sem que o mesmo perceba a falha \nocorrida.  \n\nAl\u00e9m dos servidores com o Apache, na camada de Aplica\u00e7\u00e3o cont\u00e9m mais dois \nservidores com o container Jboss, trabalhando em cluster, comunicando-se entre si. O \ncontainer Jboss. O jboss cont\u00e9m internamente a ele, o servidor de aplica\u00e7\u00f5es Tomcat, tamb\u00e9m \ndesenvolvido pela Apache, o Tomcat trata-se do servidor de aplica\u00e7\u00e3o mais utilizado no \nmercado em conjunto com o Jboss, pois trabalha de acordo com as espefica\u00e7\u00f5es W3C, e \ntamb\u00e9m trabalha de forma otimizada com o servidor HTTP Apache. Nestes servidores \u00e9 \naonde a aplica\u00e7\u00e3o est\u00e1, ou seja, \u00e9 neste servidor aonde ocorre o deploy da aplica\u00e7\u00e3o. \n\nO cliente final nunca ve este servidor, ele somente se comunica com os servidores \naonde est\u00e1 configurado o servidor Apache, e o mesmo redireciona para estes servidores. \n \n4.2.1 Jgroups \n \nJgroups \u00e9 uma ferramenta para envio de mensagens multicast confi\u00e1vel. Ele se baseia na \ncomunica\u00e7\u00e3o P2P entre os nodes dos clusteres, ele pode ser baseado nos seguintes protocolos \nde comunica\u00e7\u00e3o: UDP, TCP e JMS. A principal caracter\u00edstica do mesmo \u00e9 a garantia de envio \ndas mensagens entre os nodes, em caso de falha de alguma mensagem, ela ser\u00e1 reenviada. \n\nJgroups tamb\u00e9m trabalha com o grupo, ou seja, ele controla todo o cluster, mantendo \nsempre uma lista atualizada de quem est\u00e1 conectado ou n\u00e3o no cluster, e quando h\u00e1 entrada de \nalgum novo node, ele avisa a todos os outros para atualizarem sua listagem. \nA arquitetura do Jgroups \u00e9 especificada conforme mostrado abaixo:  \n \n\n\n\n88 \n\n \n\n \nFigura 2: Arquiteura Jgroups \nFonte: http://www.jgroups.org/manual/html/ch01.html#ArchitectureFig \n \n\nA arquitetura consiste em tr\u00eas partes: \n \n\n1. A API channel de comunica\u00e7\u00e3o entre a aplica\u00e7\u00e3o e o Jgroups. \n2. O Building Blocks que servem para facilitar o uso do Jgroups e dar uma maior \n\nabstra\u00e7\u00e3o para quem usar o framework. Nesta camada tamb\u00e9m \u00e9 aonde \u00e9 \nimplementado os protocolos de garantia de envio das mensagens. \n\n3. E o Protocol Stack, que consiste na implementa\u00e7\u00e3o da comunica\u00e7\u00e3o especificada pela \ncanal. \n\n \nJgroups \u00e9 atualmente o framework mais utilizado para a comunica\u00e7\u00e3o confi\u00e1vel entre grupos, \nutilizado no Jboss, Tomcat, Jetty, entre outros casos de sucesso. \n \n\n4.3 Camada de Banco de Dados \n\n \nA camada de Banco de dados consiste em mais dois servidores aonde somente roda o banco \nde dados Mysql. Estes servidores se comunicam entre si de forma master-slave, para garantir \na replica\u00e7\u00e3o de dados sempre atualizada. Ou seja, \u00e9 criado um cluster de banco de dados \nutilizando Mysql. \nA camada de Aplica\u00e7\u00e3o se comunica com esta camada utilizando JDBC, que se trata de uma \ninterface para conectar Java a banco de dados. A camada de aplica\u00e7\u00e3o ao tentar se comunicar \ncom o banco de dados, caso o servidor principal esteja fora do ar, a aplica\u00e7\u00e3o se comunica \ncom o proximo servidor de banco de dados do cluster. \n \n \n \n\n\n\n89 \n\n \n\n5 Desenvolvimento \n\n \nNos pr\u00f3ximos t\u00f3picos ser\u00e3o explicados os procedimentos desenvolvidos para o \n\nfuncionamento da arquitetura que est\u00e1 sendo proposta neste artigo \n \n\n5.1 Configura\u00e7\u00e3o da arquitetura proposta \n\n \nPara configurar os servidores utilizados na arquitetura proposta foram feitos os seguintes \npassos. \n \n \n5.1.1 Configura\u00e7\u00f5es dos servidores de aplica\u00e7\u00e3o(servidor 3, servidor 4, \n\nservidor 5, servidor 6) \n \n\nOs servidores do cluster ser\u00e3o chamados de node 1 e node 2, e neles rodar\u00e1 os \nservidores de aplica\u00e7\u00e3o (jboss), o IP interno do servidor 3 \u00e9 192.168.1.159, do servidor 4 \u00e9 \n192.168.1.158, do servidor 5 \u00e9 192.168.1.8 e do servidor 6 \u00e9 192.168.1.2. Primeiramente para \nrodar um cluster no servidor jboss \u00e9 somente necess\u00e1rio inicia-lo com a configura\u00e7\u00e3o all que \nassim ele ter\u00e1 as configura\u00e7\u00f5es necess\u00e1rias para o cluster. \n\nSer\u00e3o formados dois cluster, um utilizando o servidor 3 e servidor 4 e outro utilizando \no servidor 5 e servidor 6, portanto somente essas maquinas se comunicar\u00e3o entre si, e assim o \nservidor 3 n\u00e3o ter\u00e1 comunica\u00e7\u00e3o com servidor 5 e assim por diante. \n\nAp\u00f3s isso, \u00e9 necess\u00e1rio configurar os dados referentes a localiza\u00e7\u00e3o, nome e outros \ndados de cada node do cluster, e para isso, o jboss utiliza o Jgroups, e para a configura\u00e7\u00e3o \ndeste cluster foram usadas as seguintes configura\u00e7\u00f5es. Estas configura\u00e7\u00f5es s\u00e3o feitas no \narquivo JBOSS_HOME\\server\\all\\deploy\\ cluster-service.xml. \n\n\n\n90 \n\n \n\n \nFigura 3: Configura\u00e7\u00e3o do Node 1 do cluster \nFonte: Adaptado por ANDRADE, Rafael \n\n \n\nPara a aplica\u00e7\u00e3o do cluster, foi escolhido a op\u00e7\u00e3o de utilizar as configura\u00e7\u00f5e usando \nTCP, pois apesar de ter uma carga maior na rede, ele garante melhor a entrega dos pacotes \nentre os servidores. \n\nAs principais configura\u00e7\u00f5es usadas ser\u00e3o explicadas abaixo: \n\u2022 TCP - identifica que o sistema usar\u00e1 o protocolo TCP para fazer a \n\ncomunica\u00e7\u00e3o entre os nodes; \n\u2022 TCPPING \u2013 identifica o protocolo usado para fazer a busca dos servidores \n\ndisponiveis para o Cluster; \n\u2022 MERGE2 \u2013 \u00e9 usado para que em caso de falha da rede, os coordenadores dos \n\ngrupos possam restaurar o cluster; \n\u2022 FD_SOCK \u2013 identifica o tipo de dectec\u00e7\u00e3o de falha usado no cluster;  \n\u2022 VERIFY_SUSPECT \u2013 identifica o que leva um cluster a identificar outro \n\ncomo suspeito de estar em falha; \n\u2022 pbcast.NAKACK \u2013 Identifica a forma de garantia de entrega das mensagens \n\nusadas no cluster; \n\n\n\n91 \n\n \n\n\u2022 pbcast.GMS \u2013 identifica a forma usada para garantir a entrada de novos nodes \nno cluster; \n\n\u2022 pbcast.STABLE \u2013 Identifica que est\u00e1 sendo usado um garbagge collector para \ntodo cluster, pois se for guardar todas as mensagens enviadas entre os nodes, \npoder\u00e1 ocorrer uma falta de mem\u00f3ria nos nodes; \n\n\u2022 pbcast.STATE_TRANSFER \u2013 identifica que cada node novo que entrar no \ncluster ir\u00e1 receber o estado do cluster. \n\n \nE assim o primeiro servidor est\u00e1 pronto para rodar em cluster, faltando somente \n\nconfigurar o segundo servidor do cluster, o node 2. \nPara configurar o node 2 do cluster, se utiliza as mesmas configura\u00e7\u00f5es do node 1, mudando \nsomente o IP de identifica\u00e7\u00e3o dos servidores, e assim sua configura\u00e7\u00e3o ficar\u00e1 conforme \nmostrado a seguir: \n\n \n\n \n\nFigura 4: Configura\u00e7\u00e3o do Node 2 do cluster. \nFonte: Adaptado por ANDRADE, Rafael \n\n \n\n\n\n92 \n\n \n\n Com estas configura\u00e7\u00f5es citadas acima, estar\u00e1 pronto a configura\u00e7\u00e3o do \ncluster, e ao iniciar os servidores, poder\u00e1 se verificar ambos se comunicando. A figura a \nseguir exemplifica essa comunica\u00e7\u00e3o: \n\n \n\nFigura 5: Exemplo do Cluster para onde que est\u00e1 entrando \nFonte: Adaptado por ANDRADE, Rafael \n \n\n \n\nFigura 6: Exemplo de um coordenador do Cluster \nFonte: Adaptado por ANDRADE, Rafael \n \n\nLembrando que para iniciar os servidores \u00e9 necess\u00e1rio somente ir na pasta \nJBOSS_HOME\\bin e executar o comando run \u2013c all \u2013b 0.0.0.0. \n\nO comando \u2013c all identifica que ser\u00e1 rodado o servidor com todas as configura\u00e7\u00f5es de \ncluster e cache, e a identifica\u00e7\u00e3o \u2013b 0.0.0.0 se fez necess\u00e1rio para que as m\u00e1quinas se \nidentifiquem na rede, sem isso o cluster n\u00e3o se \u201cencontra\u201d. \n\nPara adicionar novas aplica\u00e7\u00f5es no cluster, a melhor forma de fazer \u00e9 usar o Farm \nDeploy do Jboss, pois ele garante que todos os sistemas rodando em todos os n\u00f3s do cluster \nser\u00e3o iguais. Ele funciona de forma que ao colocar uma aplica\u00e7\u00e3o na pasta \nJBOSS_HOME\\server\\all\\farm, e assim ele inicializar\u00e1 a aplica\u00e7\u00e3o e  tamb\u00e9m enviara esta \n\n\n\n93 \n\n \n\naplica\u00e7\u00e3o para todos nodes do cluster, para que assim o outros nodes tamb\u00e9m tenham a \naplica\u00e7\u00e3o. \n\nE assim o clusteriza\u00e7\u00e3o de servidores estar\u00e1 pronta. As configura\u00e7\u00f5es mostradas se \nrepetem para o servidor 5 e servidor 6, por isso nao foram mostradas. \n \n5.1.2 Configura\u00e7\u00e3o dos servidores de Banco de dados \n \n\nPara configurar a replica\u00e7\u00e3o de dados nos banco de dados, foram feitos alguns passos, \nque ser\u00e3o explicados abaixo.  \n\n \n\nConfigura\u00e7\u00e3o do Master \n \n \n\nAo iniciar a configura\u00e7\u00e3o de replicacao de dados no mysql, \u00e9 necess\u00e1rio primeiramente \nconfigurar o servidor que ser\u00e1 considerado o \u201cmaster\u201d, ou seja, todas as requisi\u00e7\u00f5es da \naplica\u00e7\u00e3o ser\u00e3o enviados para ele, e ele repassar\u00e1 essas requisi\u00e7\u00f5es para os bancos de dados \n\u201cslaves\u201d. Devido um dos requisitos inicialmente especificados para o sistema, todos \nservidores dever\u00e3o ser Windows, por isso as configura\u00e7\u00f5es mostradas s\u00e3o para servidores \nWindows, tendo alguma diferen\u00e7a para servidores usando Linux. \n\nPor conven\u00e7\u00e3o, vamos chamar a pasta aonde foi instalado o Mysql de MYSQL_HOME. \nAssim, inicia-se alterando o arquivo my,ini, que fica no diret\u00f3rio \n\nMYSQL_HOME\\MySQL Server 5.1\\my.ini, neste arquivo est\u00e3o as principais configura\u00e7\u00f5es \ndo banco de dados, como o tipo de dados que ser\u00e3o usado, charset, entre outros. Incialmente \u00e9 \nnecess\u00e1rio configurar o banco para que use a rede, portanto se fez necess\u00e1rio retirar as \nseguintes linhas da configura\u00e7\u00e3o: \n\n \n\n \nFigura 7: Configurando o networking \nFonte: Adaptado por ANDRADE, Rafael \n \n \nAp\u00f3s isso, \u00e9 necess\u00e1rio dizer ao banco qual database ele dever\u00e1 ter logs (para \n\nposteriormente serem lidos pelos servidores slaves). Como neste trabalho desejamos \nconfigurar a replica\u00e7\u00e3o para a base \u201cdireseg\u201d, as configura\u00e7\u00f5es de log ficaram como mostra a \nimagem abaixo: \n\n \nLog-bin = C:/mysql-bin.log \nBinlog-do-db=direseg \nServer-id=l \n \nAp\u00f3s alterar estas configura\u00e7\u00f5es, \u00e9 necess\u00e1rio reiniciar o banco de dados, para que \n\nassim ele comece a utilizar o log. Seguido a estas configura\u00e7\u00f5es, \u00e9 necess\u00e1rio obter as \ninforma\u00e7\u00f5es sobre o arquivo de log usado pelo banco de dados \u201cmaster\u201d, para poder \nposteriormente configurar os \u201cslaves\u201d, e isso se faz usando os seguintes comando no mysql: \n\n \nUSE direseg; \nFLUSH TABLES WITH READ LOCK; \nSHOW MASTER STATUS; \n \nAo executar isto, foi obtido a seguinte resposta \n \n\n\n\n94 \n\n \n\n \nFigura 8: Exemplo de resposta do Mysql \nFonte: Adaptado por ANDRADE, Rafael \n\n \n\u00c9 importante anotar os dados que aparecem, pois eles dever\u00e3o ser usados \n\nposteriormente para configurar os slaves. \nAp\u00f3s isto, o banco de dados \u201cmaster\u201d da replica\u00e7\u00e3o est\u00e1 pronto. Agora falta somente \n\nconfigurar os slaves. \n \n\nConfigura\u00e7\u00e3o dos Slaves \n \n\nPara configurar os \u201cslaves\u201d, primeiramente \u00e9 necess\u00e1rio criar o database direseg nos \nmesmo, e ap\u00f3s isso, \u00e9 necess\u00e1rio alterar as configura\u00e7\u00f5es do arquivo my.ini para informar os \ndados referentes a replica\u00e7\u00e3o e localiza\u00e7\u00e3o do servidor \u201cm\u00e1ster\u201d. A figura abaixo ilustar as \nconfigura\u00e7\u00f5es usadas no servidor \u201cslave\u201d. \n\n \nFigura 9: Configura\u00e7\u00e3o do banco de dados \u201cslave\u201d \nFonte: Adaptado por ANDRADE, Rafael \n\n \n \nAp\u00f3s aplicar as configura\u00e7\u00f5es, \u00e9 necess\u00e1rio reiniciar o banco de dados. E assim, para \n\nque o \u201cslave\u201d esteja em conformidade com o \u201cm\u00e1ster\u201d, se utiliza o seguinte comando:  \n \nLOAD DATA FROM MASTER; \n \nE assim, o \u201cslave\u201d ter\u00e1 todos os dados do banco \u201cmaster\u201d, dados somente do schema \n\n\u201cdireseg\u201d, pois \u00e9 o \u00fanico que interessa para no momento. \nAp\u00f3s isso, \u00e9 necess\u00e1rio para a thread Slave do banco de dados, para atualizar as \n\ninforma\u00e7\u00f5es referentes ao arquivo de log e posi\u00e7\u00e3o do arquivo do m\u00e1ster (os dados obtidos \nanteriormente com o comando SHOW MASTER STATUS;), e para isso foi executado o \ncomando: \n\n \nSLAVE STOP; \n\n\n\n95 \n\n \n\n \nE logo ap\u00f3s o comando: \n\nCHANGE MASTER TO MASTER_HOST='192.168.1.153', MASTER_USER='root', \nMASTER_PASSWORD='jexpadm', MASTER_LOG_FILE=\u2019mysql-bin.000002\u2019, \nMASTER_LOG_POS=106;  \n\n Este comando adiciona ou altera as configura\u00e7\u00f5es dos referentes ao banco de dados \nm\u00e1ster. E as vari\u00e1veis usadas s\u00e3o: \n\n\u2022 MASTER_HOST \u2013 IP da m\u00e1quina que possui o banco de dados m\u00e1ster \n\u2022 MASTER_USER \u2013 usu\u00e1rio que est\u00e1 na m\u00e1quina m\u00e1ster, que ser\u00e1 usado para obter os \n\ndados. \n\u2022 MASTER_PASSWORD \u2013 senha do usu\u00e1rio. \n\u2022 MASTER_LOG_FILE \u2013 qual arquivo est\u00e1 sendo usado pelo m\u00e1ster para salvar todas \n\nas transa\u00e7\u00f5es feitas nele. \n\u2022 MASTER_LOG_POS \u2013 posi\u00e7\u00e3o a qual o arquivo ser\u00e1 lido para manter sempre \n\natualizado. \n\n Com estas configura\u00e7\u00f5es prontas, \u00e9 apenas necess\u00e1rio executar o comando: \n\n START SLAVE; \n\n E assim a replica\u00e7\u00e3o entre os servidores est\u00e1 pronta, todas requisi\u00e7\u00f5es e transa\u00e7\u00f5es que \nocorrerem no banco de dados m\u00e1ster ser\u00e1 replicada para os slaves. Lembrando que para fazer a \nreplica\u00e7\u00e3o, \u00e9 necess\u00e1rio uma rede local, e a porta 3306 dever\u00e1 estar liberada no firewall, pois \no firewall do Windows bloqueia esta porta para conex\u00f5es externas. \n\nE com estas configura\u00e7\u00f5es ficar\u00e1 pronto a replica\u00e7\u00e3o de dados usando Mysql. \nLembrando que as configura\u00e7\u00f5es se repetem nos dois n\u00f3s do cluster, alterando somente o ip \ndas m\u00e1quinas usadas. \n\n \n\n5.2 Avalia\u00e7\u00e3o de Desempenho \n\n \n \n\nVisando verificar o desempenho da infra-estrutura proposta foram executados testes \nem uma rede local de 10Mbps compostas por computadores Intel Dual Core de 1.6 GHz com \n2Gb de mem\u00f3ria RAM e sistema operacional Microsoft Windows XP. Os computadores \nforam configurados conforme mostrado na arquitetura proposta mostrada anteriormente. \n\nA primeira analise de desempenho feita nesta arquitetura foi o tempo de resposta a \numa requisi\u00e7\u00e3o enviada ao servidor comparada com o n\u00famero de servi\u00e7os dispon\u00edveis no \ncluster. A mensagem enviada para o servidor foi uma requisi\u00e7\u00e3o HTTP, e a resposta do \nservidor \u00e9 sempre uma resposta de cont\u00e9m 0 bytes, tendo somente os bytes do protocolo \nHTTP. De acordo com o gr\u00e1fico abaixo, quando se tem somente um servi\u00e7o o tempo de \nresposta do servidor \u00e9 de 40ms(milisegundos), e quando se coloca mais um servi\u00e7o no cluster, \no n\u00famero praticamente dobra, passando a ~70ms, e assim se percebe um crescimento com o \nn\u00famero de servi\u00e7os. Os testes foram executados com mensagens de tamanho de 0-256k-512k \nbytes, e os resultados completos est\u00e3o mais especificados abaixo. \n\n\n\n96 \n\n \n\nTempo de Resposta x N\u00famero de Servi\u00e7os\n\n0,00\n\n20,00\n\n40,00\n\n60,00\n\n80,00\n\n100,00\n\n120,00\n\n140,00\n\n1 Servi\u00e7o 2 Servi\u00e7os 3 Servi\u00e7os\n\nN\u00famero de servi\u00e7os\n\nT\ne\n\nm\np\n\no\n d\n\ne\n r\n\ne\ns\n\np\no\n\ns\nta\n\n(m\ns\n\n)\n\n0 bytes\n\n256 kbytes\n\n512 kbytes\n\n \nFigura 10: Desempenho do servi\u00e7o. \nFonte: Adaptado por Andrade, Rafael \n\n \n \n\nOutra an\u00e1lise de desempenho feita foi a de tempo de resposta considerando o n\u00famero \nde clientes fazendo a requisi\u00e7\u00e3o ao servidor. A mensagem a ser enviada foi de 512Kbytes, que \nseria a simula\u00e7\u00e3o de uma listagem no servidor. O n\u00famero de cliente variou entre 10 e 80 \nclientes. Tamb\u00e9m foram feitos de acordo com o n\u00famero de servi\u00e7os dispon\u00edveis. Para fazer \nestes testes, foi implementado um client em Java, que cria threads de disparo de requisi\u00e7\u00f5es \npara o servidor, cada thread envia 100 requisi\u00e7\u00f5es ao servidor, e ap\u00f3s isso \u00e9 calculado o \ntempo m\u00e9dio de resposta entre essas requisi\u00e7\u00f5es. O unico problema identifica nesta \nabordagem \u00e9 que o java tem um tempo de resposta maior do que o Flex, por isso os dados \nficaram acima do que realmente seria calculado usando clients em Flex. Os resultado obtidos \nest\u00e3o mostrados no gr\u00e1fico abaixo \n\n\n\n97 \n\n \n\nTempo de Resposta x N\u00famero de Clientes\n\n0\n\n50\n\n100\n\n150\n\n200\n\n250\n\n10 CLIENTS 20 CLIENTS 30 CLIENTS 40 CLIENTS 50 CLIENTS 60 CLIENTS 70 CLIENTS 80 CLIENTS\n\nn\u00famero de clients\n\nT\ne\n\nm\np\n\no\n d\n\ne\n R\n\ne\ns\n\np\no\n\ns\nta\n\n(m\ns\n\n)\n\n1 SERVI\u00c7O\n\n2 SERVI\u00c7OS\n\n3 SERVIC\u00c7OS\n\n \nFigura 10: Desempenho do servi\u00e7o x N\u00famero de Clientes. \nFonte: Adaptado por Andrade, Rafael \n \n\nComo pode ser visto no grafico, a tempo de resposta aumenta de forma est\u00e1vel de \nacordo com o n\u00famero de clientes enviando requisi\u00e7\u00f5es, pode-se comprovar uma m\u00e9dia de \naumento de cerca de 15% no tempo de resposta para cada aumento de 10 Clientes enviando \nrequisi\u00e7\u00f5es, o que \u00e9 considerado um desempenho muito bom para aplica\u00e7\u00f5es web. Sendo que \numa requisi\u00e7\u00e3o chegando at\u00e9 80ms \u00e9 praticamente imperceptivel para o ser humano, e o maior \ntempo de resposta obtido \u00e9 ~200ms. \n\nN\u00e3o \u00e9 poss\u00edvel calcular especificamente o overhead causado para detector de falhas usado \nno servidor Jboss, mas de acordo com o que foi especificado na documenta\u00e7\u00e3o do pr\u00f3prio \nservidor, o overhead causado pelos detectores de falhas \u00e9 praticamente nulo, aumentando de 2 \na 5 porcento somente o tempo de resposta a uma requisi\u00e7\u00e3o.  \n\n \n\n6 Conclus\u00e3o \n\n \nEste artigo mostrou uma proposta de arquitetura para se garantir a maior disponibilidade \n\nem aplica\u00e7\u00f5es Web 2.0, visto que atualmente, os usu\u00e1rios est\u00e3o cobrando cada vez mais \nqualidade nos servi\u00e7os oferecidos a eles, garantindo seu alto desempenho assim como a sua \ndisponibilidade. A arquitetura proposta garante as falhas de hardware que possam acontecer \nno servidor, assim como tamb\u00e9m pode garantir a falhas de programa\u00e7\u00e3o da pr\u00f3rpria aplica\u00e7\u00e3o, \ncolocando-se aplica\u00e7\u00f5es programadas de formas diferentes em servidores diferentes. \n\nDe acordo com os testes executados pode-se perceber que a arquitetura apesar de usar \nbastante replica\u00e7\u00e3o de dados, se mostrou com um alto desempenho, garantindo assim sua \nqualidade para a Web 2.0 que cada vez mais necessita altos desempenhos para as aplica\u00e7\u00f5es. \n\nUm dos maiores problemas encontrados nessa arquitetura \u00e9 o custo de implanta\u00e7\u00e3o da \nmesma, pois para garantir sua funcionalidade real \u00e9 necess\u00e1rio muitos servidores diferentes.  \n \n\n\n\n98 \n\n \n\nRefer\u00eancias Bibliogr\u00e1ficas \n\n \nWIKIPEDIA. Dispon\u00edvel em: http://en.wikipedia.org/wiki/Replication_(computer_science). Acesso em: 12 \n\njul. 2008. \n \nCLUSTER BANCO DE DADOS. Dispon\u00edvel em: \n\nhttp://www.docs.mussicorp.net/guiacluster/clusterbancodedados.php. Acesso em: 12 jul. 2008 \n \nREPLICATION AND DATABASE MIRRORING. Dispon\u00edvel em: http://msdn.microsoft.com/en-\n\nus/library/ms151799.aspx. Acesso em: 22 jul. 2009. \n \nDISTRIBUTED DATABASE. Dispon\u00edvel em: http://en.wikipedia.org/wiki/Distributed_database. Acesso \n\nem 15 ago. 2008 \n \nOracle9i Database Administrator's Guide, Dispon\u00edvel em: \n\nhttp://www.cs.uvm.edu/oracle9doc/server.901/a90117/ds_conce.htm, Acesso em: 22 set. 2008 \n \nOracle\u00ae Database Advanced Replication 10g Release 1 (10.1). Dispon\u00edvel em: \n\nhttp://stanford.edu/dept/itss/docs/oracle/10g/server.101/b10732/toc.htm. Acesso em: 30 set. 2008 \n \nOracle Data Replication and Integration. Dispon\u00edvel em: \n\nhttp://www.oracle.com/technology/products/dataint/index.html. Acesso em: 23 abr. 2009. \n \nOracle Replication. Dispon\u00edvel em: \n\nhttp://searchoracle.techtarget.com/news/article/0,289142,sid41_gci905154,00.html?Exclusive=True. Acesso em \n23 abr. 2009. \n\n \nDatabase Oracle Advanced Replication Tutorial. Dispon\u00edvel em: http://www.roseindia.net/software-\n\ntutorials/detail/13572. Acesso em: 23 abr. 2009. \n \nDo It Yourself (DIY) Oracle replication. Dispon\u00edvel em: http://it.toolbox.com/blogs/data-ruminations/do-it-\n\nyourself-diy-oracle-replication-12894. Acesso em: 23 abr. 2009-10-26 \n \nIan Gilfillan. Database Replication in Mysql. Dispon\u00edvel em: \n\nhttp://www.databasejournal.com/features/mysql/article.php/3355201/Database-Replication-in-MySQL.htm. \nAcesso em 28 abr. 2009. \n\n \nStep-by-Step how to Setup MYSQL Database Replication. Dispon\u00edvel em: \n\nhttp://aciddrop.com/2008/01/10/step-by-step-how-to-setup-mysql-database-replication/. Acesso em: 28 abr. \n2009. \n\n \nMysql Replication. Dispon\u00edvel em: http://dev.mysql.com/doc/refman/5.0/en/replication.html. Acesso em: \n\n28 abr. 2009. \n \nFalko Timme. How To Set Up Database Replication In Mysql. Dispon\u00edvel em: \n\nhttp://www.howtoforge.com/mysql_database_replication. Acesso em: 28 abr. 2009. \n \nDaniel. Setting up database replication on Mysql. Dispon\u00edvel em: http://www.gra2.com/article.php/setting-\n\nup-database-replication-on-mysql. Acesso em: 30 abr. 2009. \n \nDatabase Replication In Mysql. Dispon\u00edvel em: http://librenix.com/?inode=8118. Acesso em: 30 abr. 2009. \n \nSlony-I 1.0.5 (PostgreSQL Database Replication). Dispon\u00edvel em: \n\nhttp://www.postgresql.org/about/news.233. Acesso em: 30 abr. 2009. \n \n\n\n\n99 \n\n \n\nPostgreSQL - Replication and High Availability. Dispon\u00edvel em: http://edoceo.com/liber/db-postgresql-\nreplication. Acesso em: 30 abr. 2009. \n\n \nPGCluster. Dispon\u00edvel em: http://pgcluster.projects.postgresql.org/. Acesso em: 30 abr. 2009. \n \nSlony-I. Dispon\u00edvel em: http://slony1.projects.postgresql.org/. Acesso em: 30 abr.2009. \n \nDBBalancer. Dispon\u00edvel em: http://sourceforge.net/projects/dbbalancer/. Acesso em 30 abr. 2009. \n \nPgPool. Dispon\u00edvel em: http://pgpool.projects.postgresql.org/. Acesso em 30 abr. 2009. \n \nPostgreSQL table comparator. Dispon\u00edvel em: http://pg-comparator.projects.postgresql.org/. Acesso em 30 \n\nabr. 2009. \n \nDatabase replication under Postgres. Dispon\u00edvel em: http://archives.postgresql.org/pgsql-interfaces/1999-\n\n12/msg00191.php. Acesso em 5 mai. 2009. \n \nDatabase Replication. Dispon\u00edvel em: http://www.cs.mcgill.ca/~kemme/disl/replication.html, Acesso em: 5 \n\nmai. 2009. \n \nPostgreSQL + Replication. Dispon\u00edvel em: \n\nhttp://www.commandprompt.com/products/mammothreplicator/. Acesso em: 5 mai. 2009. \n \nIrina Sourikova. PostgreSQL Replicator. Dispon\u00edvel em: \n\nhttp://www.google.com.br/url?sa=t&amp;source=web&amp;ct=res&amp;cd=9&amp;url=http%3A%2F%2Fwww.rhic.bnl.gov%2F\nRCF%2FUserInfo%2FMeetings%2FTechnology%2FIrina_Sourikova_techMeet.ppt&amp;ei=U70YSfuzIIyi8gTM1s\nCfCw&amp;usg=AFQjCNHdOqqGew5a31NxDnRS77YI8DMx2w&amp;sig2=pmHi-11Ra4vvvNA5e7moAA. Acesso \nem: 10 mai. 2009. \n\n \nFault-Tolerant system. Dispon\u00edvel em: http://en.wikipedia.org/wiki/Fault-tolerant_system. Acesso em: 12 \n\nmai. 2009. \n \nWalter Heimerdinger , Charles B. Weinstock. Conceptual Framework for System Fault Tolerance, A. \n\nDispon\u00edvel em: http://www.sei.cmu.edu/library/abstracts/reports/92tr033.cfm. Acesso em: 12 mai. 2009. \n \nFault Tolerance Concepts. Dispon\u00edvel em: http://hissa.nist.gov/chissa/SEI_Framework/framework_8.html. \n\nAcesso em: 12 mai. 2009. \n \nPankaj Jalote. Fault Tolerance in Distributed Systems. 1Ed. 2006. \n \nTaisy Weber. Conceitos de Dependabilidade. Dispon\u00edvel em: \n\nhttp://www.inf.ufrgs.br/~taisy/disciplinas/textos/ConceitosDependabilidade.PDF. Acesso em: 12 mai. 2009. \n \nJboss 4 Clustering Guide. Dispon\u00edvel em: \n\nhttp://www.google.com.br/url?sa=t&amp;source=web&amp;ct=res&amp;cd=2&amp;url=http%3A%2F%2Fdocs.jboss.org%2Fjboss\nas%2Fguides%2Fclusteringguide%2Fr2%2Fen%2Fpdf%2Fjboss4-\nclustering.pdf&amp;ei=Db8YSeeYKaCm8ASpvtmTCw&amp;usg=AFQjCNGhTq0da0et4y107ANECQHxC1XHmQ&amp;sig\n2=Lv0DMdrTd71O-hUuxUzl4w. Acesso em: 22 mai. 2009. \n\n \nJboss Clustering. Dispon\u00edvel em: http://docs.jboss.org/jbossas/jboss4guide/r4/html/cluster.chapt.html. \n\nAcesso em: 22 mai. 2009. \n \nIvelin Ivanov. J2EE Clustering with Jboss. Dispon\u00edvel em: \n\nhttp://onjava.com/pub/a/onjava/2003/08/20/jboss_clustering.html?page=1. Acesso em: 26 mai. 2009. \n \nSamson Kittoli. JBoss AS5 Clustering Guide. Dispon\u00edvel em: \n\nhttp://www.jboss.org/community/wiki/jbossas5clusteringguide. Acesso em: 26 mai. 2009. \n \nBrian Stansberry, Galder Zamarreno. JBoss Application Server Clustering Guide. Dispon\u00edvel em: \n\nhttp://www.jboss.org/file-\n\n\n\n100 \n\n \n\naccess/default/members/jbossas/freezone/docs/Clustering_Guide/beta422/html/index.html. Acesso em: 26 mai. \n2009. \n\n \nWeb 2.0. Dispon\u00edvel em: http://pt.wikipedia.org/wiki/Web_2.0. Acesso em: 30 ago. 2009. \n \nTim O'Reilly. What Is Web 2.0. Dispon\u00edvel em: http://oreilly.com/web2/archive/what-is-web-\n\n20.html. Acesso em: 30 ago. 2009."}]}}}