{"add": {"doc": {"field": [{"@name": "docid", "#text": "BR-TU.14667"}, {"@name": "filename", "#text": "21029_258462.pdf"}, {"@name": "filetype", "#text": "PDF"}, {"@name": "text", "#text": "UNIVERSIDADE FEDERAL DE SANTA CATARINA\nPROGRAMA DE PO?S-GRADUAC?A?O EM CIE?NCIA DA\n\nCOMPUTAC?A?O\n\nTu?lio C??cero Salvaro de Souza\n\nAspectos Te?cnicos e Teo?ricos da Gesta?o do Ciclo de\nVida de Chaves Criptogra?ficas no OpenHSM\n\nDissertac?a?o submetida a? Universidade Federal de Santa Catarina como parte dos\n\nrequisitos para a obtenc?a?o do grau de Mestre em Cie?ncia da Computac?a?o.\n\nProf. Ricardo Felipe Custo?dio, Dr.\nOrientador\n\nFloriano?polis, Outubro de 2008\n\n\n\nAspectos Te?cnicos e Teo?ricos da Gesta?o do Ciclo de Vida de\nChaves Criptogra?ficas no OpenHSM\n\nTu?lio C??cero Salvaro de Souza\n\nEsta Dissertac?a?o foi julgada adequada para a obtenc?a?o do t??tulo de Mestre em Cie?ncia\n\nda Computac?a?o, a?rea de concentrac?a?o Sistemas de Computac?a?o e aprovada em sua forma\n\nfinal pelo Programa de Po?s-Graduac?a?o em Cie?ncia da Computac?a?o.\n\nProf. Frank Augusto Siqueira, Dr.\n\nCoordenador do Curso\n\nBanca Examinadora\n\nProf. Ricardo Felipe Custo?dio, Dr.\n\nOrientador\n\nProf. Jeroen Antonius Maria van de Graaf, PhD.\n\nProf. Joni da Silva Fraga, Dr.\n\nProf. Michael Anthony Stanton, Dr.\n\nProf. Olinto Jose? Varella Furtado, Dr.\n\nProf. Renato da Silveira Martini, PhD.\n\n\n\niii\n\n\u201dMe abafa Dalila ... que eu estou abanado!\u201d\n\nMarco Aure?lio Salvaro de Souza 2005.\n\n\n\niv\n\nAo meu grande avo? Silvino.\n\n\n\nAgradecimentos\n\nPrimeiramente, gostaria de agradecer a toda minha fam??lia, principal-\n\nmente aos meus pais, Mariano e Ilda, e a Giani, que se tornou minha esposa durante\n\na execuc?a?o deste trabalho. E? o apoio de voce?s que garante o sucesso de todas minhas\n\nescolhas de vida.\n\nTambe?m sou grato ao meu orientador, professor Custo?dio, que esta?\n\npronto para ajudar a qualquer momento, mantendo sempre a situac?a?o sobre controle. Sua\n\nexperie?ncia serve de guia para os membros do LabSEC. Membros estes que, mesmo a um\n\noceano de dista?ncia, continuam apoiando e ajudando na minha caminhada de descobertas.\n\nCom certeza todos ganham muito convivendo neste ambiente de aprendizado.\n\nNa?o poderia deixar de citar minha gratida?o ao professor, tio, padrinho e\n\namigo Olinto. Ele ve?m me guiando desde a escolha do curso de graduac?a?o ideal. Nunca\n\nvou esquecer o dia que estava em sua sala, desabafando sobre o meu descontentamento\n\ncom o tema do meu trabalho de conclusa?o de curso. Ele virou pra mim e disse: \u201cpor que?\n\nvoce? na?o vai ali conversar com o Professor Custo?dio, eu acho que voce? tem o perfil para\n\ntrabalhar na a?rea de seguranc?a\u201d. Obrigado pelas dicas certas nas horas certas.\n\nE finalmente, agradec?o a Rede Nacional de Ensino e Pesquisa, entidade\n\nque ve?m promovendo o uso de tecnologias avanc?adas nas instituic?o?es parceiras, proporci-\n\nonando aos professores e pesquisadores ferramentas e meios de grande valia na pesquisa\n\ne ensino no Brasil.\n\n\n\nSuma?rio\n\nLista de Figuras x\n\nLista de Tabelas xi\n\nLista de Siglas xii\n\nLista de S??mbolos xv\n\nResumo xvi\n\nAbstract xvii\n\n1 Introduc?a?o 1\n\n1.1 Infra-estrutura de Chaves Pu?blicas para Pesquisa e Ensino . . . . . . . . 3\n\n1.2 Contextualizac?a?o das Contribuic?o?es . . . . . . . . . . . . . . . . . . . . 5\n\n1.3 Objetivos . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 8\n\n1.3.1 Objetivo Geral . . . . . . . . . . . . . . . . . . . . . . . . . . . 8\n\n1.3.2 Objetivos Espec??ficos . . . . . . . . . . . . . . . . . . . . . . . . 8\n\n1.4 Justificativa e Motivac?a?o . . . . . . . . . . . . . . . . . . . . . . . . . . 9\n\n1.5 Trabalhos Correlatos . . . . . . . . . . . . . . . . . . . . . . . . . . . . 10\n\n1.6 Organizac?a?o deste Trabalho . . . . . . . . . . . . . . . . . . . . . . . . . 11\n\n2 Hardware Criptogra?fico 12\n\n2.1 Introduc?a?o . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 12\n\n2.2 Smartcards . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 13\n\n\n\nvii\n\n2.2.1 Smartcards para HSMs . . . . . . . . . . . . . . . . . . . . . . . 14\n\n2.3 Mo?dulo de Seguranc?a Criptogra?fica (HSM) . . . . . . . . . . . . . . . . 15\n\n2.3.1 Ciclo de vida de chaves criptogra?ficas . . . . . . . . . . . . . . . 15\n\n2.3.2 Mo?dulos de Seguranc?a Criptogra?fica de Mercado . . . . . . . . . 16\n\n2.4 Conclusa?o . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 17\n\n3 Normas 20\n\n3.1 Introduc?a?o . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 20\n\n3.2 FIPS PUB 140 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 21\n\n3.2.1 Especificac?a?o do Mo?dulo Criptogra?fico . . . . . . . . . . . . . . 22\n\n3.2.2 Portas F??sicas e Interfaces Lo?gicas . . . . . . . . . . . . . . . . . 22\n\n3.2.3 Pape?is, Servic?os e Mecanismos de Autenticac?a?o . . . . . . . . . 23\n\n3.2.4 Modelo de estados finitos . . . . . . . . . . . . . . . . . . . . . 25\n\n3.2.5 Seguranc?a F??sica . . . . . . . . . . . . . . . . . . . . . . . . . . 25\n\n3.2.6 Ambiente Operacional . . . . . . . . . . . . . . . . . . . . . . . 26\n\n3.2.7 Gerenciamento de Chaves Criptogra?ficas . . . . . . . . . . . . . 27\n\n3.2.8 Interfere?ncia e Compatibilidade Eletromagne?tica . . . . . . . . . 28\n\n3.2.9 Auto-testes . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 28\n\n3.2.10 Garantia de Projeto . . . . . . . . . . . . . . . . . . . . . . . . . 29\n\n3.2.11 Mitigac?a?o de Outros Ataques . . . . . . . . . . . . . . . . . . . . 29\n\n3.3 Manual de Condutas Te?cnicas 7 (LEA/ITI) . . . . . . . . . . . . . . . . 30\n\n3.3.1 Requisitos de Especificac?a?o . . . . . . . . . . . . . . . . . . . . 31\n\n3.3.2 Portas F??sicas e Interfaces Lo?gicas . . . . . . . . . . . . . . . . . 31\n\n3.3.3 Pape?is, Servic?os e Mecanismos de Autenticac?a?o . . . . . . . . . 32\n\n3.3.4 Modelo de Estado Finito . . . . . . . . . . . . . . . . . . . . . . 32\n\n3.3.5 Seguranc?a F??sica . . . . . . . . . . . . . . . . . . . . . . . . . . 32\n\n3.3.6 Ambiente Operacional . . . . . . . . . . . . . . . . . . . . . . . 33\n\n3.3.7 Gerenciamento de Chaves Criptogra?ficas . . . . . . . . . . . . . 33\n\n3.3.8 Interfere?ncia e Compatibilidade Eletromagne?tica . . . . . . . . . 34\n\n3.3.9 Auto-testes . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 34\n\n\n\nviii\n\n3.3.10 Garantia de Projeto . . . . . . . . . . . . . . . . . . . . . . . . . 34\n\n3.3.11 Mitigac?a?o de Outros Ataques . . . . . . . . . . . . . . . . . . . . 34\n\n3.3.12 Requisitos de Gerenciamento . . . . . . . . . . . . . . . . . . . 34\n\n3.3.13 Requisitos de Interoperabilidade . . . . . . . . . . . . . . . . . . 35\n\n3.3.14 Requisitos para restric?a?o de substa?ncias nocivas . . . . . . . . . . 35\n\n3.4 Conclusa?o . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 36\n\n4 OpenSSL 37\n\n4.1 Introduc?a?o . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 37\n\n4.2 Aplicac?a?o de Linha de Comando . . . . . . . . . . . . . . . . . . . . . . 38\n\n4.3 Infra-estrutura de Suporte . . . . . . . . . . . . . . . . . . . . . . . . . . 39\n\n4.3.1 Arquivos de Configurac?a?o . . . . . . . . . . . . . . . . . . . . . 39\n\n4.3.2 Func?o?es de Callback . . . . . . . . . . . . . . . . . . . . . . . . 40\n\n4.3.3 Suporte Multi-thread . . . . . . . . . . . . . . . . . . . . . . . . 41\n\n4.3.4 Matema?tica de Precisa?o Arbitra?ria . . . . . . . . . . . . . . . . . 42\n\n4.3.5 Tratamento de Erros . . . . . . . . . . . . . . . . . . . . . . . . 43\n\n4.3.6 Abstrac?a?o de Entrada e Sa??da . . . . . . . . . . . . . . . . . . . 44\n\n4.4 Documentac?a?o . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 45\n\n4.5 Engine . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 46\n\n4.6 OpenSSL FIPS 140-2 n??vel 1 . . . . . . . . . . . . . . . . . . . . . . . . 49\n\n4.7 Conclusa?o . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 51\n\n5 ASI-HSM 53\n\n5.1 Introduc?a?o . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 53\n\n5.2 Arquitetura . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 54\n\n5.3 Aplicativos de Administrac?a?o Remota . . . . . . . . . . . . . . . . . . . 56\n\n5.4 Engine OpenSSL . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 57\n\n5.5 Conclusa?o . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 58\n\n6 OpenHSM - Operacionalizac?a?o 59\n\n6.1 Aspectos Gerais . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 60\n\n\n\nix\n\n6.2 Inicializac?a?o do HSM e criac?a?o do grupo de Administradores . . . . . . . 64\n\n6.3 Criac?a?o de um grupo de Auditores . . . . . . . . . . . . . . . . . . . . . 65\n\n6.4 Criac?a?o de um grupo de Operadores . . . . . . . . . . . . . . . . . . . . 67\n\n6.5 Criac?a?o de Chave Gerenciada . . . . . . . . . . . . . . . . . . . . . . . . 69\n\n6.6 Liberando uma Chave Gerenciada para Uso . . . . . . . . . . . . . . . . 70\n\n6.7 Troca do grupo de Administratores . . . . . . . . . . . . . . . . . . . . . 71\n\n6.8 Alterando os responsa?veis por uma chave gerenciada . . . . . . . . . . . 73\n\n6.9 Criando o ponto de confianc?a de um grupo de Operadores em relac?a?o aos\n\nAdministradores . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 74\n\n6.10 Exportac?a?o dos Registros de Atividades . . . . . . . . . . . . . . . . . . 75\n\n6.11 Limpeza dos Registros de Atividades . . . . . . . . . . . . . . . . . . . . 76\n\n6.12 Conclusa?o . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 77\n\n7 OpenHSM - Co?pias de Seguranc?a 79\n\n7.1 Preparando um HSM para ser uma unidade de backup . . . . . . . . . . . 80\n\n7.2 Importando o Certificado de Backup em HSM Operacional . . . . . . . . 81\n\n7.3 Backup . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 82\n\n7.4 Recuperac?a?o do Backup . . . . . . . . . . . . . . . . . . . . . . . . . . 84\n\n7.5 Utilizac?a?o de Mu?ltiplos Ambientes Operacionais . . . . . . . . . . . . . 86\n\n7.6 Conclusa?o . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 88\n\n8 Conclusa?o 89\n\n8.1 Resumo das Contribuic?o?es . . . . . . . . . . . . . . . . . . . . . . . . . 90\n\n8.2 Trabalhos Futuros . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 91\n\nRefere?ncias Bibliogra?ficas 92\n\nA Convenc?o?es 97\n\n\n\nLista de Figuras\n\n1.1 Contextualiza a a?rea de atuac?a?o do trabalho . . . . . . . . . . . . . . . . 6\n\n4.1 Funcionamento das func?o?es de callback, empregadas no OpenSSL. . . . . 41\n\n5.1 Visa?o geral da arquitetura do HSM da GT ICPEDU II . . . . . . . . . . . 54\n\n5.2 Interface texto para administrac?a?o remota do HSM do GT ICPEDU II . . 56\n\n5.3 Interface gra?fica para administrac?a?o remota do HSM do GT ICPEDU II . 57\n\n7.1 Processo de criac?a?o de um HSM de backup . . . . . . . . . . . . . . . . 79\n\n\n\nLista de Tabelas\n\n2.1 Categorias dos estados do ciclo de vida de chaves criptogra?ficas quanto a\n\nsua disponibilidade de uso. . . . . . . . . . . . . . . . . . . . . . . . . . 16\n\n2.2 Caracter??sticas do HSM nShield F3 2000 da nCipher . . . . . . . . . . . 17\n\n2.3 Caracter??sticas do HSM Luna PCI 3000 da SafeNet . . . . . . . . . . . . 18\n\n2.4 Caracter??sticas do HSM Keyper PCI da AEP Networks . . . . . . . . . . 19\n\n4.1 Arquivo de configurac?a?o do OpenSSL para carga da engine do ASI-HSM. 40\n\n4.2 Algoritmos Criptogra?ficos Aprovados no OpenSSL FIPS versa?o 1.1.2 . . 50\n\nA.1 Sistemas de armazenamento de dados utilizados no OpenHSM . . . . . . 97\n\n\n\nLista de Siglas\n\nAC Autoridade Certificadora\n\nACT Autoridade de Carimbo de Tempo\n\nAES Advanced Encryption Algorithm (Algor??tmo de Cifragem Avanc?ada)\n\nASN Abstract Syntax Notation (Notac?a?o para Sintaxe Abstrata)\n\nANSI American National Standards Institute (Instituto Nacional de\n\nPadro?es Americanos)\n\nAPI Application Program Interface (Interface de Programac?a?o de Aplica-\n\ntivos)\n\nAR Autoridade de Registro\n\nBIO I/O Abstraction (Abstrac?a?o de Entrada e Sa??da )\n\nCBC Cipher Block Chaining (Encadeamento de Blocos Cifrados)\n\nCC Common Criteria (Crite?rios Comuns)\n\nCSP Critical security parameter (Para?metro Cr??tico de Seguranc?a)\n\nDER Distinguished Encoding Rules\n\nDES Decryption and Encryption Standard (Padra?o de Cifragem e Decifra-\n\ngem)\n\nEAL Evaluation Assurance Level (N??vel de Garantia de Avaliac?a?o)\n\nFCC Federal Communications Commission\n\nFIPS Federal Information Processing Standard (Padra?o Federal de Proces-\n\nsamento de Informac?o?es)\n\nGSM Global System for Mobile communications (Sistema Global para\n\nComunicac?o?es Mo?veis)\n\n\n\nxiii\n\nGT Grupo de Trabalho\n\nHSM Hardware Security Module (Mo?dulo de Seguranc?a Criptogra?fica)\n\nICP Infra-estrutura de Chaves Pu?blicas\n\nICPEDU Infra-estrutura de Chaves Pu?blicas Educacional\n\nICP-Brasil Infra-estrutura de Chaves Pu?blicas Brasileira\n\nIEEE Institute of Electrical and Electronics Engineers (Instituto de Enge-\n\nnharia Ele?trica e Eletro?nica)\n\nISO Internal Organization for Standardization (Organizac?a?o Internacio-\n\nnal para Padronizac?a?o)\n\nITI Instituto Nacional de Tecnologia da Informac?a?o\n\nJCA Java Communications API (API de comunicac?a?o Java)\n\nJCE Java Cryptography Extension (Extensa?o de criptografia JAVA)\n\nLCR Lista de Certificados Revogados\n\nLEA Laborato?rio de Ensaios e Auditoria\n\nMCT Manual de Condutas Te?cnicas\n\nNIST National Institute of Standards and Technology (Instituto Nacional\n\nde Padro?es e Tecnologia)\n\nNSF N??vel de Seguranc?a F??sica\n\nNSH N??vel de Seguranc?a de Homologac?a?o\n\nOSSI Open Source Software Institute (Instituto de Software de Co?digo\n\nAberto)\n\nPEM Privacy Enhanced Mail\n\nPIN Personal Identification Number (Nu?mero de Identificac?a?o Pessoal)\n\nPKCS Public Key Crypto System\n\nPUK Personal Unlocking Code (Co?digo de Desbloqueio Pessoal)\n\nRNP Rede Nacional de Ensino e Pesquisa\n\nRoHS Restriction to the use of Hazardous Substances\n\nRSA Rivest, Shamir e Adelman\n\nSGC Sistema de Gerenciamento de Certificados Digitais\n\n\n\nxiv\n\nSHA Secure Hash Algorithm (Algoritmo Seguro de Resumo Crip-\n\ntogra?fico)\n\nSO Sistema Operacional\n\nSSL Secure Sockets Layer\n\nTLS Transport Layer Security\n\nUFSC Universidade Federal de Santa Catarina\n\nUFMG Universidade Federal de Minas Gerais\n\nUG Unidade Gestora\n\nUnicamp Universidade de Campinas\n\nUS Unidade de Seguranc?a\n\nUSB Universal Serial Bus\n\nWEEE Waste from Electrical and Electronic Equipament\n\n\n\nLista de S??mbolos\n\n? Menor ou igual que\n? XOR / Ou exclusivo\n\n\n\nResumo\n\nO OpenHSM e? um protocolo aberto para gesta?o do ciclo de vida de\n\nchaves criptogra?ficas em mo?dulos de seguranc?a criptogra?fica, voltado principalmente\n\npara implantac?a?o de Infra-estruturas de Chaves Pu?blicas. Esta dissertac?a?o formaliza\n\ne apresenta os va?rios sub-protocolos que juntos permitem a gesta?o confia?vel das cha-\n\nves criptogra?ficas. Os protocolos foram implementados e embarcados em um hardware\n\ncriptogra?fico especialmente desenvolvido para evitar o acesso ao material sens??vel dos\n\nmesmos. Deu-se especial atenc?a?o aos aspectos pra?ticos da implementac?a?o tal como sua\n\nadere?ncia as normas nacionais e internacionais \u2013 MCT-7 e FIPS PUB 140-2 \u2013 e sua in-\n\nterface de comunicac?a?o com a aplicac?a?o de gesta?o de certificados digitais. Tambe?m sa?o\n\ntratados os processos de criac?a?o e recuperac?a?o de co?pias de seguranc?a do OpenHSM,\n\npossibilitando a continuidade do ciclo de vida das chaves gerenciadas mesmo em caso de\n\nfalhas ou desastres.\n\n\n\nAbstract\n\nThe OpenHSM is an open protocol that has been developed to manage\n\nthe life cycle of the cryptographic keys in hardware security modules, mainly addres-\n\nsed to public key infrastructure deployment. This thesis formalises and presents all sub-\n\nprotocols that together provide reliable management of cryptographic keys. The protocols\n\nhave been implemented and embedded in a cryptographic hardware especially develo-\n\nped to avoid unauthorized access to its sensitive data. Special attention was given to the\n\npractical aspects of the implementation, such as adherence to national and international\n\nstandards \u2013 MCT-7 and FIPS PUB 140-2 \u2013 and integration with certificate management\n\nsystems. The processes of creation and recovery of backup copies are also included in\n\nthis thesis, permitting the continuity of the management keys\u2019 life-cycle even in the event\n\nof hardware failures or disasters.\n\n\n\nCap??tulo 1\n\nIntroduc?a?o\n\nHardware ou mo?dulos criptogra?ficos1 te?m sido usados como a?ncoras\n\nde confianc?a em sistemas de informac?a?o e comunicac?a?o. Sa?o dispositivos especialmente\n\nprojetados para o armazenamento e o processamento seguro de informac?o?es sens??veis, tal\n\ncomo chaves criptogra?ficas. Entre os modelos mais conhecidos esta?o os carto?es inteligen-\n\ntes ou smartcards e os mo?dulos de seguranc?a criptogra?fica (HSMs)2. Ambos sa?o usados\n\npara a gerac?a?o, protec?a?o e processamento de chaves criptogra?ficas. Os smartcards sa?o\n\nmais simples que os HSMs em termos de funcionalidades, quantidade e qualidade dos\n\nmecanismos de protec?a?o das chaves e registro dos eventos associados ao ciclo de vida das\n\nchaves criptogra?ficas, capacidade de processamento e formato f??sico.\n\nOs smartcards sa?o amplamente usados como dispositivo de autenticac?a?o\n\nde clientes em aplicac?o?es banca?rias e cidada?os em sistemas de governo eletro?nico (e-\n\nCPF). Em alguns pa??ses europeus e estados norte-americanos, por exemplo, os smartcards\n\nsa?o utilizados como carta?o de identificac?a?o do cidada?o ou licenc?a de motorista.\n\nOs HSMs, por sua vez, sa?o dirigidos a sistemas mais complexos que\n\nrequerem um maior rigor no controle e auditoria do material sens??vel armazenado e pro-\n\ncessado.\n\nO grande mercado dos HSMs sa?o as aplicac?o?es militares e banca?rias.\n\nNessas aplicac?o?es, os HSM sa?o usados para processar informac?o?es de autenticac?a?o de\n\n1Neste trabalho os termos hardware criptogra?fico e mo?dulo criptogra?fico sa?o usados indistintamente.\n2HSM vem do Ingle?s e significa Hardware Security Module.\n\n\n\n2\n\nusua?rios, registros de eventos cr??ticos, assinatura de mensagens e execuc?a?o segura de\n\nco?digo.\n\nUm nicho pouco explorado mas importante para o uso de HSMs sa?o as\n\ninfra-estruturas de chaves pu?blicas (ICP) e suas aplicac?o?es, tais como autoridades certi-\n\nficadoras (AC), autoridades de registro (AR) e autoridades de carimbo de tempo (ACT).\n\nNeste nicho, na?o seriam necessa?rias algumas das funcionalidades e potencialidades exis-\n\ntentes nos HSM dispon??veis no mercado, ao mesmo tempo em que precisariam de outras\n\ncaracter??sticas na?o contempladas, tal como um tratamento mais elaborado da criac?a?o e\n\nrecuperac?a?o de co?pia de seguranc?a do material sens??vel. Esta lacuna e? exaustivamente\n\nexplorada neste trabalho.\n\nPara a garantia da qualidade e padronizac?a?o dos servic?os e mensagens\n\nprocessadas pelos hardwares criptogra?ficos, estes podem e devem ser desenvolvidos se-\n\ngundo normas e recomendac?o?es de entidades tais como o National Institute of Standards\n\nand Technology (NIST) e a Organizac?a?o Internacional para Padronizac?a?o (ISO). Dentre\n\nas va?rias normas existentes, a FIPS 140-2 promovida pelo NIST trata especificamente de\n\nhardware criptogra?fico, com a criac?a?o de um servic?o de homologac?a?o de tais dispositivos.\n\nO fabricante de um hardware criptogra?fico pode solicitar a homologac?a?o de seu equipa-\n\nmento segundo os requisitos e recomendac?o?es apostas na norma. Apo?s a avaliac?a?o pelo\n\nNIST ou por uma entidade credenciada, o hardware criptogra?fico recebe um atestado de\n\nadere?ncia. Este atestado e? exigido por inu?meras organizac?o?es como requisito para a sua\n\naquisic?a?o.\n\nEntretanto, ale?m de preocupac?o?es te?cnicas, deve-se considerar a questa?o\n\nde seguranc?a nacional, principalmente quando o HSM e? usado para proteger informac?o?es\n\nde governo, militares e de empresas brasileiras. Em determinadas aplicac?o?es, conside-\n\nradas de seguranc?a nacional, tais dispositivos devem ser de absoluta confianc?a. Na?o e?\n\nsuficiente ter uma declarac?a?o do NIST ou de outra entidade internacional atestando que o\n\nhardware criptogra?fico e? seguro e respeita os requisitos, recomendac?o?es e boas pra?ticas de\n\num hardware a ser usado como a?ncora de confianc?a. E? necessa?rio que o HSM seja pass??vel\n\nde auditoria - deve ser poss??vel avaliar a seguranc?a dos mecanismos criptogra?ficos e, em\n\nparticular, a gerac?a?o de chaves criptogra?ficas. Como tais dispositivos precisam ser natu-\n\n\n\n3\n\nralmente lacrados para evitar que seja poss??vel o acesso a informac?a?o sens??vel, tal audito-\n\nria na?o pode ser realizada. E? necessa?rio confiar-se cegamente na entidade certificadora e\n\nno fabricante.\n\nCom esta preocupac?a?o em mente, o governo brasileiro, sabiamente,\n\natrave?s do Instituto Nacional de Tecnologia da Informac?a?o (ITI), estabeleceu normas e\n\ncriou laborato?rios de ensaios e ana?lises (LEA) para avaliac?a?o de sistemas e equipamen-\n\ntos a serem usados pela Infra-estrutura de Chaves Pu?blicas Brasileira (ICP-Brasil) e suas\n\naplicac?o?es. Foi criado uma se?rie de normas de avaliac?a?o dos equipamentos e sistemas,\n\ncom va?rios n??veis de ana?lise. A mais rigorosa requer o depo?sito do co?digo fonte da\n\naplicac?a?o e do sistema operacional embarcado.\n\nApesar do grande mercado e de questo?es de seguranc?a nacional, o Bra-\n\nsil ainda esta? engatinhando em relac?a?o ao dom??nio tecnolo?gico e fabril de dispositivos\n\nde hardware criptogra?ficos. Duas louva?veis iniciativas merecem destaque quanto ao de-\n\nsenvolvimento de compete?ncia nacional na a?rea de hardware criptogra?fico: o programa\n\nJoa?o de Barro criado pelo ITI a ordem do Comite? Gestor da ICP-Brasil e a Infra-estrutura\n\nde Chaves Pu?blicas para Pesquisa e Ensino (ICPEDU) da Rede Nacional de Ensino e\n\nPesquisa (RNP)[1].\n\n1.1 Infra-estrutura de Chaves Pu?blicas para Pesquisa e\n\nEnsino\n\nA RNP tem-se utilizado de grupos de trabalho, constitu??do por pesqui-\n\nsadores de instituic?o?es pu?blicas e privadas escolhidos a partir de editais pu?blicos peri-\n\nodicamente lanc?ados, como forma de absorver e realizar inovac?a?o tecnolo?gica, adquirir\n\nexperie?ncia e desenvolver ferramentas para melhorar e disponibilizar novos servic?os para\n\nseus clientes, normalmente universidades e centros de pesquisa brasileiros.\n\nEspecificamente, em 2003, foi criado o Grupo de Trabalho de Infra-\n\nestrutura de Chaves Pu?blicas (GT ICPEDU) com o objetivo de estudar e implantar um\n\nservic?o piloto para a emissa?o de certificados digitais para fins educacionais e de pesquisa.\n\n\n\n4\n\nParticiparam desse esforc?o as Universidades Federais de Santa Catarina (UFSC) e de Mi-\n\nnas Gerais (UFMG) e a Universidade de Campinas (UNICAMP). O GT ICPEDU teve\n\ntre?s edic?o?es. A primeira, GT ICPEDU I, teve como resultado o dom??nio da tecnologia de\n\ncertificac?a?o digital, com o desenvolvimento de um sistema de gerenciamento do ciclo de\n\nvida de certificados digitais (SGCI). O GT ICPEDU II teve como objetivo o desenvolvi-\n\nmento de um HSM, enquanto, o GT ICPEDU III, preocupou-se com a guarda da chave\n\nprivada dos usua?rios, com o desenvolvimento de smartcards virtuais.\n\nEntre os servic?os almejados pela ICPEDU estavam a utilizac?a?o de certi-\n\nficados digitais para a autenticac?a?o dos usua?rios nos servic?os de rede e a realizac?a?o de as-\n\nsinatura digital de documentos eletro?nicos em substituic?a?o ao papel, principalmente para\n\nviabilizar a utilizac?a?o de formula?rios eletro?nicos nos processos acade?micos. E? objetivo\n\ntambe?m, a disseminac?a?o da tecnologia de certificac?a?o digital, atrave?s de cursos, reunio?es\n\ne participac?a?o ativa das entidades na concepc?a?o da Infra-estrutura de Chaves Pu?blicas\n\npara Pesquisa e Ensino (ICPEDU). Ve?-se a ICPEDU como uma versa?o acade?mico e de\n\npesquisa da ICP-Brasil.\n\nA ICPEDU e? hoje condic?a?o e insumo ba?sico para a integrac?a?o e o\n\ncompartilhamento de recursos das instituic?o?es de ensino e pesquisa brasileiros e en-\n\ntre estas, incluindo as instituic?o?es afins de outros pa??ses. Va?rios projetos associados a\n\ndisponibilizac?a?o de recursos computacionais pela Internet necessitam dos servic?os pres-\n\ntados pela ICPEDU. Destaca-se o esforc?o da RNP na implantac?a?o de um sistema de\n\nfederac?o?es de forma a compartilhar os processos de autenticac?a?o entre as instituic?o?es\n\nusua?rias.\n\nUm dos grandes desafios a ser superado pelos participantes na\n\nimplantac?a?o da ICPEDU era o alto custo do HSM necessa?rio a? criac?a?o de ACs e ARs\n\ne suas aplicac?o?es. O custo era proibitivo para maioria dessas instituic?o?es. Ale?m do custo,\n\na tecnologia de fabricac?a?o de hardwares criptogra?ficos na?o estava dispon??vel no Brasil e\n\nhaviam restric?o?es quando a sua importac?a?o, devido ao cara?ter de \u201cseguranc?a nacional\u201d\n\nque os governos dos pa??ses detentores dessa tecnologia impunham aos fabricantes. De-\n\nvido a isso, a RNP aceitou a proposta do GT ICPEDU II para desenvolver, projetar e\n\nconstruir um HSM de baixo custo e que provesse os requisitos de seguranc?a apostos na\n\n\n\n5\n\nFIPS 140-2.\n\nAssim, foram estabelecidos os seguintes requisitos gerais para o HSM:\n\n\u2022 baixo custo;\n\n\u2022 co?digo aberto para facilitar a auditoria;\n\n\u2022 visando atender os requisitos dos componentes de infra-estruturas de chaves\npu?blicas (rastreabilidade de chaves e um sistema de auditoria forte);\n\n\u2022 capacidade m??nima de processamento de 10 assinaturas RSA/segundo;\n\n\u2022 compat??vel com o Sistema de Gerenciamento de Certificados Digitais da ICPEDU\n(SGCI).\n\nO estudo e projeto do HSM tem sido alvo de va?rias dissertac?o?es de\n\nmestrado e trabalhos de conclusa?o de curso na Universidade Federal de Santa Catarina.\n\nAo mesmo tempo em que estudam e se formam na a?rea de protocolos criptogra?ficos e\n\nsistemas criptogra?ficos embarcados, os alunos e professores se dedicam a desenvolver a\n\ntecnologia e o produto HSM da ICPEDU (ASI-HSM). O software de gerenciamento do\n\nciclo de vida das chaves criptogra?ficas foi desenvolvido neste seio. O hardware, dese-\n\nnhado pelo GT ICPEDU II, foi projetado pela empresa brasileira Kryptus3 em parceria\n\ncom a RNP.\n\n1.2 Contextualizac?a?o das Contribuic?o?es\n\nA implantac?a?o de ACs e ARs no contexto de ICPs e? bem estabelecida,\n\ndevendo seguir pol??ticas previamente definidas de forma a nortear todas as atividades\n\nenvolvidas no seu gerenciamento. A figura 1.1 apresenta a estrutura documental normal-\n\nmente adotada na implantac?a?o de uma infra-estrutura de chaves pu?blicas.\n\nAs pol??ticas sa?o descritas na forma de documentos, seguindo preceitos\n\nregidos por normas, padro?es e recomendac?o?es nacionais e internacionais. Parte desses\n\n3http://www.kryptus.com.br\n\n\n\n6\n\nFigura 1.1: Contextualiza a a?rea de atuac?a?o do trabalho\n\ndocumentos orientam como um certificado deve ser emitido para ser aplica?vel um uma\n\ndeterminada situac?a?o, respeitando os requisitos de uma pol??tica de seguranc?a, na forma\n\nde Pol??ticas de Certificado (PC). Outra parte, o conjunto de requisitos que promovem a\n\nprotec?a?o adequada dos ativos dos sistemas de informac?a?o das entidades da ICP, constitue\n\na pol??tica de seguranc?a (PS).\n\nA declarac?a?o de pra?ticas de certificac?a?o (DPC), por sua vez, descreve\n\ncomo a PC e? implementada, levando em considerac?a?o as boas pra?ticas de seguranc?a esta-\n\nbelecidas na PS, englobando os requisitos da organizac?a?o que hospeda a ICP.\n\nComo forma de facilitar a escrita destes documentos, o comite? gestor\n\nda ICP define requisitos m??nimos das PC e DPC para todas as ACs e ARs existentes na\n\na?rvore da ICP. Desta forma, todas a entidades participantes da ICP podem facilmente\n\nseguir a mesma orientac?a?o.\n\n\n\n7\n\nUma vez consolidado o documento DPC, pode-se implementar o am-\n\nbiente de produc?a?o e elaborar as cerimo?niais. O ambiente de produc?a?o consiste de um\n\nambiente seguro com sistemas de controle de acesso, ambiente de registro, entre outros.\n\nEsses controlam o acesso ao material criptogra?fico, gerando evide?ncias de seu uso atrave?s\n\nde registros de evide?ncias (logs). As cerimo?nias sa?o normalmente escritas na forma de\n\nroteiro em ordem cronolo?gica de execuc?a?o, para todas as atividades previstas no ambi-\n\nente de produc?a?o. O produto das cerimo?nias sa?o as atas cerimoniais. A partir das atas\n\ne registros de atividades dos componentes envolvidos sa?o realizadas as auditorias, que\n\nproduzira?o relato?rios, demonstrando a confiabilidade de toda a estrutura para a parte con-\n\nfiante.\n\nEste trabalho contribui no contexto de implementac?a?o de ICPs nas a?reas\n\nde Cerimo?nias (detalhando todos os passos realizados no gerenciamento do ciclo de vida\n\ndas chaves privadas), Ambiente de Produc?a?o (ASI-HSM com o OpenHSM) e Audito-\n\nria (registro de todas as etapas realizadas no interior do HSM com a possibilidade de\n\nexportac?a?o), conforme a a?rea em destaque na figura 1.1.\n\nEm termos de ambiente de produc?a?o, destacam-se os protocolos que sa?o\n\npropostos para o estrito controle do ciclo de vida das chaves criptogra?ficas, mesmo consi-\n\nderando va?rias co?pias operacionais destas chaves, atrave?s do uso de grupos de operadores\n\n(custodiantes de material sens??vel), grupos de administradores e grupos totalmente inde-\n\npendentes de auditores. Todos os passos executados dentro do HSM sa?o registrados em\n\narquivos de registro de auditoria e exportados com a autorizac?a?o dos auditores.\n\nOs passos de todos os sub-protocolos do HSM sa?o mapeados dentro das\n\ncerimo?nias, detalhando principalmente as atividades diretamente relacionadas ao geren-\n\nciamento do ciclo de vida das chaves criptogra?ficas de uma ICP. Esta associac?a?o mostra\n\nperfeita sintonia entre o roteiro cerimonial e o registro de sua execuc?a?o nos registros de\n\natividades do HSM. Garante-se com isso maior confianc?a das testemunhas presentes na\n\ncerimo?nia quanto a corretude do uso das chaves criptogra?ficas.\n\nPor u?ltimo, sentem-se os auditores capazes de produzir suas ana?lises e\n\nrelato?rios com a certeza de mostrar que tudo foi feito respeitando as pol??ticas preconiza-\n\ndas.\n\n\n\n8\n\nAs contribuic?o?es deste trabalho sa?o de cara?ter te?cnico e teo?rico-\n\ncient??fico. Quando se expo?e a contribuic?a?o te?cnica procura-se organizar o material ja?\n\nexistente na literatura te?cnica e documentac?a?o das soluc?o?es existentes de forma a eluci-\n\ndar e dirigir tal escrito a?s necessidades dos desenvolvedores de componentes destinados a\n\nICP. Um forte exemplo deste tipo de contribuic?a?o e? a apresentac?a?o dida?tica para desenvol-\n\nvimento de Engines \u2013 padra?o utilizado para a comunicac?a?o entre aplicac?o?es e provedo-\n\nres de servic?os criptogra?ficos em ambientes de co?digo aberto suportados pela plataforma\n\nOpenSSL.\n\nPor outro lado, este trabalho apresenta diversas contribuic?o?es teo?rico-\n\ncient??ficas. A principal delas esta relacionada ao protocolo que permite a gesta?o confia?vel\n\nde va?rias insta?ncias simulta?neas do material criptogra?fico em HSM. Tal protocolo esta?\n\nimplementado no HSM do projeto ICP-EDU II, ASI-HSM.\n\n1.3 Objetivos\n\n1.3.1 Objetivo Geral\n\nEste trabalho tem por objetivo geral descrever, e propor modificac?o?es\n\nonde necessa?rio, nos sub-protocolos criptogra?ficos de gesta?o do ciclo de vida de cha-\n\nves criptogra?ficas que compo?em o OpenHSM, com e?nfase nos esquemas de co?pia e\n\nrecuperac?a?o de chaves e a instanciac?a?o de ambientes de produc?a?o com co?pias das chaves\n\ngerenciadas, respeitando as principais recomendac?o?es nacionais e internacionais relacio-\n\nnadas a? implementac?a?o de hardware criptogra?ficos.\n\n1.3.2 Objetivos Espec??ficos\n\nVisando alcanc?ar o objetivo geral, foram definidos alguns objetivos es-\n\npec??ficos, tais como:\n\n\u2022 apresentar os principais dispositivos criptogra?ficos utilizados no contexto de uma\ninfra-estrutura de chaves pu?blicas;\n\n\n\n9\n\n\u2022 levantar as normas e recomendac?o?es nacionais e internacionais que regem o desen-\nvolvimento de dispositivos criptogra?ficos;\n\n\u2022 descrever o OpenSSL e suas funcionalidades, com foco na implementac?a?o de engi-\nnes para integrac?a?o de hardware criptogra?ficos;\n\n\u2022 aprofundar o entendimento dos mecanismos de criac?a?o e recuperac?a?o de co?pias de\nseguranc?a do OpenHSM, capazes de proporcionar o uso simulta?neo de va?rias co?pias\n\ndas chaves gerenciadas em ambientes paralelos;\n\n\u2022 gerar, quando inexistente, documentac?a?o sobre os recursos tecnolo?gicos utilizados\nno produtac?a?o do OpenHSM, na forma do ASI-HSM.\n\n1.4 Justificativa e Motivac?a?o\n\nA certificac?a?o digital tem se tornado uma ferramenta essencial a?\n\nmodernizac?a?o das instituic?o?es pu?blicas e privadas brasileiras. Ve?-se o uso desta tec-\n\nnologia na emissa?o de notas fiscais eletro?nicas, nos sistemas banca?rios e na gesta?o de\n\ndocumentos eletro?nicos, para citar alguns exemplos.\n\nUm dos elementos chaves desse sucesso e? o investimento que o Estado\n\nBrasileiro tem feito para o total dom??nio desta tecnologia no Brasil. O uso acade?mico\n\nde certificac?a?o digital nas instituic?o?es de pesquisa e ensino nacionais formara?o os recur-\n\nsos humanos necessa?rios para garantir a adoc?a?o em larga escala dos certificados digitais\n\nnas mais diversas situac?o?es, sem ficarmos refe?ns de corporac?o?es que esta?o unicamente\n\nsubordinadas ao arcabouc?o jur??dico de outros pa??ses.\n\nEm especial, o dom??nio no desenvolvimento de dispositivos de hard-\n\nware ira? permitir, na?o so? um maior uso destes nas mais diversas aplicac?o?es, como um\n\nsubstancial barateamento da tecnologia. Isso sem falar que tais dispositivos sofrem de\n\ncontrole rigoroso nos pa??ses que dominam sua tecnologia, e na?o sa?o poucos os casos em\n\nque a tecnologia e? vista como de seguranc?a nacional, impondo restric?o?es a sua exportac?a?o.\n\nFoi neste cena?rio que a RNP criou e mante?m um grupo de pesquisado-\n\nres, de va?rias universidades e instituic?o?es de pesquisa, com o objetivo de implantar uma\n\n\n\n10\n\ninfra-estrutura de chaves pu?blicas para pesquisa e ensino.\n\nO HSM, resultado desse esforc?o, foi concebido para prover aos inte-\n\ngrantes da ICPEDU e parceiros de um dispositivo de baixo custo que permitisse a gesta?o\n\nsegura de chaves criptogra?ficas.\n\n1.5 Trabalhos Correlatos\n\nUm dos primeiros trabalhos que se tem not??cia sobre a protec?a?o de cha-\n\nves criptogra?ficas no contexto de uma AC e? devido a Jeff Schiller[2]. Seu trabalho propo?e\n\nduas abordagens diferentes para a gesta?o do ciclo de vida da chave, dependendo de quem\n\ntem acesso ao material criptogra?fico. A primeira, quando o ser humano tem acesso direto\n\nas chaves e a segunda, quando este acesso direto na?o e? poss??vel. O trabalho, de cara?ter\n\nmais geral, discute as diferentes preocupac?o?es quanto ao controle do ciclo de vida das\n\nchaves nestes dois contextos.\n\nOs primeiros estudos sobre o gerenciamento de chaves criptogra?ficas no\n\nLaborato?rio de Seguranc?a em Computac?a?o (LabSEC) da Universidade Federal de Santa\n\nCatarina foram feitos em 2003. Assim que o GT ICPEDU II foi aprovado pela RNP,\n\niniciou-se o desenvolvimento de um proto?tipo do HSM. Como resultado acade?mico do GT\n\nteve-se dois trabalhos: um trabalho conclusa?o de curso (TCC) de Graduac?a?o em Sistemas\n\nde Informac?a?o e uma dissertac?a?o de mestrado no Programa de Po?s-Graduac?a?o em Cie?ncia\n\nda Computac?a?o (PPGCC) da Universidade Federal de Santa Catarina (UFSC).\n\nNo in??cio dos trabalhos foi feita uma revisa?o da literatura sobre esta a?rea\n\nem particular e obteve-se somente refere?ncias a produtos comerciais de empresas fabri-\n\ncantes de HSM. Muito pouco se sabe sobre os protocolos que esses produtos implemen-\n\ntam, provavelmente devido a protec?a?o de propriedade intelectual e ao segredo industrial.\n\nSouza[3] tratou em seu trabalho o gerenciamento de chaves crip-\n\ntogra?ficas em hardwares embarcados. Martina[4] desenvolveu sua dissertac?a?o de mes-\n\ntrado estudando e propondo modificac?o?es nos dispositivos de hardware criptogra?ficos de\n\nforma a atender melhor as necessidades funcionais de uma autoridade certificadora.\n\nEm 2007, Martina[5] apresentou os protocolos de gesta?o dos grupos de\n\n\n\n11\n\nadministrac?a?o, operac?a?o e auditoria de chaves criptogra?ficas no OpenHSM. E em 2008,\n\nSouza[6] publicou um trabalho que aprimorava os protocolos de co?pia e recuperac?a?o do\n\nmaterial criptogra?fico no OpenHSM.\n\n1.6 Organizac?a?o deste Trabalho\n\nO Cap??tulo 2 apresenta os dispositivos mais utilizados para armazena-\n\nmento de chaves criptogra?ficas. Nesse, sa?o apresentados os smartcards, com e?nfase no\n\nmodelo utilizado no OpenHSM, tokens criptogra?ficos e HSM dispon??veis no mercado.\n\nNo cap??tulo 3, as normas nacionais e internacionais de certificac?a?o\n\ncom maior releva?ncia sa?o analisadas. E? apresentada para cada norma, seus n??veis de\n\ncertificac?a?o, a?reas de atuac?a?o e requisitos definidos para cada a?rea.\n\nA seguir, no cap??tulo 4, e? apresentado o OpenSSL, poderosa ferramenta\n\ncriptogra?fica, na qual o ASI-HSM esta? baseado. O cap??tulo descreve a aplicac?a?o de linha\n\nde comando, suporte a engines para integrac?a?o de mo?dulos criptogra?ficos e a versa?o sim-\n\nplificada da biblioteca com certificac?a?o FIPS 140-2 n??vel 1. Justifica-se a inclusa?o deste\n\nmaterial neste texto uma vez que a documentac?a?o original e? desatualizada e dispersa.\n\nO cap??tulo 5 apresenta a soluc?a?o como um todo do HSM, na forma do\n\nASI-HSM, incluindo sua arquitetura, interfaces de gerenciamento e engine para utilizac?a?o\n\nde seus servic?os criptogra?ficos.\n\nNa sequ?e?ncia, o cap??tulo 6 aborda o protocolo OpenHSM para gerencia-\n\nmento do ciclo de vida das chaves criptogra?ficas, incluindo os sub-protocolos para criac?a?o\n\ne uso de chaves criptogra?ficas gerenciadas.\n\nO cap??tulo 7 descreve todos os sub-protocolos do OpenHSM res-\n\nponsa?veis pela criac?a?o e recuperac?a?o de co?pias de seguranc?a do HSM, de forma a garantir\n\na continuidade do ciclo de vida das chaves criptogra?ficas gerenciadas mesmo em caso de\n\nfalhas de hardware ou desastres.\n\nFinalmente, no cap??tulo 8, conclui-se o trabalho, apresentando suas\n\ncontribuic?o?es e trabalhos futuros.\n\n\n\nCap??tulo 2\n\nHardware Criptogra?fico\n\n2.1 Introduc?a?o\n\nUm hardware criptogra?fico e? um dispositivo que visa atender aos requi-\n\nsitos de seguranc?a encontrados em aplicac?o?es que usam servic?os criptogra?ficos onde na?o\n\ne? poss??vel segregar o material sens??vel unicamente dentro da estac?a?o hospedeira, que em-\n\nbarca a aplicac?a?o, ou em situac?o?es onde e? necessa?rio um alto volume de processamento\n\ncriptogra?fico. Um HSM, por exemplo, e? tipicamente de 10 a 100 vezes mais ra?pido que\n\num computador pessoal para as finalidades especializadas.\n\nAlgumas aplicac?o?es, como servidores seguros de pa?ginas Web, reque-\n\nrem grande capacidade de processamento criptogra?fico, que pode ser alcanc?ado com o\n\nemprego de um HSM que e? usado como um co-processador para operac?o?es criptogra?ficas,\n\nliberando unidade de processamento dos servidores para outras finalidades.\n\nEste cap??tulo apresenta os dois principais tipos de hardware crip-\n\ntogra?ficos, sendo na sec?a?o 2.2 apresentado os smartcards, com especial atenc?a?o aos re-\n\nquisitos referentes ao modelo de smartcards utilizados no HSM alvo do OpenHSM. A\n\nSec?a?o 2.3 apresenta uma visa?o geral dos HSMs, hardware que permite um controle rigo-\n\nroso do ciclo de vida de chaves criptogra?ficas, sendo um dispositivo fundamental para a\n\ngesta?o da chave privada de uma autoridade certificadora raiz de uma ICP. Adicionalmente,\n\nalguns HSMs comerciais sa?o destacados.\n\n\n\n13\n\n2.2 Smartcards\n\nPrimeiramente empregados por empresas de telefonia da Franc?a e Ale-\n\nmanha nos anos 80, os smartcards ganharam mercado com o desenvolvimento da crip-\n\ntografia moderna e evoluc?a?o da tecnologia de semicondutores, sendo considerados uma\n\ngerac?a?o mais nova, inteligente e segura dos carto?es de identificac?a?o. Os celulares com\n\ntecnologia GSM e carto?es de cre?ditos incorporam smartcards, visando principalmente sua\n\nefetividade no combate a fraudes[7].\n\nSmartcards conte?m um circuito integrado embarcado, capaz de receber,\n\ntransmitir, armazenar e processar dados. A comunicac?a?o pode ser feita com ou sem con-\n\ntato f??sico, sendo no u?ltimo caso utilizadas ondas de ra?dio.\n\nUma das grandes caracter??sticas dos smartcards e? que os dados nele\n\narmazenados podem ser protegidos contra acesso e manipulac?a?o na?o autorizados. Seu\n\nsistema operacional estabelece uma lo?gica de seguranc?a que controla a entrada e sa??da de\n\ncomandos e dados atrave?s de sua interface de comunicac?a?o serial. E? poss??vel, por exem-\n\nplo, gerar um par de chaves assime?tricas em um smartcard e configura?-lo de tal forma que\n\na chave privada nunca podera? ser exportada. Neste caso, as operac?o?es criptogra?ficas para\n\nutilizar esta chave podem ser realizadas somente dentro do mesmo.\n\nO controle de acesso ao smartcard e? realizado com a utilizac?a?o de se-\n\nnha ou controle biome?trico. A senha e? conhecida como nu?mero de identificac?a?o pes-\n\nsoal (PIN)1, que deve ser conhecida somente pelo dono do smartcard, e consiste de uma\n\nsequ?encia nume?rica normalmente entre 4 e 6 d??gitos. Os smartcards podem implementar\n\num modelo de PIN fixo ou modifica?vel. O modelo de PIN fixo na?o permite que seus\n\nusua?rios alterem o PIN, obrigando sua memorizac?a?o, enquanto o modelo de PIN modi-\n\nfica?vel atende as necessidades de seus usua?rios, permitindo a alterac?a?o do PIN.\n\nOs smartcards, por questa?o de seguranc?a, possuem um controle do\n\nnu?mero de tentativas consecutivas sem e?xito na liberac?a?o do acesso, bloqueando o PIN\n\nquando digitado mais de tre?s vezes incorretamente. Este comportamento evita o ataque de\n\ntentativa e erro, tambe?m chamada de ataque de forc?a bruta. Em caso de bloqueio, o smart-\n\n1do ingle?s Personal Identification Number\n\n\n\n14\n\ncard precisa ser submetido a um processo de desbloqueio, utilizando uma senha chamada\n\nde chave de desbloqueio pessoal (PUK)2, normalmente entre 6 e 8 d??gitos nume?ricos. Ela\n\nreinicia o contador de tentativas sem sucesso e permite a configurac?a?o de um novo PIN.\n\nO PUK, ale?m de na?o ser altera?vel, tambe?m e? bloqueado se digitado incorretamente 10\n\nvezes, inutilizando o smartcard.\n\nO uso de smartcards se da? atrave?s de leitores especialmente desenvol-\n\nvidos para este fim. Eles sa?o o meio pelo qual um computador pode interagir com seu\n\nconteu?do, provendo energia para o sistema operacional.\n\nOs conceitos de smartcard tambe?m sa?o empregados em tokens crip-\n\ntogra?ficos, no formato de dispositivos USB[8], na?o necessitando de leitora espec??fica para\n\nsua utilizac?a?o.\n\n2.2.1 Smartcards para HSMs\n\nO objetivo do emprego de smartcards no projeto piloto do HSM e? a\n\nsegura identificac?a?o dos membros de seus grupos. Cada membro possui um smartcard,\n\nno qual sera? armazenado um par de chaves criptogra?ficas RSA[9] e um certificado. A\n\nutilizac?a?o deste smartcard com o PIN correto garante a autenticac?a?o do membro.\n\nApesar de existirem inu?meros modelos comerciais de smartcards atual-\n\nmente no mercado, com diferentes caracter??sticas e capacidades, o GT ICP-EDU II definiu\n\no seguinte conjunto de requisitos na escolha do smartcard apropriado:\n\n\u2022 ser utiliza?vel a partir de contato f??sico;\n\n\u2022 suportar a gerac?a?o de chaves assime?tricas RSA[9] de do m??nimo 1024 bits;\n\n\u2022 permitir a importac?a?o de pares de chaves RSA gerados fora do smartcard;\n\n\u2022 suportar criptografia de dados com chaves assime?tricas RSA de ate? de 1024 bits;\n\n\u2022 ter capacidade de gerac?a?o e verificac?a?o de assinaturas digitais utilizando chaves\nRSA;\n\n2do ingle?s Personal Unblocking key\n\n\n\n15\n\n\u2022 suportar armazenamento de certificados X.509v3[10];\n\n\u2022 ser compat??vel com a norma ISO 7816 1/2/3/4[11];\n\n\u2022 implementar uma estrutura de objetos e arquivos compat??vel com PKCS#15[12];\n\n\u2022 possuir no m??nimo 32 kilobytes de capacidade de armazenamento.\n\n2.3 Mo?dulo de Seguranc?a Criptogra?fica (HSM)\n\nMo?dulos de seguranc?a criptogra?fica sa?o empregados em soluc?o?es onde\n\no controle do ciclo de vida de suas chaves criptogra?ficas e? crucial para seu funcionamento.\n\nEsses mo?dulos devem permitir que as chaves criptogra?ficas sejam criadas, armazenadas,\n\nutilizadas e apagadas internamente, sem nunca serem vis??veis ao mundo externo.\n\nOs HSMs possuem mais capacidade de processamento que os smart-\n\ncards, servindo na sua maioria como aceleradores criptogra?ficos, sendo capazes de geren-\n\nciar o ciclo de vida de va?rias chaves ao mesmo tempo.\n\n2.3.1 Ciclo de vida de chaves criptogra?ficas\n\nO ciclo de vida de uma chave criptogra?fica consiste da sequ?encia de\n\nestados por ela assumida, desde sua gerac?a?o ate? a sua destruic?a?o[13], com o mo?dulo\n\ncriptogra?fico garantindo seu correto manuseio em cada estado assumido.\n\nA continuidade do ciclo de vida das chaves deve ser poss??vel mesmo\n\nem caso de falha de hardware ou acontecimento de um desastre, atrave?s da utilizac?a?o de\n\nmecanismos de criac?a?o e recuperac?a?o de co?pias de seguranc?a. Entretanto, no caso de\n\ndestruic?a?o de uma chave, deve-se ter garantia que todas suas insta?ncias foram destru??das,\n\ninclusive as co?pias de seguranc?a.\n\nA seguir, apresenta-se uma lista dos principais estados que uma chave\n\ncriptogra?fica pode assumir durante seu ciclo de vida em um HSM:\n\n\u2022 gerac?a?o: o ponto inicial do ciclo de vida de uma chave criptogra?fica;\n\n\n\n16\n\n\u2022 armazenamento: a chave esta? armazenada de forma segura no interior do per??metro\ncriptogra?fico;\n\n\u2022 uso: utilizac?a?o da chave para realizac?a?o de operac?o?es criptogra?ficas;\n\n\u2022 backup: referente as co?pias de seguranc?a da chave, que deve estar armazenado em\nlugar independente, possibilitando a recuperac?a?o em caso de falha de hardware ou\n\ndesastre;\n\n\u2022 recuperac?a?o: refere-se a recuperac?a?o de uma co?pia de seguranc?a da chave, utilizado\nquando a chave foi perdida de alguma forma, sem seu comprometimento;\n\n\u2022 destruic?a?o: a chave na?o e? mais necessa?ria, finalizando seu ciclo de vida.\n\nOs estados ainda podem ser categorizados quanto a disponibilidade de\n\nuso de uma chave criptogra?fica[14], como e? descrito na tabela 2.1.\n\nTabela 2.1: Categorias dos estados do ciclo de vida de chaves criptogra?ficas quanto a sua dispo-\nnibilidade de uso.\n\nCategoria Descric?a?o\npre?-operacional per??odo desde a criac?a?o do par de chaves ate? sua liberac?a?o para\n\nrealizac?a?o de operac?o?es criptogra?ficas;\noperacional a chave esta? dispon??vel para uso\npo?s-operacional a chave na?o pode ser mais utilizada ativamente para realizac?a?o\n\nde operac?o?es criptogra?ficas. Sua utilidade e? prover garantia das\noperac?o?es realizadas no passado.\n\nobsoleta todas as insta?ncias da chave criptogra?fica sa?o apagadas\n\n2.3.2 Mo?dulos de Seguranc?a Criptogra?fica de Mercado\n\nExistem diversos fabricantes de HSMs no mundo e alguns de seus pro-\n\ndutos sa?o descritos nas tabelas 2.2, 2.3 e 2.4, salientando suas caracter??sticas e capacida-\n\ndes. Os principais fabricantes sa?o: nCipher, SafeNet e AEP Networks.\n\nO nShield F3 2000 da nCipher, ale?m das caracter??sticas apresentadas na\n\ntabela 2.2, suporta execuc?a?o segura de co?digo, o que permite ao seu usua?rio importar um\n\n\n\n17\n\ntrecho de co?digo para ser executado dentro do HSM, considerado um ambiente seguro.\n\nAle?m disso, conta com relo?gio interno de alta precisa?o, permitindo sua utilizac?a?o em\n\nsistemas de carimbo do tempo.\n\nTabela 2.2: Caracter??sticas do HSM nShield F3 2000 da nCipher\n\nItem Caracter??sticas\nCertificac?a?o FIPS 140-2 n??vel 3\nCapacidade de Processamento 2000 assinaturas RSA de 1024 bits por segundo\nConectividade Interface PCI\nAPI integrac?a?o OpenSSL, PKCS#11, Microsoft CryptoAPI\nAlgoritmos criptogra?ficos (As-\nsime?tricos)\n\nDSA, ECDSA, RSA\n\nAlgoritmos criptogra?ficos\n(Sime?tricos)\n\nAES, Triple-DES\n\nAlgoritmos criptogra?ficos\n(Func?o?es de Resumo)\n\nTriple-DES MAC, SHS, HMAC\n\nBackup Proprieta?rio e para HSMs do mesmo fabricante\nUso Propo?sito geral\n\nDa mesma forma que o HSM da nCipher, o Luna PCI 3000 da Sa-\n\nfeNet apresenta caracter??sticas adicionais ao gerenciamento do ciclo de vida de chaves\n\ncriptogra?ficas, como a utilizac?a?o de um teclado diretamente conectado ao HSM para au-\n\ntenticar seus usua?rios, provendo uma caminho confia?vel para a digitac?a?o do PIN. Suas\n\ncaracter??sticas gerais podem ser vistas na tabela 2.3.\n\nO HSM Keyper PCI da AEP Networks possui uma funcionalidade in-\n\nteressante para ambientes que demandem alto poder de processamento, suportando ba-\n\nlanceamento de carga entre va?rios HSMs. Em caso de uma falha em um dos HSMs, os\n\nrestantes automaticamente assumem o controle. As caracter??sticas gerais do KeyPer PCI\n\npodem ser encontradas na tabela 2.4.\n\n2.4 Conclusa?o\n\nA utilizac?a?o de hardwares criptogra?ficos e? crucial em ambientes com al-\n\ngum tipo de valor agregado, ja? que, idealmente, a seguranc?a dos algoritmos criptogra?ficos\n\n\n\n18\n\nTabela 2.3: Caracter??sticas do HSM Luna PCI 3000 da SafeNet\n\nItem Caracter??sticas\nCertificac?a?o FIPS 140-2 n??vel 2 e 3\nCapacidade de Processamento 3000 assinaturas RSA de 1024 bits por segundo\nConectividade Interface PCI\nAPI integrac?a?o OpenSSL, PKCS#11, Microsoft CryptoAPI 2.0, Java JCA/JCE\nAlgoritmos criptogra?ficos (As-\nsime?tricos)\n\nRSA, DSA, Diffie Hellman\n\nAlgoritmos criptogra?ficos\n(Sime?tricos)\n\nDES/3DES, AES, RC2, RC4, RC5\n\nAlgoritmos criptogra?ficos\n(Func?o?es de Resumo)\n\nSHA-1, SHA-256, SHA-384, SHA-512, MD2, MD5\n\nBackup Proprieta?rio e para HSMs do mesmo fabricante\nUso Propo?sito geral\n\nesta? diretamente relacionada ao correto manuseio de suas chaves.\n\nOs dois principais exemplares de hardware criptogra?ficos sa?o o smart-\n\ncard e o HSM. O smartcard tem o formato de uma carta?o e e? utilizado para proteger a\n\nchave privada de pessoas ou de sistemas, onde na?o ha? a necessidade de uma taxa elevada\n\nde processamento criptogra?fico. Ja? os HSMs, como visto neste cap??tulo, tem um controle\n\nmaior do ciclo de vida de chaves criptogra?ficas e alto poder de processamento.\n\nPode-se observar que os HSMs de mercado sa?o normalmente destinados\n\na aplicac?o?es gerais e na?o sa?o projetados para a instanciac?a?o de autoridades certificadoras.\n\nUma das principais deficie?ncias dos HSMs comerciais e? a falta de um\n\npadra?o aceita?vel para realizar a co?pia e a restaurac?a?o do seu material cr??tico, tal como as\n\nchaves criptogra?ficas. Os fabricantes alegam que possuem tal funcionalidade, mas esta\n\ne? limitada a produtos do pro?prio fabricante. Alegam que isso e? necessa?rio para manter\n\na protec?a?o das chaves. Acontece que num ambiente de produc?a?o, por exemplo, uma\n\nAC Raiz, normalmente a chave e? gerada e deve ser mantida no mo?dulo por per??odo de\n\ntempo superior a 10 anos. E os produtos comerciais sa?o descontinuados antes de vencer\n\na validade da chave.\n\nComo sera? visto nos pro?ximos cap??tulos, esta dissertac?a?o de mestrado\n\ntrata desta funcionalidade com especial atenc?a?o. Ou seja, como podem ser criadas co?pias\n\n\n\n19\n\nTabela 2.4: Caracter??sticas do HSM Keyper PCI da AEP Networks\n\nItem Caracter??sticas\nCertificac?a?o FIPS 140-1 n??vel 3\nCapacidade de Processamento na?o informada\nConectividade Interface PCI mas utiliza?vel atrave?s da rede\nAPI integrac?a?o OpenSSL, PKCS#11, Microsoft CryptoAPI 2.0, Java JCA/JCE\nAlgoritmos criptogra?ficos (As-\nsime?tricos)\n\nRSA, DSA, Diffie Hellman\n\nAlgoritmos criptogra?ficos\n(Sime?tricos)\n\nDES/3DES\n\nAlgoritmos criptogra?ficos\n(Func?o?es de Resumo)\n\nSHA-1, MD5\n\nBackup Proprieta?rio e para HSMs do mesmo fabricante\nUso Propo?sito geral\n\nde seguranc?a, que permitem posterior recuperac?a?o em dispositivos adicionais, sem perder\n\na rastreabilidade de todas as insta?ncias das chaves criptogra?ficas em operac?a?o.\n\n\n\nCap??tulo 3\n\nNormas\n\n3.1 Introduc?a?o\n\nA falta de interoperabilidade entre hardware criptogra?ficos torna sua\n\nutilizac?a?o custosa, pois cada vez que e? necessa?rio mudar um hardware, deve-se adaptar\n\na aplicac?a?o que o utiliza. Neste sentido, governos e empresas se uniram e propuseram\n\npadro?es de interoperabilidade que devem ser seguidos no projeto e fabricac?a?o de tais\n\ndispositivos.\n\nDesta forma, este cap??tulo apresenta as principais normas nacionais e\n\ninternacionais que devem ser consideradas no contexto de hardware criptogra?ficos. Dentre\n\neles esta?o a FIPS PUB 140-2 (sec?a?o 3.2) e o Manual de Condutas Te?cnicas 7 do LEA-ITI\n\n(sec?a?o 3.3). Ambas estabelecem requisitos na construc?a?o de HSMs.\n\nOs crite?rios comuns[15], que podem ser aplicados na construc?a?o de\n\nqualquer dispositivo eletro?nico, tambe?m pode ser utilizado na construc?a?o de HSMs. En-\n\ntretanto, por ser mais gene?rico, na?o sera? abordado aqui, permanecendo o foco nas normas\n\nFIPS PUB 140-2 e no MCT-7.\n\n\n\n21\n\n3.2 FIPS PUB 140\n\nA norma FIPS PUB 140-2[16], publicada pelo Instituto Nacional de\n\nPadro?es e Tecnologia1 do governo norte-americano, define um conjunto de requisitos de\n\nseguranc?a para hardware criptogra?ficos empregados na protec?a?o de informac?o?es sens??veis\n\nem sistemas computacionais e de telecomunicac?a?o. Esta norma e? a evoluc?a?o da FIPS PUB\n\n140-1[17].\n\nOs requisitos de seguranc?a cobrem diversas a?reas relacionadas com o\n\nprojeto e implementac?a?o de um mo?dulo criptogra?fico, devendo o mo?dulo satisfazer todos\n\nos requisitos do n??vel de certificac?a?o desejado. A FIPS 140-2 preve? quatro n??veis: 1, 2, 3\n\nou 4. Nos n??veis em que os requisitos se diferem, aplica-se o comportamento acumulativo,\n\nou seja, as certificac?o?es em n??veis mais altos (4) devem tambe?m satisfazer os requisitos\n\ndos n??veis mais baixos (1).\n\nEm um processo de avaliac?a?o de um mo?dulo criptogra?fico, atribui-se o\n\nn??vel de cada a?rea analisada individualmente. Posteriormente, a a?rea com o n??vel mais\n\nbaixo estabelecera? o n??vel de certificac?a?o do mo?dulo criptogra?fico.\n\nA FIPS 140-2 utiliza o termo \u201dpara?metros cr??ticos de seguranc?a\n\n(CSP)\u201dpara informac?o?es que, se divulgadas ou modificadas, podem comprometer a\n\nseguranc?a do mo?dulo criptogra?fico, tais como segredos e chaves privadas criptogra?ficas e\n\ndados de autenticac?a?o (PINs e senhas).\n\nA norma ainda inclui outros quatro documentos, complementando o\n\ndocumento principal, chamados de anexo A, B, C e D, respectivamente a fam??lia de al-\n\ngoritmos criptogra?ficos aprovados, perfis de protec?a?o, geradores de nu?meros aleato?rios\n\naprovados e te?cnicas de estabelecimento de chaves2 sime?tricas e assime?tricas.\n\nAs sub-sec?o?es seguintes sumarizam cada uma das a?reas cobertas pela\n\nnorma, com uma e?nfase nas principais diferenc?as entre os n??veis de seguranc?a.\n\n1do ingle?s National Institute of Standards and Technology - NIST\n2do ingle?s key establishment\n\n\n\n22\n\n3.2.1 Especificac?a?o do Mo?dulo Criptogra?fico\n\nEsta a?rea conte?m as definic?o?es de mo?dulo e fronteira criptogra?ficos que\n\ndevem ser utilizadas na norma como um todo, ale?m de sumarizar uma lista com toda a\n\ndocumentac?a?o de hardware, software e firmware, diretamente relacionada a? seguranc?a do\n\nmo?dulo, que e? necessa?ria no processo de certificac?a?o. Entre os documentos requeridos\n\nesta?o:\n\n\u2022 especificac?a?o f??sica do mo?dulo;\n\n\u2022 portas f??sicas e interfaces lo?gicas empregadas;\n\n\u2022 especificac?a?o dos controles f??sicos e lo?gicos do mo?dulo;\n\n\u2022 lista de todas as func?o?es de seguranc?a, aprovadas ou na?o, empregadas pelo mo?dulo,\nespecificando todos os modos de operac?a?o suportados, aprovados ou na?o;\n\nAdicionalmente, requer-se que os mo?dulos criptogra?ficos possuam uma\n\npol??tica de seguranc?a3, contendo regras derivadas dos requisitos da norma FIPS 140-2 e\n\nquaisquer outras regras derivadas dos requisitos impostos pelo fabricante do mo?dulo.\n\nPor fim, define-se que a documentac?a?o deve conter um diagrama de blo-\n\ncos, detalhando os principais componentes de hardware e suas interconexo?es, tais como\n\nmicroprocessadores, buffers e memo?rias. Ale?m disso, e? necessa?rio prover documentac?a?o\n\ndo projeto dos componentes de hardware, software e firmware.\n\n3.2.2 Portas F??sicas e Interfaces Lo?gicas\n\nA FIPS 140-2 define que o fluxo de dados e acesso f??sico de um mo?dulo\n\ncriptogra?fico devem estar limitados as suas portas f??sicas e interfaces lo?gicas, identifi-\n\ncando assim, todos os pontos de entrada e sa??da existentes.\n\nAs interfaces lo?gicas sa?o divididas em quatro tipos. Apesar de cada tipo\n\npoder compartilhar da mesma porta f??sica, elas devem ser logicamente independentes\n\numas das outras. Os tipos de interfaces sa?o:\n\n3do ingle?s security policy\n\n\n\n23\n\n\u2022 entrada de dados: todos os dados que sa?o direcionados ao mo?dulo criptogra?fico para\nserem processados devem utilizar este tipo de interface;\n\n\u2022 sa??da de dados: todos os dados, com excec?a?o de dados de estado, devem sair do\nmo?dulo atrave?s deste tipo de interface;\n\n\u2022 entrada de controle: os comandos, sinais e dados de controle para operacionalizac?a?o\ndo mo?dulo criptogra?fico devem utilizar este tipo de interface;\n\n\u2022 sa??da de estado: todos os dados utilizados para indicar estado do mo?dulo, incluindo\nleds e displays, devem utilizar este tipo de interface.\n\nOs n??veis 1 e 2 somente requerem que exista uma interface lo?gica de\n\ncada um dos tipos descritos anteriormente. Nos n??veis 3 e 4, ale?m do requisito ante-\n\nrior, a norma requer que a porta de entrada e sa??da de CSP do mo?dulo criptogra?fico -\n\npara?metros de chaves criptogra?ficas em texto claro e dados de autenticac?a?o - sejam fisica-\n\nmente separadas de outras portas ou utilizem uma interface lo?gica de caminho confia?vel4.\n\nAdicionalmente, a entrada dos dados deve ser de forma direta, atrave?s de um cabo dire-\n\ntamente conectado ao mo?dulo, ou tambe?m, com a utilizac?a?o de um caminho confia?vel de\n\ndados. O uso de caminho confia?vel visa cumprir os dois requisitos dos n??veis 3 e 4.\n\n3.2.3 Pape?is, Servic?os e Mecanismos de Autenticac?a?o\n\nO mo?dulo criptogra?fico deve suportar pape?is de usua?rios, onde cada\n\npapel e? associado a um conjunto definido de servic?os, pore?m, e? opcional para o mo?dulo,\n\no emprego ou na?o de mecanismos para autenticac?a?o dos mesmos. Os servic?os que na?o\n\nmodifiquem, substituam ou revelam chaves criptogra?ficas e CSP do interior do mo?dulo,\n\npodem ser executados sem que os usua?rios sejam autenticados.\n\nEntre os pape?is de usua?rios que devem ser suportados pelo mo?dulo\n\nesta?o:\n\n\u2022 operador: executa servic?os gerais de seguranc?a, incluindo operac?o?es criptogra?ficas;\n4do ingle?s trusted path.\n\n\n\n24\n\n\u2022 administrador (crypto officer): responsa?vel pela inicializac?a?o e gerenciamento do\nmo?dulo criptogra?fico, incluindo a gerac?a?o de chaves criptogra?ficas e auditoria;\n\n\u2022 manutenc?a?o: papel opcional, utilizado durante reparos f??sicos ou lo?gicos no mo?dulo\ncriptogra?fico. Todos os segredos e chave privadas em aberto e CSPs desprotegidos\n\ndevem ser apagados utilizando o circuito zerador5 sempre que este papel e? autenti-\n\ncado.\n\nE? opcional para o mo?dulo criptogra?fico a definic?a?o de pape?is ou sub-\n\npape?is adicionais aos citados acima.\n\nExistem alguns servic?os que o mo?dulo deve obrigatoriamente prover,\n\ntais como mostrar o estado do mo?dulo, executar auto-testes e suportar a execuc?a?o de\n\npelo menos uma operac?a?o criptogra?fica em um algoritmo aprovado. Ale?m destes, muitos\n\noutros servic?os podem existir, ate? operac?o?es criptogra?ficas de algoritmos na?o aprovados,\n\noperando em modo tambe?m na?o aprovado.\n\nOs mecanismos de autenticac?a?o de um mo?dulo criptogra?fico, quando\n\nimplementado, devem ser classificados em uma das seguintes categorias:\n\n\u2022 baseado em papel: a autenticac?a?o e? realizada no papel selecionado (impl??cita ou\nexplicitamente). O mo?dulo na?o autentica a identidade individual do usua?rio.\n\n\u2022 baseado em identidade: o usua?rio e? individualmente identificado e verifica-se se ele\npode assumir o papel selecionado. O papel pode ser selecionado direta ou indireta-\n\nmente.\n\nE? opcional para o mo?dulo a possibilidade de executar va?rios servic?os\n\numa vez que um papel esta? autenticado ou solicitar uma autenticac?a?o para cada servic?o.\n\nEntretanto, os resultados das autenticac?o?es depois de desligar e ligar o mo?dulo na?o podem\n\nser armazenados, necessitando re-autenticac?a?o de qualquer um dos pape?is existentes.\n\nO n??vel 1 da norma FIPS 140-2 na?o requer nenhum mecanismo de\n\nautenticac?a?o dos operadores. Ja? o n??vel 2, requer a autenticac?a?o baseada em papel, e\n\nos n??veis 3 e 4 baseada em identidade.\n5do ingle?s zeroized\n\n\n\n25\n\n3.2.4 Modelo de estados finitos\n\nTodos os n??veis de certificac?a?o da FIPS 140-2 requerem que a operac?a?o\n\ndo mo?dulo criptogra?fico seja especificada em um modelo de estados finitos, representado\n\npor um diagrama ou tabela de transic?a?o de estados, incluindo:\n\n\u2022 todos os estados operacionais e de erro;\n\n\u2022 as transic?o?es de um estado para outro;\n\n\u2022 os eventos de entrada que causam uma transic?a?o;\n\n\u2022 os eventos de sa??da apo?s a transic?a?o para outro estado.\n\nAlguns exemplos de estados operacionais obrigato?rios sa?o a execuc?a?o\n\ndos auto-testes, autenticac?a?o do papel administrador, estado de manutenc?a?o, entre outros.\n\n3.2.5 Seguranc?a F??sica\n\nO FIPS 140-2 define que um mo?dulo criptogra?fico deve empregar meca-\n\nnismos de seguranc?a para restringir acesso f??sico na?o autorizado ao conteu?do do mo?dulo,\n\nprevenindo sua utilizac?a?o e modificac?a?o.\n\nO n??vel 1 de certificac?a?o na?o possui nenhum requisito para mo?dulos\n\ncriptogra?ficos de chip u?nico, como um smartcard, pore?m, define que o mo?dulo deve estar\n\nembalado por um invo?lucro de metal ou pla?stico duro, podendo incluir portas ou capas\n\nremov??veis.\n\nO n??vel 2 requer a utilizac?a?o de travas e a evide?ncia de qualquer tentativa\n\nde invasa?o do per??metro criptogra?fico do mo?dulo. No n??vel 3, ale?m de ficar evidente\n\na tentativa de invasa?o, deve existir alta probabilidade de ocorrer danos irrepara?veis ao\n\nmo?dulo, por exemplo, envolvendo o mo?dulo em uma pasta para criac?a?o de um bloco\n\nu?nico, r??gido e opaco a luminosidade.\n\nO u?ltimo n??vel, requer ainda que o mo?dulo responda ativamente a ten-\n\ntativa de invasa?o, ativando o circuito zerador que apaga segredos, chaves privadas e PCSs\n\nem texto claro.\n\n\n\n26\n\n3.2.6 Ambiente Operacional\n\nO ambiente operacional de um mo?dulo criptogra?fico se refere ao ge-\n\nrenciamento de software, firmware e hardware necessa?rios para sua operac?a?o, sendo o\n\nsistema operacional (SO) um dos principais componentes. O ambiente operacional de um\n\nmo?dulo deve se enquadrar em uma das seguintes categorias:\n\n\u2022 ambiente operacional de propo?sito geral: se refere ao uso de um sistema operacional\nde propo?sito geral e comercialmente dispon??vel.\n\n\u2022 ambiente operacional limitado: ambiente operacional esta?tico na?o modifica?vel, que\nna?o requer um sistema de propo?sito geral para seu suporte.\n\n\u2022 ambiente operacional modifica?vel: se refere a ambiente operacional que pode ser\nreconfigurado, adicionando, deletando ou modificando funcionalidades. Sistemas\n\noperacionais sa?o considerados ambientes operacionais modifica?veis se componen-\n\ntes de software/firmware, que na?o foram inclu??dos no processo de certificac?a?o, po-\n\ndem ser importados e executados no mo?dulo por seus usua?rios.\n\nOs requisitos desta a?rea se aplicam apenas para ambientes operacionais\n\nmodifica?veis, tendo abrange?ncias diferentes para cada n??vel de certificac?a?o.\n\nO n??vel ba?sico requer que apenas um usua?rio possa utilizar o mo?dulo\n\ncriptogra?fico por vez, prevenindo acesso de outros processos a segredos, chaves privadas\n\ne CSPs armazenados em aberto, sendo que o requisito anterior e? aplica?vel somente para\n\no n??vel 1 da certificac?a?o. O software/firmware do mo?dulo deve estar instalado de uma\n\ntal forma que bloqueie modificac?o?es ou acesso de usua?rios na?o autorizados, utilizando\n\nalguma te?cnica de integridade aprovada pela fam??lia de algoritmos FIPS.\n\nOs n??veis 2, 3 e 4, requerem, respectivamente, um sistema operacional\n\nde n??vel EAL2, EAL3 e EAL4 do Crite?rios Comuns[15], ou uma avaliac?a?o equivalente.\n\nUm mecanismo de auditoria e? requisito do n??vel 2, incluindo uma lista de eventos que\n\nprecisam obrigatoriamente ser registrados. O n??vel 3 inclui outros eventos e requer a\n\nutilizac?a?o de caminho confia?vel6 e modelo de pol??tica de seguranc?a7.\n6do ingle?s trusted path (FTP TRP.1 dos crite?rios comuns).\n7do ingle?s Security Policy Model (ADV SPM.1 do crite?rio comum).\n\n\n\n27\n\n3.2.7 Gerenciamento de Chaves Criptogra?ficas\n\nEsta a?rea apresenta requisitos de seguranc?a que visam proteger o ge-\n\nrenciamento de todo o ciclo de vida de chaves criptogra?ficas, componentes de chaves\n\ncriptogra?ficas e CSPs empregados pelo mo?dulo.\n\nOs requisitos sa?o agrupados em va?rias atividades do processo de geren-\n\nciamento de chaves criptogra?ficas, tais como:\n\n\u2022 gerac?a?o de nu?meros aleato?rios: o gerador utilizado para gerac?a?o de chaves crip-\ntogra?ficas deve obrigatoriamente ser aprovado pela fam??lia de padro?es FIPS. En-\n\ntretanto, se o mo?dulo criptogra?fico emprega geradores na?o aprovados, os dados\n\ngerados devem apenas ser utilizados para gerar sementes para um gerador aprovado\n\nou para gerar vetores de inicializac?a?o para algoritmos sime?tricos;\n\n\u2022 gerac?a?o de chaves criptogra?ficas: se o mo?dulo suportar essa funcionalidade, os\nme?todos de gerac?a?o devem ser aprovados pela fam??lia de padro?es FIPS [16, anexo\n\nA];\n\n\u2022 estabelecimento de chaves: o processo de estabelecer uma chave sime?trica para\na comunicac?a?o de duas ou mais partes, podendo ser realizado atrave?s de me?todo\n\nautoma?tico, manual ou uma combinac?a?o de etapas manuais e automa?ticas;\n\n\u2022 importac?a?o e exportac?a?o de chaves criptogra?ficas: o mo?dulo pode suportar\nimportac?a?o e/ou exportac?a?o de chaves, que podem ser realizados de forma manual,\n\natrave?s do teclado, ou automa?tica, utilizando smartcards;\n\n\u2022 armazenamento de chaves criptogra?ficas: as chaves criptogra?ficas podem ser arma-\nzenadas cifradas ou em claro. Segredo e chaves armazenados em claro na?o podem\n\nser acess??veis a usua?rios na?o autorizados;\n\n\u2022 circuito zerador de chaves criptogra?ficas: o mo?dulo deve prover um me?todo para\napagar segredos, chaves privadas e CSPs armazenados em claro dentro do mo?dulo.\n\nAle?m disso, define-se que chaves criptogra?ficas e CSPs cifrados com\n\nalgoritmos na?o aprovados sa?o considerados em formato de texto claro.\n\n\n\n28\n\n3.2.8 Interfere?ncia e Compatibilidade Eletromagne?tica\n\nO mo?dulo criptogra?fico deve estar em conformidade em relac?a?o a in-\n\nterfere?ncia8 e compatibilidade9 eletromagne?tica definida pela comissa?o de comunicac?a?o\n\nfederal do governo americano (FCC)[18]. Os n??veis 1 e 2 da certificac?a?o devem seguir os\n\nrequisitos para uso comercial, enquanto os n??veis 3, 4 para uso dome?stico.\n\n3.2.9 Auto-testes\n\nO mo?dulo criptogra?fico deve realizar auto-testes que visam garantir seu\n\nfuncionamento apropriado, devendo entrar em um estado de erro se qualquer auto-teste\n\nfalhar. O mo?dulo na?o podera? realizar nenhuma operac?a?o criptogra?fica enquanto estiver\n\nneste estado, devendo a interface de sa??da de dados ser fechada. Existem duas categorias\n\nde auto-teste: de energizac?a?o e condicional.\n\nOs auto-testes de energizac?a?o sa?o automaticamente realizados quando\n\no mo?dulo e? energizado, sem intervenc?a?o dos usua?rios. Entre os testes necessa?rios esta?o:\n\ntestes de algoritmos criptogra?ficos, testes de integridade de software e firmware, testes\n\nde func?o?es cr??ticas para o funcionamento seguro do mo?dulo. Define-se que todos os\n\nalgoritmos criptogra?ficos devem ser submetidos a testes de resposta conhecida.\n\nOs auto-testes condicionais sa?o realizados quando determinadas\n\noperac?o?es ocorrerem no mo?dulo:\n\n\u2022 gerac?a?o de par de chaves: testes de consiste?ncias do par;\n\n\u2022 carregamento de software/firmware externo: testes de validac?a?o de soft-\nware/firmware carregados para dentro do mo?dulo;\n\n\u2022 quando chaves ou componentes de chaves sa?o entradas manualmente no mo?dulo:\nmecanismos de verificac?a?o de corretude do seu conteu?do;\n\n\u2022 utilizac?a?o de um gerador de nu?meros aleato?rios: executar testes cont??nuos para\ndetectar gerac?a?o de valores constantes.\n\n8do ingle?s electromagnetic interference - EMI\n9do ingle?s electromagnetic compatibility - EMC\n\n\n\n29\n\n\u2022 quando o mo?dulo troca de modo de operac?a?o normal para de desvio10: testes para\nconfirmar o comportamento correto de func?o?es que operam com material crip-\n\ntogra?fico no momento de troca de modo de operac?a?o.\n\n3.2.10 Garantia de Projeto\n\nA garantia de projeto se refere ao uso de boas pra?ticas do fabricante\n\ndo mo?dulo criptogra?fico durante seu projeto, distribuic?a?o e operac?a?o. O fabricante deve\n\nfornecer garantias que o mo?dulo e? devidamente testado, configurado, entregue, instalado e\n\ndesenvolvido, contendo guias de manuseio adequado para seus usua?rios (administradores\n\ne operadores).\n\nEsta a?rea requer a utilizac?a?o de gere?ncia de configurac?a?o para todo o\n\nciclo de desenvolvimento do mo?dulo, incluindo a definic?a?o dos requisitos de sua entrega\n\ne operac?a?o. Ale?m disso, para auxiliar a compreensa?o do funcionamento interno, requer-se\n\num conjunto de documentos referentes a sua especificac?a?o e desenvolvimento.\n\nAdicionalmente, um conjunto de requisitos ligados ao desenvolvimento\n\ndo mo?dulo criptogra?fico e? definido, variando dependendo do n??vel de certificac?a?o. Estes\n\nrequisitos visam prover garantia que a implementac?a?o do mo?dulo corresponde com sua\n\npol??tica de seguranc?a e especificac?a?o funcional.\n\n3.2.11 Mitigac?a?o de Outros Ataques\n\nEsta a?rea de requisitos visa abranger ataques que na?o eram conhecidos\n\ndurante a escrita da norma FIPS 140-2 ou que ficaram de fora do escopo da mesma. Esses\n\nataques que o mo?dulo na?o e? suscet??vel devem estar descritos na sua pol??tica de seguranc?a.\n\nA maioria dos ataques a um mo?dulo criptogra?fico tentam determinar\n\nalguma informac?a?o referente ao material criptogra?fico armazenado dentro do mo?dulo,\n\ntais como: ana?lise da tensa?o utilizada durante a gerac?a?o de chaves e/ou operac?o?es crip-\n\ntogra?ficas, ana?lise de tempo de processamento, induc?a?o para ocorre?ncia de erros, entre\n\noutros.\n10do ingle?s bypass\n\n\n\n30\n\n3.3 Manual de Condutas Te?cnicas 7 (LEA/ITI)\n\nO manual de condutas te?cnicas 7 (MCT-7)[19], de responsabilidade do\n\nInstituto Nacional de Tecnologia da Informac?a?o (ITI)[20] em conjunto com os Labo-\n\nrato?rios de Ensaios e Auditoria11 (LEA), descreve os requisitos te?cnicos a serem valida-\n\ndos no processo de homologac?a?o de um mo?dulo de seguranc?a criptogra?fica no a?mbito da\n\nInfra-estrutura de Chaves Pu?blicas Brasileira, ICP-Brasil[21].\n\nPor HSM entende-se um servidor ou placa auxiliar criptogra?fica fisica-\n\nmente segura, resistente a? violac?a?o que fornece funcionalidades criptogra?ficas com capa-\n\ncidade de gerac?a?o e armazenamento de chaves sime?tricas e assime?tricas voltados essen-\n\ncialmente para utilizac?a?o em uma Infra-estrutura de Chaves Pu?blicas (ICP).\n\nO padra?o MCT-7 define tre?s N??veis de Seguranc?a de Homologac?a?o\n\n(NSH) e dois N??veis de Seguranc?a F??sica (NSF). O NSH e? baseado na disponibilizac?a?o\n\ndo co?digo fonte do HSM, onde o NSH 1 na?o requer depo?sito e ana?lise do co?digo fonte\n\ndo HSM, o NSH 2 requer depo?sito e ana?lise do co?digo fonte de componentes espec??ficos\n\nassociados ao dispositivo em homologac?a?o, enquanto o NSH 3 requer o depo?sito e ana?lise\n\ndo co?digo fonte completo associado ao dispositivo em homologac?a?o.\n\nO NSF 1 requer que o mo?dulo tenha mecanismos de seguranc?a f??sica\n\nque evidenciam e resistem a? violac?a?o, enquanto o NSF 2, requer que os mecanismos de\n\nseguranc?a f??sica do HSM detectem e respondam a?s tentativas de violac?a?o. O fabricante\n\ndo mo?dulo, referenciado pela norma como parte interessada (PI), deve especificar o N??vel\n\nde Seguranc?a F??sica desejada para homologac?a?o.\n\nO processo de homologac?a?o visa a interoperabilidade e operac?a?o segura\n\ndos servic?os criptogra?ficos providos por um HSM para uma ICP, analisando a adere?ncia\n\naos requisitos. O escopo da homologac?a?o na?o visa avaliar outros servic?os presentes no\n\nHSM que na?o sejam u?teis para uso em ICPs, desde que na?o exista risco desta coexiste?ncia.\n\nO MCT-7 aborda as 11 a?reas de atuac?a?o relacionadas ao projeto e\n\nimplementac?a?o do mo?dulo criptogra?fico utilizadas pela FIPS 140-2 (vide sec?a?o 3.2), ale?m\n\n11Entidades formalmente vinculadas ao ITI, aptas a realizar os ensaios exigidos nas avaliac?o?es de con-\nformidade.\n\n\n\n31\n\nde incluir outros quatro temas: algoritmos criptogra?ficos obrigato?rios, gerenciamento, in-\n\nteroperabilidade e restric?a?o de substa?ncias nocivas.\n\nApesar da utilizac?a?o das mesmas a?reas de atuac?a?o, algumas delas sofre-\n\nram alterac?o?es (adic?a?o, remoc?a?o ou modificac?a?o de alguns requisitos) e sera?o abordados\n\na seguir, com foco nestas diferenc?as.\n\n3.3.1 Requisitos de Especificac?a?o\n\nEsta a?rea permanece praticamente a mesma existente no padra?o FIPS\n\n140-2, diferenciando-se apenas em um dos requisitos. Enquanto a FIPS requer que o\n\nHSM implemente no m??nimo um algoritmo criptogra?fico aprovado, o MCT-7 apresenta\n\numa lista de algoritmos obrigato?rias, que inclui:\n\n\u2022 DES[22] nos modos de operac?a?o ECB e CBC. Apenas para uso legado;\n\n\u2022 Triple-DES nos modos de operac?a?o ECB e CBC;\n\n\u2022 AES[23] nos modos de operac?a?o ECB e CBC com tamanho de chaves de 128 bits;\n\n\u2022 Assinatura RSA[9, 24] com chaves de 1024 bits no m??nimo;\n\n\u2022 Resumos criptogra?ficos: SHA-1[25] e SHA-256, sendo o primeiro apenas para uso\nlegado.\n\nAle?m dos obrigato?rios, o MCT-7 recomenda o suporte a outros algorit-\n\nmos criptogra?ficos.\n\n3.3.2 Portas F??sicas e Interfaces Lo?gicas\n\nO MCT-7 define que as portas f??sicas e interfaces lo?gicas para a entrada\n\ne sa??da de componentes de chaves criptogra?ficas, dados de autenticac?a?o e PCSs devem ser\n\nfisica e logicamente separados de outras portas e interfaces do HSM, se enquadrando nos\n\nrequisitos de n??vel 3 e 4 do FIPS 140-2.\n\n\n\n32\n\n3.3.3 Pape?is, Servic?os e Mecanismos de Autenticac?a?o\n\nEsta a?rea difere em alguns pontos com relac?a?o aos requisitos definidos\n\nna FIPS 140-2. Primeiramente, define-se que o mecanismo de autenticac?a?o deve ser ba-\n\nseado em papel (referente ao n??vel 2 da FIPS 140-2) no NSH 1 e baseado em identidade\n\nnos NSH 2 e NSH 3 (referente aos n??veis 3 e 4 da FIPS 140-2).\n\nAle?m disso, apesar de suportar o mesmo conjunto de pape?is, somente\n\no papel administrador e? obrigato?rio, devendo receber a responsabilidade dos pape?is na?o\n\nexistentes. A seguir, apresenta-se o conjunto de servic?os obrigato?rios para cada um dos\n\npape?is:\n\n\u2022 papel administrador: inicializac?a?o do HSM, gerac?a?o de chaves RSA, sobrescrita de\nchaves criptogra?ficas com zero, finalizac?a?o do mo?dulo, execuc?a?o de auto-testes e\n\nrequisic?a?o do estado do HSM;\n\n\u2022 papel operador: manipulac?a?o de chaves criptogra?ficas e PCS no HSM, acesso a\nalgoritmos de resumo e autenticac?a?o, requisic?a?o do estado do HSM e gerac?a?o de\n\nchaves RSA;\n\n\u2022 papel de manutenc?a?o: backup e recuperac?a?o de chaves, configurac?a?o de operado-\nres e configurac?a?o e controle dos registros do sistema (o processo de auditoria e?\n\nrealizado pelo papel de manutenc?a?o).\n\n3.3.4 Modelo de Estado Finito\n\nO modelo de estado finito segue os requisitos especificados no padra?o\n\nFIPS 140-2 com a exclusa?o do estado de desvio, que na?o e? aceito pelo MCT-7.\n\n3.3.5 Seguranc?a F??sica\n\nO MCT-7 na?o faz distinc?a?o do nu?mero de componentes eletro?nicos con-\n\ntidos no HSM como definido na FIPS 140-2, sendo que o modelo de seguranc?a f??sica deve\n\nse enquadrar em uma das seguintes categorias:\n\n\n\n33\n\n\u2022 protec?a?o que evidencia violac?a?o: referente ao n??vel 2 do padra?o FIPS 140-2 para\nmo?dulos criptogra?ficos multi ? chipstandalone\n\n\u2022 protec?a?o que resiste a violac?a?o: referente ao n??vel 3 do padra?o FIPS 140-2 para\nmo?dulos criptogra?ficos multi ? chipstandalone\n\n\u2022 protec?a?o que detecta e responde a? violac?a?o: referente ao n??vel 4 do padra?o FIPS\n140-2 para mo?dulos criptogra?ficos multi ? chipstandalone\n\n3.3.6 Ambiente Operacional\n\nO MCT-7 classifica os ambientes operacionais nas tre?s categorias defi-\n\nnidas pela FIPS 140-2, utilizando os requisitos referentes ao n??vel 2, sem a obrigatorie-\n\ndade de um sistema operacional com n??vel de garantia de avaliac?a?o 2 (EAL2) do Crite?rio\n\nComum.\n\n3.3.7 Gerenciamento de Chaves Criptogra?ficas\n\nAle?m de herdar todos os requisitos existentes no padra?o FIPS 140-2, o\n\nMCT-7 incorpora outros para se adequar as caracter??sticas da ICP-Brasil. Primeiramente,\n\nrequer que a documentac?a?o especifique os me?todos utilizados para armazenar chaves se-\n\ncretas, chaves privadas e PCSs que evitem divulgac?a?o, modificac?a?o e substituic?a?o na?o\n\nautorizada. O mesmo se aplica para chaves pu?blicas, mas com o objetivo de proteger\n\ncontra modificac?a?o e substituic?a?o na?o autorizadas.\n\nO MCT-7 tambe?m requer que as chaves criptogra?ficas geradas interna-\n\nmente ao HSM possam ser configuradas como exporta?vel ou na?o exporta?vel. Este requi-\n\nsito visa criar compatibilidade com os certificados digitais do tipo S3, S4, A3 e A4 da\n\nICP-Brasil. Uma vez configurada como na?o exporta?vel, na?o deve ser poss??vel altera?-la\n\npara exporta?vel.\n\n\n\n34\n\n3.3.8 Interfere?ncia e Compatibilidade Eletromagne?tica\n\nEsta a?rea de atuac?a?o conte?m os mesmo requisitos existentes na FIPS\n\n140-2.\n\n3.3.9 Auto-testes\n\nO MCT-7 utiliza o mesmo conjunto de auto-testes definidos no padra?o\n\nFIPS 140-2, com a restric?a?o de que se o auto-teste de inicializac?a?o falhar, o HSM esta?\n\ncomprometido e na?o pode mais ser considerado confia?vel.\n\n3.3.10 Garantia de Projeto\n\nOs requisitos de garantia de projeto sa?o os mesmos encontrados no\n\npadra?o FIPS 140-2, mudando apenas a relac?a?o de alguns dos requisitos com o n??vel de\n\nseguranc?a de homologac?a?o (NSH) desejado.\n\nO NSH 1 requer documentos guias para administradores e operadores,\n\nenquanto o NSH 2, adicionalmente, requer o co?digo fonte de todos os componentes de\n\nsoftware e firmware, com comenta?rios que esclarec?am a corresponde?ncia com os compo-\n\nnentes do mo?dulo criptogra?fico.\n\n3.3.11 Mitigac?a?o de Outros Ataques\n\nAbordado da mesma forma que o padra?o FIPS 140-2.\n\n3.3.12 Requisitos de Gerenciamento\n\nEsta a?rea de atuac?a?o apresenta uma lista de funcionalidades que devem\n\nestar dispon??veis aos usua?rios do HSM, para executar operac?o?es de controle do hardware,\n\ndo mo?dulo criptogra?fico e das chaves gerenciadas. Cada um dos itens anteriores se rami-\n\nficam em va?rios requisitos.\n\nO gerenciamento do hardware deve conter procedimentos de gerac?a?o\n\nde co?pias de seguranc?a e sua posterior recuperac?a?o, protec?a?o contra falta de energia e\n\n\n\n35\n\nfalhas de comunicac?a?o, atualizac?a?o e validac?a?o de firmware e controle de ativac?a?o de\n\nmecanismos de segredo compartilhado.\n\nO HSM deve dispor de uma interface gra?fica com idioma em portugue?s\n\nou ingle?s para seu gerenciamento, incluindo a possibilidade de importar e exportar cha-\n\nves sime?tricas e assime?tricas, apagar dados contidos no mo?dulo (inclusive chaves crip-\n\ntogra?ficas), entre outros.\n\n3.3.13 Requisitos de Interoperabilidade\n\nEsta a?rea avalia o mo?dulo do ponto de vista de interoperabilidade,\n\nvisando garantir um conjunto m??nimo de funcionalidades para integrac?a?o com outras\n\naplicac?o?es. O MCT-7 requer que pelo menos uma das seguintes API esteja dispon??vel\n\npara o HSM em avaliac?a?o:\n\n\u2022 Microsoft CryptoAPI[26]\n\n\u2022 PKCS#11 v.2.11[27]\n\n\u2022 JCE12/JCA13\n\n\u2022 interface pro?pria14\n\n\u2022 engine OpenSSL (vide sec?a?o 4.5)\n\nPara cada uma das API, define-se um conjunto m??nimo de func?o?es que\n\ndeve estar presente, devendo, quando poss??vel, ser compat??vel com os sistemas operacio-\n\nnais Microsoft Windows 2000, Linux Kernel 2.4 ou suas verso?es mais recentes.\n\n3.3.14 Requisitos para restric?a?o de substa?ncias nocivas\n\nO MCT-7 recomenda que os HSM estejam em conformidade com di-\n\nretivas estabelecidas quanto a restric?a?o da utilizac?a?o de substa?ncias nocivas, visando a?\n12Extensa?o de criptografia JAVA, do ingle?s Java Cryptography Extension\n13API de comunicac?a?o Java, do ingle?s Java Communications API\n14conjunto de func?o?es disponibilizadas pelo fabricante do mo?dulo, sem seguir um padra?o conhecido, que\n\npermitira? a utilizac?a?o das chaves criptogra?ficas gerenciadas.\n\n\n\n36\n\npreservac?a?o da sau?de humana e do meio ambiente. Como refere?ncia cita-se o RoHS15[28]\n\ne o WEEE16[29], ambas diretivas da Unia?o Europe?ia, sendo que a u?ltima define o correto\n\ntratamento, recuperac?a?o e reciclagem de res??duos de materiais eletroeletro?nicos.\n\n3.4 Conclusa?o\n\nAs normas de avaliac?a?o apresentadas nesse cap??tulo diferenciam-se\n\nprincipalmente pelo grau de abrange?ncia, onde a FIPS 140-2 certifica qualquer hardware\n\ncriptogra?fico, enquanto o MCT-7 restringe-se a HSM voltados para ICPs.\n\nAle?m disso, o MCT-7, nos n??veis 2 e 3 de seguranc?a da homologac?a?o,\n\nrequer o depo?sito de co?digo fonte, requisito muitas vezes na?o aprovado pelos fabricantes\n\ndos HSM, por ameac?ar o segredo industrial.\n\nO MCT-7 se encaixa perfeitamente com os objetivos do HSM do GT\n\nICPEDU II, ja? que este u?ltimo teve seu desenvolvimento direcionado para ICPs e possui\n\nplataforma totalmente aberta.\n\nA ause?ncia de elementos que viabilizem um processo de auditoria afe-\n\ntam tanto a FIPS 140-2 quanto o MCT-7. Ale?m disso, como o foco deste u?ltimo sa?o\n\nas aplicac?o?es de ICPs, esse comportamento torna o ambiente deficiente, ja? que um sis-\n\ntema de auditoria forte e? requisito fundamental para a utilizac?a?o de cerimo?nias que visam\n\ngarantir a correta operacionalizac?a?o de HSM no a?mbito de ICPs.\n\nOutro ponto a se considerar e? a falta de requisitos para o estabeleci-\n\nmento de um controle mais restrito no uso de chaves criptogra?ficas, como tambe?m na\n\ncriac?a?o e recuperac?a?o de co?pias de seguranc?a dos HSM. A rastreabilidade das mesmas no\n\na?mbito de ICPs e? fundamental, ja? que suas ACs e ARs definem o ponto de confianc?a de\n\ntoda uma hierarquia.\n\n15do ingle?s Restriction to the use of Hazardous Substances\n16do ingle?s Waste from Electrical and Electronic Equipament\n\n\n\nCap??tulo 4\n\nOpenSSL\n\n4.1 Introduc?a?o\n\nO OpenSSL[30] e? uma poderosa e robusta ferramenta para soluc?o?es\n\nenvolvendo criptografia. Desenvolvido na linguagem C sob esforc?o colaborativo de\n\nco?digo aberto, o OpenSSL possui uma aplicac?a?o de linha de comando para execuc?a?o\n\nde operac?o?es criptogra?ficas e uma rica biblioteca, que inclui implementac?a?o dos dois\n\nprincipais protocolos de comunicac?a?o segura: SSL (Secure Socket Layer v3)[31] e TLS\n\n(Transport Layer Security v1)[32].\n\nAtualmente (julho de 2008) na versa?o 0.9.8h, o OpenSSL foi baseado\n\nna biblioteca SSLeay desenvolvida por Eric A. Young e Tim J. Hudson e e? distribu??do\n\nsob licenc?a estilo apache, que basicamente significa que qualquer um e? livre para usa?-la,\n\ncomercialmente ou na?o.\n\nO OpenSSL e? largamente empregado em aplicac?o?es criptogra?ficas co-\n\nmerciais, como no mo?dulo de conexa?o segura (mod-ssl) do servidor Web mais utilizado\n\nno mundo, o Apache[33]. Adicionalmente, o OpenSSL possui uma versa?o certificada\n\nFIPS 140-2 n??vel 1 (vide sec?a?o 4.6), que mostra a abrange?ncia do projeto.\n\nAs pro?ximas sec?o?es descrevera?o as principais funcionalidades e recur-\n\nsos implementados no OpenSSL, incluindo sua aplicac?a?o de linha de comando para exe-\n\ncutar operac?o?es criptogra?ficas, a biblioteca de aux??lio ao desenvolvimento de aplicac?o?es\n\n\n\n38\n\ne o suporte a engines, que permitem a utilizac?a?o de outras implementac?o?es dos algorit-\n\nmos suportados pelo OpenSSL, possibilitando, por exemplo, sua integrac?a?o a hardware\n\ncriptogra?ficos.\n\n4.2 Aplicac?a?o de Linha de Comando\n\nO pacote do OpenSSL inclui uma aplicac?a?o de linha de comando que\n\npossibilita a utilizac?a?o de todas as func?o?es criptogra?ficas implementadas na biblioteca.\n\nTodas essas func?o?es podem ser agrupadas em:\n\n\u2022 operac?o?es de criptografia sime?trica;\n\n\u2022 criac?a?o e manipulac?a?o de chaves e para?metros criptogra?ficos de algoritmos as-\nsime?tricos;\n\n\u2022 operac?o?es de criptografia assime?trica;\n\n\u2022 ca?lculo de mensagens de resumo (hash);\n\n\u2022 criac?a?o de certificados X.509[10], requisic?o?es de certificados (REQ)[34] e lista de\ncertificados revogados (LCR)[10];\n\n\u2022 testes de servidores e clientes que implementam protocolos SSL/TLS;\n\n\u2022 codificac?a?o de e-mails assinados e/ou cifrados;\n\n\u2022 requisic?a?o, gerac?a?o e verificac?a?o de carimbos de tempo (implementado na futura\nversa?o 0.9.9 do OpenSSL).\n\nAs func?o?es dispon??veis na aplicac?a?o de linha de comando sa?o imple-\n\nmentadas visando a maior abrange?ncia poss??vel. Por exemplo, no caso de gerac?a?o de um\n\ncertificado, seu conteu?do pode ser gravado em formato PEM (Base 64), DER (Bina?rio)\n\nou NET (um formato obsoleto da Netscape).\n\n\n\n39\n\nO poder de customizac?a?o das operac?o?es possibilita o desenvolvimento\n\nde aplicac?o?es sem utilizac?a?o da biblioteca e sim chamadas da linha de comando, que pos-\n\nsui seu poder de ac?a?o aumentado com o suporte a arquivos de configurac?a?o (sec?a?o 4.3.1),\n\nautomatizando e padronizando diversas operac?o?es. Ale?m disso, existem comandos que\n\nforam criados especialmente para integrar aplicac?o?es com o OpenSSL linha de comando,\n\ntais como as func?o?es que informam se um determinado algoritmo e? suportado.\n\n4.3 Infra-estrutura de Suporte\n\nAle?m de algoritmos criptogra?ficos, o OpenSSL implementa inu?meras\n\nfunc?o?es e funcionalidades auxiliares que facilitam o desenvolvimento de aplicac?o?es reais.\n\nAlgumas das facilidades, entre elas a operac?a?o de nu?meros grandes,\n\ntratamento de erros e abstrac?a?o de entrada e sa??da, sera?o tratadas separadamente em sub-\n\nsec?o?es neste cap??tulo, apontando suas caracter??sticas e utilidade. As facilidades imple-\n\nmentadas podem ser u?teis para a aplicac?a?o de linha de comando e/ou aplicac?o?es utilizando\n\na biblioteca OpenSSL.\n\n4.3.1 Arquivos de Configurac?a?o\n\nO OpenSSL inclui a capacidade de ler e interpretar arquivos de\n\nconfigurac?a?o em tempo de execuc?a?o. Com estrutura interna baseada em sec?o?es, esses\n\narquivos podem ser utilizados atrave?s da aplicac?a?o de linha de comando ou pela bibli-\n\noteca OpenSSL. O item openssl conf e? utilizado pelo OpenSSL para mapear a sec?a?o\n\nprincipal (como pode ser visto na tabela 4.1).\n\nOs arquivos de configurac?a?o sa?o essenciais no gerenciamento de uma\n\nautoridade certificadora atrave?s da aplicac?a?o de linha de comando do OpenSSL, definindo\n\no conteu?do dos certificados e lista de certificados revogados. Adicionalmente, todas as\n\nextenso?es suportadas ou na?o pelo OpenSSL podem ser definidas com a utilizac?a?o de ar-\n\nquivos de configurac?a?o. Para extenso?es na?o suportadas e? necessa?rio definir sua sequ?e?ncia\n\nASN.1[35] correspondente.\n\n\n\n40\n\nUm processo de carga e utilizac?a?o de engines (vide sec?a?o 4.5) tambe?m\n\npode ser automatizado utilizando arquivos de configurac?a?o, suportando ate? eventuais\n\npara?metros que podem ser necessa?rios em alguns casos. O arquivo de configurac?a?o ne-\n\ncessa?rio para carga da engine do HSM do GT ICPEDU II pode ser visto na tabela 4.1.\n\nTabela 4.1: Arquivo de configurac?a?o do OpenSSL para carga da engine do ASI-HSM.\n\n1. openssl conf = openssl init\n\n2. [ openssl init ]\n\n3. engines = engine section\n\n4. [ engine section ]\n\n5. openhsmd = openhsmd section\n\n6. [ openhsmd section ]\n\n7. engine id = openhsmd\n\n8. dynamic path = ../engines/engine openhsmd.so\n\n9. ADDRESS CONN = 192.168.1.1\n\n10. PORT CONN = 5001\n\nA API dos arquivos de configurac?a?o do OpenSSL pode ser extendida\n\ne utilizada em outras aplicac?o?es, evitando a implementac?a?o de um mo?dulo de software\n\ncom a mesma finalidade, economizando tempo e minimizando as chances de ocorre?ncia\n\nde erros.\n\n4.3.2 Func?o?es de Callback\n\nO objetivo dessas func?o?es e? proporcionar flexibilidade e extensa?o das\n\nfuncionalidades de uma biblioteca, permitindo aos desenvolvedores implementar o com-\n\nportamento de acordo com a necessidade de sua aplicac?a?o.\n\nAs func?o?es de callback na?o sa?o executadas diretamente pela aplicac?a?o,\n\nao inve?s disso, seu ponteiro e? passado para outras func?o?es, de onde elas sera?o chamadas.\n\nPara isso, as func?o?es de callback devem seguir o formato previamente definido pela bibli-\n\noteca que as utilizam, isto e?, a quantidade e tipos dos argumentos e o tipo da varia?vel de\n\nretorno.\n\nA figura 4.1 demonstra o funcionamento das func?o?es de callback, sa-\n\nlientando a indiferenc?a da biblioteca quanto a operac?a?o que esta? sendo executada. A\n\n\n\n41\n\nFigura 4.1: Funcionamento das func?o?es de callback, empregadas no OpenSSL.\n\nbiblioteca esta? passando os inteiro 5 e 2 como para?metro de uma func?o?es implementada\n\npela aplicac?o?es. A execuc?a?o das linhas 10 e 11 resulta, respectivamente, nos valores 7 e\n\n3.\n\nO OpenSSL emprega func?o?es de callback em va?rias de suas funciona-\n\nlidades, tal como no processo de gerac?a?o de nu?meros primos, que, com sua utilizac?a?o,\n\npode-se acompanhar cada tentativa do processo de encontrar o nu?mero primo apropriado.\n\nAdicionalmente, para algumas funcionalidades da biblioteca OpenSSL,\n\no emprego dessas func?o?es e? fundamental, como no suporte a execuc?a?o multi-thread, que\n\ne? o assunto da pro?xima sub-sec?a?o.\n\n4.3.3 Suporte Multi-thread\n\nA biblioteca OpenSSL emprega controle de acesso concorrente as estru-\n\nturas consideradas cr??ticas quando executado em modo multi-thread, protegendo-os com\n\nuso de sema?foros.\n\nEntretanto, o efetivo uso desse controle fica a cargo da aplicac?a?o que\n\nesta? utilizando a biblioteca OpenSSL, pois esta deve implementar a func?a?o que sera? res-\n\nponsa?vel por checar e bloquear o acesso aos recursos. Essa func?a?o de callback deve ser\n\nconfigurada no OpenSSL no in??cio da execuc?a?o da aplicac?a?o.\n\n\n\n42\n\nO controle de acesso a recursos na biblioteca requer obrigatoriamente a\n\ndefinic?a?o da func?a?o de callback que ira? implementar as operac?o?es de bloqueio e liberac?a?o\n\ndos sema?foros. Nas chamadas a func?a?o de callback solicitando acesso a um recurso\n\ncompartilhado, existe a distinc?a?o de operac?o?es de somente-leitura das operac?o?es leitura-\n\nescrita. Fica a cargo da aplicac?a?o o n??vel de controle desejado. A aplicac?a?o de linha de\n\ncomando do OpenSSL implementa uma func?a?o de callback que trata indiferentemente\n\noperac?a?o de leitura e escrita, garantindo acesso exclusivo a qualquer um dos casos.\n\nNa sec?a?o 4.5 sera? abordado com detalhes o controle de acesso si-\n\nmulta?neo realizado pela biblioteca para gerenciar o suporte as engines.\n\n4.3.4 Matema?tica de Precisa?o Arbitra?ria\n\nA biblioteca OpenSSL possui incorporado um conjunto de func?o?es ca-\n\npaz de manipular e executar operac?o?es matema?ticas sobre nu?meros grandes, isto e?, que\n\nna?o podem ser representados nas varia?veis do tipo inteiro de 32 ou 64 bits encontrado nas\n\nplataformas computacionais convencionais.\n\nA manipulac?a?o de nu?meros grandes e? essencial para a implementac?a?o,\n\nentre outra, do algoritmo de chaves pu?blicas RSA, considerando que chaves deste algo-\n\nritmo devem ter um tamanho m??nimo de seguranc?a de 1024 bits, como definido na FIPS\n\n140-2.\n\nO conjunto de func?o?es implementadas inclui todas operac?o?es normal-\n\nmente dispon??veis sobre varia?veis do tipo inteiro em linguagens de programac?a?o em ge-\n\nral, incluindo operac?o?es modulares, utilizadas em cifragens e decifragens RSA, ale?m da\n\ngerac?a?o de nu?meros primos, que incorpora os testes conhecidos de primalidade.\n\nEsta funcionalidade e? outro recurso que pode ser usufruido por\n\naplicac?o?es utilizando a biblioteca OpenSSL, diminuindo a complexidade de aplicac?o?es\n\ncom necessidades semelhantes.\n\n\n\n43\n\n4.3.5 Tratamento de Erros\n\nO OpenSSL possui um sistema centralizado para tratar erros durante\n\nsua execuc?a?o, atribuindo identificadores u?nicos para cada parte/mo?dulo de sua biblioteca.\n\nEsses identificadores sa?o utilizados para separar os identificadores de func?o?es e erros de\n\ncada mo?dulo.\n\nQuando um erro acontece, 5 informac?o?es referentes ao erro sa?o regis-\n\ntradas:\n\n\u2022 o identificador do mo?dulo;\n\n\u2022 o identificador da func?a?o;\n\n\u2022 identificador do erro;\n\n\u2022 nome do arquivo (automaticamente obtido com a macro F ILE da linguagem\nC);\n\n\u2022 linha na qual o erro foi disparado (automaticamente obtido com a macro LIN E\nda linguagem C);\n\nCada mo?dulo e? responsa?vel por carregar no sistema o texto correspon-\n\ndente a cada identificador, tanto de func?a?o quanto de erro, permitindo a conversa?o dos\n\nerros ocorridos durante a execuc?a?o do sistema em texto leg??vel.\n\nO OpenSSL disponibiliza a func?a?o ERR load crypto strings para\n\ncarregar todos os identificadores e seus respectivos textos de todos seus mo?dulos nativos\n\nde uma so? vez. Normalmente, esse e? um dos primeiros passos dentro de uma aplicac?a?o\n\nutilizando a biblioteca OpenSSL.\n\nNa aplicac?a?o de linha de comando, os erros sa?o impressos ao final da\n\nexecuc?a?o de qualquer operac?a?o que venha a falhar. Ja? no caso de aplicac?o?es utilizando\n\na biblioteca OpenSSL, as func?o?es de manipulac?a?o dos erros precisam ser explicitamente\n\nacionadas.\n\nO sistema de erros do OpenSSL suporta a adic?a?o de novos mo?dulos\n\nde erros, permitindo que bibliotecas e aplicativos o utilizem para gerenciamento de seus\n\n\n\n44\n\nerros, deixando o sistema uniforme. O OpenSSL inclui scripts que vasculham o co?digo\n\nfonte e geram os arquivos necessa?rio para essa integrac?a?o.\n\n4.3.6 Abstrac?a?o de Entrada e Sa??da\n\nA abstrac?a?o de entrada e sa??da (BIO) do OpenSSL permite a\n\ncomunicac?a?o entre dois pontos de forma transparente, isto e?, sem a manipulac?a?o de carac-\n\nter??sticas inerentes a fonte/destino da informac?a?o. Ale?m disso, camadas podem ser adici-\n\nonadas nesses canais de comunicac?a?o, provendo funcionaliades extras. No OpenSSL, os\n\nBIOs sa?o agrupados em dois tipos primitivos: comunicac?a?o e filtro.\n\nOs BIOs de comunicac?a?o sa?o utilizados na troca de informac?a?o entre\n\nduas entidades, podendo essas serem arquivos, sockets, memo?ria ou simplesmente um\n\noutro BIO para comunicac?a?o dentro da pro?pria aplicac?a?o. O uso de algumas dessas enti-\n\ndades incorporam um outro sub-tipo de BIOs, chamado de descriptor. Este sub-tipo se\n\naplica a entidades que utilizam descritores de arquivos, como no caso de sockets.\n\nUm exemplo da utilizac?a?o dos BIOs de comunicac?a?o seria o processo\n\nde escrita de dados em um arquivo no disco r??gido, atrave?s de um BIO arquivo. O mesmo\n\nprocesso vale para leitura de arquivos.\n\nOs BIOs do tipo filtro sa?o recursos adicionais aos BIOs de comunicac?a?o,\n\ncapazes de processar os dados transferidos, agindo como uma camada extra na\n\ncomunicac?a?o entre dois pontos. O processamento realizado pelo filtro depende da sua\n\nfinalidade, que pode ser:\n\n\u2022 conversor base64 ( conversa?o e vice-versa );\n\n\u2022 calculo de func?o?es de resumo;\n\n\u2022 criptografia sime?trica (cifrar e decifrar);\n\n\u2022 protocolo SSL;\n\nNo caso do exemplo anterior, se os dados a serem escritos no arquivo\n\nprecisam ser convertidos em base64, acopla-se o BIO filtro espec??fico em frente ao BIO\n\n\n\n45\n\narquivo, de forma que os dados sera?o escritos no BIO base64 e terminara?o no arquivo de\n\ndestino, com os dados convertidos em base64. Na?o existe limite da quantidade de filtros\n\nque podem ser conectados.\n\nO emprego de filtros deixa o processo simples e uniforme, independente\n\nda quantidade de camadas existentes, onde a sa??da de uma camada e? a entrada da pro?xima,\n\nate? atingir o no? final. Cada BIO do tipo filtro realiza uma operac?a?o em um sentido que\n\na informac?a?o e? transferida e a operac?a?o inversa no sentido oposto, ou seja, voltando no\n\nexemplo do arquivo em base64, tudo que for escrito sera? convertido em base64, e o que\n\nfor lido retornara? ao formato original. Vale destacar que o processo inverso na?o se aplica\n\npara a func?o?es de resumo, devido sua propriedade de irreversibilidade.\n\nA abstrac?a?o provida pelos BIOs de comunicac?a?o ja? justificaria a\n\nexiste?ncia dos BIOs, entretanto, com a adic?a?o dos tipos filtros, sua utilidade multiplica-se\n\nde tamanho, agregando inu?meras possibilidades. E? poss??vel por exemplo criar um socket\n\nusando BIO e posteriormente adicionar um BIO ssl nas pontas, de forma a estabelecer um\n\ncanal seguro de comunicac?a?o.\n\nA utilizac?a?o de BIOs esta? difundida em todo co?digo do OpenSSL, en-\n\nglobando todas as func?o?es de leitura e escrita de arquivos do sistema, tais como o manu-\n\nseio de chaves pu?blicas e privadas.\n\nA abstrac?a?o de Entrada e Sa??da apresentada nesta sec?a?o e? voltada para\n\ndesenvolvedores utilizando a biblioteca OpenSSL, ja? que na aplicac?a?o de linha de co-\n\nmando, apesar de utiliza?-los intensamente, esse recurso passa despercebido.\n\n4.4 Documentac?a?o\n\nDocumentac?a?o e? um dos pontos mais importantes para que uma ferra-\n\nmenta, que e? necessariamente voltada para usua?rios em geral, seja facilmente assimilada e\n\ncompreendida na sua forma de utilizac?a?o e operac?a?o. O OpenSSL, apesar de toda sua ge-\n\nnialidade explicada aqui, peca neste quesito. A falta de documentac?a?o, principalmente na\n\nbiblioteca que permite integrac?a?o com outros aplicativos, dificulta muito sua utilizac?a?o.\n\nAs constantes atualizac?o?es e gerac?a?o de novas verso?es acabam aconte-\n\n\n\n46\n\ncendo sem os devidos cuidados com os materiais auxiliares de aprendizado, fazendo com\n\nque a pouca documentac?a?o existente fique desatualizada e muitas vezes piorando ainda\n\nmais sua compreensa?o.\n\nO co?digo fonte acaba se tornando o principal meio de obter conheci-\n\nmento detalhado dos objetivos das func?o?es e procedimentos, resultando muitas vezes em\n\nmais tempo gasto entendendo a biblioteca do que realmente pensando na soluc?a?o do pro-\n\nblema. A utilizac?a?o de outras fontes de documentac?a?o como livros[36], artigos e lista de\n\ndiscusso?es sa?o alternativas.\n\n4.5 Engine\n\nO OpenSSL implementa cada um dos algoritmos criptogra?ficos por ele\n\nsuportado, possibilitando que sejam operacionalizados por outras aplicac?o?es. Entretanto,\n\nem algumas situac?o?es, e? necessa?rio a utilizac?a?o de outras implementac?o?es, como no caso\n\ndos aceleradores criptogra?ficos, que implementam os algoritmos em hardware e suportam\n\ngrande poder de processamento. Nestes casos, a sa??da e? a utilizac?a?o de engines OpenSSL.\n\nUma engine OpenSSL e? um mo?dulo de software que permite ao seu de-\n\nsenvolvedor substituir as implementac?o?es padro?es dos algoritmos existentes. As engines\n\npodem implementar um ou mais algoritmos e sa?o classificadas de esta?ticas ou dina?micas.\n\nAs engines esta?ticas sa?o integradas e compiladas com o co?digo fonte do\n\nOpenSSL, tornando-as parte do pacote criptogra?fico. Elas sa?o automaticamente carrega-\n\ndas sempre que o OpenSSL e? referenciado. Por outro lado, as engines dina?micas podem\n\nser carregadas em tempo de execuc?a?o, sem necessitar nenhuma alterac?a?o na versa?o ori-\n\nginal do OpenSSL. Uma engine dina?mica e? gerada da mesma forma que uma biblioteca\n\ndina?mica, sendo normalmente identificada pela extensa?o .so no Unix1 e .dll no Microsoft\n\nWindows2.\n\nInternamente, o OpenSSL define uma engine como uma estrutura cha-\n\nmada EN GIN E, que contem os seguintes campos:\n\n1Sistema operacional de software livre.\n2Sistema operacional da Microsoft Corporation.\n\n\n\n47\n\n\u2022 id: identifica unicamente uma engine no OpenSSL. Tanto a aplicac?a?o de linha de\ncomando quanto a biblioteca utilizando este campo como refere?ncia;\n\n\u2022 name: tem somente papel descritivo;\n\n\u2022 rsa meth, dsa meth, dh method, ecdsa meth, ecdh meth e rand meth: estru-\ntura definindo os ponteiros das func?o?es responsa?veis pelo manuseio do algoritmo\n\nem questa?o (RSA, DSA, DH, ECDSA, ECDH ou func?o?es de aleatoriedade). Por\n\nexemplo, o campo rand meth conte?m os ponteiros para func?o?es capazes de gerar\n\ndados rando?micos e pseudorando?micos, adicionar entropia, carregar o estado do\n\ngerador, entre outros;\n\n\u2022 ciphers e digests: diferentemente dos algoritmos anteriores, onde cada algoritmo\npossuia uma estrutura pro?pria, os algoritmo sime?tricos e func?o?es de resumo pos-\n\nsuem o ponteiro para apenas uma func?a?o cada;\n\n\u2022 init e f inish: func?o?es de inicializac?a?o e fim da execuc?a?o da engine. Servem para\na engine criar e preparar as estruturas internas necessa?rias para seu funcionamento.\n\nPor exemplo o estabelecimento da conexa?o com um HSM.\n\n\u2022 destroy: func?a?o chamada antes de remover a engine da lista de engines do\nOpenSSL. Deve ser utilizada para liberar qualquer tipo de memo?ria alocada, como\n\npor exemplo a descarga de suas mensagens de erros do sistema de erro do OpenSSL;\n\n\u2022 ctrl: ponteiro para uma func?a?o capaz de interpretar os para?metros necessa?rios pela\nengine. Por exemplo o enderec?o IP de um HSM conectado na rede;\n\n\u2022 load privkey e load pubkey: func?a?o para carregar chaves pu?blicas e privadas ge-\nrenciadas atrave?s da engine. O retorno desta func?a?o e? uma estrutura EV P P KEY ,\n\nque pode ser utilizada para encapsular todas as chaves assime?tricas suportadas pelo\n\nOpenSSL;\n\n\u2022 cmd def ns: define os comandos aceitos e interpretados por ctrl. Cada co-\nmando conte?m um identificador (que deve iniciar com o valor da constante\n\n\n\n48\n\nEN GIN E CM D BASE, seguindo com EN GIN E CM D BASE + 1, ...),\n\nnome do commando, sua descric?a?o e o tipo do valor de entrada esperado. Os\n\nposs??veis tipos de respostas sa?o: nume?rico ou texto. Os comandos ainda podem\n\nna?o necessitar nenhuma entrada ou ate? mesmo ser marcado para uso interno;\n\n\u2022 struct ref e f unct ref : utilizado pelo OpenSSL para controle do nu?mero de re-\nfere?ncias a? estrutura e ao conjunto de func?o?es de uma engine. Garante a utilizac?a?o\n\nda engine em va?rias partes do aplicac?a?o, evitando, por exemplo, a inicializac?a?o de\n\numa engine ja? inicializada;\n\n\u2022 outros: para?metros utilizados para controle interno, como prev e next, que mante?m\numa lista duplamente encadeada das engines dispon??veis, ex data, utilizada para\n\narmazenamento de dados referente a engine e f lags, que define suas caracter??sticas.\n\nAlgumas peculiaridades devem ser levadas em conta no desenvolvi-\n\nmento de uma engine OpenSSL para a utilizac?a?o de chaves gerenciadas por um HSM.\n\nPrimeiramente, o que fazer com a func?a?o loadprivkey, ja? que na?o se quer carregar a chave\n\nprivada na memo?ria da ma?quina hospedeira, na?o faria o m??nimo sentido utilizar uma HSM\n\npara proteger o ciclo de vida de chaves criptogra?ficas e deixa?-la em aberto desta forma.\n\nUma abordagem comum para resolver esse problema e? retornar a chave pu?blica nas duas\n\nfunc?o?es loadprivkey e loadpubkey. Em um primeiro momento pode parecer estranho,\n\nmas isso e? poss??vel porque ale?m de o OpenSSL utilizar uma u?nica estrutura para repre-\n\nsentar chaves pu?blicas e privadas de um mesmo algoritmo, sera? a engine que ira? executar\n\nas operac?o?es sobre essa chave. Portanto, toda vez que uma operac?a?o com a chave privada\n\nfor realizada, a pro?pria engine sera? chamada e a chave privada correta pode ser identifi-\n\ncada baseado na chave pu?blica, utilizando seus valores pu?blicos (nu?meros primos n e e)\n\nou atrave?s do identificador da chave explicitamente armazenado na varia?vel exdata, que\n\ncomo na engine, existe tambe?m nas estruturas de chaves.\n\nAdicionalmente, a estrutura de chaves criptogra?ficas da biblioteca pos-\n\nsui um atributo chamado engine, que aponta para a engine responsa?vel por realizar as\n\noperac?o?es criptogra?ficas da chave. Portanto, apo?s a carga da chave atra?ves das func?o?es\n\nload privkey e load pubkey, deve-se substituir o valor deste atributo pela engine atual.\n\n\n\n49\n\nConceitualmente falando, a diferenc?a entre uma cifragem assime?trica\n\ne uma assinatura esta? na chave que e? utilizada na operac?a?o, chave pu?blica no primeiro\n\ncaso e chave privada no segundo, e tambe?m na informac?a?o sobre a qual a ac?a?o e? rea-\n\nlizada, no u?ltimo caso o resultado de uma func?a?o de resumo. Sabendo disso, o u?ltimo\n\nponto relevante na implementac?a?o de uma engine esta? na estrutura de operac?o?es RSA\n\n(RSA M ET HOD). Ela possui basicamente 6 func?o?es:\n\n\u2022 rsa pub enc: cifragem utilizando uma chave pu?blica;\n\n\u2022 rsa priv dec: decifragem utilizando uma chave privada;\n\n\u2022 rsa priv enc: cifragem utilizando uma chave privada;\n\n\u2022 rsa pub dec: decifragem utilizando uma chave pu?blica;\n\n\u2022 rsa sign: gerac?a?o de assinaturas;\n\n\u2022 rsa verif y: verificac?a?o de assinaturas;\n\nComo pode ser observado, as func?o?es rsa priv enc e rsa sign pos-\n\nsuem a mesma finalidade de gerac?a?o de assinaturas, o que acontence com rsa pub dec e\n\nrsa verif y tambe?m. Uma engine na?o deve implementar estas quatro func?o?es, e sim es-\n\ncolher o conjunto que preferir. O ponto chave aqui e? utilizar o campo f lags da estrutura\n\ndas chaves RSA para marcar qual o conjunto de func?o?es que deve ser acionado. Se a flag\n\nRSA F LAG SIGN V ER estiver configurada, as func?o?es rsa sign e rsa verif y sera?o\n\nutilizadas. As quatro func?o?es ainda existem por uma questa?o de compatibilidade com\n\nverso?es anteriores do OpenSSL, sendo por padra?o utilizado rsa privenc e rsa pub dec,\n\napesar de rsa sign e rsa verif y serem mais novas.\n\n4.6 OpenSSL FIPS 140-2 n??vel 1\n\nO OSSI[37] (Open Source Software Institute3), entidade sem fins lu-\n\ncrativos, em conjunto com o nu?cleo de desenvolvimento do OpenSSL preparou e subme-\n3Instituto de Software de Co?digo Aberto em traduc?a?o literal\n\n\n\n50\n\nteu a biblioteca do OpenSSL para avaliac?a?o nos requisitos da FIPS 140-2, alcanc?ando a\n\ncertificac?a?o da versa?o 1.0 do OpenSSL FIPS em marc?o de 2006[38].\n\nO OpenSSL FIPS 1.0 submetido a certificac?a?o conte?m um conjunto li-\n\nmitado de func?o?es do OpenSSL 0.9.7 e sua utilizac?a?o por um aplicac?a?o difere-se um\n\npouco do usual. O co?digo do OpenSSL FIPS deve ser compilado para gerar o co?digo\n\nobjeto e esse co?digo objeto deve ser estaticamente ligado4 no processo de compilac?a?o\n\ndo co?digo fonte da aplicac?a?o. A biblioteca criptogra?fica do OpenSSL tambe?m deve ser\n\nligada na aplicac?a?o, podendo esta ser esta?tica ou dina?mica.\n\nOs desenvolvedores do OpenSSL FIPS implementaram va?rias te?cnicas\n\npara verificac?a?o de integridade nas va?rias etapas que o mo?dulo pode assumir, com che-\n\ncagens automa?ticas do co?digo fonte durante a compilac?a?o, no co?digo objeto durante a\n\nligac?a?o e no co?digo executa?vel quando o modo FIPS do mo?dulo e? ativado. Durante a\n\nativac?a?o do modo FIPS, atrave?s da func?a?o F IP S mode set, os auto-testes sa?o iniciados\n\ne todos devem obrigatoriamente passar. Uma vez em modo FIPS, somente operac?o?es de\n\nalgoritmos aprovados podem ser executadas. A tabela 4.2 conte?m os algoritmos crip-\n\ntogra?ficos aprovados na versa?o FIPS do OpenSSL.\n\nTabela 4.2: Algoritmos Criptogra?ficos Aprovados no OpenSSL FIPS versa?o 1.1.2\n\nTipo de Algoritmo Algoritmos\nAssime?trico RSA\nSime?trico 3DES (nos modos: CBC, CFB8, CFB64, ECB e OFB)\n\nAES de 128, 192 or 256 bits (nos modos CBC, CFB8, CFB128,\nECB e OFB)\n\nHMAC HMAC-SHA-1, HMAC-SHA-224, HMAC-SHA-256, HMAC-\nSHA-384 e HMAC-SHA-512\n\nFunc?o?es de resumo SHA-1, SHA-224, SHA-256, SHA-384 e SHA-512\nRNG ANSI X9.31[39]\n\nEm junho de 2006, o certificado da versa?o 1.0 foi suspenso, porque\n\nidentificou-se que func?o?es cr??ticas na?o estavam implementadas dentro do per??metro de\n\nseguranc?a. Apo?s as alterac?o?es necessa?rias, submeteu-se uma nova versa?o, 1.1, mas a\n\n4processo de associac?a?o dos va?rios co?digos objetos com o objetivo de resolver pende?ncias externas,\ngerando o co?digo executa?vel\n\n\n\n51\n\nreativac?a?o do certificado nunca ocorreu. A versa?o foi alterada de 1.1 para 1.1.1 e subme-\n\ntida a um novo processo de certificac?a?o.\n\nA versa?o 1.1.1[40], aprovada em 06/02/2007, foi revogada em\n\n30/11/2007 por dois problemas no gerador de nu?meros aleato?rios: um bug no auto-teste\n\ncont??nuo e uma vulnerabilidade no processo de inclusa?o de sementes. Uma nova versa?o\n\ndo co?digo, 1.1.2, com essas deficie?ncias sanadas, foi novamente submetida a certificac?a?o,\n\npore?m, no meio do processo, os requisitos dos auto-testes para operac?o?es DSA mudou de\n\n512 bits para a utilizac?a?o de chaves de 1024 bits. Para evitar mais atrasos, o algoritmo\n\nDSA foi retirado do processo de certificac?a?o, diminuindo o nu?meros de algoritmos apro-\n\nvados. A alterac?a?o do auto-teste do DSA de 512 para 1024 bits era realmente simples,\n\nmas significaria o rein??cio do processo de certificac?a?o, uma vez que o co?digo fonte iria\n\nsofrer alterac?o?es.\n\nA versa?o 1.1.2 recebeu a certificac?a?o em 6 de fevereiro de 2008[41].\n\nUma nova versa?o, 1.2, ja? esta? em processo de desenvolvimento e sera? baseada na versa?o\n\n0.9.8 do OpenSSL.\n\n4.7 Conclusa?o\n\nO OpenSSL e? uma ferramenta de criptografia com suporte a um grande\n\nnu?mero de algoritmos criptogra?ficos. Seus va?rios anos de desenvolvimento e testes rea-\n\nlizados por muitos usua?rios ao redor do mundo passam credibilidade quanto a qualidade\n\ndos resultados obtidos. Ale?m disso, alguns de seus algoritmos criptogra?ficos fazem parte\n\ndo OpenSSL FIPS, que possui certificac?a?o FIPS 140-2 n??vel 1.\n\nPor outro lado, sua documentac?a?o e? um tanto deficiente, deixando de-\n\nsenvolvedores sem muitas alternativas de aux??lio. As principais fontes de informac?o?es\n\nacabam sendo seu co?digo fonte e suas listas de discussa?o, que esta?o dispon??veis na pa?gina\n\ndo projeto.\n\nAs engines OpenSSL permitem a integrac?a?o de aplicativos com\n\nmo?dulos criptogra?ficos, tornando poss??vel a utilizac?a?o de chaves criptogra?ficas geren-\n\nciadas em um HSM. E? nessa plataforma que o desenvolvimento do ASI-HSM se baseou,\n\n\n\n52\n\nsuprindo o requisito de ser compat??vel com o sistema de gerenciamento de certificado\n\ndigitais da ICPEDU.\n\n\n\nCap??tulo 5\n\nASI-HSM\n\n5.1 Introduc?a?o\n\nO projeto ICPEDU II surgiu da necessidade de se criar um mo?dulo de\n\nseguranc?a criptogra?fica com tecnologia brasileira, de co?digo aberto e de baixo custo, vol-\n\ntado principalmente para a implantac?a?o da Infra-estrutura de Chaves Pu?blicas para Ensino\n\ne Pesquisa (ICPEDU). O HSM fruto deste projeto e? o ASI-HSM.\n\nO ASI-HSM sera? descrito neste cap??tulo, com apresentac?a?o de sua ar-\n\nquitetura e os componentes necessa?rios para sua operacionalizac?a?o. O protocolo imple-\n\nmentado internamente para a gesta?o do ciclo de vida de chaves criptogra?ficas e? conhe-\n\ncida como OpenHSM e e? abordado nos cap??tulos 6 e 7. Os protocolos e algoritmos\n\ndo OpenHSM foram concebidos para serem embarcados em hardware criptogra?fico que\n\nprovesse os mecanismos de protec?a?o conforme estabelece os requisitos apresentados no\n\nCap??tulo 3. A arquitetura do ASI-HSM e? descrita na Sec?a?o 5.2.\n\nO HSM pode ser visto como um sistema provedor de servic?os crip-\n\ntogra?ficos. Para poder utiliza?-lo a partir de uma aplicac?a?o numa ma?quina hospedeira, e?\n\nnecessa?rio uma interface de comunicac?a?o. A interface escolhida para o ASI-HSM foi\n\na \u201dengine\u201ddo OpenSSL, descrito no Cap??tulo 4. A interface do proto?tipo e? descrita na\n\nSec?a?o 5.4.\n\nAle?m deste canal de comunicac?a?o para acesso aos servic?os, foi proje-\n\n\n\n54\n\ntado um sistema de gesta?o remota do HSM, que e? executado na ma?quina hospedeira, para\n\nrealizar a configurac?a?o, administrac?a?o, operac?a?o e auditoria do material criptogra?fico pro-\n\ntegido pelo HSM e gerenciado pelo OpenHSM. Este sistema e? apresentado na Sec?a?o 5.3.\n\n5.2 Arquitetura\n\nO ASI-HSM e? composto por uma se?rie de componentes de hardware\n\ne software, que cooperam entre si com o intuito de proteger, gerenciar e monitorar os\n\nrecursos e servic?os dispon??veis no mesmo. A figura 5.1 apresenta uma visa?o geral da\n\narquitetura do mo?dulo1.\n\nFigura 5.1: Visa?o geral da arquitetura do HSM da GT ICPEDU II\n\nNa parte interna ao per??metro criptogra?fico, o mo?dulo conta com dois\n\ncomponentes principais: a Unidade de Seguranc?a e a Unidade Gestora.\n\n1cre?ditos pela figura para Juliano Romani\n\n\n\n55\n\nA Unidade de Seguranc?a (US), dispositivo desenvolvido especifica-\n\nmente para monitorar o funcionamento do mo?dulo, conta com uma se?rie de sensores\n\nque visam a detecc?a?o de qualquer tentativa de violac?a?o ou risco de comprometimento da\n\nseguranc?a por influe?ncia de fatores externos, sendo qualquer comportamento inesperado\n\nregistrado no sistema de registros interno a? US. O mo?dulo emprega sensores de tensa?o,\n\ntemperatura, luminosidade e detecc?a?o de intrusa?o f??sica, sendo o u?ltimo provido atrave?s de\n\numa malha de circuitos que envolve o per??metro criptogra?fico. Ale?m disso, e? dentro dessa\n\nunidade que ficam o gerador de nu?meros aleato?rios (PNG) e o relo?gio de alta-estabilidade,\n\nusado no processo de gerac?a?o dos pares de chaves gerenciados pelo mo?dulo e controle de\n\ntempo interno, respectivamente.\n\nA Unidade Gestora (UG) consiste de um conjunto de software/hardware\n\nresponsa?vel por hospedar as aplicac?o?es e dados referentes a? execuc?a?o do mo?dulo, como\n\npor exemplo, as ferramentas e bibliotecas que compo?em o OpenSSL, bem como as chaves\n\ngerenciadas pelo mo?dulo.\n\nOperando sobre a UG esta?o as aplicac?o?es envolvidas na gere?ncia do ci-\n\nclo de vida das chaves privadas do HSM (OpenHSMd), bem como a memo?ria persistente\n\ndo mo?dulo, uma Compact Flash (CF), responsa?vel por armazenar os dados relacionados\n\na? configurac?a?o do HSM, as chaves sime?tricas e assime?tricas, certificados, entre outras\n\ninformac?o?es u?teis ao funcionamento do HSM. Ainda na memo?ria flash, encontra-se a\n\nversa?o customizada do sistema operacional FreeBSD embarcada para gerenciamento da\n\nsoluc?a?o como um todo.\n\nA comunicac?a?o com o mundo externo esta? restrito a duas portas f??sicas,\n\numa porta de rede e uma porta USB. A porta de rede e? utilizada para gerenciamento do\n\nHSM, atrave?s dos aplicativos de administrac?a?o remota (sec?a?o 5.3), e para uso das chaves\n\ngerenciadas, atrave?s de uma engine OpenSSL (sec?a?o 5.4). Na porta USB conecta-se o\n\nleitor de smartcards utilizado nos processos de criac?a?o e autenticac?a?o dos usua?rios do\n\nmo?dulo.\n\n\n\n56\n\n5.3 Aplicativos de Administrac?a?o Remota\n\nO gerenciamento do HSM e? realizado atrave?s de dois aplicativos de\n\nadministrac?a?o remota: interface texto (linha de comando) e interface gra?fica. Ambas tem\n\no mesmo conjunto de func?o?es e comandos e se conectam ao HSM atrave?s de um canal\n\nseguro de comunicac?a?o, tu?nel SSL.\n\nA interface texto, uma vez conectada ao HSM, prove? um ambiente no\n\nmesmo estilo linha de comando do OpenSSL, aonde comandos podem ser executados\n\ncom seus respectivos para?metros e opc?o?es, sendo que todas as func?o?es possuem sua\n\ndocumentac?a?o de fa?cil acesso na pro?pria interface. E? uma forma eficiente e eficaz de\n\nobter a informac?a?o requerida. A figura 5.2 apresenta um exemplo da interface texto co-\n\nnectada ao HSM.\n\nFigura 5.2: Interface texto para administrac?a?o remota do HSM do GT ICPEDU II\n\nPor outro lado, a interface gra?fica, desenvolvida em Java2, e? rica em\n\ndetalhes com componentes ativos que se atualizam baseados na configurac?a?o atual do\n\nHSM. Outro ponto forte dessa interface e? sua portabilidade. A figura 5.3 apresenta um\n\nexemplo da interface gra?fica conectada no HSM.\n\nAs duas aplicac?o?es de administrac?a?o remota do mo?dulo sa?o internacio-\n\nnalizadas, suportando atualmente os idiomas ingle?s e portugue?s.\n\n2linguagem de programac?a?o, dispon??vel em http://java.sun.com/\n\n\n\n57\n\nFigura 5.3: Interface gra?fica para administrac?a?o remota do HSM do GT ICPEDU II\n\n5.4 Engine OpenSSL\n\nUm mo?dulo criptogra?fico deve prover uma API de integrac?a?o que per-\n\nmita a uma aplicac?a?o utilizar suas chaves criptogra?ficas gerenciadas. Essa API pode\n\nseguir um padra?o ja? estabelecido, como por exemplo PKCS#11, CryptoAPI, Engine\n\nOpenSSL, ou ser uma interface pro?pria do fabricante do HSM.\n\nA escolha da API de integrac?a?o adequada levou em considerac?a?o dois\n\nprincipais fatores: grau de complexidade de implementac?a?o e o nu?mero de aplicativos\n\nafetados. Desta forma, os servic?os criptogra?ficos do HSM sa?o providos atrave?s de uma\n\nengine OpenSSL, que pode ser carregada de forma esta?tica ou dina?mica. O mo?dulo prove?\n\nas seguintes funcionalidades atrave?s desta engine:\n\n\u2022 operac?o?es sobre chaves privadas RSA: permite o uso das chaves criptogra?ficas ge-\nrenciadas pelos HSM;\n\n\n\n58\n\n\u2022 gerador de nu?meros aleato?rios: este servic?o utiliza o gerador de nu?meros aleato?rios\ndispon??vel na unidade de seguranc?a.\n\n5.5 Conclusa?o\n\nEste cap??tulo apresentou a arquitetura e os principais componentes do\n\nHSM desenvolvido no projeto ICPEDU II, o ASI-HSM. Este desenvolvimento, que pare-\n\ncia distante devido a falta de documentac?a?o e publicac?o?es existente no mundo acade?mico,\n\npor serem normalmente guardadas a sete chaves por empresas comerciais, se mostrou to-\n\ntalmente via?vel e os objetivos do projeto foram alcanc?ados, sendo concebido utilizando\n\napenas software livre.\n\nOs pro?ximos dois cap??tulos ira?o descrever em detalhes o protocolo\n\nde gerenciamento do ciclo de vida de chaves criptogra?ficas utilizados no ASI-HSM, o\n\nOpenHSM.\n\n\n\nCap??tulo 6\n\nOpenHSM - Operacionalizac?a?o\n\nO OpenHSM e? um protocolo para gerenciamento completo do ciclo\n\nde vida de chaves criptogra?ficas de HSMs. O foco principal deste protocolo e? suprir\n\nas necessidades encontradas na implantac?a?o de infra-estruturas de chaves pu?blicas, tais\n\ncomo rastreabilidades de chaves e com operac?o?es totalmente audita?veis.\n\nO gerenciamento do ciclo de vida de chaves criptogra?ficas de forma\n\nsegura e? o objetivo de qualquer HSM, sendo que este objetivo pode levar um longo\n\ntempo de maturac?a?o ate? ser plenamente alcanc?ado. Sabendo disso, este cap??tulo apre-\n\nsenta o protocolo do OpenHSM, que foi primeiramente apresentado em uma dissertac?a?o\n\nde mestrado[4] defendida em 2005 e vem sendo aprimorado em va?rias ocasio?es, tais como\n\ntrabalhos de conclusa?o de curso[3], outras dissertac?o?es e artigos[5][6]. Apesar disso, o\n\nconjunto destas publicac?o?es na?o apresenta de forma coerente todos os sub-protocolos do\n\nOpenHSM.\n\nAs mudanc?as nos sub-protocolos do OpenHSM, ale?m de estruturais,\n\ntambe?m ocorreram na forma de sua representac?a?o, com o objetivo descreve?-los formal-\n\nmente. A descric?a?o formal e? o primeiro passo para poder-se realizar a verificac?a?o formal\n\nda corretude dos protocolos. As alterac?o?es e aprimoramentos estruturais sa?o relativos aos\n\nprotocolos de criac?a?o e recuperac?a?o de co?pias de seguranc?a do material criptogra?fico, que\n\nsa?o descritos no Cap??tulo 7.\n\n\n\n60\n\n6.1 Aspectos Gerais\n\nEsta sec?a?o apresenta as definic?o?es e caracter??sticas inerentes aos proto-\n\ncolos do OpenHSM, de forma a ajudar na compreensa?o dos mesmos. Ale?m disso, dois\n\nsub-protocolos, que tambe?m dara?o suporte para as pro?ximas sec?o?es, sera?o abordados: a\n\ncriac?a?o e a autenticac?a?o de grupos de usua?rios.\n\nO conjunto de definic?o?es e caracter??sticas utilizadas no protocolo\n\nOpenHSM sa?o:\n\n\u2022 Uma vez inicializado, o HSM gera um par de chaves assime?tricas krh e kuh, pos-\nsibilitando a emissa?o de um certificado auto-assinado ch. Esta autoridade certifica-\n\ndora interna define o elemento central de confianc?a do HSM, a partir do qual todos\n\nos certificados de seus membros sera?o gerados;\n\n\u2022 O protocolo define 3 diferentes grupos de usua?rios: administradores, auditores e\noperadores;\n\n\u2022 Cada tipo de grupo suportado pelo HSM possui um sistema de armazenamento\n(DS) diferente. Sendo o dos administradores ADS, operadores ODS e auditores\n\nAudDS. Os dados enviados para esses sistemas sa?o armazenados sem nenhum tipo\n\nadicional de criptografia;\n\n\u2022 Cada grupo no HSM possui um identificador, sendo este u?nico em grupos do mesmo\ntipo. Entretanto, existe apenas um grupo de administradores va?lido para um dado\n\nmomento, com o identificador ADM sempre apontando para o grupo corrente.\n\n\u2022 Todos os grupos sa?o submetidos ao esquema de segredo compartilhado[42], onde\na chave sime?trica do grupo ks, e? dividida em n partes das quais k sa?o necessa?rias\n\npara recuperar ks. Os limiares seguem a seguinte regra: 1 ? k ? n. Um conjunto\nde partes de um segredo e? representado por Ks;\n\n\u2022 Durante a criac?a?o de um grupo no HSM, cada membro recebe um par de chaves\nassime?tricas, kri e kui, ale?m de um certificado emitido pela AC interna do HSM,\n\n\n\n61\n\nci. Esse material e? enta?o armazenado no smartcard do membro e sera? utilizado\n\nnovamente durante sua autenticac?a?o;\n\n\u2022 Cada parte do segredo compartilhado do grupo, ksi, passa a representar um de seus\nmembros, sendo sua chave pu?blica utilizada para cifrar sua parte do segredo antes\n\nque este seja armazenado no HSM. Este e? o material que sera? decifrado durante o\n\nprocesso de autenticac?a?o do grupo;\n\n\u2022 O sistema de armazenamento de dados na?o-exporta?veis, N XD, e? um sistema de\narmazenamento como qualquer outro, diferenciando-se somente porque na criac?a?o\n\nde uma co?pia de seguranc?a do HSM, os dados nele contidos na?o sa?o copiados;\n\n\u2022 A interac?a?o dos membros dos grupos com o HSM e? feito atrave?s de um computador\ndiretamente conectado, referenciado por hm.\n\nOs protocolos do OpenHSM, dada sua complexidade e quantidade de\n\npassos, sera?o descritos aqui na forma de algoritmos. Esta mudanc?a na sua forma de\n\nrepresentac?a?o e? justificada pelos comenta?rios recebidos nas publicac?o?es citadas anterior-\n\nmente, garantindo legibilidade e melhor entendimento.\n\nO processo de criac?a?o de grupos do HSM permanece igual independente\n\ndo seu tipo, sendo abordado aqui e referenciado posteriormente quando for necessa?rio. A\n\nexecuc?a?o do algoritmo createGroup requer alguns para?metros, entre eles os dados sobre\n\no novo grupo, como: identificador (id) e limiares (k e n), o sistema de armazenamento\n\nreferente ao tipo de grupo a ser criado, DS, e por fim a chave privada e o certificado do\n\nHSM (krh e ch).\n\nA execuc?a?o inicia com a gerac?a?o da chave sime?trica do grupo ks no\n\npasso 1. A chave e? enta?o submetida ao esquema de compartilhando de segredo, utilizando\n\nn como o nu?mero total de partes e k o nu?mero m??nimo de partes para reconstruir ks,\n\nresultando no conjuntos de partes da chave Ks.\n\nNo passo 3, inicia-se o processo de criac?a?o dos membros, que deve ser\n\nexecutado n vezes, ate? que todos os membros do grupo estejam criados. No passo 4, o par\n\n1Um suma?rio das descric?o?es das varia?veis e func?o?es esta? dispon??vel no ape?ndice A\n\n\n\n62\n\nAlgoritmo createGroup(DS, id, k, n, ch, krh) 1\n\nCria um grupo utilizando o esquema de compartilhamento de segredo, gerando um\npar de chaves (kri e kui) e um certificado (ci) para cada membro do grupo (si). Os\ncertificados dos membros sa?o assinados pela chave privada do HSM krh. O certifi-\ncado de cada membro inclui seu nome e informac?o?es requisitadas durante o processo\nde criac?a?o dos membros. O token criptogra?fico de cada membro ctsi e? utilizado para\narmazenar seus objetos criados no processo, ci e kri. A chave sime?trica do grupo ks,\nque foi compartilhada em n partes, e? retornada como resultado do algoritmo.\n1: ks ? genSessionKey()\n2: Ks ? splitSecret( ks, k, n )\n3: for ksi in Ks do\n4: (kri, kui) ? genKeyPair()\n5: idi ? load( hm, si )\n6: ci ? genCert( idi, kui, ch, krh )\n7: store( ctsi , kri, ci, ch )\n8: eksi ? encrypt( ksi, ci )\n9: store( DS, id, ci, eksi )\n10: end for\n11: store( DS, id, k, n )\n12: return ks\n\nde chaves do membro e? gerado, kri e kui. Na sequ?e?ncia, o nome do membro e? solicitado\n\na? ma?quina hospedeira, informac?a?o que sera? utilizada para emitir o seu certificado ci no\n\npasso 6. Uma vez que o certificado esta? gerado, kri, ci e ch pode ser armazenado no token\n\ncriptogra?fico do membro.\n\nContinuando, uma das partes do segredo do grupo ksi e? cifrada com\n\no certificado do membro ci (seu certificado possui sua chave pu?blica). E finalmente, no\n\npasso 9, com todos os procedimentos para o membro finalizados, seus dados sa?o arma-\n\nzenados em DS. Salientando que a chave privada do membro kri na?o e? armazenada,\n\npreservando sua caracter??stica principal de privacidade.\n\nNo passo 11 os dados referentes ao grupo sa?o armazenados. E final-\n\nmente, no passo 12, a chave sime?trica do grupo e? retornada.\n\nOutro algoritmo que permanece igual independente do tipo (grupo) e? a\n\nautenticac?a?o de um grupo authenticGroup. O processo requer o sistema de armazena-\n\nmento e o identificador referentes ao grupo a ser autenticado.\n\nO algoritmo authenticGroup inicia carregando k do grupo identificado\n\n\n\n63\n\nAlgoritmo authenticGroup( DS, id )\nAutentica um grupo do HSM identificado por id no sistema de armazenamento DS.\nOs certificados dos membros ci a serem autenticados sa?o lidos de seus tokens crip-\ntogra?ficos ctsi , identificando-o e possibilitando a decifragem da parte do segredo do\ngrupo referente ao membro. E? necessa?rio que k membros sejam autenticados para\nrecuperar o segredo do grupo ks.\n1: k ? load( DS, id )\n2: for i = 1 to k do\n3: ci ? load( ctsi )\n4: eksi ? load( DS, id, ci )\n5: u ? genSessionKey()\n6: euksi ? encrypt( u || eksi, ci )\n7: eksu ? ctDecrypt(ctsi , euksi )\n8: ksi ? decrypt( eksu, u )\n9: end for\n10: ks ? joinSecret( Ks )\n11: return ks\n\npor id do sistema de armazenamento DS. No passo 2, inicia-se a iterac?a?o para autenticar\n\nos k membros do grupo, k foi definido no processo de sua criac?a?o e define o nu?mero\n\nm??nimo de membros que precisam ser autenticados para permitir a reconstruc?a?o do se-\n\ngredo do grupo.\n\nAs operac?o?es entre os passos 2 e 9 sera?o realizadas k vezes, ate? ser\n\nposs??vel recuperar o segredo do grupo. No passo 3 carrega-se do token criptogra?fico do\n\nmembro seu certificado ci, objeto necessa?rio para, no passo 4, identificar no DS a parte\n\ndo segredo cifrado do membro eksi.\n\nOs pro?ximos dois passos, 4 e 5, sa?o necessa?rios para evitar o ataque de\n\nreplay do Dolev-Yao[43], gerando u e recifrando seu valor concatenado a eksi, resultando\n\nem euksi. Este u?ltimo enta?o e? enviado ao token criptogra?fico do membro para decifragem,\n\nliberado u e ksi. Antes de retorna?-los ao HSM, o token cifra ksi com u. Como u e?\n\nconhecido pelo HSM, o valor de ksi e? recuperado no passo 8.\n\nFinalmente no passo 10, recupera-se a chave sime?trica do grupo ks a\n\npartir do conjunto de partes decifradas nos passos anteriores. O algoritmo termina retor-\n\nnando o valor de ks.\n\n\n\n64\n\n6.2 Inicializac?a?o do HSM e criac?a?o do grupo de Admi-\n\nnistradores\n\nEste e? o primeiro passo na preparac?a?o de um ambiente para gerencia-\n\nmento do ciclo de vida de chaves privadas. Este algoritmo ira? realizar a criac?a?o da auto-\n\nridade certificadora raiz interna e do grupo de administradores do HSM, estabelecendo,\n\nrespectivamente, seu ponto de confianc?a e o grupo responsa?vel por suas operarac?o?es ad-\n\nministrativas.\n\nO HSM, como apresentado nos aspectos gerais, possui apenas um grupo\n\nde administradores va?lido para um determinado momento no tempo, sendo que esse grupo\n\npode ser alterado a qualquer momento utilizando o algoritmo changeAdmGroup descrito\n\nna sec?a?o 6.7.\n\nO algoritmo e? disparado com a especificac?a?o dos valores de k e n, res-\n\npectivamente o nu?mero m??nimo de membros para autenticar o grupo e seu nu?mero total\n\nde membros.\n\nAlgoritmo createAdm( k, n ) 1\n\nInicializa o HSM, criando a AC interna que servira? de ponto de confianc?a para suas\noperac?o?es. O grupo de administradores tambe?m e? criado.\n1: krh, kuh ? genKeyPair()\n2: ch ? genSelfSignedCert( krh, kuh, id )\n3: ksad ? createGroup( ADS, ADM , k, n, ch, krh )\n4: ekrh ? encrypt( krh, ksad )\n5: store( ADS, ch, ekrh )\n6: store( CT L, ch )\n7: return ch\n\nNo primeiro passo, o par de chaves assime?tricas do HSM, krh e kuh,\n\ne? gerado e a partir dele o certificado auto-assinado do HSM e? emitido. Estes sa?o os\n\ncomponentes necessa?rios para criar o grupo de administradores no passo 3. Como ja?\n\nexplicado anteriormente, a criac?a?o de um grupo do HSM e? gene?rica e permanece a mesma\n\npara todos os tipos de grupos. A chave sime?trica do grupo de administradores ksad e?\n\nretornada como resultado. Essa chave e? utilizada para cifrar a chave privada do HSM no\n\npasso 4, gerando ekrh.\n\n\n\n65\n\nAte? o passo 4, todos as operac?o?es necessa?rias para a inicializac?a?o e\n\ncriac?a?o dos administradores foram finalizadas, restando apenas armazenar todos os com-\n\nponentes rece?m criados, o que permitira? a execuc?a?o da pro?xima etapa do processo de\n\ntornar o HSM operacional, a criac?a?o de um grupo de auditores.\n\nEnta?o, no passo 5 o certificado do HSM e sua chave privada cifrada\n\nsa?o armazenados no sistema de armazenamento de administradores e o passo 6 adiciona\n\no certificado auto-assinado ch na lista de certificados confia?veis CT L, estabelecendo o\n\nponto de confianc?a do HSM.\n\nFinalmente, ch e? retornado para a ma?quina hospedeira que iniciou a\n\nexecuc?a?o do algoritmo, o que identifica unicamente o HSM.\n\n6.3 Criac?a?o de um grupo de Auditores\n\nApesar de na?o existir restric?a?o criptogra?fica que impec?a a criac?a?o de um\n\ngrupo de operadores diretamente apo?s a inicializac?a?o do HSM, o protocolo do OpenHSM\n\ndefine que a criac?a?o de um grupo de auditores seja obrigatoriamente o segundo passo\n\npara criar um HSM operacional, de forma a garantir que o processo de auditoria possa ser\n\nrealizado antes mesmo de uma chave ser criada ou ate? utilizada.\n\nTratando-se de uma operac?a?o administrativa, o grupo de administrado-\n\nres do HSM e? autenticado nos primeiros passos do algoritmo, permitindo a reconstruc?a?o\n\nde sua chave s??metrica, possibilitando a decifragem da chave privada do HSM.\n\nCada grupo de auditores recebe um par de chaves assime?trica que sera?\n\nutilizado para assinar os registros do HSM que sera?o exportados pelo grupo. Outros pares\n\nde chaves na?o podem ser associados a um grupo de auditores, como acontece aos grupos\n\nde operadores, mas este e? assunto das pro?ximas sec?o?es.\n\nO algoritmo requer os valores de k e n para o novo grupo de auditores,\n\ncomo acontece na criac?a?o do grupo de administradores, e um identificador para o grupo\n\nid, sendo que este deve identificar unicamente o grupo dentro do conjunto de grupos de\n\nauditores.\n\nO algoritmo comec?a autenticando o grupo de administradores do sis-\n\n\n\n66\n\nAlgoritmo createAudGroup(id, k, n)\nApo?s a autenticac?a?o dos administradores do HSM, e? criado um novo grupo de audi-\ntores identificado por id. A chave sime?trica desse grupo e? submetida ao mecanismo\nde compartilhamento de segredo, utilizando os limiares k e n. Adicionalmente, um\npar de chaves assime?tricas e? associado ao grupo rece?m criado.\n1: ksad ? authenticateGroup( ADS, ADM )\n2: ch, ekrh ? load( ADS )\n3: krh ? decrypt( ekrh, ksad )\n4: ksau ? createGroup( AudDS, id, k, n, ch, krh )\n5: krau, kuau ? genKeyPair()\n6: cau ? genCert( id, kuau, ch, krh )\n7: ekrau ? encrypt( krau, ksau )\n8: store( AudDS, id, cau, ekrau )\n9: return cau\n\ntema, especificando o sistema de armazenamento dos administradores ADS e o iden-\n\ntificador do grupo ADM . Como definido nas premissas, o HSM possui apenas um\n\ngrupo va?lido de administradores para um determinando periodo de tempo e o identifi-\n\ncador ADM sempre aponta para o grupo atual.\n\nO segundo e terceiro passo visam acessar a chave privada do HSM,\n\ncarregando-a cifrada de ADS, decifrando em seguida com a chave sime?trica do admi-\n\nnistradores. Portanto, os tre?s primeiros passos dos algoritmos considerados operac?o?es\n\nadministrativas sera?o os mesmos, autenticando o grupo de administradores e permitindo\n\nacesso a chave privada do HSM.\n\nNo passo 4, o grupo de auditores e? criado utilizando o algoritmo\n\ncreateGroup previamente definido, resultando na chave sime?trica do novo grupo ksau.\n\nLogo apo?s, um par de chaves criptogra?ficas e? gerado, sendo que um\n\ncertificado utilizando-o sera? emitido pela AC interna do HSM no passo 6. Este certifi-\n\ncado sera? u?til para verificac?a?o da integridade dos registros exportados do HSM, atrave?s\n\ndo algoritmo abordado na sec?a?o 6.10. Posteriormente, no passo 7, a chave privada dos\n\nauditores e? cifrada com ksau, garantindo confidencialidade da mesma.\n\nFinalmente, o certificado e a chave privada cifrada do novo grupo po-\n\ndem ser armazenados no sistema de armazenamento de auditores, identificados por id, no\n\npasso 8. O certificado do grupo de auditores e? retornado como resultado da execuc?a?o do\n\n\n\n67\n\nalgoritmo.\n\n6.4 Criac?a?o de um grupo de Operadores\n\nOs grupos de operadores no protocolo do OpenHSM dete?m a responsa-\n\nbilidade de liberac?a?o para uso das chaves gerenciadas de um HSM, podendo cada grupo\n\nter nenhuma ou va?rias chaves associadas. Definido como uma tarefa administrativa, o\n\nprocesso de criac?a?o de um grupo de operadores requer a autenticac?a?o do grupo de admi-\n\nnistradores.\n\nA peculiaridade neste tipo de grupo e? a existe?ncia de um link com o\n\ngrupo de administradores, habilitando este u?ltimo a realizar operac?o?es sobre um grupo de\n\noperadores. Este link, por exemplo, permite aos administradores do HSM associar novas\n\nchaves ao grupo de operadores como tambe?m desassocia?-las.\n\nOs para?metros necessa?rios para criar um grupo de operadores sa?o os\n\nmesmos requeridos no criac?a?o de um grupo de auditores, com o identificador do novo\n\ngrupo id e os limiares para o esquema de segredo compartilhado k e n.\n\nAlgoritmo createOperGroup(id, k, n)\nCria um grupo de operadores, autenticando primeiramente o grupo de administrado-\nres. O ponto de confianc?a do novo grupo em relac?a?o aos administradores e? estabele-\ncido.\n1: ksad ? authenticateGroup( ADS, ADM )\n2: ch, ekrh ? load( ADS )\n3: krh ? decrypt( ekrh, ksad )\n4: kso createGroup( ODS, id, k, n, ch, krh )\n5: kso? ? genSessionKey()\n6: ksao ? xor( kso, kso? )\n7: eksao ? encrypt( ksao, ch )\n8: store( ADS, id, eksao )\n9: store( N XD, id, kso? )\n\nOs tre?s primeiros passos deste algoritmo sa?o exatamente iguais ao pro-\n\ncesso de criac?a?o de auditores. Tem o objetivo de autenticar o grupo de administradores e\n\npermitir acesso a? chave privada krh e ao certificado ch do HSM.\n\nNo passo 4, o novo grupo de operadores e? criado, com sua chave\n\n\n\n68\n\nsime?trica, kso, sendo retornada como resultado da execuc?a?o. Essa chave sera? utilizada\n\npara cifrar as chaves que forem associadas com esse grupo de operadores.\n\nOs passos seguintes, de 5 a 9, servem para criar o ponto de confianc?a\n\ndos operadores nos administradores, permitindo a realizac?a?o de operac?o?es administrativas\n\nsobre os mesmo. Inicia-se com a gerac?a?o de uma segunda chave sime?trica para o grupo\n\nde operadores kso?. No passo 6, realiza-se a operac?a?o ou-exclusivo (XOR) entre as duas\n\nchaves sime?tricas do grupo de operadores, resultado em ksao. Uma das propriedades da\n\nfunc?a?o de XOR e? sua reversibilidade, isto e?, A?B = C e C?B = A. Portando, se reali-\nzar a operac?a?o kso??ksad, o resultado sera? kso. Desta forma, o grupo de administradores\npode reconstruir kso tendo acesso apenas a kso? e ksad.\n\nNo passo 7, o resultado da operac?a?o XOR ksad e? cifrado com a chave\n\npu?blica do HSM, garantindo que so? quem possui acesso a chave privada do HSM, no caso\n\no grupo de administradores, podera? ter acesso a mesma. E por fim, os dados sens??veis\n\npara futuras execuc?o?es sa?o armazenadas nos devidos sistemas de armazenamento, passos\n\n8 e 9.\n\nO valor de kso? e? armazenado em um sistema de armazenamento dife-\n\nrente do utilizado para os dados dos grupo de operadores. A utilizac?a?o do N XD garante\n\numa caracter??stica importante ao protocolo do OpenHSM, a rastreabilidade das chaves\n\ngerenciadas. Durante o procedimento de backup do HSM, coberto no cap??tulo 7, o N XD\n\nna?o e? copiado, resultando que, uma vez recuperado o backup, N XD permanec?a vazio.\n\nSem a existe?ncia do ponto de confianc?a dos operadores em relac?a?o aos administradores,\n\nna?o se pode realizar operac?o?es administrativas sobre os mesmos.\n\nPor isso que, logo apo?s a recuperac?a?o do backup, o grupo de adminis-\n\ntradores, juntamente com cada grupo de operadores, devera?o realizar o procedimento de\n\nre-criac?a?o do ponto de confianc?a entre os mesmos (sec?a?o 6.9). Uma vez obrigato?ria a\n\nintervenc?a?o do grupo de operadores, garante-se que uma chave gerenciada nunca sera?\n\nutilizada ou tera? seu responsa?vel trocado sem pre?vio conhecimento.\n\n\n\n69\n\n6.5 Criac?a?o de Chave Gerenciada\n\nA criac?a?o de chaves gerenciadas e? uma das operac?o?es mais importante\n\nem um HSM e pode ser executada logo apo?s a criac?a?o do primeiro grupo de operadores.\n\nO grupo de administradores precisa ser autenticado e deve existir o ponto de confianc?a\n\nentre os administradores e o grupo de operadores que sera? responsa?vel pela nova chave.\n\nAs chaves, como acontece nos grupos de operadores e auditores, pos-\n\nsuem um identificador u?nico dentro no conjunto de chaves gerenciadas, representado por\n\nidk. Este identificador sera? utilizado posteriormente quando o grupo de operadores car-\n\nregar a chave para uso ou quando uma aplicac?a?o externa realizar operac?a?o criptogra?ficas\n\ncom a chave.\n\nAle?m do identificador a ser atribu??do a nova chave, o algoritmo de\n\ncriac?a?o de chaves gerenciadas precisa do identificador do grupo de operadores que sera?\n\nresponsa?vel pela chave ido e, tambe?m, as caracter??sticas da nova chave, tais como algo-\n\nritmo e tamanho.\n\nAlgoritmo createManagedKey(idk, key params, ido)\nCria um par de chaves, identificada por idk, para ser gerenciada pelo HSM. Essa nova\nchave tera? as caracter??sticas definidas por key params (algoritmo e tamanho) e sera?\nassociada ao grupo de operadores identificado por ido.\n1: ksad ? authenticateGroup( ADS, ADM )\n2: ch, ekrh ? load( ADS )\n3: krh ? decrypt( ekrh, ksad )\n4: eksao ? load( ADS, ido )\n5: ksao ? decrypt( eksao, krh )\n6: kso? ? load( N XD, ido )\n7: kso ? xor( ksao, kso? )\n8: kr, ku ? genKeyPair( keyparams )\n9: ekr ? encrypt( kr, kso )\n10: store( KDS, idk, ekr, ku, ido )\n11: return ku\n\nO algoritmo inicia autenticando o grupo de administradores, com o ob-\n\njetivo de obter acesso ao certificado e chave privada do HSM nos tre?s primeiros passos.\n\nEstes passos ja? foram descritos na criac?a?o de grupo de auditores (vide sec?a?o 6.3).\n\nNo passo 4, baseado no identificador do grupo de operadores ido,\n\n\n\n70\n\ncarrega-se o resultado da operac?a?o XOR cifrada do sistema de armazenamento dos ad-\n\nministradores. Com a chave privada do HSM ja? aberta, pode-se decifrar eksao para ter\n\nacesso a ksao. Logo apo?s carrega-se a segunda chave sime?trica do grupo de operadores,\n\nkso?, identificado por ido. Lembrando que kso? estabelece o ponto de confianc?a entre o\n\ngrupo de adminitradores e o grupo de operadores.\n\nNo passo 7, se faz uso da propriedade de reversibilidade da operac?a?o\n\nXOR e recupera-se a chave sime?trica do grupo de operadores kso. Esta e? a chave que sera?\n\nutilizada no passo 9 para cifrar a nova chave gerenciada. O par de chaves assime?tricas e?\n\ngerado no passo 8 e enta?o armazenado no KDS no passo 10, juntamente com idk e ido.\n\nFinalmente, a chave pu?blica rece?m criada e? retornada como resultado do algoritmo.\n\n6.6 Liberando uma Chave Gerenciada para Uso\n\nO gerenciamento do ciclo de vida de chaves privadas deve permitir\n\nem algum momento a utilizac?a?o destas chaves. A partir do algoritmo detalhado nesta\n\nsec?a?o, e? poss??vel ao grupo de operadores responsa?vel por uma chave libera?-la para uso\n\npor aplicac?o?es externas.\n\nO HSM autentica o grupo de operadores responsa?vel pela chave,\n\ndeixando-a carregada na memo?ria vola?til do sistema sob uma pol??tica de uso explicita-\n\nmente definida.\n\nEssa pol??tica pode ser a quantidade ma?xima de usos da chave e/ou um\n\nper??odo de tempo determinado. Por exemplo, pode-se carregar uma chave para 5 usos em\n\num prazo de 5 minutos, sendo que a chave e? descarregada assim que a primeira restric?a?o\n\nexpirar.\n\nO algoritmo para liberac?a?o de uma chave requer o identificador da chave\n\nidkey e a pol??tica sob a qual a chave ira? operar, policy.\n\nO algoritmo carrega no passo 1 os dados da chave idkey do sistema de\n\narmazenamento de chaves KDS. Entre os dados carregados esta?o o identificador do\n\ngrupo de operadores responsa?vel pela chave, idoper, e o par de chaves propriamente dito,\n\nku e ekr, sendo que a chave privada encontra-se cifrada.\n\n\n\n71\n\nAlgoritmo loadManagedKey( idkey , policy )\nCarrega uma chave gerenciada identificada por idkey no HSM. Primeiramente, o\ngrupo de operadores responsa?vel pela chave e? autenticado. O para?metro policy defi-\nnira? a pol??tica de uso da chave.\n1: ekr, ku, idoper ? load( KDS, idkey )\n2: ks ? authGroup( ODS, idoper )\n3: kr ? decrypt( ekr, ks )\n4: manageKey( idkey, kr, ku, policy )\n5: return( ku )\n\nNo passo 2 autentica-se o grupo de operadores, obtendo-se acesso a sua\n\nchave sime?trica ks, que sera? utilizada no passo 3 para decifrar ekr.\n\nA chave privada, kr, e? enta?o submetida ao controlador de chaves carre-\n\ngadas, definindo idkey, a pol??tica definida pelos operadores, ku e kr. Esta chave permane-\n\ncera? dispon??vel enquanto sua pol??tica de uso permitir ou o procedimento de descarga da\n\nmesma for acionado.\n\n6.7 Troca do grupo de Administratores\n\nO grupo de administradores de um HSM pode ser trocado utilizando\n\no algoritmo coberto nesta sec?a?o. Essa operac?a?o, como qualquer outra de troca de gru-\n\npos, deve ser realizada sempre que houver comprometimento do grupo. Considera-se um\n\ngrupo comprometido quando o uso do mecanismo de compartilhamento de segredo for\n\ninviabilizado.\n\nAs chaves sime?tricas dos grupos sa?o compartilhadas utilizando os limi-\n\nares k e n, sendo k o nu?mero m??nimo de membros presentes para autenticar o grupo e n o\n\nnu?mero total de membros. Sabendo disso, para um grupo de 5 membros onde 3 precisam\n\nestar presentes, a existe?ncia de qualquer 2 membros na?o e? capaz de recuperar nenhum bit\n\nda chave. Portanto, se dois membros do grupo perderem de alguma forma acesso a seus\n\ntoken criptogra?ficos, e consequ?entemente acesso as suas chaves privadas, o grupo ainda\n\npode ser autenticado, pore?m, se mais um tiver problema, o grupo esta? comprometido.\n\nConsiderando-se que um HSM so? possui um grupo de administradores\n\nva?lido, a sua troca se torna pec?a fundamental para a continuidade do ciclo de vida das\n\n\n\n72\n\nchaves gerenciadas do HSM, ja? que o grupo de administradores tambe?m e? utilizado para\n\nrecuperac?a?o das co?pias de seguranc?a. Este processo autentica o grupo de administradores\n\natual e requer os limiares k e n que sera?o utilizados para criac?a?o do novo grupo.\n\nAlgoritmo changeAdmGroup( k, n )\nTroca o grupo de administradores de um HSM, autenticando o atual e gerando o\nnovo. Depois de transferida a administrac?a?o do HSM, a chave privada do HSM passa\na ser protegida pela chave sime?trica do novo grupo ks2 e os certificados de todos os\nmembros do grupo antigo sa?o revogados.\n1: ks1 ? authenticateGroup( ADS, ADM )\n2: ch, ekrh ? load( ADS )\n3: krh ? decrypt( ekrh, ks1 )\n4: ks2 ? createGroup( ADS, ADM2, k, n, ch, khh )\n5: ekrh ? encrypt( krh, ks2 )\n6: store( ADS, ekrh )\n7: revokeGroupCerts( ADS, ADM )\n8: ADM ? ADM2\n9: return ch\n\nO algoritmo changeAdmGroup inicia como qualquer outra operac?a?o\n\nadministrativa ja? vista ate? aqui, onde os 3 primeiros passos visam autenticar o grupo de\n\nadministradores e liberando acesso a chave privada do HSM, krh.\n\nNo passo 4, o novo grupo de administradores e? criado, referenciado\n\npelo identificador tempora?rio ADM2. Esse identificador sera? posteriormente atribu??do a\n\nADM , que sempre aponta para o grupo de administradores corrente do HSM.\n\nA chave privada do HSM e? enta?o cifrada utilizando a chave sime?trica\n\ndo novo grupo de administradores ks2 no passo 5 e logo apo?s armazenada em ADS.\n\nNo passo 7, os certificados de todos os membros do antigo grupo de administradores\n\nsa?o revogados, garantindo que na?o sera?o mais aceitos no HSM. Seguindo, e? atualizado o\n\nidentificador do grupo de administradores, ADM , para apontar para o novo grupo ADM2.\n\nFinalmente, com o grupo de administradores trocado, o certificado do\n\nHSM e? retornado no passo 9. Como visto, essa e? uma operac?a?o cr??tica e requer bastante\n\natenc?a?o, ja? que um HSM possui apenas um grupo de administradores va?lido. Deve-se\n\ngarantir atomicidade na execuc?a?o dos passos 6, 7 e 8, ja? que se falharem destes pontos, o\n\nHSM possuira? um grupo de administradores inva?lido.\n\n\n\n73\n\nUma caracter??stica interessante apo?s a execuc?a?o deste algoritmo e? que,\n\ntodas as co?pias de seguranc?a criadas antes desta execuc?a?o sa?o apenas recupera?veis com\n\na autenticac?a?o do antigo grupo de administradores do HSM. A troca proposta por este\n\nalgoritmo so? ira? se refletir em novas co?pias de seguranc?a criadas. O grupo de auditores\n\ndesempenham um papel fundamental neste processo, controlando as atividades do antigo\n\ngrupo de administradores em relac?a?o a recuperac?a?o de co?pias de seguranc?a. Alternativa-\n\nmente, os smartcards na?o mais necessa?rios podem ser destru??dos.\n\n6.8 Alterando os responsa?veis por uma chave gerenciada\n\nA troca dos responsa?veis de uma chave no HSM na?o e? uma operac?a?o\n\nta?o cr??tica quando a troca de seu grupo de administradores, pore?m, ta?o importante quanto.\n\nIsso porque uma vez que o ponto de confianc?a do grupo atualmente responsa?vel e o grupo\n\nque recebera? a responsabilidade existam, os administradores podem realizar a troca.\n\nEsta operac?a?o pode representar em uma situac?a?o real, a troca da dire-\n\ntoria responsa?vel por uma AC em uma instituic?a?o, permitindo que seus novos membros\n\npassem a ser responsa?veis pelo uso de sua chave privada. Como dito anteriormente, so-\n\nmente o grupo de administradores e? necessa?rio para essa troca, desde que os pontos de\n\nconfianc?a existam.\n\nBasicamente, o algoritmo autentica o grupo de administradores e\n\natrave?s do ponto de confianc?a recupera a chave sime?trica dos dois grupos de operado-\n\nres, podendo enta?o decifrar a chave privada com a chave sime?trica de um grupo, poste-\n\nriormente cifrando com a do outro. Para iniciar o processo de troca, sa?o necessa?rios o\n\nidentificador da chave que tera? seu grupo responsa?vel trocado, idkey, e o identificador do\n\ngrupo de operadores que se tornara? seu novo responsa?vel, ido2.\n\nO algoritmo changeKeyOwner inicia como qualquer outra operac?a?o\n\nadministrativa ja? vista ate? aqui, onde os 3 primeiros passos visam autenticar o grupo de\n\nadministradores e liberando acesso a chave privada do HSM, krh.\n\nNo passo 4, os dados da chave idkey sa?o carregados de KDS, tais como\n\na chave privada cifrada, ekr, e o identificador do atual responsa?vel pela chave, ido1.\n\n\n\n74\n\nAlgorithm changeKeyOwner( idkey , ido2 )\nTroca o grupo de operadores responsa?vel por uma chave gerenciada no HSM. E?\nnecessa?ria a autenticac?a?o do grupo de administradores ale?m de existir o ponto de\nconfianc?a dos dois grupos de operadores envolvidos na operac?a?o.\n1: ks ? authGroup( ADS, ADM )\n2: ekrh ? load( ADS )\n3: krh ? decrypt( ekrh, ks )\n4: ekr, ido1 ? load( KDS, idkey )\n5: eksao1 ? load( ADS, ido1 )\n6: ksao1 ? decrypt( eksao1, krh )\n7: kso1? ? load( N XD, idoper1 )\n8: kso1 ? xor( ksao, kso1? )\n9: kr ? decrypt( ekr, kso1 )\n10: eksao2 ? load( ADS, ido2 )\n11: ksao2 ? decrypt( eksao2, krh )\n12: kso2? ? load( N XD, idoper2 )\n13: kso2 ? xor( ksao, kso2? )\n14: ekr ? encrypt( kr, kso2 )\n15: store( KDS, idkey, ekr, ido2 )\n\nOs passos de 5 a 8, como os passos de 10 a 13, visam recuperar chaves\n\nsime?tricas de grupos de operadores, identificados por ido1 e ido2 respectivamente. Estas\n\noperac?o?es ja? foram cobertas anteriormente (vide sec?a?o 6.5). Ao final do passo 8, obtem-se\n\nacesso a kso1 e pode-se decifrar a chave privada gerenciada no passo 9. E ao final do passo\n\n13, obte?m-se acesso a kso2, que e? utilizada no passo 14 para cifrar a chave gerenciada.\n\nFinalmente, a chave kr cifrada pode ser armazenada juntamente com o\n\nidentificador do seu novo responsa?vel no passo 15, concluindo o algoritmo de troca do\n\ngrupo responsa?vel por uma chave gerenciada.\n\n6.9 Criando o ponto de confianc?a de um grupo de Ope-\n\nradores em relac?a?o aos Administradores\n\nO ponto de confianc?a do grupo de operadores em relac?a?o ao grupo de\n\nadministradores garante que operac?o?es administrativas sejam realizadas sobre o primeiro.\n\nEste ponto de confianc?a deixa de existir quando os administradores recuperam o backup\n\n\n\n75\n\nde um HSM, estabelecendo outro ambiente operacional.\n\nO algoritmo activatesAdmT asksOverOperGroup autentica o grupo\n\nde administradores e o grupo de operadores a ser \u201dativado\u201d, regerando a segunda chave\n\ndo grupo de operadores e aplicando a operac?a?o XOR a? chave principal do grupo. O\n\nidenficador do grupo de operadores e? o u?nico requisito para disparar a execuc?a?o deste\n\nalgoritmo.\n\nAlgoritmo activatesAdmTasksOverOperGroup( idoper )\nEstabelece o ponto de confianc?a de um grupo de operadores identificado por idoper,\nem relac?a?o ao grupo de administradores. A existe?ncia deste ponto possibilita que\no u?ltimo, utilizando a propriedade de reversibilidade do XOR, possa recuperar a\nchave sime?trica do grupo de operadores kso, permitindo assim, a associac?a?o e/ou\ndesassociac?a?o de chaves gerenciadas.\n1: kso ? authGroup( ODS, idoper )\n2: kso? ? genSessionKey()\n3: ksao ? xor( kso, kso? )\n4: ch ? load( ADS )\n5: eksao ? encrypt( ksao, ch )\n6: store( ADS, idoper, eksao )\n7: store( N XD, idoper, kso? )\n\nO algoritmo inicia autenticando o grupo de operadores identificado por\n\nidoper, obtendo acesso sua chave sime?trica, kso. No passo 2, uma nova chave sime?trica\n\nsecunda?ria do grupo, kso?, e? gerada, permitindo a realizac?a?o da operac?a?o XOR no passo\n\n3, que resultara? em ksao.\n\nNo passo 4, o certificado do HSM e? carregado do ADS e posterior-\n\nmente utilizado para cifrar ksao, resultado em eksao. Nos passos 6 e 7, os dados gerados\n\ndurante a execuc?a?o do algoritmo, eksao e kso?, sa?o gravados nos devidos sistemas de\n\narmazenamento, ADS e N XD respectivamente, reestabelecendo o ponto de confianc?a.\n\n6.10 Exportac?a?o dos Registros de Atividades\n\nO protocolo do OpenHSM define que todas as operac?o?es realizadas em\n\num HSM devem ser registradas de forma sequencial para posterior ana?lise por grupos de\n\nauditores, permitindo que seja reconstru??do toda a trilha das operac?o?es realizadas.\n\n\n\n76\n\nApenas grupos de auditores podem exportar os registros de atividades\n\ndo HSM, sempre assinados, devendo fazer isso informando seu identificador id e, opcio-\n\nnalmente, especificar um per??odo de tempo para exportac?a?o. Se na?o especificado, todos\n\nos registros existentes sa?o exportados.\n\nAlgoritmo exportLog( id [, rangeDate] )\nPermite um grupo de auditores exportar os registros de atividade do HSM assinados,\npodendo ou na?o definir o per??odo de tempo para os mesmos\n1: ks ? authGroup( AudDS, id )\n2: ekr ? load( AudDS, id )\n3: kr ? decrypt( ekr, ks )\n4: L ? load( LDS, rangeDate )\n5: sL ? sign( L, kr )\n6: return( sL )\n\nO algoritmo exportLog inicia autenticando o grupo de auditores iden-\n\ntificado por id, resultando na sua chave sime?trica, ks. No passo 2, carrega-se a chave\n\nprivada cifrada do grupo, ekr, que, no passo seguinte, e? decifrada, resultando em kr.\n\nNo passo 4, o HSM carrega os registros, L, do sistema de armazena-\n\nmento de registros, LDS, respeitando o per??odo de tempo especificado, rangeDate. O\n\nHSM enta?o assina L para garantir a integridade destes registros. Os registros assinados\n\nsa?o retornados como resultado do algoritmo.\n\n6.11 Limpeza dos Registros de Atividades\n\nO ciclo de vida de um HSM dura va?rios anos e considerando o fato do\n\nmesmo rodar em ambiente embarcado, com recursos de armazenamento limitado, definiu-\n\nse um operac?a?o administrativa para apagar os registros do sistema.\n\nEste procedimento de limpeza dos registros de atividades do HSM en-\n\ngloba o algoritmo para exportar registros tambe?m, garantindo que qualquer registro que\n\nfor apagado do HSM, ja? tenha sido exportado pelo menos uma vez, permitindo assim que\n\na criac?a?o da trilha de auditoria cubra todas as operac?o?es realizadas em todo o tempo de\n\nvida de um HSM.\n\n\n\n77\n\nO algoritmo autentica o grupo de administradores e um grupo de audi-\n\ntores, identificado por id. Opcionalmente, pode-se informar um per??odo de tempo no qual\n\nos registros sera?o exportados e apagados.\n\nAlgoritmo eraseLog( id [, rangeDate] )\nApaga os registros de atividades do HSM, autenticando o grupo de adminitradores e\num grupo de auditores. Este u?ltimo, recebe uma co?pia assinada dos registros apaga-\ndos.\n1: authGroup( ADS, ADM )\n2: sL ? exportLog( id, rangeDate )\n3: delete( LDS, rangeDate )\n4: return( sL )\n\nO algoritmo eraseLog inicia autenticando o grupo de administradores\n\ndo HSM no passo 1. Essa autenticac?a?o e? requirida apenas por questa?o de seguranc?a, ja?\n\nque o conjunto dos registros do sistema e? parte fundamental para o controle do ciclo de\n\nvida das chaves gerenciadas.\n\nNo passo 2 executa-se o algoritmo exportLog visto anteriormente,\n\nque ira? resultar nos registros assinado do HSM, sL, referente ao tempo especificado,\n\nrangeDate. No passo seguinte, os registros rece?m exportados podem ser apagados. O\n\nHSM retorna sL como resultado da execuc?a?o.\n\nOs protocolos do OpenHSM abordados ate? aqui descrevem a construc?a?o\n\nde um ambiente seguro para gerenciamento de chaves criptogra?ficas de um HSM. Pore?m,\n\na continuidade do ciclo de vida das chaves gerenciadas esta? comprometida em caso de\n\nfalha de hardware ou de desastres, o que pode causar danos irrepara?veis a uma infra-\n\nestrutura de chaves pu?blicas. Essa lacuna sera? coberta na pro?xima sec?a?o, que abordara? a\n\ncriac?a?o e restaurac?a?o de co?pias de seguranc?a de um HSM de forma segura e confia?vel.\n\n6.12 Conclusa?o\n\nEste cap??tulo apresentou todos os sub-protocolos do OpenHSM usados\n\nna operacionalizac?a?o de um HSM. Atrave?s deles e? poss??vel a realizac?a?o de dois das prin-\n\ncipais operac?o?es em um HSM: criac?a?o e utilizac?a?o de chaves criptogra?ficas.\n\n\n\n78\n\nEntretanto, duas etapas essencial para o completo ciclo de vida de\n\nchaves criptogra?ficas ainda na?o foram cobertos, a criac?a?o e recuperac?a?o de co?pias de\n\nseguranc?a (co?pias das chaves gerenciadas). Os sub-protocolos responsa?veis por estas eta-\n\npas sera?o abordados no pro?ximo cap??tulo.\n\n\n\nCap??tulo 7\n\nOpenHSM - Co?pias de Seguranc?a\n\nOs protocolos de criac?a?o de co?pias de seguranc?a do conteu?do de um\n\nHSM de forma segura e confia?vel, devem permitir sua posterior recuperac?a?o, de forma a\n\nrestaurar todo o ambiente operacional que existia no momento que a co?pia de seguranc?a\n\nfoi criada.\n\nFigura 7.1: Processo de criac?a?o de um HSM de backup\n\nA criac?a?o destas co?pias, como pode ser visto na figura 7.1, requer a\n\nutilizac?a?o de um segundo mo?dulo, que devera? ser configurado como uma unidade de\n\nbackup (sec?a?o 7.1), na?o podendo ser utilizado para nenhum outro fim, a na?o ser restaurar\n\numa co?pia de seguranc?a de um HSM. Entretanto, uma unidade de backup pode servir de\n\nreceptor de backup para va?rios HSM ao mesmo tempo.\n\n\n\n80\n\nApo?s a preparac?a?o de um HSM para backup, o certificado cbkp deve\n\nser importado no HSM operacional (sec?a?o 7.2). Este processo permitira? que co?pias de\n\nseguranc?a sejam criadas (sec?a?o 7.3) para posterior recuperac?a?o em caso de algum pro-\n\nblema acontecer com o HSM operacional (sec?a?o 7.4).\n\nPor fim, a sec?a?o 7.5 discute a questa?o do controle de ciclo de vida de\n\nmu?ltiplas co?pias da mesma chave criptogra?fica em hardware criptogra?ficos diferentes.\n\n7.1 Preparando um HSM para ser uma unidade de\n\nbackup\n\nO primeiro passo para criac?a?o de co?pias de seguranc?a de um mo?dulo de\n\nseguranc?a criptogra?fico e? preparar um HSM adicional para ser uma unidade de backup,\n\nsendo que qualquer HSM que na?o tenha sido inicializado pode ser utilizado neste pro-\n\ncesso.\n\nNenhuma informac?a?o dos mo?dulos criptogra?ficos ativos e? necessa?ria\n\npara a criac?a?o de uma unidade de backup, que pode ser criado antes mesmo de existir um\n\nHSM operacional.\n\nO algoritmo prepareBkpU nit implementa o protocolo que prepara um\n\nHSM para ser uma unidade de backup, requerendo como para?metro o identificador idbkp\n\nque sera? utilizado como nome comum do certificado desta unidade.\n\nAlgoritmo prepareBkpUnit( idbkp )\nPrepara um HSM para ser uma unidade de backup, gerando um par de chaves as-\nsime?tricas krbkp e kubkp e emitindo um certificado auto-assinado a partir deste par\nde chaves e o identificador do HSM idbkp passado como para?metro. O certificado do\nHSM de backup e? exportado como resultado do algoritmo.\n1: krbkp, kubkp ? genKeyPair()\n2: cbkp ? genSelfSignedCert( krbkp, kubkp, idbkp )\n3: store( BDS, krbkp, cbkp )\n4: return cbkp\n\nO processo de preparac?a?o de uma unidade de backup inicia com a\n\ncriac?a?o de um par de chaves criptogra?ficas de backup (krbkp e kubkp). No passo 2, um\n\n\n\n81\n\ncertificado auto-assinado cbkp e? gerado a partir do identificador idbkp e o par de chaves\n\nrece?m criado.\n\nNo passo 3, o certificado e a chave privada de backup sa?o armazenados\n\nno sistema de armazenamento de dados de backup para que possam ser carregados pos-\n\nteriormente no processo de recuperac?a?o de uma co?pia de seguranc?a. O algoritmo termina\n\nexportando cbkp, que devera? ser importado nos HSM operacionais para iniciar o processo\n\nde gerac?a?o de co?pias de seguranc?a.\n\nA chave privada de backup krbkp e? armazenada em texto claro com\n\nprotec?a?o do per??metro criptogra?fico do HSM, que e? capaz de detectar, com a utilizac?a?o de\n\nsensores, e responder a uma tentativa de invasa?o, apagando dados sens??veis a seguranc?a\n\ndo mo?dulo.\n\nUma vez preparado para ser um receptor de co?pias de seguranc?a, o HSM\n\ndeve ser armazenado em local seguro, aguardando a necessidade de recuperac?a?o de um\n\nbackup.\n\n7.2 Importando o Certificado de Backup em HSM Ope-\n\nracional\n\nComo visto na sec?a?o anterior, a preparac?a?o de um HSM receptores de\n\nbackup inclui a exportac?a?o de um certificado. Este certificado deve ser enta?o importado\n\nnos HSM operacionais, possibilitando a criac?a?o de co?pias de seguranc?a do mesmo.\n\nO processo de importac?a?o de certificados de backup em um HSM e?\n\nsimples, mas requer muito cuidado. Por se tratar de um certificado X.509 auto-assinado,\n\nque pode ser gerado em qualquer lugar, o grupo de administradores deve estar ciente da\n\nsua procede?ncia, cabendo aos grupos de auditores a ana?lise dos registros de atividades do\n\nHSM, a fim de descobrir eventuais falhas de gerenciamento.\n\nUm HSM pode importar va?rios certificados de backup, aumentando o\n\nnu?mero de unidades onde uma co?pia de seguranc?a pode ser recuperada. O algoritmo\n\nimportBkpCert implementa o protocolo de importac?a?o destes certificados, autenticando\n\n\n\n82\n\no grupo de administradores do HSM para isso.\n\nAlgoritmo importBkpCert( cbkp )\nImporta o certificado exportado no processo de criac?a?o de uma unidade de backup.\nO grupo de administrador e? autenticado na execuc?a?o deste algoritmo.\n1: ks ? authenticateGroup( ADS, ADM )\n2: ekrh ? load( ADS )\n3: krh ? decrypt( ekrh, ks )\n4: scbkp ? sign( cbkp, krh )\n5: store( BDS, scbkp )\n\nO algoritmo importBkpCert inicia realizando a autenticac?a?o do grupo\n\nde adminitradores, possibilitando a liberac?a?o da chave privada do HSM no passo 3. No\n\npasso 4, o certificado de backup passado como para?metro e? reassinado com krh e poste-\n\nriormente armazenado no sistema de armazenamento de backup.\n\nApo?s a importac?a?o do primeiro certificado de backup, co?pias de\n\nseguranc?a do ambiente operacional do HSM podem ser criadas. Este e? o assunto da\n\npro?xima sec?a?o.\n\n7.3 Backup\n\nA gerac?a?o de co?pias de seguranc?a do ambiente operacional de um HSM\n\ne? uma atividade essencial para continuidade do ciclo de vida das chaves gerenciadas e\n\ndeve ser executada regularmente, ja? que qualquer operac?a?o executada apo?s a criac?a?o do\n\nbackup sera? completamente perdida em caso de falha do HSM. As declarac?o?es de pra?ticas\n\nde certificac?a?o das ICPs devem estabelecer a regularidade na qual as co?pias de seguranc?a\n\ndevem ser geradas.\n\nTodas as chaves gerenciadas pelo mo?dulo sa?o exportadas de forma ci-\n\nfrada, garantindo que, mesmo fora do per??metro criptogra?fico do HSM, elas estejam se-\n\nguras, seguindo os requisitos existentes nas normas FIPS PUB 140-2 e MCT-7.\n\nO algoritmo bkpHsm, que implementa o protocolo de criac?a?o de uma\n\nco?pia de seguranc?a de um HSM, autentica o grupo de administradores, por se tratar de\n\numa operac?a?o administrativa. Ale?m disso, o HSM deve possuir pelo menos um grupo\n\n\n\n83\n\nde auditores, que sera?o autenticados durante a recuperac?a?o da co?pia de seguranc?a, garan-\n\ntindo que na?o existam co?pias paralelas do HSM sem pre?vio conhecimento da equipe de\n\nauditoria.\n\nAlgoritmo bkpHsm()\nCria um co?pia de seguranc?a de um HSM operacional, autenticando seu grupo de\nadmistradores. A co?pia de seguranc?a podera? ser recuperada em todos as unidades de\nbackup que tiveram seu certificado importado no HSM. Lembrando que o sistema de\narmazenamento de dados na?o exporta?veis N XD, como o nome ja? diz, na?o e? copiado.\n1: ks ? authenticateGroup( ADS, ADM )\n2: ekrh, ch ? load( ADS )\n3: krh ? decrypt( ekrh, ks )\n4: store( BP F , load( CT L ) )\n5: store( BP F , load( ADS ) )\n6: store( BP F , load( AudDS ) )\n7: store( BP F , load( ODS ) )\n8: store( BP F , load( KDS ) )\n9: store( BP F , load( BDS ) )\n10: Cbkp ? load( BDS ) )\n11: ksbkp ? genSessionKey()\n12: eBP F ? encrypt( BP F , ksbkp )\n13: seBP K ? sign( eBP K, krh )\n14: for cbkpi in Cbkp do\n15: eksbkp ? encrypt( ksbkp, cbkpi )\n16: end for\n17: return seBKP , EKsbkp\n\nO algoritmo inicia com os tre?s passos comuns para uma operac?a?o ad-\n\nministrativa, autenticando os administradores e obtendo acesso a chave privada e o certi-\n\nficado do HSM, krh e ch respectivamente.\n\nNos passos de 4 a 9, todos os dados relevantes ao ambiente operacional\n\ndo HSM sa?o copiados para o pacote do backup BP F , incluindo os sistemas de arma-\n\nzenamento de dados dos grupos (ADS, ODS, AudDS), de chaves gerenciadas KDS,\n\nde certificados confia?veis CT L e de dados de backup BDS. O u?ltimo e? necessa?rio por-\n\nque mais de uma certificado de backup pode ter sido importado no HSM, permitindo que\n\nmesmo apo?s recuperac?a?o da co?pia de seguranc?a, novos backups possam ser criados.\n\nO sistema de armazenamento de dados na?o exporta?veis na?o e? copiado\n\ndurante este algoritmo, desabilitando operac?o?es administrativas sobre chaves gerenciadas\n\n\n\n84\n\nenquanto seu grupo de operadores responsa?vel na?o tenha conhecimento de sua existe?ncia.\n\nO BP F enta?o precisa ser cifrado utilizando todos os certificados de\n\nbackup previamente importados no HSM, permitindo que a co?pia possa ser recuperada\n\nem qualquer um deles. No passo 10, o conjunto de certificados de backup e? carregado.\n\nLogo apo?s, gera-se uma chave sime?trica, ksbkp, que, no passo 12, sera? utilizada para cifrar\n\nBP F . O passo 13 visa garantir a integridade do co?pia de seguranc?a, assinando eBP F\n\ncom a chave privada do HSM krbkp.\n\nNos passos 14 a 16, realiza-se uma iterac?a?o por todos os certificados\n\nde backup existentes dentro do HSM, utilizando cada um deles para cifrar ksbkp, que ira?\n\nresultar em um conjunto de chaves sime?tricas cifradas com diferentes chaves pu?blicas,\n\nEKsbkp.\n\nO processo de criac?a?o do backup esta? completo ao final do passo 16,\n\nretornando a co?pia de seguranc?a do ambiente operacional cifrado e assinado e o conjunto\n\nde chaves sime?tricas cifradas pelos certificados de backup, seBKP e EKsbkp respectiva-\n\nmente.\n\n7.4 Recuperac?a?o do Backup\n\nA recuperac?a?o de co?pias de seguranc?a e? u?ltimo passo para permitir o\n\ncompleto ciclo de vida de chaves criptogra?ficas gerenciadas em um HSM, incluindo os\n\ncasos de falhas de hardware ou desastres. Os certificados de backup existentes na co?pia\n\nde seguranc?a delimitam o conjunto de unidades de backup que podem ser utilizadas para\n\nrecuperac?a?o.\n\nEsta recuperac?a?o, ale?m de ser um operac?a?o administrativa, requer a\n\nautenticac?a?o de um grupo de auditores, permitindo o conhecimento da equipe de auditoria\n\nque uma nova insta?ncia do HSM esta? operacional, diminuindo a carga de responsabilidade\n\ndo grupo de administradores.\n\nO algoritmo recoverBkp requer como para?metros de entrada o identi-\n\nficador do grupo de auditores que sera? autenticado durante o processo e os dados retorna-\n\ndos do algoritmo de criac?a?o do backup, seBKP e EKsbkp, respectivamente o pacote de\n\n\n\n85\n\nbackup cifrado e assinado e a chave sime?trica que cifra o pacote de backup cifrada com\n\ncada um dos certificados de backup importados no HSM.\n\nAlgoritmo recoverBkp(seBKP , EKsbkp, idaudit)\nRestaura o ambiente operacional de um HSM em um mo?dulo previamente preparado\npara backup. O grupo de administradores e pelo menos um grupo de auditores sa?o au-\ntenticados neste processo, sendo estas autenticac?o?es somente requeridas por questa?o\nde seguranc?a, isto e?, na?o te?m objetivos criptogra?ficos.\n1: krbkp ? load( BDS )\n2: ksbkp ? decrypt( eksbkp, krbkp )\n3: BP F ? decrypt( seBP F , ksbkp )\n4: store( CT L, load( BP F ) )\n5: store( ADS, load( BP F ) )\n6: ch ? load( ADS )\n7: verify(seBKP , ch)\n8: ksadm ? authenticateGroup( ADS, ADM )\n9: store( AudDS, load( BP F ) )\n10: ksaudit ? authenticateGroup( AudDS, idaudit )\n11: store( ODS, load( BP F ) )\n12: store( KDS, load( BP F ) )\n13: store( BDS, load( BP F ) )\n\nO processo de recuperac?a?o de backup inicia carregando a chave privada\n\nde backup krbkp do sistema de armazenamento de dados de backup BDS. Logo apo?s, a\n\nchave sime?trica que cifra o backup, ksbkp e? decifrada. A chave liberada no passo 2 permite\n\nque o pacote de backup seja decifrado no passo 3.\n\nOs passos 4 e 5 restauram, respectivamente, o sistema de armazena-\n\nmento de certificados confia?veis CT L e de administradores ADS. Este e? o conjunto\n\nm??nimo de dados necessa?rio para verificar a integridade de seBKP no passo 7 e autenti-\n\ncar o grupo de administradores no passo 8.\n\nO passo 9 restaura o sistema de armazenamento de auditores, que per-\n\nmite a autenticac?a?o do grupo de auditores identificado por idaudit no passo 10.\n\nE finalmente, nos passos 11, 12 e 13, os sistemas de armazenamento\n\nrestantes sa?o restaurados, respectivamente, os sistemas de armazenamento de dados de\n\noperadores, chaves e backup.\n\nO ambiente operacional do HSM, uma vez restaurado, sera? exatamente\n\nigual ao momento em que a co?pia de seguranc?a foi criada, com excec?a?o do sistema de ar-\n\n\n\n86\n\nmazenamento de dados na?o exportados, N XD, que precisa ser recriado com o algoritmo\n\napresentado na sec?a?o 6.9.\n\n7.5 Utilizac?a?o de Mu?ltiplos Ambientes Operacionais\n\nA? medida que o nu?mero de insta?ncias de chaves criptogra?ficas operaci-\n\nonais aumenta, maior e? a dificuldade para gerencia?-las, tornando mais complexo tambe?m\n\no processo de auditoria, ja? que, esta paralelizac?a?o das operac?o?es, difunde os usos de uma\n\nchave criptogra?fica em va?rios ambientes.\n\nApesar disso, alguns situac?o?es requerem este tipo de abordagem, isto\n\ne?, a criac?a?o de va?rios ambientes operacionais, com o objetivo de rapidez no processo de\n\nretomada das atividades em caso de falha do ambiente principal ou em ambiente de alta\n\ndemanda, com necessidade de balanceamento de carga.\n\nMuitas vezes, a realizac?a?o de uma cerimo?nia implica em custos finan-\n\nceiros e/ou log??sticos elevados em algumas organizac?o?es, se considerar a quantidade de\n\npessoas envolvidas e a dificuldade de reun??-las para uma nova tentativa. Por isso, para\n\ngarantir rapidez em caso de falha do ambiente operacional principal, pode-se configurar\n\num segundo ambiente ide?ntico ao primeiro, diminuindo assim os riscos de falha de todo\n\no processo, evitando que uma nova cerimo?nia seja necessa?ria.\n\nA criac?a?o de uma ambiente operacional ide?ntico pode ser realizado uti-\n\nlizando os mecanismos de criac?a?o e recuperac?a?o de co?pias de seguranc?a do HSM. O novo\n\nHSM, uma vez restaurado, tera? os mesmos grupos e chaves gerenciadas que existiam no\n\nprimeiro. Assim, no caso de uma autoridade certificadora por exemplo, duas co?pias da\n\nsua chave privada esta?o operacionais, bastando que o grupo de operadores responsa?vel a\n\nlibere para uso.\n\nEntretando, como forma de diminuir ainda mais os riscos de falhas que\n\nresultem no cancelamento de uma cerimo?nia, pode-se criar ambientes totalmente indepen-\n\ndentes, isto e?, com a troca dos grupos de administradores e operadores do mo?dulo, sendo\n\nque os novos grupos podem ser compostos dos mesmos membros e possuir a mesma\n\nconfigurac?a?o dos grupos originais. Desta forma, e? poss??vel contornar ate? falhas nos smart-\n\n\n\n87\n\ncards dos membros dos grupos. Esta abordagem tambe?m se aplica em casos onde deseja-\n\nse ambientes operacionais paralelos em localizac?o?es completamente diferentes umas das\n\noutras.\n\nA impote?ncia dos grupos de administradores e operadores em relac?a?o\n\naos grupos de auditores de um HSM permite que estes u?ltimos realizem auditoria de\n\nqualquer uma das insta?ncias dos mo?dulos operacionais, desde que tenham sido criados\n\ndurante a preparac?a?o da primeira insta?ncia do HSM. Se novos grupos de auditores forem\n\ncriados apo?s a existe?ncia de mu?ltiplas insta?ncias, estes so? podem auditar o HSM em que\n\nforam criados e as novas insta?ncias que foram recuperadas de co?pias de seguranc?a criadas\n\nposteriormente a sua criac?a?o.\n\nAle?m disso, digamos que um HSM operacional possua um grupo de\n\nadministradores, um de operadores, um de auditores e gerencia uma chave criptogra?fica.\n\nO processo de criac?a?o de co?pias de seguranc?a deste ambiente requer a autenticac?a?o do\n\ngrupo de administradores. A sua posterior restaurac?a?o para estabelecimento de um se-\n\ngundo ambiente operacional requer a autenticac?a?o do grupo de administradores e de pelo\n\nmenos um grupo de auditores, portanto, a equipe de auditoria sempre vai saber quando\n\numa nova insta?ncia do HSM for estabelecida. Nessa nova insta?ncia, a utilizac?a?o da chave\n\ngerenciada esta? limitada ao grupo de operadores que possui a responsabilidade por seu\n\nuso, ja? que a propriedade de rastreabilidade das chaves gerenciadas do OpenHSM desfaz\n\no ponto de confianc?a dos grupos de operadores em relac?a?o ao grupo de administradores\n\nem todas as co?pias de seguranc?a recuperadas. Este exemplo procura demostrar todos os\n\nrecursos providos pelos protocolos do OpenHSM de modo a estabelecer um controle ri-\n\ngoroso sobre o controle do ciclo de vida das chaves gerenciadas, mesmo nos processos de\n\ncriac?a?o e restaurac?a?o de co?pias de seguranc?a.\n\nA utilizac?a?o de mu?ltiplos ambientes operacionais tambe?m se aplica no\n\nbalanceamento de carga para aplicac?o?es com alta demanda, se aplicando nestes casos o\n\nuso de ambientes operacionais ide?nticos. Um exemplo de aplicabilidade desta arquitetura\n\ne? a paralelizac?a?o da emissa?o de certificados e lista de certificados revogados por uma AC.\n\n\n\n88\n\n7.6 Conclusa?o\n\nO protocolo do OpenHSM, utilizado para o gerenciamento do ciclo de\n\nvida das chaves criptogra?ficas gerenciadas pelo ASI-HSM, foi publicado em eventos in-\n\nternacionais da a?rea para apreciac?a?o do mundo acade?mico, com sua versa?o mais atual\n\napresentada nestes dois u?ltimos cap??tulos, utilizando uma nova forma de representac?a?o.\n\nDeu-se especial atenc?a?o aos protocolos de criac?a?o e recuperac?a?o de\n\nco?pias de seguranc?a do material criptogra?fico, de forma a cobrir as lacunas em caso de\n\nfalhas de hardware ou desastres. Ale?m disso, extende-se essa funcionalidade de co?pias de\n\nseguranc?a para o estabelecimento de mu?ltiplas insta?ncias de uma chave gerenciada.\n\nDesta forma, tanto o OpenHSM quanto o ASI-HSM sa?o uma realidade\n\nhoje, ja? estando instalado em 7 instituic?o?es de ensino brasileiras, aonde um projeto piloto\n\nde avaliac?a?o da ICPEDU esta? em curso.\n\n\n\nCap??tulo 8\n\nConclusa?o\n\nO suporte ao controle do ciclo de vida de mu?ltiplas co?pias de uma chave\n\nem mo?dulos criptogra?ficos de mercado no contexto de uma infra-estrutura de chaves\n\npu?blicas praticamente inexiste e quando existe, o esquema e? proprieta?rio e restritivo a?\n\nmesma fam??lia de produtos do fabricante. Mesmo assim, o controle e? ineficaz no sentido\n\nde que na?o se consegue uma forte amarrac?a?o entre cada uma das co?pias das chaves, o que\n\ndificulta sobremaneira a auditoria.\n\nO problema e? maior quanto e? preciso manter as chaves por longo\n\nper??odo de tempo, como e? o caso de uma autoridade certificadora. Normalmente, o tempo\n\nde manutenc?a?o de uma chave de uma AC Raiz e? superior a 10 anos, o que e? muito maior\n\nque o tempo me?dio esperado de vida u?til de um HSM de mercado. E? imperativo, portanto,\n\na possibilidade de criac?a?o e recuperac?a?o de co?pias de seguranc?a, com total controle, em\n\nequipamento de diferentes fabricantes. Contudo, esta na?o e? a praxe de mercado.\n\nFoi realizado um estudo das principais normas e recomendac?o?es naci-\n\nonais e internacionais que regem a construc?a?o de mo?dulos criptogra?ficos. Percebeu-se\n\nque nessas normas, o tratamento de mu?ltiplas co?pias do material criptogra?fico e? pouco\n\nexplorado. Aproveitou-se tal estudo para avaliar os protocolos do OpenHSM em relac?a?o\n\nao requisitos apostos nestas normas.\n\nEste trabalho tem como maior contribuic?a?o o aprimoramento do\n\nOpenHSM neste contexto, ou seja, como realizar uma co?pia de seguranc?a das cha-\n\n\n\n90\n\nves criptogra?ficas, realizar sua restaurac?a?o e manter a rastreabilidade de cada uma das\n\nco?pias. Todos os protocolos do OpenHSM foram analisados e onde necessa?rio foram\n\nfeitas modificac?o?es para se alcanc?ar esta rastreabilidade.\n\n8.1 Resumo das Contribuic?o?es\n\nO presente trabalho apresentou diversas contribuic?o?es de cara?ter te?cnico\n\ne teo?rico-cient??fico, atingindo seus objetivos geral e espec??ficos, tais como os sumarizados\n\na seguir:\n\n\u2022 revisou-se os hardware criptogra?ficos de mercado utilizados no gerenciamento do\nciclo de vida de chaves criptogra?ficas, com e?nfase nos smartcards e HSMs;\n\n\u2022 detalhou-se da ferramenta criptogra?fica OpenSSL, com a apresentac?a?o de sua infra-\nestrutura de suporte para usua?rios e desenvolvedores, focando-se particularmente no\n\ndesenvolvimento de engines, que permitem a integrac?a?o de aplicativos a hardware\n\ncriptogra?ficos;\n\n\u2022 analisou-se os requisitos das normas FIPS 140-2 e MCT-7, utilizados na certificac?a?o\nde HSMs. Esta ana?lise identificou pontos de extrema releva?ncia em relac?a?o ao uso\n\nde HSMs no a?mbito de ICPs que na?o sa?o cobertos por estas normas, como um\n\nforte sistema de auditoria e um r??gido controle das co?pias de seguranc?a do material\n\nsens??vel;\n\n\u2022 apresentou-se a arquitetura e as aplicac?o?es adicionais de um HSM como alvo para o\nembarcamento do OpenHSM. Entres estas aplicac?o?es esta?o as interfaces de geren-\n\nciamento remoto e a engine que prove? integrac?a?o entre o HSM e outros aplicativos;\n\n\u2022 revisou-se os protocolos de gerenciamento de chaves criptogra?ficas do OpenHSM,\npropondo-se uma nova forma de representac?a?o. Essa revisa?o detalhou em particular\n\no esquema de criac?a?o e recuperac?a?o de co?pias de seguranc?a;\n\n\n\n91\n\n\u2022 apresentou-se formas de utilizac?a?o de mu?ltiplas insta?ncias de uma chave gerenciada\npelos protocolos do OpenHSM em diferentes ambientes operacionais. Esta abor-\n\ndagem possibilita, entre outras, a ra?pida retomada das operac?o?es em caso de falha\n\ndo ambiente operacional principal ou visa suprir as necessidades de ambientes com\n\nalta demanda de processamento;\n\n\u2022 publicac?a?o de dois artigos em eventos internacionais, apresentando os protocolos\nde gerenciamento de chaves criptogra?ficas do OpenHSM;\n\n\u2022 preparac?a?o de um artigo de evento introduzindo te?cnicas iniciais de modelagem e\nvalidac?a?o de cerimo?nias (ainda na?o submetido);\n\n\u2022 preparac?a?o de um artigo de perio?dico que visa consolidar todo o conhecimento\nadquirido no projeto dos protocolos do OpenHSM (ainda na?o submetido).\n\n8.2 Trabalhos Futuros\n\nAs a?reas a se explorar com os protocolos de gerenciamento do ciclo de\n\nvida de chaves criptogra?ficas do OpenHSM sa?o inu?meras, servindo de tema para va?rios\n\ntrabalhos futuros.\n\nUma destas a?reas e? o estudo detalhado para modelar e analisar ce-\n\nrimo?nias, que desempenham papel fundamental na operacionalizac?a?o de um HSM, pre-\n\nenchendo lacunas que hardware e software na?o sa?o capazes de resolver. Adicionalmente,\n\nelas podem ser extendidas, integrando procedimentos de manipulac?a?o de outros sistemas,\n\ncomo no caso de uma autoridade certificadora, onde o software de gesta?o de certificados\n\ntambe?m requer atenc?a?o especial.\n\nOutra a?rea importante de estudo e? a ana?lise formal dos protocolos do\n\nOpenHSM, com o intuito de comprovar formalmente a efetividade dos mesmos no geren-\n\nciamento do ciclo vida das chaves criptogra?ficas gerenciadas em um HSM.\n\nFinalmente, espera-se o aprimoramento dos HSMs comerciais, de\n\nforma que estes passem a suportar funcionalidades de r??gido controle de suas co?pias de\n\nseguranc?a e de utilizac?a?o de mu?ltiplas insta?ncias operacionais da mesma chave.\n\n\n\nRefere?ncias Bibliogra?ficas\n\n[1] REDE Nacional de Ensino e Pesquisa RNP. Dispon??vel em:&lt;http://www.rnp.br/>.\n\n[2] SCHILLER, J. Protecting a Private Key in a CA Context. out. 2000. Dispon??vel em:\n\n<http://www.cren.net/crenca/pkirscpages/private key.html>.\n\n[3] SOUZA, T. C. S. Aplicac?o?es embarcadas para gerenciamento de chaves crip-\n\ntogra?ficas. [S.l.], 2005.\n\n[4] MARTINA, J. E. Project of a Hardware Security Module focused on Public Key In-\n\nfrastructures and its Applications. Dissertac?a?o (Mestrado) \u2014 Federal University of\n\nSanta Catarina, March 2005.\n\n[5] MARTINA, J. E.; SOUZA, T. C. S. de; CUSTO?DIO, R. F. OpenHSM: An open\n\nkey life cycle protocol for public key infrastructure\u2019s hardware security modules. In:\n\nLOPEZ, J.; SAMARATI, P.; FERRER, J. L. (Ed.). EuroPKI. [S.l.]: Springer, 2007.\n\n(Lecture Notes in Computer Science, v. 4582), p. 220\u2013235. ISBN 978-3-540-73407-9.\n\n[6] SOUZA, T. C. S. de; MARTINA, J. E.; CUSTO?DIO, R. F. Audit and backup\n\nprocedures for hardware security modules. In: SEAMONS, K. E.; MCBUR-\n\nNETT, N.; POLK, T. (Ed.). IDtrust \u201908: Proceedings of the 7th symposium on\n\nIdentity and trust on the Internet. ACM, 2008. (ACM International Conference\n\nProceeding Series, v. 283), p. 89\u201397. ISBN 978-1-60558-066-1. Dispon??vel em:\n\n<http://doi.acm.org/10.1145/1373290.1373302>.\n\n[7] RANKL, W. W.; EFFING, W. Smart Card Handbook. Third. pub-WILEY:adr: John\n\nWiley and Sons, Inc., 2004. xxviii + 1120 p. ISBN 0-470-85668-8.\n\n\n\n93\n\n[8] USB 2.0 TECHNICAL WORKING GROUPS. Universal Serial Bus Revision 2.0\n\nspecification. [S.l.], abr. 2000. Http://www.usb.org/developers/data/usb 20.zip.\n\n[9] RIVEST, R. L.; SHAMIR, A.; ADLEMAN, L. A method for obtaining digital sig-\n\nnatures and public-key cryptosystems. Commun. ACM, ACM, New York, NY, USA,\n\nv. 21, n. 2, p. 120\u2013126, 1978. ISSN 0001-0782.\n\n[10] COOPER, D. et al. Internet X.509 Public Key Infrastructure Certificate and Certifi-\n\ncate Revocation List (CRL) Profile. abr. 2008. Internet RFC 5280.\n\n[11] ISO 7816 - Smart Card Standards Overview. ISO Standards, 1998. Dispon??vel em:\n\n<http://www.iso.org/>.\n\n[12] RSA Laboratories. PKCS #15 v1.1: Cryptographic Token Informa-\n\ntion Syntax Standard. pub-RSA:adr, jun. 2000. 81 p. Dispon??vel em:\n\n<http://www.rsasecurity.com/rsalabs/pkcs/pkcs-15/index.html>.\n\n[13] LEE, A.; BARKER, E. B.; BARKER, W. C. Guideline for Implementing Crypto-\n\ngraphy in the Federal Government. [S.l.], dez. 2005.\n\n[14] MENEZES, A. J.; OORSCHOT, P. C. van; VANSTONE, S. A. Hand-\n\nbook of Applied Cryptography. CRC Press, 1997. (CRC Press series on dis-\n\ncrete mathematics and its applications). ISBN 0-8493-8523-7. Dispon??vel em:\n\n<http://www.cacr.math.uwaterloo.ca/hac/index.html>.\n\n[15] ISO/IEC STANDARD 15408. Common Criteria for Information Tech-\n\nnology Security Evaluation. version 3.1. [S.l.], set. 2006. Dispon??vel em:\n\n<http://www.commoncriteriaportal.org/files/ccfiles/CCPART1V3.1R1.pdf>.\n\n[16] National Institute of Standards and Technology (NIST). Security Require-\n\nments for Cryptographic Modules. maio 2001. Federal Information Proces-\n\nsing Standards Publication (FIPS PUB) 140-2. Updated 2002-12-03. Dis-\n\npon??vel em:&lt;http://csrc.nist.gov/publications/fips/fips140-2/fips1402.pdf,\n\nhttp://csrc.nist.gov/cryptval/140-2.htm>.\n\n\n\n94\n\n[17] National Institute of Standards and Technology (NIST). Security Requirements for\n\nCryptographic Modules. jan. 1994. Federal Information Processing Standards Publi-\n\ncation (FIPS PUB) 140-1. Dispon??vel em:&lt;http://csrc.ncsl.nist.gov/fips/fips1401.pdf,\n\nhttp://csrc.ncsl.nist.gov/fips/fips1401.htm>.\n\n[18] FEDERAL COMMUNICATIONS COMMISSION. Code of Fede-\n\nral Regulations, Title 47, Part 15, Subpart B, Unintentional Radia-\n\ntors, Digital Devices, v. 1. http://frwebgate.access.gpo.gov/cgi-bin/get-\n\ncfr.cgi?TITLE=47&amp;PART=15&amp;SECTION=101&amp;YEAR=1998&amp;TYPE=TEXT:\n\nFEDERAL COMMUNICATIONS COMMISSION, 1998.\n\n[19] Instituto Nacional de Tecnologia da Informac?a?o (ITI). Requisitos, Materiais e\n\nDocumentos Te?cnicos para Homologac?a?o de Mo?dulos de Seguranc?a Criptogra?fica\n\n(MSC) no A?mbito da ICP-Brasil. nov. 2007. Manual de Condutas Te?cnicas (MCT)\n\n7. Dispon??vel em:&lt;http://www.iti.br/twiki/pub/Homologacao/Documentos/MCT7 -\n\nVol.I.pdf>.\n\n[20] INSTITUTO Nacional de Tecnologia da Informac?a?o ITI. Dispon??vel em:\n\n<http://www.iti.br/>.\n\n[21] BRASIL. Medida Proviso?ria No 2.200-2. 2001. Medida Proviso?ria. Dispon??vel em:\n\n<http://www.iti.br/twiki/bin/view/Certificacao/MedidaProvisoria>.\n\n[22] National Institute of Standards and Technology. Data Encryption Standard (DES).\n\nout. 1999. FIPS Publication 46-3.\n\n[23] DAEMEN, J.; RIJMEN, V. Rijndael for AES. In: AES Candidate Conference. [S.l.:\n\ns.n.], 2000. p. 343\u2013348.\n\n[24] RSA Laboratories. PKCS #1 v2.1: RSA Cryptography Standard. pub-RSA:adr,\n\njun. 2002. 61 p. Dispon??vel em:&lt;http://www.rsasecurity.com/rsalabs/pkcs/pkcs-\n\n1/index.html>.\n\n\n\n95\n\n[25] PROCESSING Standards Publication 180-2. fev. 29 2004. Dispon??vel em:\n\n<http://citeseer.ist.psu.edu/641912.html; http://csrc.nist.gov/publications/fips/fips180-\n\n2/fips180-2withchangenotice.pdf>.\n\n[26] MICROSOFT CryptoAPI and Cryptographic Service Providers.\n\n[27] RSA. PKCS #11: Cryptographic Token Interface Standard. [S.l.], abr.\n\n1997. Version 2.0. Dispon??vel em:&lt;ftp://www.rsa.com/pub/pkcs/ps/pkcs-11.ps,\n\nftp://www.rsa.com/pub/pkcs/ascii/pkcs-11.asc>.\n\n[28] EUROPEAN UNION. Directive 2002/95/EC of the European Parliamente and of\n\nthe Council. [S.l.], jan. 2003.\n\n[29] EUROPEAN UNION. DIRECTIVE 2002/96/EC OF THE EUROPEAN PARLIA-\n\nMENT AND OF THE COUNCIL. [S.l.], jan. 2003.\n\n[30] THE OpenSSL Project. Dispon??vel em:&lt;http://www.openssl.org/>.\n\n[31] FREIER, A. O.; KARLTON, P.; KOCHER, P. C. The SSL Protocol \u2014 Version 3.0.\n\nnov. 1996. Internet Draft, Transport Layer Security Working Group.\n\n[32] DIERKS, T.; ALLEN, C. The TLS Protocol Version 1.0. nov. 1997. Internet Draft,\n\nTLS working group.\n\n[33] APACHE HTTP Server Project. Dispon??vel em:&lt;http://httpd.apache.org/>.\n\n[34] RSA Laboratories. PKCS #10 v1.7: Certification Request Syn-\n\ntax Standard. pub-RSA:adr, maio 2000. 10 p. Dispon??vel em:\n\n<http://www.rsasecurity.com/rsalabs/pkcs/pkcs-10/index.html>.\n\n[35] GORA, W. ASN.1 - Abstract Syntax Notation One. Bergheim: Datacom-Verlag,\n\n1992. ISBN 3-89238-062-7.\n\n[36] VIEGA, J.; MESSIER, M.; CHANDRA, P. Network Security with OpenSSL:\n\nCryptography for Secure Communications. pub-ORA:adr: O\u2019Reilly &amp; As-\n\nsociates, Inc., 2002. xiv + 367 p. ISBN 0-596-00270-X. Dispon??vel em:\n\n<http://safari.oreilly.com/059600270X; http://www.oreilly.com/catalog/openssl>.\n\n\n\n96\n\n[37] OPEN Source Software Institute. [S.l.]. Dispon??vel em:&lt;http://www.oss-\n\ninstitute.org/>.\n\n[38] AUTHORITIES, F. .-. C. M. V. FIPS 140-2 Validation Certificate #642.\n\nMarc?o 2006. Dispon??vel em:&lt;http://csrc.nist.gov/groups/STM/cmvp/documents/140-\n\n1/140crt/140crt642.pdf>.\n\n[39] KELLAR, S. S. NIST-Recommended Random Number Generator\n\nBased on ANSI X9.31 Appendix A.2.4 Using the 3-Key Triple DES\n\nand AES Algorithms. pub-NIST:adr, jan. 2005. 4 p. Dispon??vel em:\n\n<http://csrc.nist.gov/groups/STM/cavp/documents/rng/931rngext.pdf>.\n\n[40] AUTHORITIES, F. .-. C. M. V. FIPS 140-2 Validation Certificate #733. Feve-\n\nreiro 2007. Dispon??vel em:&lt;http://csrc.nist.gov/groups/STM/cmvp/documents/140-\n\n1/140crt/140crt733.pdf>.\n\n[41] AUTHORITIES, F. .-. C. M. V. FIPS 140-2 Validation Certificate #918. Feve-\n\nreiro 2008. Dispon??vel em:&lt;http://csrc.nist.gov/groups/STM/cmvp/documents/140-\n\n1/140crt/140crt918.pdf>.\n\n[42] SHAMIR, A. How to share a secret. Commun. ACM, ACM Press, New York, NY,\n\nUSA, v. 22, n. 11, p. 612\u2013613, 1979. ISSN 0001-0782.\n\n[43] DOLEV, D.; YAO, A. C. On the security of public key protocols. IEEE Transactions\n\non Information Theory, v. 29, n. 2, p. 198\u2013208, 1983.\n\n\n\nApe?ndice A\n\nConvenc?o?es\n\nEsta sec?a?o apresenta as convenc?o?es usadas nos cap??tulos 6 e 7 para des-\n\ncrever os algoritmos que implementam os protocolos do OpenHSM, com a tabela A.1\n\nlistando todos os sistemas de armazenamento de dados utilizadas.\n\nTabela A.1: Sistemas de armazenamento de dados utilizados no OpenHSM\n\nEntidade Descric?a?o\nADS sistema de armazenamento de dados de administradores\nAudDS sistema de armazenamento de dados de auditores\nBDS sistema de armazenamento de dados de backup\nBP F pacote do backup\nCT L lista de Certificados Confia?veis\nKDS sistema de armazenamento de dados de chaves\nLDS sistema de armazenamento de registro de atividades do sistema\nN XD sistema de armazenamento de dados na?o exporta?veis\nODS sistema de armazenamento de dados de operadores\n\nAdicionalmente, apresenta-se a descric?a?o de todas as func?o?es utilizadas\n\nnos algoritmos dos protocolos do OpenHSM, explicando seu objetivo e seus para?metros:\n\nctDecrypt( ct, edata, eu ) Envia para o smartcard ct os valores de edata e eu. Estes\n\ndados sera?o enta?o decifrados utilizando a chave privada dentro do smartcard, resul-\n\ntando, respectivamente, em data e u. O valor retornado do smartcard no final da\n\noperac?a?o sera? data cifrado com u.\n\n\n\n98\n\ndecrypt( edata, k ) Decifra edata utilizando a chave criptogra?fica k (sime?trica ou as-\n\nsime?trica).\n\nencrypt( data, k ) Cifra data utilizando a chave criptogra?fica k (sime?trica ou as-\n\nsime?trica). Se k e? um certificado, sua chave pu?blica e? extra??da e utilizada.\n\ndeleteLog( LDS, rangeDate ) Apaga os registros do sistema armazenados em LDS\n\ndentro do periodo de tempo especificado por rangeDate.\n\ngenCert( id, ku, cca, krca ) Emite um certificado utilizando ku como chave pu?blica e id\n\ncomo nome comum. cca e krca sa?o respectivamente o certificado e a chave privada\n\nda autoridade certificadora que emitira? o novo certificado.\n\ngenKeyPair() Gera um par de chaves assime?tricas.\n\ngenSelfSignedCert( kr, ku, id ) Emite um certificado auto-assinado contendo a chave\n\npu?blica ku e o nome comum id. A assinatura e? realizada com a chave privada kr.\n\ngenSessionKey() Gera uma chave sime?trica.\n\njoinSecret( Ks ) Utiliza o conjunto de partes Ks para reconstruc?a?o do segredo. Entre-\n\ntanto, Ks deve conter o nu?mero m??nimo de partes configuradas durante o compar-\n\ntilhamento.\n\nload ( DS[, id )] Carrega informac?o?es do sistema de armazenamento DS. (DS tambe?m\n\npode representar o computador utilizado na manipulac?a?o do HSM). Opcional-\n\nmente, pode ser adicionado um identificador, id, que ira? restringir o conjunto de\n\ninformac?o?es resultantes.\n\nmanageKey( id, kr, ku, policy ) Submete o par de chaves gerenciadas ku e kr, identifi-\n\ncada por id, ao controlador de chaves carregadas, ficando dispon??vel para uso por\n\naplicac?o?es externas ao HSM. A chave respeitara? a pol??tica de uso policy.\n\nrevokeGroupCerts( DS, id ) Revoga os certificados de todos os membros de um grupo\n\nidentificado por id. Os dados dos membros e seus certificados sa?o carregados de\n\nDS.\n\n\n\n99\n\nsign( data, kr ) Assina os dados contidos em data utilizando a chave privada kr.\n\nsplitSecret( ks, k, n ) Compartilha ks utilizando o mecanismo de compartilhamento de\n\nsegredo, utilizando os limiares k e n, respectivamente, a quantidade de partes resul-\n\ntantes do compartilhamento e o nu?mero m??nimo de partes necessa?rias para recons-\n\ntruir ks.\n\nstore ( DS, ... ) Armazena todos os dados passados por para?metro no sistema de arma-\n\nzenamento DS.\n\nxor ( ks1, ks2 ) Realiza a operac?a?o ou-exclusivo entre o conteu?do de ks1 e ks2."}]}}}