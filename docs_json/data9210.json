{"add": {"doc": {"field": [{"@name": "docid", "#text": "BR-TU.12825"}, {"@name": "filename", "#text": "18558_PFC_20131-MarcoAurelioSchmitzDeAguiar.pdf"}, {"@name": "filetype", "#text": "PDF"}, {"@name": "text", "#text": "Optimal oil production network\ncontrol using Modelica\n\nMonografia submetida a? Universidade Federal de Santa Catarina\n\ncomo requisito para a aprovac?a?o da disciplina:\n\nDAS 5511: Projeto de Fim de Curso\n\nMarco Aure?lio Schmitz de Aguiar\n\nFloriano?polis, agosto de 2013\n\n\n\nAknowlegment\n\nI would like to express my special thanks of gratitude to my supervisor at NTNU,\n\nAndres Codas Duarte, as well to my supervisor at UFSC, Professor Eduardo Campono-\n\ngara, who gave knowledge, advices and incentive to do this project.\n\nI would also like to thank my parents and friends who helped to keep cheerful\n\nand focused, even from distance.\n\nI would like to thank the NTNU, the Department of Engineering Cybernetics, and\n\nthe IO Center for receiving me and giving me the support so I could have an nice stay\n\nand a good work environment.\n\nAt last, I would like to thank to Brazilian Government and the CNPQ for giving\n\nme the opportunity for this exchange program called \u201cCie?ncia sem fronteiras\u201d (Science\n\nwithout borders). Which I believe can be very beneficial to transform the country in one\n\nof the leading centers for scientific research.\n\ni\n\n\n\nResumo\n\nNa ultima de?cada, diversos trabalhos desenvolveram te?cnicas para otimiza-\n\nc?a?o esta?tica da produc?a?o. Ao mesmo tempo, engenheiros de controle vem usando\n\notimizac?a?o para controlar a dina?mica de poc?os, separadores e outro elementos da\n\nrede de produc?a?o. Este trabalho visa preencher o gap entre essas duas a?reas distin-\n\ntas. Ele tenta responder uma questa?o comum que surge ao desenvolver problemas\n\nde otimizac?a?o esta?tica, o que esta? ocorrendo com as dina?micas do sistema?\n\nPara esse propo?sito, um modelo dina?mico da rede de produc?a?o de petro?leo foi\n\ndesenvolvido. Ele conte?m os principais elementos: poc?o, manifold, pipeline, sepa-\n\nrador, compressor de ga?s e linha de injec?a?o de gas-lift. Uma linguagem de mode-\n\nlagem de sistemas chamada Modelica foi usada para transcrever estes modelos para\n\neles serem usados no ambiente computacional JModelica.org. Esse ambiente conecta\n\nferramentas do estado da arte para simulac?a?o e otimizac?a?o de sistemas dina?micos.\n\nAle?m de criar uma ferramenta que possibilite a compreensa?o do que esta? ocor-\n\nrendo com as dina?micas do sistema, este trabalho se propo?e a resolver um problema\n\nque na?o seja notado em outras formulac?o?es. Um problema no qual uma manutenc?a?o\n\nprogramada dos compressores reduzira? sua capacidade de fluxo, se na?o manejado\n\nde forma adequada, podera? levar a um transito?rio onde e? necessa?rio queimar parte da\n\nproduc?a?o no flare.\n\nTre?s problemas de otimizac?a?o sa?o formulados e comparados. O primeiro, uma\n\nformulac?a?o simplista que faz o tracking de um setpoint. Na seque?ncia, e? criado um\n\nproblema de maximizac?a?o da produc?a?o. Por u?ltimo, e? formulada uma combinac?a?o de\n\ntracking com minimizac?a?o do uso do flare.\n\nOs problemas de otimizac?a?o sa?o discretizados usando o collocation method, um\n\nme?todo que faz a formulac?a?o expl??cita do problema e descarta o uso de simuladores. A\n\notimizac?a?o e? realizada usando o nonlinear solver IPOPT. Os Jacobianos, as Hessianas\n\ne os gradientes sa?o obtidos com a ferramenta de diferenciac?a?o automa?tica CasADi.\n\nApo?s a analise dos resultados, verificamos que e? necessa?rio o tratamento di-\n\nna?mico do problema e a ause?ncia desta abordagem leva a condic?o?es na qual o flare\n\ne? usado. Para evitar tal situac?a?o tanto a formulac?a?o de maximizac?a?o de produc?a?o,\n\nquanto a formulac?a?o de tracking com alta penalizac?a?o do flare podem ser usadas.\n\nii\n\n\n\nAbstract\n\nIn the last decade several works have developed techniques to solve the steady\n\nstate production optimization problem. At the same time, control engineers have used\n\noptimization to control the dynamics of wells, separators and other production network\n\nelements. This work aims to fill the gap between this two distinct areas of study. It\n\ntries to answer a common question that arises when developing static optimization\n\nproblems, what is happening with the system dynamics?\n\nFor this, a dynamic model of an oil and gas production network was developed.\n\nIt contains the main elements: wells, manifolds, pipelines, separators, gas compres-\n\nsors and gas-lift injection line. A system modelling language named Modelica was\n\nused to transcript these models, so they could be used in the computational environ-\n\nment JModelica.org. This environment connects state-of-the-art tools to simulation and\n\noptimization of dynamic systems.\n\nBeside creating a tool that allows the understanding of what is happening in\n\nthe dynamic domain, this works proposes to solve a dynamic problem that might be\n\nunnoticed in other formulations. A problem where a scheduled compressors mainte-\n\nnance will reduce the compressors flow capacity and if not well handled may lead to a\n\ntemporary flare condition.\n\nThree optimization problems are formulated and compared. At first an naive\n\napproach that only tracks a setpoint is proposed. After, a production maximization\n\nproblem is created. At last, a combination of tracking and flare minimization is sug-\n\ngested.\n\nEach optimization problem is discretized using the collocation method, a explicit\n\nformulation that discards the use of simulators. The optimization is solved using the\n\nIPOPT nonlinear solver. The Jacobians, Hessians, and gradients are obtained using\n\nthe CasADi automatic differentiation tool.\n\nAfter the analysis of the results, it is seen that the an approach that treats the\n\ndynamics is necessary and the lack of such treatment leads to a flaring condition. Both,\n\nthe production maximization and the tracking formulation with high penalization, were\n\nable to solve the problem without using the flare.\n\niii\n\n\n\nContents\n\n1 Introduction 1\n\n2 Model and Background 3\n\n2.1 Network . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 3\n\n2.2 Well Model . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 6\n\n2.3 Manifold . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 9\n\n2.4 Pipeline-Riser Model . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 9\n\n2.5 Separator . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 11\n\n2.6 Compressor . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 14\n\n2.7 Models Coupling . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 19\n\n3 Modelica and JModelica.org 24\n\n3.1 Modelica . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 24\n\n3.2 Optimica . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 25\n\n3.3 JModelica.org . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 26\n\n4 Nonlinear Model Predictive Control 28\n\n4.1 Problem Discretization . . . . . . . . . . . . . . . . . . . . . . . . . . . . 28\n\n4.1.1 ODE Solvers . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 28\n\n4.1.2 Collocation Method . . . . . . . . . . . . . . . . . . . . . . . . . . 31\n\n4.1.3 Collocation Method Example . . . . . . . . . . . . . . . . . . . . 33\n\n4.1.4 NLP Optimization Formulation . . . . . . . . . . . . . . . . . . . 34\n\n4.2 Objective Function . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 37\n\n4.2.1 Tracking Problem . . . . . . . . . . . . . . . . . . . . . . . . . . . 37\n\n4.2.2 Production Maximization Formulation . . . . . . . . . . . . . . . 37\n\niv\n\n\n\n4.3 Test Case: Compressor Scheduled Maintenance . . . . . . . . . . . . . 38\n\n4.3.1 Solving Approaches . . . . . . . . . . . . . . . . . . . . . . . . . 39\n\n5 Results 41\n\n5.1 Instance definition . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 41\n\n5.2 Computational Setup . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 45\n\n5.3 Maximization Problem . . . . . . . . . . . . . . . . . . . . . . . . . . . . 45\n\n5.4 Tracking Problem . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 47\n\n5.5 Compressor Maintenance Results . . . . . . . . . . . . . . . . . . . . . 49\n\n5.5.1 Naive Approach . . . . . . . . . . . . . . . . . . . . . . . . . . . 49\n\n5.5.2 Transient Optimization . . . . . . . . . . . . . . . . . . . . . . . . 51\n\n5.5.3 Hybrid Approach . . . . . . . . . . . . . . . . . . . . . . . . . . . 51\n\n5.6 Computation Analysis . . . . . . . . . . . . . . . . . . . . . . . . . . . . 54\n\n6 Conclusion 55\n\nBibliography 57\n\nAppendix A : Dynamic Models 61\n\nA.1 Well Model . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 61\n\nA.2 Flowline Model . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 64\n\nA.3 Manifold . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 66\n\nA.4 Separator . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 68\n\nA.5 Compressor . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 71\n\nA.6 Production Network . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 73\n\nA.7 Objective Functions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 74\n\nA.7.1 Tracking Problem . . . . . . . . . . . . . . . . . . . . . . . . . . . 74\n\nA.7.2 Maximization Problem . . . . . . . . . . . . . . . . . . . . . . . . 74\n\nA.8 Constraints . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 74\n\nv\n\n\n\nAppendix B : Modelica Examples 75\n\nB.1 Example 1: Van der Pol Oscillator . . . . . . . . . . . . . . . . . . . . . 75\n\nB.2 Example 2: The Quadruple-Tank Process . . . . . . . . . . . . . . . . . 76\n\nB.3 Example 1: Minimum time problem with Van der Pol Oscillator . . . . . . 78\n\nvi\n\n\n\nChapter 1: Introduction\n\nA current trend in the science and society is the search for more efficient and\n\neffective means to explore the natural resources. This trend combined with a uprising\n\ndemand for fossil energy culminated in the necessity of the oil industry to enhance the\n\ndevelopment of new technologies.\n\nBetween these technologies, the \u201csmart field\u201d [24] contrasts among the others.\n\nThis technology develops hardwares and softwares to allow the optimal operation of\n\noilfields. The development became a challenge to the industry and the academic part-\n\nners. In the software part, many works have been developing nonlinear [21, 2] and\n\npiecewise linear [14, 9, 30] formulations for maximize the static production of oil fields.\n\nStatic models are easier to be formulated when compared to dynamic models, it\n\ncan be done by interpolating simulators or field data. The optimization of a static can\n\nobtain results faster than dynamic models, but it ignores how the system is behaving in\n\nthe continuous time.\n\nIn the dynamic system area, several works model and control a single element\n\nof network, but hardly more than one element is treated per time. In this work, an oil\n\nproduction network is modeled but for this dynamic models are used. In such way, it\n\naims to be able to solve problems that requires the whole network without missing the\n\ntransitory characteristic.\n\nThe production is composed by:\n\n\u2022 Gas-lift wells that extract oil, gas, and water from the reservoir.\n\n\u2022 Sub-sea manifolds that gathers the flow from different wells.\n\n\u2022 Pipelines and risers that transport the flow from the sea bed to the processing\n\nunit.\n\n\u2022 Separators that separate the incoming three phase flow to three different outlets,\n\nthe separation efficiency may change depending on the conditions.\n\n\u2022 Compressors that increases the pressure from the separator gas outlet to the\n\nexportation line.\n\n1\n\n\n\nGas-lift injection line and manifold that take part of the flow of the exportation line and\n\nredirect then to be inject in the wells.\n\nThe models equations were coded using a system modeling language named\n\nModelica, this language permit the description of systems in a intuitive way. The com-\n\nputational environment JModelica.org was used to compile the production network\n\nmodel, this environment also interface the model with state-of-the-art simulation and\n\noptimization tools.\n\nThis work may be relevant to answer some of questions that may rise when\n\ndoing static optimization, however the tool developed allows to go further create new\n\nformulations. A practical problem is created to explore the system model and it pos-\n\nsible applications it is created. A scheduled compressor maintenance will restrict the\n\ncompressor flow capacity. In such condition, it might be necessary to flare part of the\n\nproduction if the problem is not well handled.\n\nTo solve this problem three optimization formulations were created. At first, it\n\nis created a optimal tracking problem that follows the static production maximization\n\nsolution. The second approach is a production maximization problem. The third for-\n\nmulation combines the track following of the first formulation with a flare minimization.\n\nEach formulation is compared qualitative using figures and qualitative using the solver\n\nreport.\n\nThe model is discretized using the collocation method, an explicit formulation\n\nfor solving DAEs that discard the use of simulators. The open-source nonlinear solver\n\nIPOPT is used to solve the optimization problems. the CasADi automatic differentiation\n\ntool is used to obtain the Jacobians, Hessians, and gradients.\n\nChapter 2 describes the models used and how they are coupled. Chapter 3\n\ndiscusses about the tools used to accomplish this work. Chapter 4 shows the dis-\n\ncretization method and the nonlinear formulation. Chapter 5 show and argument the\n\nresults. Chapter 6 gives the final conclusions and the possibility for future works.\n\n2\n\n\n\nChapter 2: Model and Background\n\nIn this chapter, the models that were used to describe the oil network will be\n\nformulated.\n\nThe chapter begins with an overview of the main elements of network and how\n\nthey interact. Afterwards each of the models is specified based on literature references\n\nand considering some changes to fit the purpose of this work. At last it is given a\n\ndescription of how the models are connected to form the network.\n\n2.1: Network\n\nThis works wishes to develop a model that is suitable for simulation, control, and\n\noptimization. For this, not only the component dynamics must be considered but also\n\nthe interactions between them and the restrictions that it may lead.\n\nFor instance, the literature usually assumes that there is unlimited lift-gas avail-\n\nability or it is bounded by some arbitrary value. However, when analyzing the network\n\nas a compound system we can see that the limit on gas injection depends on the mass\n\nbalance of how much is produced, exported, and injected. For these reasons a macro-\n\nscopic view of the system is necessary to rightfully control and optimize a network.\n\nThe network starts with the producing elements, the well takes as input the lift-\n\ngas flow rate and as output, the production mass flow. Besides, it is related to the\n\npressure with the gas-lift manifold and production manifold.\n\nThe production manifold gathers the flow from many inlets and redirects to only\n\none outlet. This is used to connect the wells to the pipeline.\n\nThe pipeline and the riser are modeled together, since they have similar func-\n\ntionality and dynamics. As input it takes the flow coming from the well and delivers\n\nit to the separator. It shares the pressure with the manifold at the inlet and with the\n\nseparator at the outlet. Between the inlet and outlet a pressure drop is created due to\n\nfriction and gravitational effects.\n\nThe separator takes the three phase flows coming from the riser and discharges\n\nin three outlets. If the separation is not perfect, oil and gas flows within water through\n\n3\n\n\n\nthe water outlet. In the same way, part of the gas leaves through the oil outlet. The sep-\n\naration efficiency is given by the mass flow through the separator and by the separator\n\npressure, which is a free variable.\n\nThe compressor is responsible for increasing the pressure so that the gas can be\n\ntransported by the pipeline to the shore. Before the compressor there is a exhaustion\n\nvalve that leads to the flare and in case the compressor can not process all the flow\n\npart can be burned.\n\nThe system components and free variables of the network are presented in the\n\nFigure 2.1. The decision variables are highlighted with a circle and all other variables\n\ncan be determined using the system equations.\n\nThe free variables are:\n\n\u2022 wwgl is the lift-gas injection rate in the well w.\n\n\u2022 ps, the pressure of the separator s.\n\n\u2022 wcfl, the gas mass flow to be burned in the flare that is located before compressor\n\nc.\n\n\u2022 wcsl, the recirculation flow through the anti-surge line in compressor c.\n\nAfter this overview, each model will be specified in a different section, starting\n\nfrom the bottom until the export line.\n\n4\n\n\n\nManifold 1\n\nManifold 2\n\nLiquids\n\nOutput\n\nGas\n\nOutput\n\nSeparator 1\n\nSeparator 2\n\nWell 1\n\nLift-gas injection\n\nInjection\n\nF\nla\n\nre\n\nExport\n\nCompressor 1\n\nGas-Lift \n\nManifold\n\nLiquids\n\nOutput\n\nF\nla\n\nre\n\nCompressor 2\n\nGas\n\nOutput\n\nPipeline &amp; \n\nRiser 1\n\nPipeline &amp; \n\nRiser 2\n\nWell 4\n\nF\nig\nu\nre\n\n2\n.1\n:\nN\netw\n\no\nrk\n\nS\nch\nem\n\na\ntic\n\n5\n\n\n\n2.2: Well Model\n\nThe well is the main actuator of an oil reservoir, it is composed by several dif-\n\nferent parts. In Figure 2.2 we summarize a gas-lifted well representing the following\n\ncomponents: gas-lift choke, injection valve, annulus, tubing, casing, packer, and pro-\n\nduction choke.\n\nTubing\n\nAnnulus\n\nReservoir\n\nInjection\nvalve\n\nProduction\n\nchoke\n\nGas Lift\n\nChoke\n\nCasing\n\nPacker\n\nGas in\n\nProduction\n\nout  \n\nFigure 2.2: Well schematic [11]\n\nThe operation of a gas-lifted well can be described by the simple steps:\n\n1. The injected gas passes through the gas-lift choke and builds up the annulus\n\npressure.\n\n2. As the pressure in the annulus exceeds the pressure in the tubing, gas starts to\n\nflow through the injection valve.\n\n6\n\n\n\n3. The injected gas mixes with the fluid emanating from the reservoir and reduces\n\nthe overall density.\n\n4. With a lower density the counter-pressure induced by the fluid is reduced making\n\neasier for the fluid to flow to the surface.\n\nA gas-lifted well may operate in different regimes [17, 16]. Some of them with\n\nperiodic dynamics as a consequence of an intermittent gas rate through the injection\n\nvalve. This oscillatory behavior is not the aim of this work. Thus, it is assumed that\n\ncasing-heading and density wave are avoided by a lower level control and operational\n\nconstraints or are non existent.\n\nFor the gas-lifted well dynamic model we searched in the literature for the most\n\nused models. A Hammerstein Model [28] was discarded because it is tuned to char-\n\nacterize the dynamics but not the nonlinearities and discontinuities that are intrinsic of\n\nthe system, besides this model need to be fitted to simulator data.\n\nPlucenio\u2019s Model [27] is based on Partial Derivatives Equations (PDEs) that\n\nmight be good to represent the well alone, however it is dispendious to represent in\n\na complex network once it generates a high number of states.\n\nBinder\u2019s Model [8] is an extension of Eikrem\u2019s Model, a model that has been\n\ndeveloped and used in the last 10 years [11, 12, 1, 18]. An earlier version of the\n\nmodel was compared with OLGA simulator [18], even with the simplicity the results\n\nhave considerable fidelity. The model has only 3 ODEs and some algebraic equations\n\nand still it can represent most of the characteristics and restrictions in the well. For\n\nthese reasons, this is the model that it will be used.\n\nThe main assumptions of the model are:\n\n\u2022 Oil Production is described by Vogel\u2019s Equation [35].\n\n\u2022 The gas production and water production are given by the water-liquid ratio (wa-\n\ntercut) and gas-oil ratio (GOR).\n\n\u2022 The distribution of the masses of the three fluids happens without transport delay.\n\n\u2022 Friction between the fluids and the annulus/tubing wall is not considered.\n\n\u2022 Pressures are obtained by the ideal gas law and gravitational affect of liquids.\n\n7\n\n\n\nThe model describes the dynamical system using 3 states and 3 inputs \u2014 wgl,\n\nupc, and pds:\n\nm? =\n\n?\n???\n\nm?ga = win ? wgi\n\nm?gt = wgr + wgi ? wgp\n\nm?lt = wlr ? wlp\n\n?\n???\n\nwout = fc(m,pds,upc)\n\nMass of gas in the Annulus\n\nMass of gas in the Tubing\n\nMass of liquid in the Tubing\n\nChoke flow\n\n(2.1)\n\nIn the annulus, the input of lift gas win increases the annulus gas mass mga, while the\n\nflow through the injection valve wgi reduces it. The gas coming from the reservoir wgr\n\nadds up to the gas coming from the annulus wgi and is reduced from the gas flowing\n\nthrough the production choke wgp giving the dynamic of gas mass in the tubing. The\n\nliquid mass in the tubing is the time integral of the liquid flowing from the reservoir wlr\n\ndiscounted by the outgoing liquid flow through the production choke wlp. The output\n\nvector of gas, oil, and water flows wout is as function of the states m = (mga,mgt,mlt)\n\n(Eq. 2.1), the opening in the production choke upc, and the choke downstream pressure\n\npds, which depends on the pipeline states. The whole set of equations is presented in\n\nAppendix A.1.\n\nThe main difference between Eikrem\u2019s and Binder\u2019s models is that the last one\n\nconsiders not only production of oil but also water.\n\nThe main difference between Eikrem\u2019s and Binder\u2019s models is that, in Binder\u2019s\n\nmodel, the reservoir produces not only oil and gas, but water as well. Therefore, some\n\nchanges were made in the density and pressure equations as can be seen in [8].\n\nBoth models consider the opening of the production choke upc as a controllable\n\nvariable, however to reduce the complexity of the problem we assume that it is always\n\nfully open, since any other position of the choke would reduce the oil production which\n\nis against the objective of maximizing production.\n\nAn additional modification to Binder\u2019s model was necessary to fit the non-return\n\ncharacteristic in the gas-lift choke. There should be flow in the choke only if the pres-\n\nsure in the annulus is lower than the pressure before the choke, in the gas-lift manifold.\n\nDue to this limitation, the lift-gas injection must be within the bounds:\n\n0 ? wgl ? w\nmax\ngl = fgv(pgm ? pta) (2.2)\n\nbeing wmaxgl the flow when the gas-lift choke is fully open. It can be found using the\n\nchoke function, which is dependent of the pressure difference between the gas-lift\n\n8\n\n\n\nmanifold (pgm) and the top of the annulus (pta).\n\n2.3: Manifold\n\nThe manifold is a coupling element. It is modeled with no dynamics or complex\n\nequations. It is used to connect many components to a single one, Figure 2.3. It can\n\nbe a three-phase flow manifold, as those in the production line, or a single-phase flow\n\nmanifold, as the lift-gas manifold.\n\nFigure 2.3: Manifold Schematic\n\nThe outlet flow, in the manifold, is the sum of all inlet flows. The flow is assumed\n\nto be perfectly mixed. The pressure at the inlet and outlet are considered the same.\n\nwout =\n?\n\ni?I\n\n?iwiin (2.3a)\n\npiin = pout, ?i ? I (2.3b)\n\n?i ? {0, 1}, ?i ? I (2.3c)\n\nwhere wout is the outlet flow and pout is outlet pressure. wiin is the inlet flow and p\ni\nin the\n\ninlet pressure of the input i. ?i is the opening of the inlet valve i, which can be either\n\nfully open (?i = 1) or fully closed (?i = 0). I is the set of manifold inputs. The model is\n\nalso the Appendix A.3.\n\n2.4: Pipeline-Riser Model\n\nIn this section it is modeled the pipeline and the riser, elements that connect the\n\nsubsea manifold to the offshore platform. For the same reasons that were explained in\n\nthe well modeling, we are not interested in oscillatory behaviors.\n\n9\n\n\n\nDuring the literature research several models were found, which focus on model-\n\ning the turbulent regimes. Slug flow models are described by Taitel [34, 33], Di Meglio\n\n[10], Stasiak [31, 32], Masella [23], and Jahanshahi [19]. The last one presents a table\n\n(p. 1639 \u2014 Table 1) which compares his model with the state-of-the-art Multiphase\n\nFlow Simulator OLGA and other early proposed models. The conclusion that we can\n\nobtain from the table is that the model proposed by Jahanshahi [19] has a fair trade off\n\nin accuracy and complexity. It contains a reduced number of states when compared to\n\nmodels that use Partial Differential Equations (PDE).\n\nJahanshahi [19] assumes that:\n\n\u2022 The system has two components: a horizontal flowline and a vertical riser.\n\n\u2022 Each component has two state variables, one for the liquid mass and another for\n\nthe gas mass.\n\n\u2022 The connection is made by a virtual valve and the valve opening is given by a set\n\nof equations related to the height of liquid in the lowest part of the pipeline.\n\n\u2022 The boundary conditions are the constant inflow of gas wg and liquid wl (with\n\nconstant watercut) and the static pressure ps at the end of the pipeline.\n\n\u2022 In both elements, the gas is assumed to be ideal and the pressure drop due to\n\nfriction is disregarded.\n\n\u2022 The horizontal pipeline has a stratified flow, whereas a perfect mix is assume in\n\nthe riser.\n\nL2\n\nL1\n\nFigure 2.4: Pipeline and Riser Schematic\n\nThe flowline and riser have different flow regimes [37, 26]. As discussed in Sec-\n\ntion 2.2 regimes with oscillatory dynamics are out of the scope of this work. Therefore\n\nthe model was simplified to avoid such conditions.\n\n10\n\n\n\nThe assumption of constant watercut at the inlet will not hold if different produc-\n\ntion wells are connected to the same pipeline. For this reason, the states related to the\n\nliquid phase were split in 2, water and oil, in both sections.\n\nThe final model has 6 states. In the pipeline mgp, mop, and mwp, are the mass\n\nof gas, oil, and water, respectively. In the riser mgr, mor, and mwr, once again, are the\n\nmass of gas, oil, water. Figure 2.4 sketches the system with the modifications.\n\nThe set of equations of the model can be summarized as:\n\nm? =\n\n?\n???????????\n\nm?gp = wg,in ? wg,pr\n\nm?op = wo,in ? wo,pr\n\nm?wp = ww,in ? ww,pr\n\nm?gr = wg,pr ? wg,out\n\nm?or = wo,pr ? wo,out\n\nm?wr = wo,pr ? ww,out\n\n?\n???????????\n\nyp,out = f1(m)\n\npds = f2(m)\n\nGas mass in the pipeline\n\nOil mass in the pipeline\n\nWater mass in the pipeline\n\nGas mass in the riser\n\nOil mass in the riser\n\nWater mass in the riser\n\nOutflow\n\nPressure at the entrance\n\n(2.4)\n\nThe vector of states m = (mgp,mop,mwp,mgr,mor,mwr) do the balance of mass in the\n\nsystem. The system inputs are the inflow of gas wg,in, oil wo,in, and water ww,in. The\n\nflow through the virtual valve that connects the two elements are the gas flow wg,pr, the\n\noil flow wo,pr, and the water flow ww,pr. The system outlet flow is composed by the gas\n\nflow wg,out, oil flow wo,out, and water flow ww,out.\n\nThe model equations including the changes can be found in Appendix A.2. For\n\nthe original model it is suggested the reference [19].\n\n2.5: Separator\n\nThe separator developed in this section is inspired by the Sayda\u2019s physical-\n\nbased model [29]. This model includes transient dynamics, but since its settling time is\n\nconsiderable faster than those in the wells and pipelines they will be discard.\n\nThis element will determine how much hydrocarbons are flowing along the water\n\nthrough the water outlet and how much gas within the oil goes through the oil outlet.\n\nThe separator is basically a tank with fluid flowing through it. It has a three-phase\n\nflow inlet and three outlets: a water outlet \u2014 that may discharge gas and oil as well, an\n\noil outlet \u2014 that can discharge gas also, and a gas outlet. The separator is divided in\n\n11\n\n\n\nfour volumes: the mixture, the water phase, the oil phase, and the gas phase. Figure\n\n2.5 shows a schematic.\n\nFigure 2.5: Separator Schematic\n\nThe separator pressure can be determined by the mass and volume of gas inside\n\nof the separator using the ideal gas equation. Since the separator length is relatively\n\nshort when compared to pipelines, the pressure drop due to the friction through the\n\nseparator is so small that it is negligible and pressure of all outlets are equal to the inlet\n\npressure:\n\npin = pout (2.5)\n\nBeing pin the inlet pressure and pout the pressure in all outlets.\n\nThe separator outlet pressure is defined as a controlled variable and it is as-\n\nsumed that a lower-level control loop controls the outlet gas valve to keep the pressure\n\nin the determined reference. This regulation dynamic is faster than other dynamics,\n\ntherefore it is not considered in this model. In addition, two level controllers for the\n\nwater-mixture level and the oil level are assumed to keep them in a predetermined\n\nreference. Since the heights and pressures have no dynamics, there is no mass accu-\n\nmulation inside the separator, therefore we can assure that all the inlet flow is leaving\n\nby one of the outlets.\n\nqin =\n?\n\np?P\n\nq\np\nout (2.6)\n\n12\n\n\n\nwhere qin is a three-phase mass flow and each q\np\nout is an outlet mass flow. P is the set\n\nof the outlets, they can be g, o or w, standing for the gas, oil, and water outlet.\n\nWhat determines the separation efficiency between water and the mixture is the\n\nangle ? of the interface between this two elements. This angle is the same as the angle\n\nformed by the movement of water droplets inside of the mixture. The droplets speed\n\nvector is composed by the speed of water flowing through the separator (horizontal\n\ncomponent) and gravitational effect (vertical component), which is given by Stoke\u2019s law\n\n[22]:\n\n? = tan?1\n(\nvv\nvh\n\n)\n(2.7)\n\nwhere ? is the surface angle, vh is the horizontal component of the water flow, and vv\n\nis the vertical component induced by the gravitational effect.\n\nThe separation is perfect if the surface touches the oil phase, as it happens\n\nin Figure 2.5. Otherwise we need to virtually extend the separator to have perfect\n\nseparation, as it happens in Figure 2.6. The perfect separation happens when the\n\nwater and oil phases meet. It does not happen in L anymore, but the perfect separation\n\nhappens on L1. The ratio of the volumes of the mixture inside and virtually outside of\n\nthe separator gives the water-mixture separation index. If the separation is not perfect,\n\noil and gas flow through the water outlet.\n\nFigure 2.6: Virtual Separator Schematic\n\nThe oil-gas separation efficiency is based on Raoult\u2019s law and Dalton\u2019s law of\n\npartial pressures [25], which basically says that the composition of a fluid at equilib-\n\nrium depends on the fluid pressure and the vapor pressure of the components. In\n\nmathematical format:\n\nxi = yi\nPv,i\nP\n\n(2.8)\n\n13\n\n\n\nwhere xi is the mole fraction of the component in the liquid phase. yi is the mole\n\nfraction of the component in the vapor phase. We assume that the gas has only one\n\ncomponent and the oil will not vaporize to the gas phase, in which case yi = 1. Pv,i\n\nis the vapor pressure of the component i, and P is the mixture pressure. Let g be the\n\nonly the gas component, then:\n\nxg =\nPv,g\nP\n\n(2.9)\n\nUsing Eq. 2.9 we can find the amount of gas that flows out through the oil\n\noutlet and how much flow through the gas outlet. The whole equations set appears in\n\nAppendix A.4.\n\n2.6: Compressor\n\nThree compressor models in the study of Grong [13] were examined to find one\n\nthat suits this work. However, a new model was elaborated and it might fit better our\n\npurposes.\n\nThe first of the three models is a physical-based model which describes very well\n\nthe dynamics of the compressor in the simulations as is shown in [13]. Nevertheless,\n\nthe performance relies on physical design parameters which are difficult to measure\n\nand non-existent in the commercial compressor data sheets. For this reason, it is very\n\ndifficult to implement.\n\nTo overcome the lack of information to build a physical model, the following mod-\n\nels will only use typical data given by manufacturers. The compressor map, Figure 2.7,\n\nis given in the compressor data sheet and contains the compressor static behavior. On\n\nits abscissa axis there is the compressor volumetric inlet flow and on the ordinate axis\n\nthere is the pressure gain through the compressor. Moreover, the chart is composed\n\nby several lines. Each line represents the compressor characteristic for a given com-\n\npressor speed. Figure 2.7 presents two boundaries with dashed lines. The surge line\n\nis a limit which separate the map of the unstable flow region. The physical explanation\n\nis similar to the stall effect in airplanes wings. The other boundary is the choke line,\n\nthis limit represent the maximum flow that the compressor can handle.\n\nThe next model [13] uses a 4th order polynomial function to approximate all\n\nspeed lines in the compressor map. The parameters of the polynomial function are\n\nspeed dependent and are fitted in a least square way from experimental data. The\n\n14\n\n\n\n1 1.5 2 2.5 3 3.5 4 4.5 5 5.5 6\n1\n\n1.5\n\n2\n\n2.5\n\n3\n\n3.5\n\n4\n\n4.5\n\n5\n\n5.5\n\n6\n\nInlet Flow rate (m\n3\n/s)\n\nP\nre\n\ns\ns\nu\nre\n\n R\na\nti\no\n\n10450 rpm\n\n9500 rpm\n\n8550 rpm\n\n7600 rpm\n\nSurge Line\n\nChoke line\n\nFigure 2.7: Compressor map\n\nfidelity is not very good if compared to the other models in the studies thereof, and the\n\ncalculation time is very similar to the physical model [13].\n\nThe third model of Grong, Table Lookup Model, creates a 4th order polynomial\n\napproximation for each speed line. The operation of the compressor must be done over\n\nthe predetermined speed lines; however, new speed lines can be created by interpo-\n\nlating the compressor map data. The model fits more precisely than the prior models\n\nhowever it takes much longer to calculate [13].\n\nIn a very similar way, the previous models use the information from the compres-\n\nsor map to define the dynamics of the compressor.\n\nThe fourth model does not have states, since the dynamics of the compressor\n\nare much faster than those in the wells and pipelines. Figure 2.8 shows the basic\n\nrepresentation of the model.\n\nThis model has the objective to assure that the compressor is running within the\n\nmap limits. For this, the map boundaries are approximated by polynomial and distance\n\nvectors from the operation point to each boundary are calculated. If all vectors have\n\nnegative values it means that system is operating inside of the map. The boundaries,\n\nin Figure 2.8, are: 10450 rpm \u2014 the maximum speed (upward), 7600 rpm \u2014 the\n\n15\n\n\n\nFSSC\n\nFS\n\nFigure 2.8: Compressor model schematic\n\nminimum speed (downward), surge line (leftward), and choke line (rightward)\n\nIt is assumed that there is a lower level controller for the speed of the compressor\n\nto ensure that it is keeping the output pressure constant and at its desired reference.\n\nSince it has no dynamics, all the mass flow that enters in the system compressor leaves\n\nit:\n\nwin = wout (2.10)\n\nThe compressor map is expressed in volumetric flow while the rest of the system\n\nis modeled with mass flow, so we convert the flow using the ideal gas equation and the\n\nconditions at the compressor inlet:\n\nqvol =\nwinRT\n\npinMg\n(2.11)\n\nwhere qvol is the volumetric flow, win is the mass flow, R is the ideal gas constant, T is\n\nthe temperature at the entrance of the compressor, pin is the pressure upstream, pout\n\nis the pressure downstream, and Mg is the gas molar mass. And the pressure ratio\n\n16\n\n\n\nthrough the compressor is defined:\n\nrp =\npout\npin\n\n(2.12)\n\nThe map is valid for normalized conditions of inlet pressure and temperature, so\n\nto be used in different conditions it need be adjusted:\n\nqvol = qvol\nT\n\nTmap\n\npmap\npin\n\n(2.13a)\n\nrp = rp\nT\n\nTmap\n(2.13b)\n\nThe approximation of each of the four boundary lines of the compressor map is\n\nmade by a second order equation. The upward boundary fu(q), the downward bound-\n\nary fd(q), the leftward boundary fl(q), and rightward boundary fr(q) are defined:\n\nfi(qvol) = aiq\n2\nvol + biqvol + ci, ?i ? {u,d, l,r} (2.14)\n\nThe parameters ai, bi, and ci for each i are obtained by solving an unconstrained least\n\nsquares problem with the compressor map data. The result of the approximation is\n\nshown in Figure 2.9.\n\n1 1.5 2 2.5 3 3.5 4 4.5 5 5.5 6\n1\n\n1.5\n\n2\n\n2.5\n\n3\n\n3.5\n\n4\n\n4.5\n\n5\n\n5.5\n\n6\n\nInlet flow rate (m\n3\n/s)\n\nP\nre\n\ns\ns\nu\nre\n\n r\na\nti\no\n\nf\nl\n(q)\n\nf\nr\n(q)\n\nf\nu\n(q)\n\nf\nd\n(q)\n\n10450 rpm\n\n9500 rpm\n\n8550 rpm\n\n7600 rpm\n\nFigure 2.9: Compressor map approximation\n\nGiven a pressure ratio rp we can find projection of the leftward and rightward\n\n17\n\n\n\nboundaries in the flow rate axis is solving the second order equation:\n\nql,vol =\n?bl +\n\n?\nb2\nl\n? 4al(cl ? rp)\n\n2al\n(2.15a)\n\nqr,vol =\n?br +\n\n?\nb2r ? 4ar(cr ? rp)\n\n2ar\n(2.15b)\n\nTo measure the distance from the current operating point to the boundaries it\n\nwas created four variables:\n\n?u = rp ? fu(qvol) (2.16a)\n\n?d = fd(qvol) ? rp (2.16b)\n\n?l = ql,vol ? qvol (2.16c)\n\n?r = qvol ? qr,vol (2.16d)\n\n(2.16e)\n\nThe inequalities in Eq. 2.17 ensure that the compressor is operating inside of\n\nthe map.\n\n?b ? 0, ?b ? {u,d, l,r} (2.17)\n\nWe can increase the operation region using a recirculation line. The recirculation\n\nline redirects part of the outlet flow to the inlet. In this way we can increase the inflow\n\nof the compressor to avoid the operation before the surge line. For this we write:\n\nw?in = win + wsl (2.18a)\n\nwout = w?out ? wsl (2.18b)\n\nwhere wsl is the flow through the surge control line, w?in is the new compressor inflow\n\nand w?out is the new outflow. Look in Figure 2.8 for a better understanding.\n\nIf we replace win in the Eq. 2.11 by w?in, then we can move to the right, parallel\n\nto the abscissa axis in the compressor map, making it possible to leave the infeasible\n\nregion.\n\nThe whole set of equations of this model is shown in a compact format in Ap-\n\npendix A.5.\n\n18\n\n\n\n2.7: Models Coupling\n\nIn this section we will discuss how we can connect all the subsystems to form\n\nthe oil production network with the lift-gas injection loop.\n\nThe network inputs are the vector lift-gas injection in the wells wgl, the vector\n\nseparator pressure p, the vector of exhaustion flare valve flow wfl, and vector of surge\n\ncontrol line flow in the compressor wsc.\n\nwgl = [w\n1\ngl, . . . ,w\n\nNw\ngl ]\n\nT (2.19a)\n\np = [p1, . . . ,pNs]T (2.19b)\n\nwfl = [w\n1\nfl, . . . ,w\n\nNc\nfl ]\n\nT (2.19c)\n\nwsc = [w\n1\nsc, . . . ,w\n\nNc\nsc ]\n\nT (2.19d)\n\nwhere:\n\n\u2022 Nw is the number of wells in the network,\n\n\u2022 Np is the number of pipelines,\n\n\u2022 Ns is the number of separators,\n\n\u2022 Nc is the number of compressors.\n\nWith these parameters the following sets can be defined:\n\n\u2022 W = {1, . . . ,Nw} is the set of wells in the network,\n\n\u2022 P = {1, . . . ,Np} is the set of pipelines,\n\n\u2022 S = {1, . . . ,Ns} is the set of separators,\n\n\u2022 C = {1, . . . ,Nc} is the set of compressors.\n\nBesides, we have the sets the connects two elements:\n\n\u2022 the set SP that have pairs of separators and pipelines that are connected ((p,s) ?\n\nSp ? p ? P,s ? S),\n\n\u2022 the set CS contains pairs of compressors and separators that are connected\n\n((s,c) ? CS ? s ? S,c ? C).\n\n19\n\n\n\nLet the subscripts be a reference to the model, being: w a well model, m a\n\nmanifold, p a pipeline mode, s a separator model, and c a compressor model. The\n\nsuperscript is the index for a specific element of a set. Let x be a vector of state\n\nvariables of a specific model, f the state derivative function, the vector y be the model\n\nalgebraic variables, and g be the algebraic function that defines y. In y there are all\n\nvariables that are not states. For instance xww has the well state variables of well w in\n\nthe set W. We have the system states:\n\nx?ww = fw(x\nw\nw,y\n\nw\nw) ?w ? W (2.20a)\n\nx?pp = fp(x\np\np,y\n\np\np) ?p ? P (2.20b)\n\nand the system algebraic equations:\n\ngw(x\nw\nw,z\n\nw\nw) = 0 w ? W (2.21a)\n\ngp(x\np\np,z\n\np\np) = 0 p ? P (2.21b)\n\ngs(y\ns\ns) = 0 s ? S (2.21c)\n\ngc(y\nc\nc) = 0 c ? C (2.21d)\n\nThe following equations connect the system free variables with the respective\n\nelement variables. The variables and components can be localized using Figure 2.10.\n\nwwin = w\nw\ngl ?w ? W (2.22a)\n\npsout = p\ns ?(s) ? S (2.22b)\n\nwcin = w\ns\nout ? w\n\nc\nfl ?(c,s) ? Cs (2.22c)\n\nwcsl = w\nc\nsc ?c ? C (2.22d)\n\nwhere wwin is the well model flow input, p\ns\nout is the separator model pressure output, w\n\nc\nin\n\nis the compressor model flow input, wsout is the separator model flow output, and w\nc\nsl is\n\nthe compressor model anti-surge line flow.\n\nThe equation that connects the well with the gas-lift manifold is:\n\npwin = pgm ?w ? W (2.23)\n\nwhere pgm is the gas-lift manifold pressure, and p\nw\nin is the well input pressure of the well\n\nw.\n\n20\n\n\n\nManifold 1\n\nManifold 2\n\nLiquids\n\nOutput\n\nGas\n\nOutput\n\nSeparator 1\n\nSeparator 2\n\nWell 1\n\nLift-gas injection\n\nInjection\n\nF\nla\n\nre\n\nExport\n\nCompressor 1\n\nGas-Lift \n\nManifold\n\nLiquids\n\nOutput\n\nF\nla\n\nre\n\nCompressor 2\n\nGas\n\nOutput\n\nPipeline &amp; \n\nRiser 1\n\nPipeline &amp; \n\nRiser 2\n\nWell 4\n\nF\nig\nu\nre\n\n2\n.1\n0\n:\nN\netw\n\no\nrk\n\nS\nch\nem\n\na\ntic\n\n2\n1\n\n\n\nThe manifold equations that connect wells and pipelines are:\n\nw\np\nin =\n\n?\n\nw?W\n\n?w,pw\nw\nout ?p ? P (2.24a)\n\npwout =\n?\n\np?P\n\n?w,pp\np\nin ?w ? W (2.24b)\n\nwhere wpin is the pipeline input pressure, ?w,p is the manifold routing binary variable,\n\nwwout is the well outlet flow, p\nw\nout is the well pressure at the outlet, and p\n\np\nin is the pipeline\n\ninlet pressure.\n\nThe set of equations that connect the pipeline and the separator are:\n\nwsin = w\np\nout ?(s,p) ? Sp (2.25a)\n\npsin = p\np\nout ?(s,p) ? Sp (2.25b)\n\nwhere wsin is the separator inlet flow, and p\ns\nin is the separator inlet pressure.\n\nThe connection of the separators and the compressors is made by Eq. 2.22c\n\nand by:\n\npcin = p\ns\nout ?(c,s) ? Cs (2.26a)\n\npcout = pexp ?c ? C (2.26b)\n\nwhere pcin is the compressor inlet pressure, p\ns\nout is the separator outlet pressure, p\n\nc\nout is\n\nthe compressor outlet pressure, and pexp is the exportation line pressure.\n\nThe exportation line equations are given by:\n\nwgexp =\n?\n\nc?C\n\nwcout ? wgm (2.27a)\n\nwoexp =\n?\n\ns?S\n\nw\ns,o\no,out (2.27b)\n\nwwexp =\n?\n\ns?S\n\nw\ns,w\nw,out (2.27c)\n\nwhere wgexp is the amount of gas that is exported, w\nc\nout is the compressor outlet flow,\n\nwgm is the flow to the gas-lift manifold, woexp is the amount of oil that is exported, w\ns,o\no,out\n\nis the oil flow through the separator oil outlet, wwexp is the exported water, and w\ns,w\nw,out is\n\nthe water flow through the separator water outlet.\n\n22\n\n\n\nThe gas-lift manifold equations are:\n\npgm = pexp (2.28a)\n\nwgm =\n?\n\nw?W\n\nwwgl (2.28b)\n\nThe whole set of equations is in Appendix A.6.\n\n23\n\n\n\nChapter 3: Modelica and JModelica.org\n\nIn this chapter it is presented the tools used to model the system and solve the\n\noptimization problem.\n\nFirst the Modelica language is presented, commenting its uses and applications.\n\nAfter, it is given a brief explanation about the Modelica extension named Optimica.\n\nAnd at last it is discussed JModelica.org, a toolbox that implements a Modelica and\n\nOptimica compiler and gathers several important tools for solving optimal problems.\n\n3.1: Modelica\n\nModelica is a non-proprietary object-oriented language developed to model dy-\n\nnamic behavior of technical systems in a simple way. The models are described using\n\ndifferential, algebraic, and discrete equations. Models can also be composed by other\n\nmodels in a hierarchical structure.\n\nUnlike other languages, as MATLAB or C++, Modelica has a syntax very close\n\nto the mathematical formulation. The focus of this language is to spare the user from\n\nprogramming repetitive routines and leaving him time to focus on the development of\n\nthe model itself.\n\nModelica is a textual language, however there are several environments that pro-\n\nvide a graphical user interface. Some implementations are free and others commercial.\n\nFree environments are: OpenModelica (Linko?ping University) and JModelica.org (Lund\n\nUniversity). Commercial environments are: CATIA Systems (Dassault Systemes), Dy-\n\nmola (Dynasim), MapleSim (MapleSoft), MathModelica (Wolfram Research), and oth-\n\ners.\n\nThe language has academic and industrial applications in many areas e.g.: ve-\n\nhicle dynamics, hydraulics, combustion, air conditioning, electrical and electronic sys-\n\ntems, and control. Industrial partners are essentially automotive companies such as\n\nAudi, BMW, Daimler, Ford, Toyota, and VolksWagen. Conferences on this language\n\nhave been happening almost every year since 2000 in Europe and North America,\n\nwith more than 600 papers published in these conferences.\n\nSome examples of the usage of the language can be found in Appendix B.\n\n24\n\n\n\n3.2: Optimica\n\nModelica does not support natively formulations of optimization problems, since\n\nit was developed for simulation purposes only. Some of the main elements for op-\n\ntimization are not present, as the objective function, constraints, or the optimization\n\nhorizon.\n\nThe objective of Optimica [4] is to offer the user a way to express optimization\n\nproblems using Modelica models. Optimica is a Modelica extension designed to permit\n\na high-level specification of dynamic optimization problems based on Modelica models.\n\nIt was first defined in [20].\n\nDynamic optimization problem presents three levels of information. In the first\n\nlevel the canonical description of the optimization problem. This contains the cost func-\n\ntion, free variables and parameters, the optimization interval, and the constraints. In\n\nthe second level it is specified the transcription method for discretization of the problem\n\nfrom the continuous time to a discrete time mesh. The third level is the algorithm level,\n\nwhere the tolerances and algorithm tuning parameters are specified.\n\nThe Optimica fits in the first level, giving an easy way to represent such kind of\n\ninformation. The remaining levels are usually dealt by the Optimica implementation,\n\nbecause this task is critical and very error prone. Although, the implementation gives\n\nyou options to define the way it is done.\n\nOptimica introduces three main features in Modelica standard:\n\n\u2022 Optimization class, a new class of objects can be instantiated. It represents the\n\noptimization problem. Necessarily it needs an objective function and optimization\n\nvariables. It is important to note that the prediction horizon can be an optimization\n\nvariable.\n\n\u2022 A constraint section inside of optimization elements. In this section we can de-\n\nclare equality and inequality variable constraints.\n\n\u2022 Access variables in time. With the Modelica standard we can not access variables\n\nin a specific time. With Optimica we are able to make constraints like: x(tf) = 0\n\n(variable x at the final time tf must be equal to 0) or y(5) ? 1 (variable y at time 5\n\nmust be less than 1)\n\n25\n\n\n\n3.3: JModelica.org\n\nJModelica.org [4, 5, 3] is an open-source Modelica-based platform for optimiza-\n\ntion and simulation of dynamic systems. It aims to be a viable and stable platform for\n\nindustrial applications, at the same time that it has flexibility for the academia develop\n\nnew algorithms and studies.\n\nThe JModelica environment consists of a collection of software modules, includ-\n\ning compilers for Modelica and Optimica, a code generator for C, a run-time library in\n\nC, a simultaneous optimization algorithm, and a library for integration with the scripting\n\nlanguage Python. Also internally it connects with three other very used tools: Sundials,\n\nCasADi and IPOPT.\n\nSundials [15] is a package of ODE and DAE solvers that was developed to be\n\na robust time integrator and nonlinear solver. The most used solver is CVODE an\n\nODE solver with the ability to solve some special types of DAE that can automatically\n\ncalculate sensibilities.\n\nCasADi [6] is s symbolic framework for automatic differentiation and numeric\n\noptimization. It applies both symbolic and numeric differentiation in low-level for quick\n\nand efficient calculations. It has an important use for ODE and DAE systems where\n\nthe solvers need the system Jacobian for simulation and sensibility calculation.\n\nIPOPT [36] is a package for large-scale nonlinear optimization. It is based on\n\nthe Interior-Point Method. Being more specific, it is a primal-dual interior-point algo-\n\nrithm with a filter line-search method. Although, we can simplify this by saying that is\n\nan algorithm that can robustly find local minima for non-convex problems and global\n\nminima for convex problems [36]. It also has an automatic problem scaling function,\n\nsome heuristics for speeding up convergence, and some techniques to increase the\n\nrobustness.\n\nTogether, these software form a complete tool for formulating and solving dy-\n\nnamic optimization problems based on Modelica models. The data flow of the JModel-\n\nica.org is illustrated in Figure 3.1. It is typical that the solution of dynamic optimization\n\nproblems require multiple iterations, where the cost function, the constraints, the tran-\n\nscription method, and even the model are refined in order to obtain satisfactory results.\n\nThe result then typically needs to be analyzed and the optimization formulation param-\n\neters adjusted. The use of high-level description languages then relieves the user of\n\nthe costly and error-prone task of encoding the model and optimization formulations\n\n26\n\n\n\nin less suitable languages. In effect, the focus of the design process is shifted from\n\nencoding of the problem into formulation of the problem, which translates into more\n\nefficient design processes.\n\nModelica\n\nCode\n\nJModelica.org\n\nOptimica\n\nCode\n\nPython\n\nCode\n\nCode\n\nCompiler\n\nPython\n\nInterface\n\nODE\n\nSolver\n\nAutomatic\n\nDiffer.\n\nTool\n\nNonlinear\n\nSolver\n\nFigure 3.1: Network Schematic\n\n27\n\n\n\nChapter 4: Nonlinear Model Predictive Control\n\nIn this chapter we present a method to discretize the continuous model proposed\n\nin Chapter 2, afterward it is shown several optimization problems that uses the network\n\nmodel.\n\n4.1: Problem Discretization\n\nThis section was based on [7], it starts with a recapitulation of techniques for\n\nsolving ODEs, after, the collocation method is presented followed by an example of\n\nuse, and at last it is shown how to formulate optimization problems using the collocation\n\nmethod.\n\n4.1.1: ODE Solvers\n\nThe representation made in Chapter 2 uses DAEs to describe the system, there-\n\nfore to obtain the system answer over time a Initial Value Problem (IVP) need to be\n\nsolved. This means that we have an initial condition and DAEs, by integrating the\n\nsystem a system time-dependent solution is obtained.\n\nLet Eq. 4.1a define the system in the time interval t ? [0,T ], the analytical\n\nsolution of this ODE is given by 4.1b.\n\nx? = f(x,t) (4.1a)\n\nx(t) = x(0) +\n\n? t\n\n0\n\nf(x,t) dt (4.1b)\n\nwhere x is a vector of states, f(\u00b7) is nonlinear time variant function. Due to the size and\n\nthe complexity of the systems such analytical integral is usually very dispendious to\n\nfind, becoming impractical to use. To overcome this problem numerical approximation\n\nare used.\n\nNumerical methods approximates the continuous time dynamic system by a dis-\n\ncrete time dynamic system. They divide the time interval [0,T ] into sub-intervals [ti?1, ti]\n\nwith i ? [1, . . . ,N], assuming a stepsize hi for each i interval. Being ti = ti?1 + hi, the\n\nstates approximation zi ? x(ti), where x(ti) is the exact solution Eq. 4.1b in the time ti.\n\n28\n\n\n\nIn the interval endpoints, the current and the subsequent states approximation must be\n\nequal to maintain the continuity. Figure 4.1 shows a comparison between the analytical\n\nsolution and a numerical approximation using the Euler method and how the time grid\n\nis created. The system is a simple linear system x? = ?x\n2\n, with x(0) = 1. The analytical\n\nsolution (blue line) is x(t) = e?\nt\n2 .\n\n0 1 2 3 4 5 6\n\n0\n\n0.2\n\n0.4\n\n0.6\n\n0.8\n\n1\n\nk\n\nV\na\n\nlu\ne\n\n \n\n \nx(t)\ns\n\nk\n\nFigure 4.1: Example using Euler Method, h = 1 and N=6\n\nNumerical methods can be categorized in two big groups: explicit or implicit\n\nmethods.\n\nThe explicit methods uses the information of the current states and it derivative\n\nto find the next state. It is easier to implement and faster to compute, however a\n\nbad tuning can lead to instabilities in the solver. A very common explicit method is the\n\nEuler method (Eq. 4.2), it uses only the prior state and it derivative to find the next step.\n\nFigure 4.1 shows an application of this method for a linear system, where hi = 1 ?i.\n\nzi = zi?1 + hif(zi?1, ti?1) (4.2)\n\nA more complex method, but widely used is the explicit fourth order Runge-\n\nKutta (ERK) method. The ERK uses not only one evaluation per time interval but it\n\ncombines the derivative of four points inside of the time interval to obtain the next state\n\napproximation, as Eq. 4.3 shows. This method have a higher accuracy compared\n\nto the Euler method. But still, as explicit method it may have some stability issues\n\n29\n\n\n\ndepending on the system convergence rate.\n\nzi = zi?1 +\n1\n\n6\nh(k1 + 2k2 + 2k3 + k4) (4.3a)\n\nk1 = f(ti?1,zi?1) (4.3b)\n\nk2 = f(ti?1 +\n1\n\n2\nh,zi?1 +\n\nh\n\n2\nk1) (4.3c)\n\nk3 = f(ti?1 +\n1\n\n2\nh,zi?1 +\n\nh\n\n2\nk2) (4.3d)\n\nk4 = f(ti?1 + h,zi?1 + hk3) (4.3e)\n\nwhere k1 is the derivative at the start of the interval. k2 is the derivative at the middle of\n\nthe interval using the state calculated using k1. k3 is the derivative at the middle of the\n\ninterval, again, but using k2. k4 is the derivative at the end of the interval, calculated\n\nusing k3. It is clearly notable that dependencies are progressive, k2 depends on k1, but\n\nnot the other way around.\n\nThe implicit methods use not only the current state but the next state and it\n\nderivative to solve the DAEs. It has a greater improvement in the stability, however it is\n\nnecessary to solve an equation to find the next state at each time interval. Among the\n\nimplicit methods the most commons are backward Euler method, implicit Runge-Kutta\n\n(IRK), and collocation method.\n\nThe backward Euler allows us to clearly see that the state calculation is not\n\nstraight forward and a equation need to be solved, usually using some iterative algo-\n\nrithm. Eq. 4.4 shows the Backward Euler method, to calculate the next state it uses the\n\ncurrent state and the derivative of the next state. This dependency of the next state on\n\nit derivative makes necessary the use of a iterative solver. Usually a Newton-Raphson\n\nmethod is used, but for more complex systems a nonlinear solvers is necessary.\n\nzi = zi?1 + hif(zi, ti) (4.4)\n\nIn the same way that explicit Runge-Kutta enhances the accuracy of the forward\n\nEuler, the implicit Runge-Kutta (IRK) makes the backward Euler method more precise.\n\nDifferent from the ERK, the IRK have a crossed relation in calculation of k values, for\n\ninstance the value of k1 is dependent of k4. This cross dependence makes necessary\n\nto solve equations.\n\nThe collocation method can be formulated as a IRK, it has some properties that\n\nmakes it interesting for dynamic optimization. This topic will be cover in the following\n\n30\n\n\n\nsubsection.\n\n4.1.2: Collocation Method\n\nThe Collocation method is a special case of IRK where the interval are approxi-\n\nmated by a n-th order polynomial.\n\nThe time is divided in N intervals, each i ? [1, . . . ,N] intervals have a timestep\n\nhi. For every timestep a polynomial of K + 1 order approximates the state. We denom-\n\ninate this polynomial by zK(t), it can be represented in several ways i.e. power series,\n\nNewton divided difference, or B-splines. However to develop the collocation method it\n\nis preferred the Lagrangian interpolation polynomials, the reason is that this class of\n\npolynomial have stability properties, null error for some kind of problems and the formu-\n\nlation is easier because polynomial coefficients have the same bounds as the states,\n\nwhich means that a state constraint can be applied to the approximation coefficients\n\ndirectly.\n\nThe approximation with K +1 interpolation points in the sub-interval i is defined:\n\nt = ti?1 + hi? (4.5a)\n\nzK(t) =\n\nK?\n\nj=0\n\n?j(?)zij (4.5b)\n\nwhere:\n\nt ? [ti?1, ti], (4.6a)\n\n? ? [0, 1] (4.6b)\n\n?j(?) =\nK?\n\nk=0, 6=j\n\n(? ? ?k)\n\n(?j ? ?k)\n(4.6c)\n\nwith ?0 = 0, ?j &lt;?j+1, j = 0, . . . ,K ? 1. In which the variables represent:\n\n\u2022 ? is the variable that select a specific time in the interval, being 0 the beginning of\n\nthe interval and 1 the end.\n\n\u2022 ?k and ?j are collocation points, these values are taken from tables.\n\n\u2022 ?j(\u00b7) is the Lagrangian interpolation base.\n\n\u2022 zij is the state value ate the collocation point j in the interval j, this is the free\n\nvariable that should be adjusted.\n\n31\n\n\n\nDifferentiating Eq. 4.5a:\n\ndt = hi d? (4.7)\n\nTaking the the derivative of the Eq. 4.5b we have\n\ndzK(t)\n\nd?\n=\n\nK?\n\nj=0\n\nd?j(?)\n\nd?\nzij (4.8)\n\nIn the collocation points tik = ti?1 + hi?k, it is desired that the model and the\n\npolynomial approximation have the same derivative, so we state:\n\ndzK(tik)\n\ndt\n= f(zK(tik), tik), k = 1, . . . ,K (4.9)\n\nUsing the derivative in Eq. 4.7, the derivative in Eq. 4.9, and the state derivative\n\ndefine in Eq. 4.8 we have:\n\nK?\n\nj=0\n\nzij\nd?j(?k)\n\nd?\n= hif(zik, tik), k = 1, . . . ,K (4.10)\n\nThis is the definition for a single sub-interval i. In the case that we have N > 1,\n\nwe need to ensure the continuity of the system stating:\n\nz1,0 = z0 (4.11a)\n\nzi+1,0 =\n\nK?\n\nj=0\n\n?j(1)zij, i = 1, . . . ,N ? 1 (4.11b)\n\nzf =\nK?\n\nj=0\n\n?j(1)zNj (4.11c)\n\nwhere z1,0 is the first state value at the begin of the first sub-interval, zi+1,0 is the value\n\nof the state at the begin of the interval i, and zf is the value of the state at the end of\n\nthe simulation period.\n\nSummarizing, this method creates a time mesh, each time interval is approx-\n\nimated by a polynomial of K + 1 order represented in the Langrangrian base. The\n\npolynomials are differentiated and forced to be equal to the system derivative. The\n\nvalue of the state at the beginning of the sub-interval is equal to the value at the end of\n\nthe prior sub-interval. To clarify the understanding, in the next subsection an example\n\nwill be explained.\n\n32\n\n\n\n4.1.3: Collocation Method Example\n\nFor this example, we define the system:\n\ndz\n\ndt\n= z2 ? 2z + 1, z(0) = ?3 (4.12)\n\nwith t ? [0, 1]. This system has an analytical solution given by z(t) = (4t ? 3)/(4t + 1).\n\nHowever we are going to calculate the numerical approximation using the collocation\n\nmethod in the Radau collocation points with K = 3 the collocation points are ?0 = 0,\n\n?1 = 0.155051, ?2 = 0.644949, and ?3 = 1.\n\nUsing the Eq. 4.10 with N = 1 elements, and h = 1/N we have\n\n3?\n\nj=0\n\nzij\nd?j(?k)\n\nd?\n= h(z2ij ? 2zik), k = 1, . . . , 3, i = 1 (4.13)\n\nDeveloping the Lagrangian base described in the Eq. 4.6c and taking it derivative we\n\nfind:\n\nd?0(?k)\n\nd?\n= ?30?2k + 36?k ? 9 (4.14a)\n\nd?1(?k)\n\nd?\n= 46.7423?2k ? 51.2392?k ? 10.0488 (4.14b)\n\nd?2(?k)\n\nd?\n= ?23.7423?2k + 20.5925?k ? 1.38214 (4.14c)\n\nd?3(?k)\n\nd?\n= 10?2k ?\n\n16\n\n3\n?k +\n\n1\n\n3\n(4.14d)\n\n(4.14e)\n\nSubstituting Eq. 4.14 in Eq. 4.13 we find:\n\nz0(?30?\n2\nk + 36?k ? 9) + z1(46.7423?\n\n2\nk ? 51.2392?k + 10.0488)\n\nz2(?23.7423?\n2\nk + 20.5925?k ? 1.38214) + z3\n\n(\n10?2k ?\n\n16\n\n3\n?k +\n\n1\n\n3\n\n)\n\n= (z2k ? 2zk + 1), k = 1, . . . , 3\n\n(4.15)\n\nSolving this equations system we have z1 = ?1.65701, z2 = 0.032053, z3 =\n\n0.207272 with z0 = ?3. Figure 4.2 compares the solution using the collocation method\n\nand the analytical solution. To increase the fidelity of the approximation we could in-\n\ncrease the number of time discretizations N or the number of collocation point K.\n\n33\n\n\n\n0 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1\n?3\n\n?2.5\n\n?2\n\n?1.5\n\n?1\n\n?0.5\n\n0\n\n0.5\n\n?\n\nz\n(?\n\n)\n\nAnalytical Solution\n\nCollocation (N=1, K=3)\n\nCollocation Points\n\nFigure 4.2: Example analytical and approximation solution\n\n4.1.4: NLP Optimization Formulation\n\nAssuming a continuous time dynamic optimization problem in the format:\n\nmin ?(t,x(t),y(t),u(t)) (4.16a)\n\ns.t.: x? = f(t,x(t),y(t),u(t)) (4.16b)\n\ng(t,x(t),z(t),u(t)) = 0 (4.16c)\n\nxL ? x(t) ? xU (4.16d)\n\nyL ? y(t) ? yU (4.16e)\n\nuL ? u(t) ? uU (4.16f)\n\nt0 ? t ? tf (4.16g)\n\nwhere:\n\n\u2022 ? is objective function, usually a time integral.\n\n\u2022 x(t), z(t), and u(t) are states, algebraic variables, and controls, respectively.\n\n\u2022 f(\u00b7) and g(\u00b7) are states function and algebraic variables function, respectively.\n\n\u2022 The states boundaries are xL and xU .\n\n\u2022 The algebraic variables boundaries are xL and xU .\n\n34\n\n\n\n\u2022 The controls boundaries are xL and xU .\n\nThe state variables can be discretized using the collocation method show in\n\nSubsection 4.1.2, but the control profiles and the algebraic variables can also be repre-\n\nsented using the Lagrangian interpolation polynomials. Being u(t) the control profiles\n\nand the algebraic variables y(t). Using the Lagrangian base inside of the i sub-interval\n\nthey are defined as:\n\nu(t) =\n\nK?\n\nj=1\n\n??j(?)uij (4.17a)\n\ny(t) =\nK?\n\nj=1\n\n??j(?)yij (4.17b)\n\n(4.17c)\n\nwhere:\n\n??j(?) =\nK?\n\nk=1, 6=j\n\n(? ? ?k)\n\n(?j ? ?k)\n(4.18)\n\nIn the case that the objective function is a time integral, in the format:\n\n?(x(t),y(t),u(t)) =\n\n? tf\n\nt0\n\nh(x(t),y(t),u(t)) dt (4.19)\n\nwe can transform this in a state ?(t):\n\n?? = h(x(t),y(t),u(t)) (4.20)\n\nAnd replace the objective function by min?(tf), and use the collocation method to\n\napproximate ?(t) like the other state variables.\n\n35\n\n\n\nUsing this approximation we can transform the optimization problem in Eq. 4.16\n\nin to the finite element problem:\n\nmin ?(tf) (4.21a)\n\ns.t.:\n\nK?\n\nj=0\n\nzij\nd?j(?k)\n\nd?\n? hif(t,zik,yik,uik, tik) = 0, k ? {1, . . . ,K}, i ? {1, . . . ,N}\n\n(4.21b)\n\ng(t,zik,yik,uik, tik) = 0, k ? {1, . . . ,K}, i ? {1, . . . ,N} (4.21c)\n\nzi+1,0 =\n\nK?\n\nj=0\n\n?j(1)zij, i ? {1, . . . ,N ? 1} (4.21d)\n\nzf =\n\nK?\n\nj=0\n\n?j(1)zNj (4.21e)\n\nxL ? zik ? x\nU (4.21f)\n\nyL ? yik ? y\nU (4.21g)\n\nuL ? uik ? u\nU (4.21h)\n\nz1,0 = z0 (4.21i)\n\nNote that the variable bounds are same of the continuous time formulation, they are\n\napplied straight to the collocation points, this ease of application of constraints are\n\none of the reasons that the Lagrangian interpolation polynomial is chosen. However,\n\nsuch constraints can only me ensured at the collocation points and not in the interval\n\nbetween them.\n\nAssuming that z approximates the oil network states, y is the algebraic variable,\n\nand f(\u00b7) and g(\u00b7) their functions as defined in Subsection 2.7 we can optimize the sys-\n\ntem over a objective function. The objective function will be define in the next section.\n\nAn important remark about optimizing using Modelica and Optimica is that the\n\noptimization problem that we need to state should follow the format in Eq. 4.16 (con-\n\ntinuous time) and the computational environment, in this case JModelica.org, will auto-\n\nmatically discretize the problem to the problem in Eq.4.21.\n\n36\n\n\n\n4.2: Objective Function\n\n4.2.1: Tracking Problem\n\nThe objective of this formulation is to bring the system from the initial conditions\n\nto given reference.\n\nDefined a reference for some of the states, algebraic variables, or inputs, we can\n\nformulate a minimization problem to obtain the optimal transient using a quadratic ob-\n\njective function. This objective function integrates the weighted quadratic error between\n\nthe states, algebraic variables, and controls, and their references.\n\nmin? =\n\n? tf\n\nt0\n\n(z ? zref)\nTQz(z ? zref) + (y ? yref)\n\nTQy(y ? yref)\n\n+ (u ? uref)\nTRu(u ? uref) dt\n\n(4.22)\n\nwhere Qz is the states weighting factor, Qy is the algebraic variables weighting factor,\n\nand Ru is the inputs weighting factor.\n\nThis formulation is very common and very flexible allowing the control of different\n\nvariables of the system. Such objective function could be used to make field production\n\nfollow a production planing, make the wells to follow production references, or make the\n\nsystem try at most to follow input reference.\n\n4.2.2: Production Maximization Formulation\n\nIn this formulation, the developed dynamic model is used to maximize the oil\n\nproduction. This formulation aims to replace the traditional static optimization. Even if\n\nit calculation is more costly, it can be more effective for treating events that occurs in a\n\nminute or hourly timescale, i.e. temporary constraints.\n\nThe objective function will maximize the integral of the profit function, which is\n\ncomposed by the gains with oil and gas exportation, and the cost of water treatment,\n\nflaring, and gas-lift injection.\n\nmax? =\n\n? tf\n\nt0\n\nkgq\ng\nexp + koq\n\no\nexp + kwq\n\nw\nexp + kflwfl + kglwgm dt (4.23)\n\nwhere kg is the gas profit, ko is the oil production profit, kw is the water treatment cost,\n\nkfl is the flaring cost, kgl the gas-lift injection cost.\n\n37\n\n\n\n4.3: Test Case: Compressor Scheduled Maintenance\n\nTo show the potential of the developed model, a test case that goes beyond the\n\nsystem normal operational condition is generated.\n\nThe production maximization can be achieved by static optimization, however it\n\nmay be inefficient for the case that the system is no constant for all the optimization\n\nperiod.\n\nFor test purpose, it is suggested that a scheduled compressor maintenance will\n\nchange the operational condition of the compressor map. It makes the compressor\n\nunable to handle the flow at the static production maximum.\n\nTo emulate the reduction of the compressor flow capacity the equations that\n\napproximate the left and right border of the compressor map that in Section 2.6 were\n\ndefined as\n\nql,vol =\n?bl +\n\n?\nb2\nl\n? 4al(cl ? rp)\n\n2al\n(4.24a)\n\nqr,vol =\n?br +\n\n?\nb2r ? 4ar(cr ? rp)\n\n2ar\n(4.24b)\n\nare redefined as:\n\nql,vol = fc(t)\n?bl +\n\n?\nb2\nl\n? 4al(cl ? rp)\n\n2al\n(4.25a)\n\nqr,vol = fc(t)\n?br +\n\n?\nb2r ? 4ar(cr ? rp)\n\n2ar\n(4.25b)\n\nwith:\n\nfc(t) = 1 ? kcm?(t ? tt) (4.26)\n\nwhere kcm is a scaling factor that says how much the compressor capability were re-\n\nduced and ?(t ? tt) is a Heaviside function (also known as unit step function), and tt is\n\nthe event triggering time.\n\nThe ?(t ? tt) is a discontinuous function and it may lead to problems when opti-\n\nmizing the system because the automatic differentiation tool CasADi can not handle it,\n\nthus it is approximated by sigmoid function:\n\n?(t ? tt) ?\n1\n\n1 + e?2(t?tt)\n(4.27)\n\nThe Figure 4.3 shows the approximation in a time range of 20 seconds, with the\n\n38\n\n\n\ntrigger at 10 seconds.\n\n0 5 10 15 20\n\n0\n\n0.25\n\n0.5\n\n0.75\n\n1\n\nTime (s)\n\nF\nu\n\nn\nct\n\nio\nn\n\n V\na\n\nlu\ne\n\n \n\n \n\nStep function\n\nApproximation function\n\nFigure 4.3: Step function approximation\n\nThe approximation takes about five seconds to change from zero to one. If we\n\nconsider that the system dynamics are about thousand seconds, then we can say that\n\nthis approximation is good enough.\n\n4.3.1: Solving Approaches\n\nUsing the formulations defined in Section 4.2 three different approaches are\n\nsuggested, two of them requires a statical optimal solution for production maximization\n\nproblem. As the static optimization is out of the scope of this work, an heuristic is\n\nproposed.\n\nThe heuristic used to find the statical optimal solution uses the the production\n\nmaximization formulation defined in Subsection 4.2.2 to obtain a control profile. After\n\nat transitory moment, the control remains steady for a long period, this steady value is\n\nassumed to be the static optimal control. For example, in the Figure 5.4 the optimal\n\ncontrol can be obtained at 15000 seconds.\n\nThe three approaches are:\n\n39\n\n\n\n1. Naive Approach: using the tracking formulation (Eq. 4.22) makes the system\n\nto follow the static optimal control at any cost, the intention of this approach is\n\nto simulate the conditions in which no dynamic optimization is used. The injec-\n\ntion rates reference and separator pressures reference are defined by the static\n\nproduction maximization solution.\n\n2. Optimal Transient: Obtained solving the production maximization problem in Eq.\n\n4.23. This formulation changes the values of gas-lift injection, separator pressure,\n\nanti-surge flow rate, and flare flow rate to obtain the best transient. A high cost\n\non flaring is used to make the algorithm to avoid flaring conditions.\n\n3. Hybrid Approach: use the tracking formulation, as the naive approach, although\n\nwith a much higher weighting at the flare penalization to avoid situations with\n\nflaring.\n\nThe naive approach represents the simple application of the static optimiza-\n\ntion result. The parametrization of Eq. 4.22 have Qz = Qy = 0 and the quadratic\n\nterms related surge control (wsl) are nulls (Ru,wsl = 0). As the flaring amount (wfl) is\n\na system input, if we do not define how it should be assigned the optimal solution\n\nmay have a unnecessary flaring, so a weighting must be given for the flaring. How-\n\never the objective of this formulation is tracking not flaring reduction, the terms related\n\nto tracking should be much larger than those related to the flaring ((wfl)\nTRu,wflwfl ?\n\n(wgl ? wgl,ref)\nTRu,wgl(wgl ? wgl,ref) + (p\n\ns ? psref)\nTRu,ps(p\n\ns ? psref)).\n\nMeanwhile, the Hybrid Approach tries to reach the static optimal at same time\n\nthat it void to use the flare. Compared to the first approach in which the objective is to\n\nfollow the optimal static control settings using as less flaring as possible, this approach\n\nbalance tracking with flaring reduction. The reason is that the using of flaring can be\n\nreally costly and might be more important to avoid it than to maximize the production.\n\nTo make this approach an higher value for kfl is adopted, ensuring that the term related\n\nto the flare have about the same magnitude than tracking term ((wfl)TRu,wflwfl ? (wgl ?\n\nwgl,ref)\nTRu,wgl(wgl ? wgl,ref) + (p\n\ns ? psref)\nTRu,ps(p\n\ns ? psref))\n\n40\n\n\n\nChapter 5: Results\n\nIn this chapter, the results of the optimizations using the model and the formu-\n\nlations presented in this work are shown. First, an oil production network instance is\n\nformulated. Afterwards, it is presented the computation setup used to run the opti-\n\nmization problems. The results of the tracking problem, maximization problem, and the\n\ncompressor problem approaches are analysed qualitatively. At last, the computational\n\nresults are reviewed.\n\n5.1: Instance definition\n\nThe synthetic oil network was create. It has 8 wells, grouped in two clusters,\n\neach group is connected to one of the two subsea manifold, those are connected to\n\ntwo pipeline-risers that brings to production to the surface. At the processing unit, two\n\nseparators separates the income flow, at the gas outlet of each separator a flare valve\n\nis preceded by a compressor. Compressors outflow are divided in two, part goes to\n\nthe exportation line and part goes to the gas-lift manifold and is reinjected in the wells.\n\nThe Figure 5.1 illustrates the network.\n\nThe parametrization of the wells are displayed in Table 5.1. Besides those pa-\n\nrameters, all wells have the same value for reservoir pressure (25 \u00d7 106 Pa) and the\n\nvalve coefficients: gas-lift choke (1.6\u00d7104), injection valve (1.6\u00d7104), production choke\n\n(1.4 \u00d7 103).\n\nTable 5.1: Wells parameters\n\nWell Annular Vol. Tubing. vol Tubing inj. point Watercut GOR Qmax\nm3 m3 m kg/kg\n\nkg/kg\nm3/s\n\n1 30 18 400 0.35 0.08 0.025\n2 30 18 400 0.80 0.12 0.050\n3 25 15 800 0.30 0.10 0.035\n4 30 18 600 0.50 0.09 0.010\n5 25 15 500 0.25 0.09 0.020\n6 30 18 400 0.35 0.08 0.025\n7 30 18 400 0.80 0.12 0.050\n8 25 15 800 0.30 0.10 0.035\n\nThe pipelines have 13 km of horizontal length and 600 m of vertical length, both\n\n41\n\n\n\nparts with 20 cm of diameter, the roughness is 2.8 \u00d7 10?5 m The temperature of fluid\n\ninside of the pipeline is assumed to be at 330 K.\n\nThe separator has 2.62 m of the horizontal length and 1.46 m of diameter. The\n\nwater droplets have an average diameter of 500 \u00b5m. The water-mixture level is fixed at\n\n0.73 m and the oil level is fixed at 1.02 m.\n\nThe gas injection must be at least 1 kg/s and not higher than 3 kg/s in each\n\nwell. At the separators, the minimum pressure is 50 \u00d7 105 Pa and maximum pressure\n\nis 60 \u00d7 105 Pa.\n\nThe compressor map before the scheduled maintenance have the boundaries\n\nas in Figure 5.2, after a reduction of 35% it turns in the map shown in Figure 5.3.\n\n42\n\n\n\nGas-lift\n\nManifold\nWell 1 Well 2\n\nManifold\n\n1\n\nSeparator\n\n1\n\nFlare 1 Flare 2\n\nManifold\n\n2\n\nSeparator\n\n2\n\nPipeline-\n\nRiser 1\n\nPipeline-\n\nRiser 2\n\nCompressor\n\n1\n\nCompressor\n\n2\n\nGas\n\nExport\n\nOil\n\nExport\n\nWater\n\nExport\n\nF\nig\nu\nre\n\n5\n.1\n:\nN\netw\n\no\nrk\n\nin\nsta\n\nn\nce\n\nsch\nem\n\na\ntic\n\n4\n3\n\n\n\n0 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8\n1.5\n\n2\n\n2.5\n\n3\n\n3.5\n\n4\n\n4.5\n\nInlet flow rate (m3/s)\n\nP\nre\n\nss\nu\n\nre\n r\n\na\ntio\n\n \n\n \n\nf\nl\n (q)\n\nf\nr\n (q)\n\nf\nu\n (q)\n\nf\nd\n (q)\n\nFigure 5.2: Compressor map before maintenance\n\n0 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8\n1.5\n\n2\n\n2.5\n\n3\n\n3.5\n\n4\n\n4.5\n\nInlet flow rate (m3/s)\n\nP\nre\n\nss\nu\n\nre\n r\n\na\ntio\n\n \n\n \n\nf\nl\n (q)\n\nf\nr\n (q)\n\nf\nu\n (q)\n\nf\nd\n (q)\n\nFigure 5.3: Compressor map after maintenance\n\n44\n\n\n\n5.2: Computational Setup\n\nTo solve this problems it was used an Asus notebook model N76V, equipped\n\nwith a processor Intel i7-3610QM @ 2.30 GHz, 8GB of RAM, and a SAMSUNG 830\n\nsolid state disk.\n\nThis machine is running Windows 7 64 bits. The JModelica.org is version 1.9,\n\nwhich comes with Python 2.8, Sundials package version 2.4, and CasaADi 1.6. The\n\nIPOPT general tolerance was set to 10?4, the maximum number of iterations was 100,\n\nand the MUMPS parameter \u201cmumps mem percent\u201d was 50...\n\n5.3: Maximization Problem\n\nThe parameters of Table 5.2 were used to test the objective function defined\n\nin Section 4.2.2. The system at the initial condition have already reached the steady\n\nstate after the application of the control lower bounds: the gas injections of 1kg/s and\n\nseparators pressure of 50 \u00d7 105. The system initial guess assumes a gas injections of\n\n1.5kg/s in all wells and pressure of 50 \u00d7 105 in both separators.\n\nTable 5.2: Flow values\n\nCoefficient Value\nkg 1\nko 10\nkw -1\nkfl -1000\nkgl -1\n\nFigure 5.4 shows the control setup for the production maximization. The algo-\n\nrithm gives an initial blow at the beginning to rise the mass states, since the system\n\nwas operating in the lower condition. After about 4000 seconds the system settle and\n\nremains constant until the last 5000 seconds. At the end of the simulation, the algo-\n\nrithm gives a final blow in the compressor and turns all injections to the minimum, this\n\nhappens because it increases the derivative of the objective function, as it can be seen\n\nin Figure 5.5. To avoid this kind of behavior, some techniques can be used e.g. input\n\nblocking. The flare values obtained by the solver are so small that can be considered\n\nzero.\n\n45\n\n\n\n0 5000 10000 15000 20000 25000 30000\nTime (s)\n\n1.0\n\n1.5\n\n2.0\n\n2.5\n\n3.0\n\n3.5 Gas Inj W1\nGas Inj W2\nGas Inj W3\nGas Inj W4\n\n0 5000 10000 15000 20000 25000 30000\nTime (s)\n\n1.0\n\n1.5\n\n2.0\n\n2.5\n\n3.0\n\n3.5\nGas Inj W5\nGas Inj W6\nGas Inj W7\nGas Inj W8\n\n0 5000 10000 15000 20000 25000 30000\nTime (s)\n\n5084000\n\n5086000\n\n5088000\n\n5090000\n\n5092000\n\n5094000\n\n5096000\n\nSep. Pres. 1\nSep. Pres. 2\n\nFigure 5.4: Maximization optimal controls\n\n0 5000 10000 15000 20000 25000\nTime (s)\n\n0.0\n\n0.2\n\n0.4\n\n0.6\n\n0.8\n\n1.0\nFlare 1\nFlare 2\n\n0 5000 10000 15000 20000 25000 30000\nTime (s)\n\n245\n\n250\n\n255\n\n260\n\n265\n\n270\n\n275\n\n280\n\n285\n\n|d cost/dt|\n\nFigure 5.5: Maximization flare and derivative of cost function\n\n46\n\n\n\n5.4: Tracking Problem\n\nThe tracking problem was solved using the formulation in Eq. 4.22 with the\n\nparameters:\n\nQz,wout =\n\n?\n???\n\n1 0 0\n\n0 1 0\n\n0 0 0.001\n\n?\n??? (5.1a)\n\nRu,wgl = 0.1 (5.1b)\n\nRu,wfl = 1000 (5.1c)\n\nThe system reference to be tracked are the the gas production of 5 kg/s and the oil\n\nproduction of 25 kg/s. All the other parameters were set to zero.\n\nThe system initial conditions was the inputs lower bounds: gas injections at\n\n1 kg/s and separator pressure at 50 \u00d7 105 Pa. The algorithm first guess is obtained\n\nusing injections at 1.5 kg/s and separators pressure at 50 \u00d7 105 Pa.\n\nFigure 5.6 shows that after 50000 seconds the controls settle and remain in con-\n\nstant until the end of the prediction window, were the the same behavior that happens\n\nin the maximization happens in this formulation.\n\nFigure 5.7 shows that the flaring is null. The gas, oil, and water exportation are\n\nkept constant for the all the prediction window after a transitory in the start.\n\n47\n\n\n\n0 5000 10000 15000 20000 25000 30000\nTime (s)\n\n1.0\n\n1.5\n\n2.0\n\n2.5\n\n3.0\n\n3.5 Gas Inj W1\nGas Inj W2\nGas Inj W3\nGas Inj W4\n\n0 5000 10000 15000 20000 25000 30000\nTime (s)\n\n0.5\n\n1.0\n\n1.5\n\n2.0\n\n2.5\n\n3.0\n\nGas Inj W5\nGas Inj W6\nGas Inj W7\nGas Inj W8\n\n0 5000 10000 15000 20000 25000 30000\nTime (s)\n\n5200000\n\n5400000\n\n5600000\n\n5800000\n\n6000000\nSep. Pres. 1\nSep. Pres. 2\n\nFigure 5.6: Tracking optimal control profiles\n\n0 5000 10000 15000 20000 25000 30000\nTime (s)\n\n0.0\n\n0.2\n\n0.4\n\n0.6\n\n0.8\n\nFlare 1\nFlare 2\n\n0 5000 10000 15000 20000 25000 30000\nTime (s)\n\n0\n\n5\n\n10\n\n15\n\n20\n\n25\n\n30\n\n35\n\nGas Exp\nOil Exp\nWater Exp\n\n0 5000 10000 15000 20000 25000 30000\nTime (s)\n\n0\n\n5\n\n10\n\n15\n\n20\n\n25\n\n|d cost/dt|\n\nFigure 5.7: Tracking flare, flow exportation, and derivative of cost function\n\n48\n\n\n\n5.5: Compressor Maintenance Results\n\nIn this section we show the results of the methods discussed in Section 4.3. In\n\nall the cases the system is operating at the static maximum point, which was obtained\n\nusing the heuristic explained in Subsection 4.3.1. First, the naive approach results are\n\nshown and discussed, followed by the transient optimization, and at last, the hybrid\n\napproach is reviewed.\n\nThe initial guess for the algorithm are 1.5 kg/s of gas injection for all wells and\n\na pressure of 50 \u00d7 105Pa in both separators. The plots in this section were chopped\n\nin the last 5000 seconds since the \u201cfinal blow\u201d effect that happens at the end of pre-\n\ndiction window, as seen in the last sections, are not interesting for the analysis of the\n\napproaches.\n\n5.5.1: Naive Approach\n\nAs explained in Section 4.3, this approach requires a steady state optimal solu-\n\ntion and an heuristic is used to obtain it. The control assumed to be optimal at steady\n\nstate are those at 15000 seconds in the Figure 5.4. For the tracking problem the pa-\n\nrameters are Ru,wgl = 10, Ru,ps = 10\n?11, and Ru,wFl = 0.1. The reason for such small\n\nvalue for the separator pressure tracking is that the pressure is around 5.5 MPa, while\n\nthe mass flow is in the range from 1 to 3 kg/s.\n\nIn Figure 5.8, we can see that the inputs are almost all constant during the first\n\nperiod, showing that the system manage to keep on the reference. A small change in\n\nthe pressure happens as the system foresee the changes.\n\nAfter the compressor maintenance, the system is not able to keep the injections\n\nreference anymore because there is no gas to feed the wells freely. The solver tries\n\nto distribute the available gas, so the injections get as closer as possible to their refer-\n\nences. The separator pressure could not remain at the reference since the compressor\n\nmap changes makes that the static optimal operation point become unfeasible. Figure\n\n5.9, shows that as a reflex of the restraint of the compressor flow capability, the flare\n\nneeded to be used.\n\n49\n\n\n\n0 5000 10000 15000 20000 25000\nTime (s)\n\n0.0\n\n0.5\n\n1.0\n\n1.5\n\n2.0\n\n2.5\n\n3.0\n\nGas Inj W1\nGas Inj W2\nGas Inj W3\nGas Inj W4\n\n0 5000 10000 15000 20000 25000\nTime (s)\n\n0.0\n\n0.5\n\n1.0\n\n1.5\n\n2.0\n\n2.5\n\n3.0\n\nGas Inj W5\nGas Inj W6\nGas Inj W7\nGas Inj W8\n\n0 5000 10000 15000 20000 25000\nTime (s)\n\n5050000\n\n5100000\n\n5150000\n\n5200000\n\n5250000\n\n5300000\n\n5350000\n\n5400000\n\n5450000\n\nSep. Pres. 1\nSep. Pres. 2\n\nFigure 5.8: Naive approach control settings\n\n0 5000 10000 15000 20000 25000\nTime (s)\n\n0.0\n\n0.2\n\n0.4\n\n0.6\n\n0.8\n\nFlare 1\nFlare 2\n\n0 5000 10000 15000 20000 25000\nTime (s)\n\n0.0\n\n0.5\n\n1.0\n\n1.5\n\n2.0\n\n2.5\n\n3.0\n\n3.5\n\n4.0\n\n|d cost/dt|\n\nFigure 5.9: Naive approach flare and cost derivative\n\n50\n\n\n\n5.5.2: Transient Optimization\n\nFor the transient optimization approach, the coefficients needed in the formula-\n\ntion Eq. 4.23 are given in Table 5.2.\n\nFigure 5.10 shows the control profiles for the maximization problem. We can see\n\nthat the algorithm foresee the reduction in the compression capability and reduces the\n\nflow right before the compressor constraint. As the in the naive approach, the changes\n\nforces to increase the pressure in both separators to keep the feasibility. But differently,\n\nthis formulation can completely suppress the flaring during the transition, as shown in\n\nFigure 5.11.\n\n0 5000 10000 15000 20000 25000\nTime (s)\n\n0.0\n\n0.5\n\n1.0\n\n1.5\n\n2.0\n\n2.5\n\n3.0\n\nGas Inj W1\nGas Inj W2\nGas Inj W3\nGas Inj W4\n\n0 5000 10000 15000 20000 25000\nTime (s)\n\n0.0\n\n0.5\n\n1.0\n\n1.5\n\n2.0\n\n2.5\n\n3.0\n\nGas Inj W5\nGas Inj W6\nGas Inj W7\nGas Inj W8\n\n0 5000 10000 15000 20000 25000\nTime (s)\n\n5050000\n\n5100000\n\n5150000\n\n5200000\n\n5250000\n\n5300000\n\n5350000\n\n5400000\n\n5450000\n\nSep. Pres. 1\nSep. Pres. 2\n\nFigure 5.10: Optimal transient control settings\n\n5.5.3: Hybrid Approach\n\nFor the hybrid approach, the coefficients of the objective function in Eq. 4.22\n\nwere set as Ru,wgl = 10, Ru,ps = 10\n?11, and kfl = 10000.\n\nThe consequence of this changes, in relation to the naive approach, is a control\n\naction much similar to the production maximization approach. As it can be seen in\n\nFigure 5.12, the algorithm reduces injection foreseeing the compressor changes, as in\n\n51\n\n\n\n0 5000 10000 15000 20000 25000\nTime (s)\n\n0.0\n\n0.2\n\n0.4\n\n0.6\n\n0.8\n\nFlare 1\nFlare 2\n\n0 5000 10000 15000 20000 25000\nTime (s)\n\n250\n\n251\n\n252\n\n253\n\n254\n\n255\n\n256\n\n257\n\n258\n\n259\n\n|d cost/dt|\n\nFigure 5.11: Optimal transient flare and cost derivative\n\nthe production maximization. However, the separator pressures behaves like the naive\n\napproach having some a movement before the compressor capacity reduction.\n\nAs shown in Figure 5.13, this formulation can also completely operate during the\n\ntransition without using the flare, which can not be achieved by the simple application\n\nof the static optimal control.\n\n52\n\n\n\n0 5000 10000 15000 20000 25000\nTime (s)\n\n0.0\n\n0.5\n\n1.0\n\n1.5\n\n2.0\n\n2.5\n\n3.0\n\nGas Inj W1\nGas Inj W2\nGas Inj W3\nGas Inj W4\n\n0 5000 10000 15000 20000 25000\nTime (s)\n\n0.0\n\n0.5\n\n1.0\n\n1.5\n\n2.0\n\n2.5\n\n3.0\n\nGas Inj W5\nGas Inj W6\nGas Inj W7\nGas Inj W8\n\n0 5000 10000 15000 20000 25000\nTime (s)\n\n5050000\n\n5100000\n\n5150000\n\n5200000\n\n5250000\n\n5300000\n\n5350000\n\n5400000\n\n5450000\n\nSep. Pres. 1\nSep. Pres. 2\n\nFigure 5.12: Hybrid approach control settings\n\n0 5000 10000 15000 20000 25000\nTime (s)\n\n0.0\n\n0.2\n\n0.4\n\n0.6\n\n0.8\n\nFlare 1\nFlare 2\n\n0 5000 10000 15000 20000 25000\nTime (s)\n\n0\n\n1\n\n2\n\n3\n\n4\n\n5\n\n6\n\n7\n\n|d cost/dt|\n\nFigure 5.13: Hybrid approach flare and cost derivative\n\n53\n\n\n\n5.6: Computation Analysis\n\nThe computational analysis of the methods describe in this section were made\n\nbased in 5 items: solving time, number of iterations, number of variables, number of\n\nequality constraints, and number of inequality constraints.\n\nThe first part of the Table 5.3 presents the test of the formulations. We can see\n\nthat both perform very similarly, even taking an extra iteration the tracking problem have\n\na faster solving time, when compared to the production maximization. The tracking\n\nformulation have a slightly higher number of variables and equality constraints, while\n\nboth have the same number of inequality constraints.\n\nTable 5.3: Formulations and Approaches computational indicators\n\nMethod Solving Time Iter. Variables Eq. Constr. Ineq. Constr.\nTracking Problem 21.64 22 63216 60976 1288\nProduction Max. 22.72 21 62493 60253 1288\nNaive Approach 24.05 24 63216 60976 1288\nTransient Opt. 24.15 27 62332 60092 1288\nHybrid Approach 21.79 23 63216 60976 1288\n\nThe second part of the Table 5.3 have the three approaches for the compressor\n\nproblem. Their solving time do not have a big difference, however the hybrid approach\n\nhave a faster computing time. While the transient optimization takes more iterations to\n\nsolve the problem, each iteration is faster if compared to the naive approach, since they\n\nhave about the same solving time. The transient optimization have a greater number\n\nof variables, but this difference may not be the reason for the an increased number of\n\niterations. The number of equality constraint for all there cases are also very similar.\n\nThe author points that the comparison of the computational performance can be\n\na little bit subjective, since the methods performance have a big dependence on the\n\nalgorithm\u2019s first guess and the in the problem formulation, and some times they need\n\nto be tuned to get the results in the reasonable time.\n\n54\n\n\n\nChapter 6: Conclusion\n\nIn this work, we followed the construction of an dynamic model of network con-\n\ntaining models were developed and taken references. This network were composed\n\nby the most common elements: wells, manifolds, pipelines, separators, and compres-\n\nsor. However, due to the simplicity and flexibility of the tool that was used, this network\n\ncould be expanded or have your elements replaced to other studies.\n\nAn interesting tool was presented in this work, the JModelica.org which imple-\n\nments compiler for Modelica and Optimica, and gather tools for simulation and opti-\n\nmization. Modelica and Optimica allows to model and create dynamic optimization\n\nproblems with easiness.\n\nThe optimization of this network was made using sophisticated method for dy-\n\nnamic optimization, the collocation method. This is one the preferred methods when a\n\nsimulator is not desired. The method was shown, after a quick review of ODE solving\n\ntechniques, followed by and explanatory example and demonstration of how it can be\n\nused to formulate nonlinear optimization problems.\n\nAn problem was created in order to demonstrate the application of the developed\n\nmodel, the optimization method, and the computational tools. A situation in which the a\n\ncompressor scheduled maintenance reduces compressor capability. For this problem,\n\nthree formulations are proposed.\n\nAn synthetic oil production network is created to test and compare the methods.\n\nThe methods have their performance evaluated quantitatively and qualitatively.\n\nAs result, we can see that the simple application of the static optimal solution,\n\nnaive approach, may lead to undesirable conditions. The transient optimization and the\n\nhybrid approach were able to operate without creating undesirable flaring conditions.\n\nBoth were able to leave an maximum operation point and move to another condition\n\nwithout using the flare to relive the gas overflow. Due to system dynamic this problem\n\nis not trivial to solve.\n\nThinking in an application of this work for production maximization, we can have\n\neither a dynamic production maximization approach or an layered approach, in which\n\na static production maximization and tracking problem that handles the real time prob-\n\nlems. Such layered would have the advantage of allowing more complex problems in\n\n55\n\n\n\nthe static optimization layer, possibly including an the wells routing problem.\n\nAs continuation of this work, some points can be highlighted:\n\n\u2022 in the case in which an static optimization problem define a optimal well-pipeline\n\nrouting, using the model developed in this work formulate an optimization problem\n\nthat finds the best time and order to the rerouting be made.\n\n\u2022 Make the Modelica codes for the developed model more user friendly and release\n\nthen, so other researchers can use and extend it for new oil-related researches.\n\n\u2022 The JModelica.org passes to CasADi all the states and algebraic equations, how-\n\never some special type of algebraic equations can be ease simplified. The appli-\n\ncation some algorithm that simplify the model equations reducing the number of\n\nvariables and equations could lead to a better computational performance.\n\n56\n\n\n\nBibliography\n\n[1] Ole M. Aamo, G.O. Eikrem, H.B. Siahaan, and Bjarne A. Foss. Observer Design\n\nfor Multiphase Flow in Vertical Pipes with Gas Lift - Theory and Experiments.\n\nModeling, Identification and Control: A Norwegian Research Bulletin, 26(2):65\u2013\n\n80, 2005.\n\n[2] Marco Aurelio Schmitz Aguiar, Thiago Lima Silva, and Eduardo Camponogara. A\n\nMixed-Integer Convex Formulation for Optimal Operation of Gas-Lifted Oil Fields\n\nwith Facility, Routing, and Pressure Constraints. In EngOpt 2012 - International\n\nConference on Engineering Optimization, pages 1\u201310, Rio de Janeiro - Brazil,\n\n2012.\n\n[3] J. A?kesson, K.-E. A?rze?n, M. Ga?fvert, T. Bergdahl, and H. Tummescheit. Mod-\n\neling and optimization with Optimica and JModelica.org \u2013 Languages and tools\n\nfor solving large-scale dynamic optimization problems. Computers &amp; Chemical\n\nEngineering, 34(11):1737\u20131749, November 2010.\n\n[4] Johan A?kesson, M. Ga?fvert, and T. Tummescheit. JModelica \u2013 an Open\n\nSource Platform for Optimization of Modelica Models. 6th Vienna International\n\nConference on Mathematical Modelling, 2009.\n\n[5] Joel Andersson, J. A?kesson, F Casella, and Moritz Diehl. Integration of CasADi\n\nand JModelica.org. In 8th International Modelica Conference, 2011.\n\n[6] Joel Andersson, Johan A?kesson, and Moritz Diehl. CasADi \u2013 A symbolic pack-\n\nage for automatic differentiation and optimal control. In Recent Advances in\n\nAlgorithmic Differentiation, volume 87, pages 297\u2013307. Springer Berlin Heidel-\n\nberg, 2012.\n\n[7] L.T. Biegler. Nonlinear Programming: Concepts, Algorithms, and Applications to\n\nChemical Processes. SIAM e-books. Society for Industrial and Applied Mathe-\n\nmatics (SIAM, 3600 Market Street, Floor 6, Philadelphia, PA 19104), 2010.\n\n[8] Benjamin Julian T\u00f8 mte Binder. Production Optimization in a Cluster of Gas-Lift\n\nWells. Master\u2019s thesis, Norwegian University of Science and Technology, 2012.\n\n57\n\n\n\n[9] Andre?s Codas and Eduardo Camponogara. Mixed-integer linear optimization\n\nfor optimal lift-gas allocation with well-separator routing. European Journal of\n\nOperational Research, 217(1):222\u2013231, February 2012.\n\n[10] Florent Di Meglio, Glenn-Ole Kaasa, and Nicolas Petit. A first principle model\n\nfor multiphase slugging flow in vertical risers. In Proceedings of the 48h IEEE\n\nConference on Decision and Control (CDC) held jointly with 2009 28th Chinese\n\nControl Conference, pages 8244\u20138251. IEEE, December 2009.\n\n[11] Gisle Eikrem, Ole Aamo, and Bjarne Foss. On Instability in Gas Lift Wells and\n\nSchemes for Stabilization by Automatic Control. SPE Production &amp; Operations,\n\n2008.\n\n[12] Gisle Eikrem, Lars Imsland, and Bjarne Foss. Stabilization of gas-lifted wells\n\nbased on state estimation. In IFAC Symposium Adchem, pages 1\u20136, 2004.\n\n[13] Torbj\u00f8rn S\u00f8nsteb\u00f8 Grong. Modeling of Compressor Characterisics and Active\n\nSurge Control. Master\u2019s thesis, Norwegian University of Science and Technology,\n\n2009.\n\n[14] Vidar Gunnerud and Bjarne Foss. Oil production optimization \u2013 A piecewise lin-\n\near model, solved with two decomposition strategies. Computers &amp; Chemical\n\nEngineering, 34(11):1803\u20131812, November 2010.\n\n[15] AC Hindmarsh, PN Brown, and KE Grant. SUNDIALS: Suite of nonlinear and dif-\n\nferential/algebraic equation solvers. ACM Transactions on Mathematical Software,\n\n31(3):363\u2013396, 2005.\n\n[16] Bin Hu. Characterizing gas-lift instabilities. PhD thesis, Norwegian University of\n\nScience and Technology, 2004.\n\n[17] Bin Hu and Michael Golan. Gas-lift Instability Resulted Production Loss and Its\n\nRemedy by Feedback Control: Dynamical Simulation Results. In Proceedings of\n\nSPE International Improved Oil Recovery Conference in Asia Pacific. Society of\n\nPetroleum Engineers, October 2003.\n\n[18] Lars Imsland. Topics in Nonlinear Control: Outpit Feedback Stabilization and\n\nControl of Positive Systems. PhD thesis, Norwegian University of Science and\n\nTechnology, 2002.\n\n58\n\n\n\n[19] Esmaeil Jahanshahi and Sigurd Skogestad. Simplified Dynamical Models for Con-\n\ntrol of Severe Slugging in Multiphase Risers. In Bittanti Sergio, editor, 8th IFAC\n\nWorld Congress, pages 1634\u20131639, August 2011.\n\n[20] A?kesson. Johan. Optimica \u2013 An Extension of Modelica Supporting Dynamic Op-\n\ntimization. In 6th International Modelica Conference 2008, volume 312, Bielefeld,\n\nGermany, January 2008.\n\n[21] Vassileios D. Kosmidis, John D. Perkins, and Efstratios N. Pistikopoulos. Opti-\n\nmization of Well Oil Rate Allocations in Petroleum Fields. Industrial &amp; Engineering\n\nChemistry Research, 43(14):3513\u20133527, July 2004.\n\n[22] Horace Lamb. Hydrodynamics. Cambridge University Press, 1994.\n\n[23] JM Masella, QH Tran, D Ferre, and C Pauchon. Transient simulation of two-phase\n\nflows in pipes. International Journal of Multiphase Flow, 24:739\u2013755, 1998.\n\n[24] Gustavo Moises, Tuerte Rolim, and Jose Formigli. GeDIg: Petrobras Corporate\n\nProgram for Digital Integrated Field Management. In Proceedings of Intelligent\n\nEnergy Conference and Exhibition, pages 1\u20137. Society of Petroleum Engineers,\n\nFebruary 2008.\n\n[25] Pierre Perrot. A to Z of Thermodynamics. Oxford University Press, 1998.\n\n[26] PF Pickering, GF Hewitt, MJ Watson, and CP Hale. The prediction of flows in\n\nproduction risers-truth &amp; myth. IIR Conference, pages 1\u201316, 2001.\n\n[27] Agustinho Plucenio, C. A. Ganzaroli, and Daniel J. Pagano. Stabilizing gas-lift well\n\ndynamics with free operating point. In 2012 IFAC Workshop on Automatic Control\n\nin Offshore Oil and Gas Production, pages 95\u2013100, 2012.\n\n[28] Agustinho Plucenio and Daniel J. Pagano. Gas-lift optimization and control with\n\nnonlinear MPC. Advanced Control of Chemical Processes, 7(1), 2009.\n\n[29] AF Sayda and JH Taylor. Modeling and Control of Three-Phase Gravilty Separa-\n\ntors in Oil Production Facilities. In American Control Conference ACC \u201907, 2007.\n\n[30] Thiago Lima Silva, Andres Codas, and Eduardo Camponogara. A Computational\n\nAnalysis of Convex Combination Models for Multidimensional Piecewise-Linear\n\nApproximation in Oil Production Optimization. 2012 IFAC Workshop on Automatic,\n\npages 292\u2013298, 2012.\n\n59\n\n\n\n[31] Marina Stasiak. Tecnica de controle para supressa?o de golfadas em risers de\n\nproduc?a?o de petroleo. Master\u2019s thesis, Universidade Federal de Santa Catarina,\n\n2012.\n\n[32] Marina Stasiak, Daniel J. Pagano, and Agustinho Plucenio. A new discrete slug-\n\nflow controller for production pipeline risers. In 2012 IFAC Workshop on Automatic\n\nControl in Offshore Oil and Gas Production, pages 122\u2013127, Trondheim, Norway,\n\n2012.\n\n[33] Y Taitel and D Barnea. Simplified transient simulation of two phase flow using\n\nquasi-equilibrium momentum balances. International Journal of Multiphase Flow,\n\n23(3):493\u2013501, June 1997.\n\n[34] Yehuda Taitel, Ovadia Shoham, and JP Brill. Simplified transient solution\n\nand simulation of two-phase flow in pipelines. Chemical Engineering Science,\n\n44(6):1353\u20131359, January 1989.\n\n[35] J.V. Vogel. Inflow Performance Relationships for Solution-Gas Drive Wells.\n\nJournal of Petroleum Technology, 20(1), January 1968.\n\n[36] Andreas Wa?chter and Lorenz T. Biegler. On the implementation of an interior-point\n\nfilter line-search algorithm for large-scale nonlinear programming. Mathematical\n\nProgramming, 106(1):25\u201357, April 2005.\n\n[37] MJ Watson. Flow regime transitions and associated phenomena. PhD thesis,\n\nLondon University, 1999.\n\n60\n\n\n\nAppendix A : Dynamic Models\n\nA.1: Well Model\n\nThese are the equations of the model described in 2.2.\n\nMass balances:\n\nm?ga = wgl ? wgi (A.1a)\n\nm?gt = wgr + wgi ? wgp (A.1b)\n\nm?lt = wgl ? wgi (A.1c)\n\nMass flows:\n\nwgi = Civ\n\n?\n?gi max(0,pai ? pti) (A.2a)\n\nwp = Cpc\n\n?\n?p max(0,pai ? pti) (A.2b)\n\nwgp =\nmgt\nmt\n\nwp (A.2c)\n\nwlp =\nmlt\nmt\n\nwp (A.2d)\n\nwop = (1 ? rwc)wlp (A.2e)\n\nwwp = rwcwlp (A.2f)\n\nwlr = ?lQmax\n\n(\n1 ? (1 ? C)\n\n(\npbh\npr\n\n)\n? C\n\n(\npbh\npr\n\n)2)\n(A.2g)\n\nwgr = rglrwlr (A.2h)\n\nwmaxgl = Cgl\n\n?\n?gl max(0,pgm ? pta) (A.2i)\n\n61\n\n\n\nPressures\n\npai =\n\n?\n?\n\nRTa\n\nVaMg\n+\n\ng\n\n2Aa\n\n?\n?mga (A.3a)\n\npp =\nRTtmgt\n\nMgVt ? Mg?\n?1\nl mlt\n\n?\ngmt\n\n2At\n(A.3b)\n\npti = pp +\ngmt\n\nAt\n(A.3c)\n\npbh =\n\n?\n?1 + rglr +\n\nrglrgMgLw\n\n2RTt\n\n?\n?pti + ?lgLw\n\n1 + rglr ?\nrglrgMgLw\n\n2RTt\n\n(A.3d)\n\npta =\n\n?\n?\n\nRTa\n\nVaMg\n?\n\ng\n\n2Aa\n\n?\n?mga (A.3e)\n\nDensities:\n\n?gi =\nMg\nRTa\n\npai (A.4a)\n\n?p =\n?lMgppmt\n\n?lRTtmlt + Mgppmgt\n(A.4b)\n\n?l = rwc?w + (1 ? rwc)?o (A.4c)\n\n?gl =\nMg\nRTa\n\npgm (A.4d)\n\n62\n\n\n\nTable A.1: Well model variables\n\nName Type Explanation\nm?ga State Mass of gas in the annulus\nm?gt State Mass of gas in the tubing\nm?lr State Mass of liquid in the tubing\nwgi Algebraic Mass flow through the injection valve\nwp Algebraic Mass flow through production choke\nwgp Algebraic Gas production\nwlp Algebraic Liquid production\nwop Algebraic Oil production\nwwp Algebraic Water production\nwlr Algebraic Liquid extracted from reservoir\nwgr Algebraic Gas extracted from the reservoir\n?gi Algebraic Gas density upstream of the injection valve\n?p Algebraic Production density upstream of the production choke\npai Algebraic Pressure upstream of the injection valve\npp Algebraic Pressure upstream of the production valve\npti Algebraic Pressure downstream of the injection\npbh Algebraic Pressure at the bottom hole\npai Algebraic Pressure upstream of the injection valve\n\nTable A.2: Well model variables\n\nName Type Explanation\nCiv Tunning Injection valve coefficient\nCpc Tunning Production Choke\nrwc Reservoir Reservoir watercut\nQmax Reservoir Reservoir theoretical maximum flow\nC Constant Voegel\u2019s constant\npr Reservoir Reservoir pressure\nrgor Reservoir Gas-oil ratio\nR Constant Ideal gas constant\nTa Well Annulus temperature\ng Constant Gravity\nVa Well Annulus Volume\nMg Parameter Gas molar mass\nAa Well Annulus section area\nTt Well Tubing temperature\nVt Well Tubing Volume\nAt Well Tubing section area\nrglr Reservoir Gas-liquid ratio\nLw Well Tubing length from reservoir to injection point\n?l Parameter Liquid mass density\n?w Parameter Water mass density\n?o Parameter Oil mass density\n\n63\n\n\n\nA.2: Flowline Model\n\nThese are the equations of the model described in 2.4.\n\nMass balances:\n\nm?g,p = wg,in ? wg,lp (A.5a)\n\nm?o,p = wo,in ? wo,lp (A.5b)\n\nm?w,p = ww,in ? ww,lp (A.5c)\n\nm?g,r = wg,lp ? wg,out (A.6a)\n\nm?o,r = wo,lp ? wo,out (A.6b)\n\nm?w,r = ww,lp ? ww,out (A.6c)\n\nHorizontal pipeline:\n\nVg,p = Vp ?\nmo,p\n?o\n\n?\nmw,p\n?w\n\n(A.7a)\n\npin =\nmg,pRTp\nVg,pMg\n\n(A.7b)\n\n?g,p =\nmg,p\nVg,p\n\n(A.7c)\n\n?l,p =\n?o?w\n\n?wmo,p + ?omw,p\n(mo,p + mw,p) (A.7d)\n\n?l,p =\n?wmo,p + ?omw,p\n\n?o?wVp\n(A.7e)\n\nUs,l,p =\n?wwo,in + ?oww,in\n\n?o?w?r2p\n(A.7f)\n\n\u00b5l,p =\nmo,p\n\nmo,p + mw,p\n\u00b5o +\n\nmw,p\nmo,p + mw,p\n\n\u00b5w (A.7g)\n\nRep =\n2?l,pUs,l,prp\n\n\u00b5l,p\n(A.7h)\n\nfp =\n\n{\n?1.8 log10\n\n[(\n?p\n\n3.7Dp\n\n)1.11\n+\n\n6.9\n\nRep\n\n]}?2\n(A.7i)\n\n?Pf,p =\n?l,pLp?l,pfpU\n\n2\ns,l,p\n\n4rp\n(A.7j)\n\n64\n\n\n\nVertical riser:\n\nVg,r = Vr ?\nmo,r\n?o\n\n?\nmw,r\n?w\n\n(A.8a)\n\npr,t =\n?g,rRTr\nMg\n\n(A.8b)\n\n?g,r =\nmg,r\nVg,r\n\n(A.8c)\n\n?l,r =\n?o?w\n\n?wmo,r + ?omw,r\n(mo,r + mw,p) (A.8d)\n\n?m,r =\nmg,r + mo,r + mw,r\n\nVr\n(A.8e)\n\n?l,r =\n?wmo,r + ?omw,r\n\n?o?wVr\n(A.8f)\n\nUs,l,r =\nwo,in?w + ww,in?o\n\n?o?wAr\n(A.8g)\n\nUs,g,r =\nwg,in\n?g,rAr\n\n(A.8h)\n\nUm,r = Us,l,r + Us,g,r (A.8i)\n\n\u00b5l,r =\nmo,r\n\nmo,r + mw,r\n\u00b5o +\n\nmw,r\nmo,r + mw,r\n\n\u00b5w (A.8j)\n\nRer =\n2?m,rUm,rrr\n\n\u00b5l,r\n(A.8k)\n\nfr =\n\n{\n?1.8 log10\n\n[(\n?p\n\n3.7Dr\n\n)1.11\n+\n\n6.9\n\nRer\n\n]}?2\n(A.8l)\n\n?Pf,r =\n?l,rLr?l,rfrU\n\n2\ns,l,p\n\n4rr\n(A.8m)\n\n65\n\n\n\nConnection between pipeline and riser:\n\npl,p = pin ? ?Pf,p (A.9a)\n\npl,r = pr,t + ?Pf,r + ?m,rgLr (A.9b)\n\nAg,p =\nVg,p\nVp\n\nAp (A.9c)\n\nAl,p = Ap ? Ag,p (A.9d)\n\n?l,t =\n2(mo,r + mw,r)\n\nVr?l,r\n?\nAl,p\nAp\n\n(A.9e)\n\n?t,m = ?l,t?l,r + (1 ? ?l,t)?g,r (A.9f)\n\nwg,lp = Kg,pAg,p\n\n?\n?g,p max{0,plp,p ? plp,r} (A.9g)\n\nwo,lp = Kl,pAO,p\n\n?\n?o max{0,plp,p ? plp,r}zo,p\n\nmo,r\n\nmg,r + mo,r + mw,r\n(A.9h)\n\nww,lp = Kl,pAW,p\n\n?\n?w,p max{0,plp,p ? plp,r}zw,p\n\nmw,r\n\nmg,r + mo,r + mw,r\n(A.9i)\n\nwg,out = Kg,r\n\n?\n?t,m max{0,pr,t ? pout}\n\nmg,r\n\nmg,r + mo,r + mw,r\n(A.9j)\n\nwo,out = Kl,r\n\n?\n?t,m max{0,pr,t ? pout}\n\nmo,r\n\nmg,r + mo,r + mw,r\n(A.9k)\n\nww,out = Kl,r\n\n?\n?t,m max{0,pr,t ? pout}\n\nmw,r\n\nmg,r + mo,r + mw,r\n(A.9l)\n\nA.3: Manifold\n\nThese are the equations of the model described in 2.3.\n\nwout =\n?\n\ni?I\n\n?iwiin (A.10a)\n\npiin = pout, ?i ? I (A.10b)\n\n?i ? {0, 1} ?i ? I (A.10c)\n\n66\n\n\n\nTable A.3: Manifold model variables\n\nName Type Explanation\nwiin Variable Manifold i-th inlet flow\npiin Variable Manifold i-th inlet pressure\nwout Variable Manifold outlet flow\npout Variable Manifold outlet pressure\n?i Binary Variable Opens/Closes the inlet\n\n67\n\n\n\nA.4: Separator\n\nThese are the equations of the model described in 2.5.\n\nSeparator:\n\nvv =\n2\n\n9\n\n(?h ? ?w)gd\n2\nd\n\n\u00b5w\n(A.11a)\n\nvh =\nL\n\n?\n(A.11b)\n\n? =\nmw\nwww,out\n\n(A.11c)\n\n? = cos?1\n(\nR ? h\n\nR\n\n)\n(A.11d)\n\n? = tan?1\n(\nhw\nL\n\n)\n(A.11e)\n\n?1 = tan\n?1\n\n(\nvv\nvh\n\n)\n(A.11f)\n\nL1 = hcot\n[\nmin (?, ?1)\n\n]\n(A.11g)\n\nh1 = Ltan\n[\nmin (?, ?1)\n\n]\n(A.11h)\n\n?1 = cos\n?1\n\n(\n1 ?\n\nh1\nR\n\n)\n(A.11i)\n\nVS1 = R\n2L1\n\n{\n? ? 0.5 sin(2?) ?\n\n3 sin? ? 3? cos? ? sin3 ?\n\n3(1 ? cos?)\n\n}\n(A.11j)\n\nVS2 = R\n2L\n\n{\n? ? 0.5 sin(2?) ?\n\n3 sin?1 ? 3?1 cos?1 ? sin\n3 ?1\n\n3(1 ? cos ?1)\n\n}\n(A.11k)\n\nWater phase:\n\n? =\nVS2\nVS1\n\n(A.12a)\n\nw\ng\nw,out = (1 ? ?)w\n\ng\nin (A.12b)\n\nwow,out = (1 ? ?)w\no\nin (A.12c)\n\nwww,out = w\nw\nin (A.12d)\n\nOil Phase:\n\nx =\nPin\nPv\n\n(A.13a)\n\nw\ng\no,out = x?w\n\ng\nin (A.13b)\n\nwoo,out = ?w\no\nin (A.13c)\n\n68\n\n\n\nGas Phase:\n\nw\ng\ng,out = (1 ? x)?w\n\ng\nin (A.14a)\n\n69\n\n\n\nTable A.4: Well model variables\n\nName Type Explanation\nvh Algebraic Droplets\u2019 horizontal velocity\n? Algebraic Time for water cross the separator\nmw Algebraic Water mass in separator\nwgi Algebraic Mass flow through the injection valve\nwp Algebraic Mass flow through production choke\nwgp Algebraic Gas production\nwlp Algebraic Liquid production\nwop Algebraic Oil production\nwwp Algebraic Water production\nwlr Algebraic Liquid extracted from reservoir\nwgr Algebraic Gas extracted from the reservoir\n?gi Algebraic Gas density upstream of the injection valve\n?p Algebraic Production density upstream of the production choke\npai Algebraic Pressure upstream of the injection valve\npp Algebraic Pressure upstream of the production valve\npti Algebraic Pressure downstream of the injection\npbh Algebraic Pressure at the bottom hole\npai Algebraic Pressure upstream of the injection valve\n\n70\n\n\n\nA.5: Compressor\n\nThese are the equations of the model described in 2.6.\n\nFlows:\n\nwout = win (A.15a)\n\nw?in = win + wsl (A.15b)\n\nwout = w?out ? wsl (A.15c)\n\nqvol =\nw?inRT\n\npinMg\n(A.15d)\n\nqvol = qvol\nTmap\nT\n\npin\npmap\n\n(A.15e)\n\nPressures:\n\nrp =\npout\npin\n\n(A.16a)\n\nrp = rp\nT\n\nTmap\n(A.16b)\n\nQuadratic approximations:\n\nfi(qvol) = aiq\n2\nvol + biqvol + ci, ?i ? {u,d, l,r} (A.17a)\n\nql,vol =\n?bl +\n\n?\nb2l ? 4al(cl ? qvol)\n\n2al\n(A.17b)\n\nqr,vol =\n?br +\n\n?\nb2r ? 4ar(cr ? qvol)\n\n2ar\n(A.17c)\n\nSlack variables:\n\n?u = rp ? fu(qvol) (A.18a)\n\n?d = fd(qvol) ? rp (A.18b)\n\n?l = ql,vol ? rp (A.18c)\n\n?r = qvol ? rr,p (A.18d)\n\n?b ? 0, ?b ? {u,d, l,r} (A.18e)\n\n71\n\n\n\nTable A.5: Compressor model variables\n\nName Type Explanation\nwin Input Inlet flow\npin Input Inlet pressure\nwout Variable Outlet flow\npout Variable Outlet pressure\nwsl Input Flow through surge control line\nrp Variable Pressure ratio\nqvol Variable Volumetric flow at the map conditions\nrp Variable Pressure ratio at the map conditions\n\nfu(qvol) Functions Quadratic functions approximating the map upper bound\nfd(qvol) Functions Quadratic functions approximating the map lower bound\nfl(qvol) Functions Quadratic functions approximating the map left bound\nfr(qvol) Functions Quadratic functions approximating the map right bound\nql,vol Variable Projection of the left bound in the flow axis at the operation point\nqr,vol Variable Projection of the right bound in the flow axis at the operation point\n\n72\n\n\n\nA.6: Production Network\n\nWells:\n\nwwin = w\nw\ngl ?w ? W (A.19a)\n\npwin = p\ng\nexp ?w ? W (A.19b)\n\nManifold:\n\nw\np\nin =\n\n?\n\nw?W\n\n?w,pw\nw\nout ?p ? P (A.20a)\n\npwout =\n?\n\np?P\n\n?w,pp\np\nin ?w ? W (A.20b)\n\nSeparator\n\nwsin = w\np\nout ?(s,p) ? Sp (A.21a)\n\npsin = p\np\nout ?(s,p) ? Sp (A.21b)\n\npsin = p\ns ?(s) ? S (A.21c)\n\nCompressor:\n\nwcin = w\ns\nout ? w\n\nc\nfl ?(c,s) ? Cs (A.22a)\n\npcin = p\ns\nout ?(c,s) ? Cs (A.22b)\n\npcout = pexp ?c ? C (A.22c)\n\nExport Line:\n\nwgexp =\n?\n\nc?C\n\nwcout ? wgm (A.23a)\n\nwoexp =\n?\n\ns?S\n\nw\ns,o\no,out (A.23b)\n\nwwexp =\n?\n\ns?S\n\nw\ns,w\nw,out (A.23c)\n\nLift gas manifold:\n\npgm = pexp (A.24a)\n\nwgm =\n?\n\nw?W\n\nwwgl (A.24b)\n\n73\n\n\n\nA.7: Objective Functions\n\nA.7.1: Tracking Problem\n\nmin? =\n\n? tf\n\nt0\n\n(z ? zref)\nTQz(z ? zref) + (y ? yref)\n\nTQy(y ? yref)\n\n+ (u ? uref)\nTRu(u ? uref) dt\n\n(A.25)\n\nA.7.2: Maximization Problem\n\nmax? =\n\n? tf\n\nt0\n\nkgq\ng\nexp + koq\n\no\nexp + kwq\n\nw\nexp + kflwfl + kglwgm dt (A.26)\n\nA.8: Constraints\n\n1. All masses should be non-negative,\n\n2. All flows should be non-negative,\n\n3. Injection should be smaller than the maximum determined in the well (wwgl ?\n\nw\nw,max\ngl , ?w ? W),\n\n4. The compressor map violation variables must be non-positive.\n\n74\n\n\n\nAppendix B : Modelica Examples\n\nB.1: Example 1: Van der Pol Oscillator\n\nTo show how simple it is to describe a model using Modelica language in this\n\nsubsection we will model the Van der Pol oscillator.\n\nThe Van der Pol oscillator is a non-linear system composed by two states and\n\none input. The state equations are:\n\nx?1 = x2 (B.1a)\n\nx?2 = (1 ? x\n2\n1)x2 ? x1 + u (B.1b)\n\ny = x1 (B.1c)\n\nwhere x1 and x2 are the states, u is the system input, and y is the system output.\n\nFurther, x1,0 and x2,0 are the system initial conditions. Transcribing it to Modelica we\n\nhave:\n\n1 model VanDerPol\n\n2 parameter Real x1_0 = 0; // x_1 initial cond\n\n3 parameter Real x2_0 = 1; // x_2 initial cond\n\n4\n\n5 Real x1(start = x1_0); // x_1 state\n\n6 Real x2(start = x2_0); // x_2 state\n\n7\n\n8 input Real u; // control signal\n\n9 output Real y; // system output\n\n10 equation\n\n11 der(x1) = x2;\n\n12 der(x2) = (1 - x1^2) * x2 - x1 + u;\n\n13 x1 = y;\n\n14 end VanDerPol;\n\nIn line 1, we initiate a component declaration saying the type of element it is followed\n\nby its name. Line 2 and 3, the initial conditions are declared, parameter means that\n\nthis variable is not time dependent and Real means that it is in real domain. Line 5\n\nand 6, states are declared and using start we indicate the initial conditions. Line 8\n\nand 9, system input and output are declared using the respective keywords. Line 10\n\n75\n\n\n\nindicates that the equating starts. Line 11 and 12, der indicates that we are defining\n\nthe derivative of x1 and x2 Line 13, we define the that the output of the system is x1,\n\nnote that as Modelica describe mathematically the model y = x1 and x1 = y are the\n\nsame.\n\nB.2: Example 2: The Quadruple-Tank Process\n\nOther very recurrent model for control is the four tank process. It have four\n\ncylindrical tanks, two pumps, and two valves. Tanks 3 and 4 leak in tanks 1 and 2,\n\nrespectively. The pump 1 sends the flow to tank 1 and 4, whilst the pump 2 sends the\n\nflow to tank 2 and 3. The configuration is shown in B.1.\n\nFigure B.1: Quadruple-tank process\n\n76\n\n\n\nThe system dynamics are:\n\ndh1\ndt\n\n= ?\na1\nA1\n\n?\n2gh1 +\n\na3\nA1\n\n?\n2gh3 +\n\n?1k1\nA1\n\nv1 (B.2a)\n\ndh2\ndt\n\n= ?\na2\nA2\n\n?\n2gh2 +\n\na4\nA2\n\n?\n2gh4 +\n\n?2k2\nA2\n\nv2 (B.2b)\n\ndh3\ndt\n\n= ?\na3\nA3\n\n?\n2gh3 +\n\n(1 ? ?2)k2\nA3\n\nv2 (B.2c)\n\ndh4\ndt\n\n= ?\na4\nA4\n\n?\n2gh4 +\n\n(1 ? ?1)k1\nA1\n\nv1 (B.2d)\n\nWe can see that this problem is composed by four identical subsystems. To\n\nmake the coding simpler we will exploit this. Each tank have one state, one inlet flow,\n\nand one outlet flow.\n\nListing B.1: Tank Modelica model\n\n1 model Tank\n\n2 import SI = Modelica.SIUnits;\n\n3 import g = Modelica.Constants.g_n;\n\n4\n\n5 parameter SI.Area A = 4.9e-4;\n\n6 parameter SI.Area a = 0.03e-4;\n\n7\n\n8 SI.Height h(start=0.05);\n\n9 input SI.VolumeFlowRate q_in;\n\n10 output SI.VolumeFlowRate q_out;\n\n11 equation\n\n12 A*der(h) = q_in - q_out;\n\n13 q_out = a*sqrt(2*g*h);\n\n14 end Tank;\n\nLine 1 starts the model declaration. Line 2 imports the SI units library from Modelica\n\nstandard library. Line 3 imports the gravitational acceleration from Modelica library.\n\nLine 5 defines the tank area, which is a parameter for the model. It could be used Real\n\nas the example before, however declare the unit of variables and parameters is a good\n\npractice in Modelica. Line 6, declaration of the tank orifice area. Line 8, define the\n\nstate h with initial value of 5 cm. Line 9, the inlet flow is the tank input. Line 10, the\n\noutlet flow is tank output. Line 11, we integrate the volume in the tank using the height\n\nand the inlet and outlet flow (Ah? = qin ? qout). Line 12, define the outlet flow.\n\nNow to compose the system we will create four tanks and add two pumps.\n\n77\n\n\n\nListing B.2: Four Tank Modelica model\n\n1 model fourTanks\n\n2 import SI = Modelica.SIunits;\n\n3\n\n4 Tank t1, t2 , t3 , t4;\n\n5\n\n6 parameter Real k1 = 0.56e-6;\n\n7 parameter Real k2 = 0.56e-6;\n\n8 parameter Real gama1 = 0.30;\n\n9 parameter Real gama2 = 0.50;\n\n10\n\n11 input SI.Voltage v1 , v2;\n\n12 output SI.Height y1 , y2;\n\n13 equation\n\n14 t1.q_in = t3.q_out + k1*gama1*v1;\n\n15 t2.q_in = t4.q_out + k2*gama2*v2;\n\n16 t3.q_in = k1*(1-gama1)*v1;\n\n17 t4.q_in = k2*(1-gama2)*v2;\n\n18 y1 = t1.h;\n\n19 y2 = t2.h;\n\n20 end fourTanks;\n\nLine 4, as Tank was defined we can use it to instantiate objects. Lines 6-9 define the\n\npump parameters. Lines 14-17 define the input of each system. Lines 18-19 indicates\n\nthe system output.\n\nUsing this structure we can ease change the tank model, use a conic tank for\n\ninstance. The routing of tanks or even the number of tanks can be changed without\n\nany effort.\n\nB.3: Example 1: Minimum time problem with Van der Pol Oscillator\n\nUsing the model stated in B.1 we are going to develop a optimization problem\n\nthat the objective is to reach a specific condition in a less time as possible subject to\n\nconstraints.\n\nConsider that we want to bring to oscillator to origin as fast as possible, but\n\nhaving the control between the bounds ?1 ? u ? 1. For this we state the optimization\n\n78\n\n\n\nproblem\n\nmin tf (B.3a)\n\ns.t.: x? = f(x,u) (B.3b)\n\nx1(tf) = 0 (B.3c)\n\nx2(tf) = 0 (B.3d)\n\n? 1 ? u ? 1 (B.3e)\n\nwhere x is the Van der Pol oscillator states, u is the control input, f(x,u) is the state\n\nfunction, and tf is the final time. This system can be transcribed to Optimica as:\n\nListing B.3: Tank Modelica model\n\n1 optimization VDP_Opt(objective = finalTime ,\n\n2 startTime = 0,\n\n3 finalTime(free=true ,min=0.2,initialGuess=1))\n\n4\n\n5 extends VanDerPol;\n\n6 constraint\n\n7 x1(finalTime)=0;\n\n8 x2(finalTime)=0;\n\n9 u >= -1;\n\n10 u&lt;= 1;\n\n11 end VDP_Opt;\n\nAt line 1, the optimization class indicates that this is a optimization problem, the ob-\n\njective function is the finalTime, simulation starts at 0, and final time is an optimization\n\n(free) variable with the minimum value of 0.2 and the initial guess of 1. Line 5 say that\n\nthis problem will use the definitions of the Van der Pol model. Line 6 indicates the begin\n\nof the declaration of constraints. Lines 7-10 implement the system constraints.\n\nlxxix\n\n\n\tIntroduction\n\tModel and Background\n\tNetwork\n\tWell Model\n\tManifold\n\tPipeline-Riser Model\n\tSeparator\n\tCompressor\n\tModels Coupling\n\n\tModelica and JModelica.org\n\tModelica\n\tOptimica\n\tJModelica.org\n\n\tNonlinear Model Predictive Control\n\tProblem Discretization\n\tODE Solvers\n\tCollocation Method\n\tCollocation Method Example\n\tNLP Optimization Formulation\n\n\tObjective Function\n\tTracking Problem\n\tProduction Maximization Formulation\n\n\tTest Case: Compressor Scheduled Maintenance\n\tSolving Approaches\n\n\n\tResults\n\tInstance definition\n\tComputational Setup\n\tMaximization Problem\n\tTracking Problem\n\tCompressor Maintenance Results\n\tNaive Approach\n\tTransient Optimization\n\tHybrid Approach\n\n\tComputation Analysis\n\n\tConclusion\n\tBibliography\n\tAppendix A : Dynamic Models\n\tWell Model\n\tFlowline Model\n\tManifold\n\tSeparator\n\tCompressor\n\tProduction Network\n\tObjective Functions\n\tTracking Problem\n\tMaximization Problem\n\n\tConstraints\n\n\tAppendix B : Modelica Examples\n\tExample 1: Van der Pol Oscillator\n\tExample 2: The Quadruple-Tank Process\n\tExample 1: Minimum time problem with Van der Pol Oscillator"}]}}}