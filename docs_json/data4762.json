{"add": {"doc": {"field": [{"@name": "docid", "#text": "BR-TU.07072"}, {"@name": "filename", "#text": "11708_Lopes_TonyMinoruTamura_M.pdf"}, {"@name": "filetype", "#text": "PDF"}, {"@name": "text", "#text": "O Problema de Planejamento e Agendamento de Opera\u00e7\u00f5es em uma Rede de Oleodutos\nEste exemplar corresponde \u00e0 reda\u00e7\u00e3o final da Disserta\u00e7\u00e3o devidamente corrigida c defendida por Tony Minoru Tarnura Lopes c aprovada pela Banca Examinadora.\nCampinas, 29 de Julho dc 2010.\nProf. Dr. ArnaM\u00f3 Vicir\n(Orientador)\nProf. Dr. Cid Carvalho dc Souza (Co-orientador)\nDisserta\u00e7\u00e3o apresentada ao Instituto de Computa\u00e7\u00e3o, UNICAMP, como requisito parcial para a obten\u00e7\u00e3o do t\u00edtulo de Mestre em Ci\u00eancia da Computa\u00e7\u00e3o.\nFICHA CATALOGR\u00c1FICA ELABORADA PELA BIBLIOTECA DO IMECC DA UNICAMP\nBibliotec\u00e1ria: Silvania Renata de Jesus Ribeiro Cirilo - CRB8 /6592\nLopes, Tony Minoru Tamura\nL881p O problema de planejamento e agendamento de opera\u00e7\u00f5es em uma rede de oleodutos/Tony Minoru Tamura Lopes-- Campinas, [S.P. : s.n.], 2010.\nOrientador : Arnaldo Vieira Moura ; Cid Carvalho de Souza Disserta\u00e7\u00e3o (mestrado) - Universidade Estadual de Campinas, Instituto de Computa\u00e7\u00e3o.\n1.\tPrograma\u00e7\u00e3o por restri\u00e7\u00f5es. 2. Programa\u00e7\u00e3o Linear. 3. Oleodutos.. I. Moura, Arnaldo Vieira. II. Souza, Cid Carvalho de. III. Universidade Estadual de Campinas. Instituto de Computa\u00e7\u00e3o. IV. T\u00edtulo.\nT\u00edtulo em ingl\u00eas: The problem of planning and scheduling the operation of an oil pipeline.\nPalavras-chave em ingl\u00eas (Keywords): 1. Constraint programming. 2. Linear programming. 3.\nOil pipeline.\n\u00c1rea de concentra\u00e7\u00e3o: Ci\u00eancia da Computa\u00e7\u00e3o.\nTitula\u00e7\u00e3o: Mestre em Ci\u00eancia da Computa\u00e7\u00e3o.\nBanca examinadora: Prof. Dr. Arnaldo Vieira Moura - (IC-UNICAMP)\nProf. Dr. Cid Carvalho de Souza - (IC-UNICAMP)\nProf. Dr. Guilherme Pimentel Telles - (IC-UNICAMP)\nProfa. Dra. Maria Teresa Moreira Rodrigues - (FEQ-UNICAMP)\nProf. Dr. Ricardo Dahab - (IC-UNICAMP)\nProf. Dr. Carlile Campos Lavor - (IMECC-UNICAMP)\nData da defesa: 29/07/2010\nPrograma de P\u00f3s-Gradua\u00e7\u00e3o: Mestrado em Ci\u00eancia da Computa\u00e7\u00e3o.\nTERMO DE APROVA\u00c7\u00c3O\nDisserta\u00e7\u00e3o Defendida e Aprovada em 29 de julho de 2010, pela Banca examinadora composta pelos Professores Doutores:\nProf3. Dr3. Maria Tere\u00e1a Moreira Rodrigues\nFEQ/UNICAMP\nProf. Dr. G IC / UNIC\nherme Pimentel Telles\nProf. Dr. Arnaldo Vieira Moura IC I UNICAMP\nInstituto de Computac\u00e3o Universidade Estadual de Campinas\nO Problema de Planejamento e Agendamento de Opera\u00e7\u00f5es em uma Rede de Oleodutos\nTony Minoru Tamura Lopes1\nJulho de 2010\nBanca Examinadora:\n\u2022\tProf. Dr. Arnaldo Vieira Moura (Orientador)\n\u2022\tProf. Dr. Guilherme Pimentel Telles\nInstituto de Computa\u00e7\u00e3o, UNICAMP\n\u2022\tProfa. Dra. Maria Teresa Moreira Rodrigues\nFaculdade de Engenharia Qu\u00edmica, UNICAMP\n\u2022\tProf. Dr. Ricardo Dahad (Suplente)\nInstituto de Computa\u00e7\u00e3o, UNICAMP\n\u2022\tProf. Dr. Carlile Campos Lavor (Suplente)\nInstituto de Matem\u00e1tica, Estat\u00edstica e Computacao Cient\u00edfica, UNICAMP\n1\tSuporte financeiro de: Funda\u00e7\u00e3o de Amparo \u00e0 Pesquisa do Estado de S\u00e3o Paulo (processo 05/573430), 2006-2008.\nResumo\nUm conjunto de \u00f3rg\u00e3os distribuidores de derivados de petr\u00f3leo, incluindo refinarias e terminais, possuem demandas locais e produ\u00e7\u00e3es de diferentes produtos ao longo de um dado horizonte de tempo. No entanto, pode nao haver estoque local de algum produto para satisfazer a demanda correspondente, ou pode nao haver espa\u00e7o nos tanques para estocar uma produ\u00e7\u00e3o local. Isso leva a necessidade de transporte dos derivados de petr\u00f3leo entre os \u00f3org\u00e3aos.\nDentre os diversos modais, a rede de oleodutos \u00f3 a melhor opcao considerando-se custos e riscos ambientais. Em vista de sua grande complexidade operacional, um uso adequado da rede necessita de um planejamento ta\u00f3tico composto mensalmente, e de um agendamento detalhado das opera\u00e7c\u00e3oes, cobrindo poucos dias, e que deve ser atualizado diariamente. Tanto o plajemento mensal quanto o agendento diario devem respeitar um grande conjunto de restri\u00e7c\u00e3oes, envolvendo a capacidade dos tanques, taxas de vaz\u00e3oes nos oleodutos, n\u00f3veis de estoques, dentre outras.\nEsta disserta\u00e7c\u00e3ao apresenta uma formaliza\u00e7c\u00e3ao do problema, desenvolvida em dois est\u00f3agios, representado o planejamento mensal e o agendamento diario. O problema de planejamento recebeu um tratamento inicial heur\u00edstico seguido de uma modelagem por fluxo em redes, enquanto o agendamento di\u00f3ario utilizou programa\u00e7c\u00e3ao por restri\u00e7c\u00e3oes.\nOs modelos foram testados sobre dados fornecidos pela companhia brasileira de petro\u00f3leo Petrobras. Essas inst\u00e2ncias possuem uma das topologias mais complexas quando comparadas a outras redes encontrada na literatura aberta. Os resultados demonstram melhorias signicativas sobre a resoluc\u00e7\u00e3ao manual desses problemas.\nAbstract\nAmong many transportation modes, the network of pipelines is one of the best options when considerying cost and environment risks. In order to adequately operate the pipeline network, a two phase planning strategy is developed. First, a tactical pumping plan is composed monthly and, secondly, a more detailed operational schedule, spanning a few days, is updated daily. Both the tactical and tghe operational plannings must satisfy a large set of operation constraints, involving many restrictions, such as tanks capacities, pipeline flow rates, and stock levels.\nThis dissertation provides a formalization for the problem along with a decomposition of it in two stages, representing the monthly planning and operational schedule. The tactical stage is solved by applying a heuristic and then with a network flow model, while the operational schedule uses constraing programming.\nOur model treats the oil pipeline network that is operated by the Brazilian oil company Petrobras. This is one of the most complex and large topologies when compared to other networks treated in the open literature. The model was tested with real-world instances and showed significant improvements over human planning.\nAgradecimentos\nAgrade\u00e7o tamb\u00e9m aos meus orientadores, Prof. Arnaldo e Prof. Cid, pela oportunidade, amizade, por me iniciarem na \u00e9rea de pesquisa e por constitu\u00e9rem o modelo de profissional que almejo ser no futuro.\nAgrade\u00e7o meus irm\u00e3os e meus amigos pela convivencia, pelos \u00e9timos momentos nesses ultimos anos e por todo o apoio que me deram. Em especial ao Andr\u00e9, pela amizade, forc\u00e7a, paci\u00eaencia e grandes id\u00e9eias nas noites e madrugadas acordadas que passamos desenvolvendo este projeto.\nAgradeco a FAPESP, pelo suporte financeiro ao meu projeto de pesquisa. A Petrobras, particularmente ao Fernando Marcellino, Andr\u00e9 Lima, R\u00eamulo Albuquerque, Leandro Barcelos, Enio Medeiros, D\u00e9cio, Marcio Audi e Rubens Oshiro pelo fornecimento dos dados e, principalmente, pela oportunidade de participar deste projeto. Tamb\u00e9m agrade\u00e7o aos funcion\u00e1rios do Instituto de Computa\u00e7ao da UNICAMP, sempre dispostos a ajudar nos momentos que precisamos.\nMuito obrigado!\nSum\u00e1rio\nResumo\nAbstract\nvi\nAgradecimentos\nvii\n1\tIntrodu\u00e7\u00e3o\t1\n1.1\tContextualiza\u00e7\u00e3o.................................................... 2\n1.2\tOrganiza\u00e7ao do Texto ............................................... 2\n2 O Problema de Planejamento e Agendamento de Opera\u00e7\u00f5es em uma\nRede de Oleodutos\t4\n2.1\tCaracteriza\u00e7\u00e3o do PPAORO............................................... 5\n2.2\tPar\u00e2metros e Constantes Gerais......................................... 5\n2.2.1\tRestricoes nos (\u00d3rg\u00e3os ......................................... 6\n2.2.2\tRestri\u00e7\u00e3es dos Dutos............................................ 8\n2.2.3\tDados Din\u00e2micos da Rede........................................ 10\n2.3\tSolu\u00e7ao e Objetivos................................................... 11\n2.4\tModelo da Rede de Dutos............................................... 11\n2.5\tTopologia Brasileira.................................................. 12\n3 Revisao Bibliogr\u00e1fica\n14\n4 Arquitetura do Modelo de Resolu\u00e7ao\t20\n4.1\tFase de Planejamento........................................... 21\n4.2\tFase de Agendamento............................................ 22\n5 Conceitos B\u00e1sicos de Modelagem\t24\n5.1 Programa\u00e7\u00e3o L\u00f3gica por Restri\u00e7\u00e3es................................... 24\n5.1.1 Definindo um modelo para satisfa\u00e7\u00e3o de restri\u00e7\u00e3es............ 25\n5.1.2\tEncontrando uma solu\u00e7\u00e3o......................................... 25\n5.1.3\tMelhorias na modelagem.......................................... 26\n5.2\tPrograma\u00e7ao Linear Mista............................................... 27\n5.2.1\tFluxo em Redes.................................................. 28\n6\tUm\tmodelo para o Problema de Agendamento\t32\nPr\u00f3logo ............................................................... 32\n1\tIntroduction........................................................... 34\n2\tProblem Definition..................................................... 37\n2.1\tTank Restrictions............................................... 37\n2.2\tPipeline Restrictions........................................... 38\n2.3\tDepot Restrictions.............................................. 40\n2.4\tInventory Constraints........................................... 41\n2.5\tDefinition of a Solution........................................ 42\n3\tRelated Work........................................................... 43\n4\tMethodology ........................................................... 46\n4.1\tPlanning and Routing............................................ 47\n4.2\tScheduling Phase................................................ 51\n4.3\tThe Sequencing Sub-problem ..................................... 52\n4.4\tThe Scheduling Sub-problem...................................... 68\n4.5\tA Running Example............................................... 70\n5\tResults ............................................................... 73\n6\tConclusions ........................................................... 74\nBibliografia\t77\nEp\u00f3logo ............................................................... 80\n7\tUm\tmodelo para o\tProblema de Planejamento\t83\nPr\u00f3ologo .............................................................. 83\n1\tIntroduction .......................................................... 85\n2\tProblem Definition .................................................... 87\n2.1\tTank Restrictions............................................... 89\n2.2\tPipeline Restrictions........................................... 89\n2.3\tInventory Constraints........................................... 90\n2.4\tInput Instances and Solutions................................... 90\n3\tA Network Flow Model for the Planning Phase............................ 92\n3.1\tNetwork Model Definition........................................ 92\n3.2\tA Linear Programming Model...................................... 97\n3.3\tNetwork Flow Decomposition......................................101\n4\tComputational Results...............................................103\n5\tConclusions and\tFuture Work.........................................104\nBibliografia\t107\nEp\u00edlogo.............................................................110\n8\tConclus\u00f5es\t112\nBibliografia\t114\nLista de Tabelas\n3.1\tCompara\u00e7\u00e3o entre abordagens anteriores.............................. 15\n6\tUm modelo para o Problema de Agendamento\t32\n1\tSolution Example.................................................... 43\n2\tComparison of the main approaches................................... 43\n3\tSolver and model statistics......................................... 75\n7\tUm modelo para o Problema de Planejamento\t83\n1\tInitial values and constants\tfor\tan\tinput instance ................. 91\n2\tNode description for the Pipeline\tNetwork flow\tModel................ 93\n3\tExecution Results...................................................103\n4\tManual planning vs Real planning - Total Network Flow Proportion . . . .103\n5\tManual planning vs Real planning - Total Network Flow Proportion by\nProduct ........................................................... 103\n6\tManual planning vs Real planning - Total Network Flow Proportion by\nPipeline .......................................................... 104\nLista de Figuras\n2.1\tModelo esquem\u00e1tico de uma rede de dutos.......................................... 12\n2.2\tRepresenta\u00e7\u00e3o do sistema de dutos da regiao Sudeste de S\u00e3o Paulo (figura\nfornecida pela Petrobras)........................................................ 13\n6\tUm\tmodelo para o Problema de Agendamento\t32\n1\tpetrobras pipeline network....................................................... 36\n2\tA pipeline network example....................................................... 38\n3\tExample of a flow reversal....................................................... 40\n4\tSolver Framework................................................................. 48\n5\tActivities for each pipeline in a delivery order\u2019s route......................... 55\n6\tConnection between two consecutive pipelines in an order\u2019s route................. 56\n7\tCase when the send and receive activity sequences are different.................. 59\n8\tExample of edges in the pushing graph for a single pipeline...................... 62\n9\tExample of activity unification.................................................. 69\n10\tA small example.................................................................. 73\n11\tTankage Evolution for two instances.............................................. 74\n7\tUm\tmodelo para o Problema de Planejamento\t83\n1\tA Sample Pipeline Network........................................................ 86\n2\tThe inland pipeline network...................................................... 88\n3\tNodes and arcs representing pairs of depots d and products p. Items within\nparenthesis index the nodes enclosed inside the rectangle. The occluded rectangles represent the multiplicity of that network with regard to the inner index. .\t95\n4\tNodes and arcs for the stock of a pipeline with contents (p, qty, r). Items within\nparenthesis index the nodes enclosed inside the rectangle. The occluded rectangles represent the multiplicity of that network with regard to the inner index. .\t96\n5\tNodes and arcs representing volumes traveling along routes. For a fixed route r and product p, at every period ti a new subnetwork is created so that the quantity will only be delivered after enough periods have passed. The subnetwork for period t = 3 was omitted to show more of the subnetwork for period t = 2. Items within parenthesis index the nodes enclosed inside the rectangle. The occluded rectangles represent the multiplicity of that network with regard to the inner index............................................................................\nCap\u00edtulo 1\nIntrodu\u00e7\u00e3o\nA ind\u00fastria de petr\u00f3leo brasileira possui bases, tamb\u00e9m chamadas de \u00f3rg\u00e3os, distribuidoras de derivados de petr\u00f3leo, espalhadas por todo o pa\u00f3s. Essas bases devem atender \u00e0s demandas regionais. Entretanto, como grande parte da produ\u00e7\u00e3o de petr\u00f3leo e seus derivados e localizada, h\u00f3 necessidade de transporte dos produtos entre os \u00f3rgaos. Dentre os meios de transporte dispon\u00edveis, o menos custoso e mais aceit\u00f3vel ambientalmente \u00e9 aquele realizado usando redes de oleodutos. Nos Estados Unidos, por exemplo, as entregas por redes de oleodutos representam mais que 17% do volume total transportado, por\u00f3m, menos de 2% do custo log\u00f3stico [51].\nAs redes de oleodutos, para serem realmente efetivas, necessitam de controle e planejamento constante. Dois dos grandes problemas enfrentados, os quais s\u00e3o tratados nesta dissertac\u00e7a\u00e3o, s\u00e3ao o planejamento mensal da opera\u00e7c\u00e3ao dos dutos e o detalhamento di\u00f3ario da movimenta\u00e7c\u00e3ao dos produtos pelos dutos. Na resolu\u00e7c\u00e3ao de ambos \u00f3e necess\u00f3ario respeitar restri\u00e7c\u00e3oes operacionais sobre as atividades nos \u00f3org\u00e3aos e nos dutos. Exemplos de restric\u00e7\u00e3oes esta\u00e3o nas capacidades dos tanques, taxas de vazo\u00e3es diferenciadas por produto, duto e sentido de fluxo, al\u00e9m de n\u00f3veis de estoque.\nAtualmente, o planejamento mensal e agendamento di\u00f3ario das opera\u00e7c\u00e3oes s\u00e3ao feitos manualmente. Inicialmente, em uma reuni\u00e3o entre os orgaos distribuidores, refinarias e os engenheiros de distribui\u00e7c\u00e3ao sa\u00e3o discutidas as movimenta\u00e7c\u00e3oes para atender as demandas e planejar as produ\u00e7c\u00e3oes de forma a atingir um consenso. Isso formar\u00f3a o planejamento mensal das movimenta\u00e7c\u00e3oes que ser\u00f3a o alvo do agendamento di\u00f3ario. Assim, durante o m\u00eas planejado cada \u00f3rg\u00e3o prop\u00e3e as operac\u00e3es necess\u00f3rias para escoar sua producao e atender sua pr\u00f3opria demanda. Em seguida, essas propostas s\u00e3ao reunidas, e verifica-se a viabilidade de combina-las. Quase sempre aparecem muitos conflitos, forcando os \u00f3rg\u00e3os a se comunicar para resolver os conflitos e fechar uma solu\u00e7ca\u00e3o que seja adequada para todos. Dada a extrema dificuldade e morosidade deste procedimento, t\u00eaem-se aceitado como adequada qualquer solu\u00e7c\u00e3ao que atenda a demanda, sem preocupa\u00e7c\u00e3oes com a redu\u00e7c\u00e3ao\nde custos, entre outros aspectos.\nEnquanto o problema de planejamento mensal mant\u00e9m-se sem abordagens computacionais, j\u00e1 \u00e9 conhecido que a dificuldade do problema de agendamento di\u00e9rio est\u00e9 diretamente ligada ao fato dele ser classificado como NP-Dif\u00e1cil [33]. Neste ambito, \u00e9 comum a utiliza\u00e7ao de ferramentas computacionais para fornecer soluc\u00f5es melhores e mais rapidamente para o problema. Outros trabalhos j\u00e1 trataram problemas semelhantes e a realidade brasileira tamb\u00e9m j\u00e1 foi alvo de outras pesquisas, como ser\u00e1 abordado no cap\u00edtulo 3. No entanto, dados os inumeros detalhes a serem considerados, nenhuma dessas soluc\u00f5es poderia ser adotada para operar redes complexas.\nEssa disserta\u00e7c\u00f5ao apresentar\u00e9a uma formaliza\u00e7c\u00f5ao para o problema de planejamento mensal da opera\u00e7c\u00f5ao da rede de oleodutos e tamb\u00e9em uma nova abordagem para o agendamento di\u00e9rio dessas operac\u00f5es. O objetivo \u00e9 fornecer uma ferramenta \u00fatil \u00e0s empresas, tratando o m\u00e9aximo de especificidades, sem abusar de simplifica\u00e7c\u00f5oes.\n1.1\tContextualiza\u00e7\u00e3o\nO problema em questao foi apresentado pela Petrobras [42], que possui uma rede de oleodutos com cerca de 11.300 km de extensao, contendo 15 refinarias e 54 terminais. A Petrobras forneceu todos os dados necess\u00e9rios para a definic\u00f5o das inst\u00e2ncias usadas na realiza\u00e7ao de testes e valida\u00e7\u00f5o dos algoritmos. H\u00e9 tamb\u00e9m uma interface gr\u00e9fica, desenvolvida pela Petrobras, para visualiza\u00e7ao e verificac\u00f5o de viabilidade de solu\u00e7\u00f5es.\nO projeto rendeu duas disserta\u00e7c\u00f5oes, esta apresentada aqui e outra apresentada em 2008 por Andr\u00e9 Cir\u00e9 [10]. Os trabalhos foram desenvolvidos em conjunto e totalizaram 3 artigos publicados e um submetido. O capitulo 6 comparar\u00e9 os artigos apresentados por Andr\u00e9e Cir\u00e9e com alguns dos resultados apresentados nesta disserta\u00e7ca\u00f5o. Al\u00e9em disso, por ser um problema comum em ambas as disserta\u00e7co\u00f5es, os cap\u00e9tulos 2, 3 e 4 s\u00f5ao compartilhados e apresentados aqui com revis\u00f5oes e altera\u00e7c\u00f5oes pontuais.\n1.2\tOrganiza\u00e7\u00e3o do Texto\nO Problema de Planejamento e Agendamento de Opera\u00e7\u00f5es em uma Rede de Oleodutos (PPAORO) \u00e9 explicado detalhadamente no cap\u00e9tulo 2. Uma revis\u00f5o bibliogr\u00e1fica do problema \u00e9e descrita no cap\u00e9tulo 3. No cap\u00e9tulo 4 \u00e9e proposta a decomposi\u00e7ca\u00f5o do problema em duas partes, o planejamento mensal e o agendamento di\u00e9ario. O cap\u00e9tulo 5 d\u00e9a uma pequena introdu\u00e7ao \u00e0s notac\u00f5es e metodologias necess\u00e9rias para as modelagems propostas. Em seguida, o cap\u00e9tulo 6 cont\u00e9m o artigo publicado no peri\u00f3dico Constraints com o modelo em programac\u00e7\u00f5ao por restric\u00e7\u00f5oes para resolu\u00e7c\u00f5ao do problema de agendamento\ndi\u00e1rio. O artigo tamb\u00e9m discute uma abordagem heur\u00edstica inicial para o problema de planejamento mensal. O cap\u00edtulo 7 exp\u00f5e o artigo submetido ao peri\u00f3dico Computer &amp; Chemical Engineering com o modelo em fluxo em redes para resoluc\u00f5o do problema de planejamento mensal. Por fim, o Cap\u00edtulo 8 apresenta uma conclus\u00f5o e prop\u00f5e poss\u00edveis trabalhos futuros.\nCap\u00edtulo 2\nEmpresas de petr\u00f3leo disp\u00f5em usualmente de um conjunto de refinarias e terminais, denominados \u00f3rg\u00e3os, os quais sao dedicados \u00e0 produ\u00e7\u00f5o e distribui\u00e7\u00e3o de derivados de petr\u00f3leo e bio-combust\u00edveis aos seus mercados consumidores. As campanhas de produ\u00e7\u00f5o das refinarias e de entrega aos mercados sao traduzidas, respectivamente, em valores estimados de produ\u00e7ao e demanda de produtos em cada \u00f3rg\u00f5o da rede [6, 9].\nContudo, os \u00f3rg\u00f5os n\u00f5o sao auto-suficientes no suprimento de seus mercados locais. Torna-se necess\u00f3rio, portanto, o uso de algum meio de distribuido para evitar a falta de produto nos terminais e para escoar a produ\u00e7\u00f5o em excesso nas refinarias. Tal transporte \u00f3 predominantemente feito por meio de uma rede de dutos, a alternativa mais vantajosa em termos econ\u00f4micos, operacionais e ambientais [43].\nOs dutos devem ter respeitadas suas capacidades, seus sentidos permitidos de fluxo e suas vaz\u00f5es de bombeamento. Um duto pode ser usado para movimentar diferentes tipos de produto consecutivamente. Note que alguns dutos permitem vaz\u00f5o em ambos os sentidos, com invers\u00f5es de fluxo. Outra caracter\u00edstica operacional \u00e9 que os dutos devem estar sempre completamente preenchidos, ou seja, a extra\u00e7c\u00f5ao de um volume implica que necessariamente outro volume deve ser bombeado simultaneamente.\nOs produtos, por sua vez, est\u00f5o associados a um conjunto de restri\u00e7\u00f5es de interface, isto \u00e9, apenas podem ser bombeados consecutivamente em um duto se forem compat\u00f3veis entre si, condicao essencial para a manutencao de um n\u00edvel de qualidade aceit\u00f3vel. Para os produtos que circulam nos dutos, cada \u00f3rg\u00f5o tamb\u00f3m apresenta restri\u00e7\u00f5es locais de bombeamento e recebimento de produtos, decorrentes das conexo\u00f5es internas entre tanques e dutos.\nO Problema de Planejamento e Agendamento de Opera\u00e7\u00f5es em uma Rede de Oleodutos (PPAORO), desta forma, consiste em determinar as opera\u00e7\u00f5es a serem realizadas em uma rede de dutos a fim de escoar a produ\u00e7ao e atender um dado conjunto de demandas, considerando um horizonte temporal pr\u00e9-estabelecido. Esta programa\u00e7\u00f5o deve satisfazer todas as restri\u00e7\u00f5es operacionais espec\u00e9ficas dos orgaos e dutos, al\u00e9m de buscar reduzir os custos de transporte pelo sistema.\nEste cap\u00e9tulo \u00e9 compartilhado com a disserta\u00e7\u00f5o de Andr\u00e9 Cir\u00e9 [10] e apresentado aqui com revis\u00f5oes e altera\u00e7c\u00f5oes pontuais.\n2.1\tCaracteriza\u00e7\u00e3o do PPAORO\nA seguir, sa\u00f5o descritos os dados e restri\u00e7c\u00f5oes que formalizam o PPAORO, necess\u00e9arios para definir as inst\u00e2ncias e suas solu\u00e7\u00f5es validas. Tal caracteriza\u00e7\u00f5o pode ser dividida em quatro classes: par\u00e2metros e constantes gerais do problema, restri\u00e7\u00f5es dos \u00f3rg\u00e3os, restri\u00e7\u00f5es dos dutos e dados din\u00e2micos da rede. As tr\u00e2s primeiras classes est\u00f5o relacionadas \u00e0 topologia f\u00edsica e pouco mutavel da rede, enquanto a ultima varia conforme o horizonte de planejamento.\n2.2\tPar\u00e2metros e Constantes Gerais\nH\u00e1 quatro par\u00e2metros fundamentais para o PPAORO, conforme rela\u00e7\u00f5o abaixo.\n1.\tUnidade de Tempo (u.t.): designa a unidade de tempo real que ser\u00e9 utilizada para a discretiza\u00e7\u00f5o da inst\u00e2ncia e precisao dos modelos desenvolvidos. Nos cen\u00e9rios reais, \u00e9 comum que seja utilizado minuto como a u.t. b\u00e9sica.\n2.\tUnidade de Volume (u.v.): analogamente \u00e0 u.t., designa a unidade de volume real que ser\u00e9 utilizada para as vazoes e capacidades. Usualmente sao metros c\u00fabicos.\n3.\tHorizonte (H): um numero inteiro que designa o horizonte de execucao em unidades de tempo, isto \u00e9e, o tamanho da janela de tempo da inst\u00e2ancia na qual o planejamento e agendamento devem ser aplicados. Considera-se tamb\u00e9em que o instante inicial de planejamento \u00e9 1. Por exemplo, dados H = 14400 e u.t. em minutos, t\u00e2m-se um horizonte de 10 dias em tempo real.\n4.\tConjunto de Produtos (P): o conjunto P = {pi,p2, \u25a0 \u25a0 \u25a0 ,pnp} designa os produtos que s\u00f5ao armazenados e transportados pela rede. Um grupo de produtos e um subconjunto de P formado por produtos com certas caracter\u00edsticas qu\u00edmicas semelhantes, tais como os grupos de gasolinas, dieseis e alcoois. Algumas restric\u00e7\u00f5oes, tal como as\nde interface, podem ser definidas sobre grupos ao inv\u00f3s de produtos individuais, facilitando a representa\u00e7c\u00e3ao do problema.\n__\tz\n2.2.1\tRestricoes nos \u00d3rg\u00e3os\nUma rede de dutos possui um conjunto de \u00f3rgaos Org = {o1,o2,... ,ono}, responsaveis pela produc\u00e3o, armazenamento e distribuic\u00e3o de produtos. Um numero significativo das restricoes de um determinado orgao o G Org est\u00f3 relacionado com seu complexo de tanques, dado pelo conjunto T(o) = {t1,t2,... ,tnto}. Tais restri\u00e7\u00f5es s\u00e3o descritas a seguir, com Tq = |JoeOrfl T(o).\nC1: Para um dado tanque t G Tq, deve-se respeitar sua capacidade m\u00f3xima de armazenamento cap(t) e nunca violar sua capacidade m\u00ednima, que \u00f3 zero.\nC2: Um tanque t G Tq pode armazenar apenas um tipo de produto prod(t) G P durante todo o horizonte de planejamento, condi\u00e7ao imposta como um requisito de qualidade. Al\u00f3m disso, usualmente h\u00f3 mais de um tanque por produto em cada \u00f3rg\u00e3o, mas n\u00e3o necessariamente um \u00f3org\u00e3ao cont\u00f3em tanques para todos os produtos da rede. Se T(o) = 0 para um dado o G Org, o \u00f3rg\u00e3o \u00f3 denominado entroncamento, isto \u00f3, utilizado apenas para a passagem de produtos.\nNo cenario real, ha casos em que certos tanques podem ser utilizados para o armazenamento de produtos diferentes dos originalmente atribu\u00eddos, o que envolve a aplica\u00e7ao de um custo fixo relativo \u00e0 limpeza e a outros detalhes operacionais. Como s\u00e3ao casos indesej\u00f3aveis e muitas vezes provenientes da dificuldade do planejamento manual, a restri\u00e7ao C2 \u00f3 inclusive requisitada pelos operadores da Petrobras.\nC3: Um produto pode ser tanto bombeado para um tanque quanto retirado dele, desde que essas opera\u00e7\u00e3es n\u00e3o sejam simultaneas. Isto significa que, ao iniciar uma inser\u00e7\u00e3o ou retirada em um tanque, toda a opera\u00e7ca\u00e3o deve ser completada antes que qualquer outra seja realizada neste tanque.\nUma exce\u00e7\u00e3o a este caso ocorre em \u00f3rg\u00e3os que representam terminais portu\u00f3rios. Devido ao per\u00edodo restrito em que os navios podem ficar parados nos portos, muitas vezes volumes de produtos devem ser enviados diretamente dos dutos para os navios sem pr\u00f3-estocagem. Para tanto, realiza-se uma operacao pulm\u00e3o, onde o produto \u00f3 simultaneamente bombeado nos dutos para um tanque, e do tanque para o navio com uma vaz\u00e3ao menor. No entanto, a opera\u00e7c\u00e3ao pulm\u00e3ao \u00f3e apenas poss\u00f3vel para alguns \u00f3rgaos que possuem esta capacidade hidr\u00f3ulica, definido pelo conjunto Pulm G Org.\nAl\u00e9m disso, como hip\u00f3tese, um tanque que esvaziou pode ser reabastecido sem que seja necessario considerar um tempo para limpeza e preparo para o armazenamento de volume adicional.\nC4: Se o produto a ser inserido em um tanque e produzido localmente, isto e, no mesmo org\u00e3o, o tanque so pode receber este produto se estiver completamente vazio, condic\u00e3o imposta tambem por quest\u00e3es de qualidade.\nC5: Caso ocorra a mistura de dois volumes produzidos em org\u00e3os distintos num certo tanque, a qualidade do produto devera ser reverificada antes da entrega ao mercado consumidor ou bombeamento para outros org\u00e3os. Isto e representado aqui como um tempo de certifica\u00e7\u00e3o, Tc, considerado entre o instante final em que se der a mistura e o instante inicial das demais operac\u00e3oes no tanque.\nUma vez definidas as condic\u00e3es de armazenamento de produto nos orgaos, e poss\u00edvel listar as restri\u00e7\u00f5es referentes as necessidades de estocagem impostas pelos mercados, al\u00e9m daquelas relacionadas aos limites de envio e recebimento.\nC6: O valor de estoque de um \u00e9rgao o G Org, produto p G P e instante i \u00e9 dado somandose o volume em i de todos os tanques em T(o) que armazenam p. Em todos os \u00e9rg\u00e3os e instantes, tal estoque deve respeitar limitantes de estoque m\u00ednimo, estxmin(o,p), e estoque m\u00e1ximo, est_max(o,p). Esta restri\u00e7ao \u00e9 proveniente da necessidade de se manter estoques de seguran\u00e7ca para for\u00e7car o escoamento da produc\u00e7\u00e3ao atrav\u00e9es da rede e para eventuais problemas na distribui\u00e7ca\u00e3o, tal como manutenc\u00e7\u00e3oes emergenciais de dutos.\nC7: Devido as restric\u00e3es sobre o conjunto de bombas e v\u00e1lvulas hidr\u00e1ulicas em um certo org\u00e3o o G Org, deve ser observado um numero m\u00e3ximo de opera\u00e7\u00f5es simult\u00e2neas de envio, env_max(o). Como s\u00e3o relativas aos bombeamentos, n\u00e3o h\u00e1 uma restri\u00e7\u00e3o an\u00e9aloga para recebimento de produtos em o.\nC8: Alinhamentos proibidos: o complexo de conexoes internas aos orgaos, principalmente refinarias, n\u00e3ao permite que determinadas opera\u00e7c\u00e3oes em oleodutos ocorram simultaneamente. Cada configura\u00e7ao nao-pass\u00edvel de uso para transporte de produtos \u00e9e associada a um alinhamento proibido, um c\u00e9odigo que agrupa as opera\u00e7c\u00e3oes proibidas de serem exercitadas simultaneamente no \u00e9org\u00e3ao.\nSupondo que Align(o) sejam os alinhamentos proibidos de o G Org, cada alinhamento alin G Align(o) \u00e9 formado por um conjunto de duplas (p, s), onde p G P e s (sentido) indica se a operac\u00e3o e relativa ao envio ou recebimento. Por exemplo, o alinhamento alin = {(gasolina, envio), (diesel, recebimento)} significa que as\nopera\u00e7\u00f5es de envio de gasolina e recebimento de diesel n\u00e3o podem ser simult\u00e2neas. Um certo alinhamento pode envolver diversos produtos e diferentes dire\u00e7\u00f5es de fluxo. Al\u00e9m disso, como esta relacionado \u00e0s conex\u00f5es internas de um \u00f3rg\u00e3o, n\u00e3o depende dos dutos de entrada ou sa\u00e9da de produto.\nEssa forma de representac\u00f5o facilita a modelagem do PPAORO, evitando a necessidade de explicitar detalhes da topologia dos circuitos hidr\u00e9aulicos e dutos internos ao \u00e9orga\u00f5o.\nC9: Devido principalmente ao custo mais alto da energia el\u00e9trica em certos per\u00e9odos do dia, um \u00f3rg\u00e3o deve obededer a per\u00edodos de sazonalidade, momentos em que nenhuma operacao pode ser iniciada. Para um dado \u00f3rgao o G Org, per\u00edodos de sazonalidades s\u00e3o dados como um conjunto de intervalos de tempo, saz(o) = {(\u00cdn\u00cdC\u00cdoi, f\u00edmi), . . . , (\u00edn\u00edc\u00edonsaz(o), f\u00edmnsaz(p))'}-\nC10: Opera\u00e7\u00e3es tamb\u00e9m n\u00e3o podem ser nem iniciadas, nem terminadas, durante as trocas de turno de trabalho nos v\u00f3rios orgaos. Estas trocas s\u00e3o dadas de forma an\u00f3loga aos per\u00edodos de sazonalidade, tt(o) = {(\u00edn\u00edc\u00edo1, f\u00edmi),..., (\u00edn\u00edc\u00edott(o), f\u00edmtt(o))}, o G Org.\n2.2.2\tRestri\u00e7\u00f5es dos Dutos\nA rede esta associada a um conjunto Dt = {d1, d2,..., dnd} de dutos, onde cada d G Dt conecta um par de orgaos orgs(d) = (o\u00ed, oj), com o\u00ed, oj G Org. No caso, o\u00bf \u00f3 denominado \u00f3rg\u00e3o ou extremidade de origem e oj, \u00f3rg\u00e3o ou extremidade de destino do duto d. O sentido de fluxo da extremidade de origem \u00e0 de destino corresponde ao sentido principal do duto, ou p(d). Ja o sentido de fluxo contr\u00f3rio corresponde ao sentido reverso do duto, ou r(d). Outra caracter\u00f3stica \u00f3e que dois \u00f3org\u00e3aos podem estar conectados por mais de um duto, o que \u00f3 usual nas instancias reais. Volumes tamb\u00f3m podem ser transmitidos diretamente de um duto para outro, sem a necessidade de serem armazenados temporariamente em \u00f3org\u00e3aos intermedia\u00f3rios.\nA partir dos \u00f3rg\u00e3os e dutos, define-se tamb\u00f3m o conceito de rotas. Uma rota r \u00f3 composta por uma seq\u00fc\u00e2ncia de pares de \u00f3rg\u00e3os separados por dutos, representando um percurso v\u00f3alido atrav\u00f3es da rede. As rotas poss\u00f3veis s\u00e3ao prefixadas e informadas como par\u00e2metro: se um certo volume de produto v for transmitido de um \u00f3rg\u00e3o o\u00ed da rede at\u00f3 um \u00f3rgao oj, passando por um ou mais orgaos e dutos intermedi\u00e1rios na sequ\u00e2ncia d1, o\u00ed+1,..., oj-1, dn, j = \u00ed + n, necessariamente a rota r = (o\u00ed, d1, o\u00ed+1,..., oj-1, dn, oj) deve existir. Note que os volumes s\u00e3ao transmitidos diretamente entre os dutos inter-medi\u00f3arios de uma rota, sem perdas ou armazenamento nas conexo\u00e3es intermedi\u00f3arias.\nAs restri\u00e7c\u00e3oes referentes aos dutos sa\u00e3o listadas a seguir.\nC11: Os dutos s\u00e3o pressurizados e, portanto, devem sempre estar completamente preenchidos com produtos. A capacidade volumetrica de um duto d G Dt \u00e9 definida por voi(d).\nTambem e considerada uma conserva\u00e7ao de massa ideal: para se retirar um determinado volume v de uma extremidade do duto, deve-se inserir o mesmo volume v em sua outra extremidade. Tal volume pode ser proveniente de um tanque ou mesmo de um outro duto, interligado ao mesmo org\u00e3o atraves de uma de suas extremidades.\nC12: As vaz\u00f5es de bombeamento em um duto sao limitadas por produto, devido \u00e0s suas viscosidades, e pelo sentido de fluxo, decorrente das diferencas na capacidade das bombas entre os orgaos de origem e destino e inclina\u00e7\u00e3o do terreno. Usualmente du-tos em terrenos inclinados possuem uma vaz\u00e3ao de descida maior que a de subida. Os limites inferior e superior das vaz\u00e3es para um duto d G Dt, produto p G P e sentido s G {p(d),r(d)} s\u00e3o dados, respectivamente, por vzjinf (d,p,s) e vz_sup(d,p, s).\nAssim, para se bombear um certo volume em um duto, deve-se considerar todos os produtos e sentidos dos dutos nas rotas que ser\u00e3o movimentadas como consequ\u00eancia do bombeamento. A vaz\u00e3o maxima de bombeamento sera, portanto, o m\u00e9nimo das vazoes superiores destes produtos nos seus respectivos sentidos. J\u00e9 a vazao m\u00e9nima de bombeamento ser\u00e9a dada pelo m\u00e9aximo das vaz\u00e3oes inferiores.\nOs par\u00eametros vz_inf (d,p, s) e vz_sup(d,p, s) tambem indicam os sentidos poss\u00edveis de fluxo para os produtos em um duto. Por exemplo, se um produto p s\u00e9 puder trafegar no sentido principal do duto, ent\u00e3o vz-inf (d,p, r(d)) = vzsup(d,p, r(d)) = 0.\nC13: Devido \u00e0 quest\u00e3es operacionais das bombas de cada org\u00e3o, deve-se respeitar tambem uma quantidade m\u00ednima de bombeamento ao se injetar produtos nos dutos. O volume bombeado em um duto tamb\u00e9m pode ser denominado de batelada, e esta restri\u00e7\u00e3o tambem \u00e9 comumente referenciada como tamanho m\u00ednimo de batelada na literatura. Tal quantidade \u00e9 definida por duto d G Dt, produto p G P e sentido s G {p(d), r(d)}, dada por qtde-min(d,p, s).\nC14: Dois produtos em contato num certo duto devem ser compat\u00edveis. Pares incompat\u00edveis s\u00e3o dados pelo conjunto de duplas Incomp = {(gix,gj1),..., (gin ,gjn)}, onde gk C P \u00e9 um grupo de produtos.\nEsta restri\u00e7\u00e3o est\u00e1 ligada \u00e0 manuten\u00e7\u00e3o da qualidade dos produtos, de forma a evitar a degrada\u00e7\u00e3o decorrente da mistura (ou interface) entre tipos qu\u00e9micos diferenciados. Caso seja absolutamente necess\u00e9ario enviar dois produtos incompat\u00e9veis em sequ\u00eancia, deve-se interpor entre eles um terceiro produto, compat\u00e9vel com ambos, chamado de selo. O volume de selo depende do oleoduto , dos produtos em\nquestao e do sentido do fluxo, e e dado por selo(d,p, q, s), para d G Dt, p,q G P e s G {p(d),r(d)}.\nC15: Os dutos possuem per\u00edodos de manuten\u00e7\u00e3o espec\u00edficos, momentos em que s\u00e3o realizados reparos e limpeza. Os per\u00edodos de manuntenc\u00e3o s\u00e3o dados por manut(d) = {mnuti,mnut2,... ,mnutnm(d)}, d G Dt. Cada elemento mnuti = (inicio, fim) indica que, durante os instantes inicio e fim, n\u00e3o poder\u00e2o ocorrer movimenta\u00e7\u00e3es de produtos em nenhum sentido do duto.\n2.2.3\tDados Din\u00e2micos da Rede\nOs dados din\u00e2micos s\u00e3o par\u00e2metros que n\u00e3o se referem \u00e0 topologia f\u00edsica da rede, mas s\u00e3o espec\u00edficos da instancia a ser tratada pelo algoritmo. Podem ser divididos em tr\u00e2s grupos: dados relativos ao estado inicial da rede, relativos \u00e0 produc\u00e3o e relativos a demanda.\nOs dados do estado inicial da rede s\u00e3ao dois:\n1.\tEstoque inicial dos tanques, indicando o produto e o volume inicial nos tanques.\n2.\tConte\u00fado inicial dos dutos, dado para todos os dutos por uma seq\u00fc\u00e2ncia da forma DIni(d) = {(pm, qm, rm),..., (pn, qn, rra)}, d G Dt. A tripla (p, qj, rj) representa, respectivamente, um produto pj G P, sua quantidade qj e a rota que deve seguir, rj. Desta forma, considera-se que os produtos inicialmente nos dutos ja\u00ed possuem um destino pr\u00ede-estabelecido, que obrigatoriamente deve ser respeitado pelas solu\u00e7c\u00e3oes geradas. A ordem das tuplas na sequ\u00e2ncia DIni(d) refere-se ao sentido principal de fluxo no duto.\nAs campanhas de produ\u00e7c\u00e3ao para cada o\u00edrga\u00e3o o G Org s\u00e3ao definidas pelo conjunto Pr(o) = {pri,pr2,... ,prnpr}, onde cada elemento pri G Pr (o) \u00ed formado pela tupla (p,v, inicio_pr, fim_pr). No caso, p G P \u00ed o produto que ser\u00ed refinado, v um inteiro n\u00e3o-negativo que representa o volume produzido e, por fim, [inicio_pr, fim_pr] representa o intervalo de tempo em que a produ\u00e7c\u00e3ao ocorrera no org\u00e3ao.\nO volume v produzido e distribu\u00eddo uniformemente entre as t = fimpr \u2014 inicimpr + 1 unidades de tempo, isto \u00e9, a cada instante ser\u00e2o produzidas \\v/t\\ unidades de volume (u.v.). A produc\u00e3o pode ser distribu\u00edda em diferentes tanques durante este intervalo, contanto que estejam vazios imediatamente antes de a receberem (restric\u00e3o C4).\nJa as demandas sao dadas de forma simetrica as producoes. Para o \u00edrg\u00e3o o G Org, \u00ed definido o conjunto Dem(o) = {dem\\,dem2,... ,demndem}, onde cada elemento demi G Dem(o) \u00ed formado pela tupla (p, v, inicimdem, fim_dem). T\u00e2m-se que p G P \u00ed o produto da demanda, v \u00ede um inteiro n\u00e3ao-negativo que representa o volume demandado e, por fim, [inicioodem, fimodem] representa o intervalo de tempo em que a demanda ocorrer\u00ed no\n2.3.\tSolu\u00e7ao e Objetivos\n11\norgao o. O volume v demandado \u00e9 distribu\u00eddo uniformemente entre as t = fim.dem \u2014 inicio_dem + 1 unidades de tempo, isto \u00e9, a cada instante ser\u00e2o extra\u00eddas \\v/t\\ unidades de volume (u.v.). Tal como a produc\u00e3o, demandas podem ser absorvidas de diferentes tanques durante este intervalo.\n2.3\tSolu\u00e7\u00e3o e Objetivos\nUma solu\u00e7\u00e3o \u00e9 formada por uma programa\u00e7ao de movimentos de entrada nos dutos. Cada movimento \u00e9 designado pela tupla m = (p, r,v, inicio_m, fim_m,ts,te), isto \u00e9, por um produto p E P, uma rota r cadastrada, o volume v positivo do produto, os instantes de in\u00edcio, inicio_m, e fim, fimjm, de bombeamento do produto no primeiro duto da rota e, por fim, pelos tanques de sa\u00edda ts E Tq e de entrada te E Tq, de onde o volume sera extra\u00eddo e onde sera armazenado, respectivamente. O conjunto de movimentos deve ser tal que respeite todas as restricoes nos \u00f3rg\u00e3os e dutos, al\u00e9m de satisfazer as campanhas de produc\u00e3o e demandas em cada \u00f3rg\u00e3o.\nNo modelo proposto aqui, o foco ser\u00f3 dado a satisfac\u00e3o de restri\u00e7\u00e3es ao inves da otimiza\u00e7ao de uma certa func\u00e3o objetivo, devido \u00e0 alta complexidade de se obter soluc\u00e3es vi\u00f3veis para o PPAORO. Assim, custos relativos a utiliza\u00e7\u00e3o dos dutos e tanques sao desconsiderados. Isto \u00e9 condizente com a pratica atual realizada pela Petrobras, na qual o correto atendimento da demanda \u00f3e priorit\u00f3ario frente aos demais custos.\n2.4\tModelo da Rede de Dutos\nA figura 2.1 apresenta um modelo esquem\u00f3tico simples de uma rede de dutos. Cada \u00f3org\u00e3ao Di apresenta seu pro\u00f3prio conjunto de tanques, e note que mais de um duto pode ser utilizado para conectar dois \u00f3rg\u00e3os distintos, tal como ocorre entre D2 e D3.\nPara que dois produtos fiquem em contato no duto, como em P2, ambos devem ser compat\u00f3veis entre si, obedecendo a restri\u00e7\u00e3o C14. Se o \u00f3rg\u00e3o D0 possuir um numero m\u00f3ximo de envios simult\u00eaneos igual a 1 (restric\u00e3o C7), ent\u00e3o produtos n\u00e3o podem ser injetados simultaneamente em P0 e Pl a partir de D0. Alem disso, caso existir um alinhamento proibido (restri\u00e7ao C8) de recebimento de produtos Fl (cor cinza) e F2 (cor escura) no org\u00e3o D3, ele nao podera receber produtos dos dutos P3 e P4 simultaneamente.\nPor fim, um exemplo de rota seria r = (Dl, P2,D2, P4, D3). Se o destino do produto Fl (cor cinza) do duto P2 for o \u00f3rgao D3 pela rota r, a vazao aplicada para empurrar o duto P2, no caso a partir de Dl, deve ser consistente com as vaz\u00e3es dos produtos tanto de P2 como do duto P4, que tambem sera empurrado.\nFigura 2.1: Modelo esquem\u00e1tico de uma rede de dutos.\n2.5\tTopologia Brasileira\nA especifica\u00e7\u00e1o do PPAORO aqui descrita agrega as principais restri\u00e7\u00f5es abordadas na literatura do problema, alem de representar com certa fidelidade a realidade enfrentada pelos planejadores e operadores de dutos. Ela foi concebida a partir da analise bibli-ografica do PPAORO e, principalmente, apos diversas reuni\u00f5es juntos aos gerentes da PETROBRAS.\nA disserta\u00e7\u00f5o focara na rede de dutos da regiao Sudeste do Brasil, gerenciada pela Petrobras e representada na figura 2.2. Esta rede \u00e9 composta por 14 org\u00f5os, 29 dutos, cerca de 240 tanques e mais de 30 produtos. O horizonte de planejamento e de cerca de 10 dias.\nFigura 2.2: Representa\u00e7\u00e3o do sistema de dutos da regi\u00e3o Sudeste de S\u00e3o Paulo (figura fornecida pela Petrobras).\nCap\u00edtulo 3\nRevis\u00e3o Bibliogr\u00e1fica\nO problema abordado nesta disserta\u00e7\u00f5o engloba um conjunto de restri\u00e7\u00f5es bastante complexo e diversificado, relacionando fatores como capacidade de estocagem, sequenciamento de produtos nos dutos e condi\u00e7c\u00f5oes de balanceamento de massa em sua especifica\u00e7c\u00f5ao mais geral. O trabalho de [33] demonstra que basta considerar a restri\u00e7\u00f5o C14, de interfaces entre produtos, para que o PPAORO seja classificado como NP-Dificil [40].\nNa literatura, o problema \u00e9 usualmente conhecido como Multiproduct Pipeline Scheduling e diversos trabalhos se propuseram a apresentar abordagens heur\u00edsticas ou exatas para sua resolu\u00e7\u00f5o. Contudo, em decorr\u00e2ncia da grande aplicabilidade pr\u00e1tica do problema, os trabalhos existentes diferem bastante na forma como definem e adaptam restri\u00e7\u00f5es \u00e0s suas respectivas realidades. Desta forma, tr\u00e2s pontos s\u00f5o essenciais para a compreens\u00f5o de cada proposta de modelagem: a topologia da rede, o m\u00e1etodo de resolu\u00e7ca\u00f5o aplicado e, por fim, os resultados computacionais e a operacionalidade das solu\u00e7c\u00f5oes.\nH\u00e1 pesquisas dedicadas \u00e0 revisao bibliogr\u00e1fica do PPAORO, tais como [17, 50], que apresentam uma ana\u00e1lise bastante detalhada das abordagens existentes na \u00e1area. Assim, a revis\u00f5ao aqui descrita procurar\u00e1a destacar as propostas mais relevantes e que serviram como base para o desenvolvimento da abordagem aqui discutida. A tabela 3.1 sintetiza as caracter\u00e1sticas de tais propostas e a compara com este trabalho.\nEste cap\u00edtulo \u00e1 compartilhado com a disserta\u00e7ao de Andre Cir\u00e1 [10] e apresentado aqui com revis\u00f5oes e altera\u00e7c\u00f5oes pontuais.\nDentre tais trabalhos, o estudo mais completo da \u00e1area \u00e1e realizado por Camponogara\n[9], cujas caracter\u00edsticas mais se aproximam da realidade quando comparadas aos demais trabalhos. Nele, define-se um Problema de Transporte de Derivados de Petr\u00f3leo Simplificado, ou PTDPS, no qual as vaz\u00f5es s\u00f5o fixas por duto, todas as bases s\u00f5o capazes de armazenar todos os produtos (eliminando-se, assim, a transmiss\u00f5ao de produtos duto-duto), e nao h\u00e1 trocas de turno ou manuten\u00e7\u00f5es programadas. Tamb\u00e1m desconsideram-se estoques m\u00e1nimos por base e quantidades m\u00e1nimas por opera\u00e7c\u00f5ao. Os tanques, por sua vez,\n\t[3, 2]\t[7, 20, 44, 45]\t[8, 35, 6]\t[16, 15, 23]\t[30]\t[46, 48, 47]\tProposto\n\u00d3rg\u00e3os\t8\t5\t12\t7\t2\t2\t14\nDutos\t8\t4\t28\t7\t1\t1\t29\nTanques\t40\t25\t84\t28\t16\t12\t242\nProdutos\t5\t4\t7\t4\t8\t6\t32\nHorizonte\t14 dias\t3 dias\t5 dias\t4 dias\t5 dias\t30 dias\t10 dias\nTempo cont\u00ednuo\t\tr\u00ed\tr\u00ed\t\t\t\tr\u00ed\nVazao variavel\t\tr\u00ed\t\t\tr\u00ed\tr\u00ed\tr\u00ed\nTanques individuais\t\t\t\t\tr\u00ed\t\tr\u00ed\nRede Generica\tr\u00ed\t\tr\u00ed\tr\u00ed\t\t\tr\u00ed\nIncompatibilidades\t\tr\u00ed\tr\u00ed\t\tr\u00ed\tr\u00ed\tr\u00ed\nTecnicas\tGA\tPLM,VNS, PLM,PLI\tA-Teams, GRASP,PLM\tAE+PLM\tPLM+PR\tPLM\tPLM+PR\nSolu\u00e7\u00f5es\tViavel\t(\u00d3timo\tInvi\u00e1vel Vi\u00e1vel,Vi\u00e1vel\tViavel\tOtimo\tOtimo\tVi\u00e1vel\nTabela 3.1: Compara\u00e7\u00e3o entre abordagens anteriores.\ns\u00e3o agregados, isto \u00f3, ha um tanque por \u00f3rg\u00e3o com capacidade equivalente a soma de todos os tanques que armazenam o produto em quest\u00e3o.\nPara a resolu\u00e7\u00e3o do PTDPS, o trabalho de [9] prop\u00f4s duas t\u00f3cnicas distintas, uma exata e outra heur\u00edstica. A primeira, modelada como uma Programa\u00e7\u00e3o Linear Inteira (PLI) [52], buscava reduzir o PTDPS a um problema de Fluxo em Redes Multiper\u00edodos\n[5], com dutos e o\u00f3rg\u00e3aos como v\u00f3ertices e transmiss\u00e3oes de quantidade como arestas. Apesar da existencia de algoritmos com bom desempenho para problemas deste tipo, verificou-se que a resolu\u00e7c\u00e3ao do modelo PLI do PTDPS era impratica\u00f3vel, como consequ\u00f4encia do tamanho e densidade do grafo resultante da topologia da rede. Para as ultimas vers\u00e3es dos resolvedores comerciais de PLI at\u00f3e a publicac\u00e7\u00e3ao desta disserta\u00e7c\u00e3ao, o tempo m\u00f3edio para se obter uma solucao para a relaxa\u00e7\u00e3o linear do modelo foi de 50 horas x.\nA segunda tecnica proposta em [9] caracterizava-se pela aplicac\u00e3o de Times Ass\u00edncronos ao PTDPS, heur\u00edstica na qual diversos agentes aut\u00f4nomos tratam de partes distintas do problema, trocando de tempos em tempos informa\u00e7c\u00e3oes relevantes para a sua resolu\u00e7c\u00e3ao. Para viabilizar a aplica\u00e7\u00e3o da heur\u00edstica, o problema foi modelado como um Job Shop Scheduling [9], composto por dois agentes: um para a gera\u00e7ao de bombeamentos de quantidades entre bases e dutos, os jobs, e outro para o agendamento e simulac\u00e3o de tais bombeamentos nos dutos, equivalente ao processamento dos jobs em m\u00f3quinas (dutos).\nApesar de mais eficiente, a aplica\u00e7c\u00e3ao de Times Ass\u00f3ncronos proposta por [9] n\u00e3ao foi capaz de gerar soluc\u00e7\u00e3oes vi\u00f3aveis para as inst\u00f4ancias apresentadas, em decorr\u00f4encia das es-trat\u00f3egias essencialmente gulosas atribu\u00f3das aos agentes. Com esta perspectiva, Laber [35] utilizaram os Times Ass\u00edncronos como a fase gulosa de uma metaheur\u00edstica GRASP [49]\n1Usando a ferramenta CPLEX 11, em um computador Pentium D - 3.4Ghz com 2 GB RAM\npara o PTDPS, desenvolvendo uma busca local para o reparo das solu\u00e7\u00f5es. Como consequ\u00eancia, foram capazes de satisfazer todas as restri\u00e7\u00f5es consideradas no PTDPS, mas o tempo necess\u00e1rio para a ressimula\u00e7\u00f5o ap\u00f3s cada aplica\u00e7\u00f5o da busca local inviabilizava sua utilizac\u00e7\u00f5ao.\nPosteriormente, Braconi [6] relaxou o modelo PLI de Fluxo em Redes Multiper\u00edodos de [9], denominando a resolu\u00e7\u00f5o deste novo modelo Etapa de Planejamento. Esta solu\u00e7\u00f5o parcial era ent\u00f5o utilizada como parte de uma segunda heur\u00edstica, a Etapa de Agendamento, na qual atribu\u00eda-se tempos aos fluxos criados na primeira etapa. Esta t\u00e1cnica permitiu obter solu\u00e7oes rapidamente, mas as relaxacoes intr\u00ednsecas \u00e0 defini\u00e7ao do PT-DPS, tal como tanques para todos os produtos em todos os o\u00e1rga\u00f5os, tornavam as solu\u00e7c\u00f5oes encontradas pouco aplica\u00e1veis na pra\u00e1tica.\nOutro trabalho fundamentado na aplica\u00e7\u00f5o de heur\u00edsticas \u00f3 de Crane [13], no qual um Algoritmo Evolutivo [22] foi aplicado para uma vers\u00f5o bastante simplificada do PPAORO. Nela, a rede de dutos \u00f3 tratada como uma arvore direcionada com 8 n\u00f3s, e os estoques dos tanques possuem apenas tres estados poss\u00edveis: alto, medio e baixo. Restri\u00e7\u00f5es de interface e tamanho m\u00ednimo de bateladas s\u00f5o tambem desconsideradas. O algoritmo proposto foi capaz de gerar solu\u00e7\u00f5es para horizontes de ate 3 dias mas, devido \u00e0 forma como as solu\u00e7c\u00f5oes eram representadas, o algoritmo era capaz de lidar apenas com inst\u00eaancias pequenas com poucos tanques e o\u00edrg\u00f5aos.\nA tecnica desenvolvida por De La Cruz [15] tamb\u00e1m aplica um Algoritmo Evolutivo para uma versa\u00f5o simplificada do PPAORO, sem restri\u00e7c\u00f5oes de interface e com todos os dutos possuindo um mesmo dia\u00eametro e vaz\u00f5ao. No entanto, s\u00f5ao considerados dutos bidirecionais e uma fun\u00e7\u00f5o multi-objetivo, buscando reduzir interfaces e prazo de entrega dos produtos. Adicionalmente em [16], o autor tambem implementa um modelo PLI para o problema, usado para gerar parte das soluc\u00e7\u00f5oes que comp\u00f5oe a popula\u00e7c\u00f5ao do Algoritmo Evolutivo. Em todos os casos, o algoritmo foi capaz de gerar soluc\u00e7\u00f5oes para inst\u00eaancias pequenas rapidamente, especialmente com o uso de resolvedores PLI e como decorr\u00eaencia das simplificac\u00e7\u00f5oes.\nH\u00e1 ainda os trabalhos de Alves [3, 2], que tamb\u00e1m aplica um Algoritmo Evolutivo para uma varia\u00e7c\u00f5ao do PPAORO. No entanto, o procedimento desenvolvido foca na utiliza\u00e7c\u00f5ao de uma rede espec\u00edfica da Petrobras denominada rede de escuros, utilizada para o tra\u00edfego de produtos de grande viscosidade. O problema \u00ede similar ao PTDPS de [9], com tanques agregados e vaz\u00f5oes constantes, mas considerando tamb\u00edem tamanho das bateladas e uso de selos para separar produtos incompat\u00edveis. Al\u00edem disso, a fun\u00e7c\u00f5ao objetivo buscava minimizar o n\u00f5ao-atendimento da demanda. O algoritmo obteve bons resultados para um horizontes de 7 e 14 dias, discretizados em per\u00edodos de algumas horas.\nUma abordagem alternativa \u00ed descrita em Sasikumar [28], onde uma t\u00edcnica baseada em Intelig\u00eancia Artifical, denominada Beam Search, \u00ed agregada a heur\u00edsticas fortemente\nbaseadas na experi\u00eancia humana. A t\u00e9cnica e aplicada em uma rede indiana, com restri\u00e7\u00f5es de sequenciamento de produtos e estoques nos \u00e9rgaos. Apesar das simplifica\u00e7\u00f5es, s\u00f5o geradas boas programa\u00e7\u00f5es mensais para as inst\u00eancias em quest\u00f5o.\nAinda, os trabalho de Liporace [19] e Milidiu e Liporace [34] tratam o PPAORO como um problema de Planejamento em Intelig\u00eancia Artificial (PIA). Tal modelagem consiste em formular o problema genericamente como um conjunto de proposic\u00f5es l\u00e9gicas, cuja composi\u00e7ao de seus valores bin\u00e9rios representam um estado. O planejador ir\u00e9 identificar uma sequencia de acoes validas que leve o sistema do estado inicial ao estado-objetivo. Al\u00e9em de um planejador espec\u00e9fico para o problema, a especifica\u00e7c\u00f5ao do PPAORO como um PIA por Liporace foi inclu\u00edda no benchmark oficial da International Planning Competition [11], uma competic\u00f5o internacional de planejadores gen\u00e9ricos. Contudo, numa perspectiva pr\u00e9atica, os planejadores existentes resolvem apenas insta\u00eancias muito limitadas, com horizontes curtos, poucos tanques e poucas restri\u00e7\u00f5es.\nOutro foco de pesquisa est\u00e9a em topologias simples, compostas por apenas um duto e um conjunto de \u00e9org\u00f5aos conectados a ele. A motiva\u00e7ca\u00f5o \u00e9e que ela ja\u00e9 representa diversos casos praticos existentes no mundo, incluindo sub-redes da pr\u00f3pria Petrobras. Al\u00e9m disso, esta topologia permite considerar restri\u00e7\u00f5es mais complicadas referentes \u00e0s vazoes, inventa\u00e9rio, perdas de volume decorrentes da cria\u00e7c\u00f5ao de interfaces e custos de energia.\nNeste contexto, encontram-se os trabalhos de Rejowski e Pinto [26, 32]. Ambos apresentam uma formula\u00e7\u00f5o PLI de tempo discreto para o sistema OSBRA da Petrobras, composto por 5 \u00e9rg\u00f5os, 4 produtos e um duto que liga o estado de S\u00f5o Paulo \u00e0 Brasilia. S\u00f5o consideradas diversas restri\u00e7\u00f5es, tais como invent\u00e9rio nos \u00e9rgaos e sequ\u00eancias permitidas de bombeamento, al\u00e9m de uma fun\u00e7\u00f5o objetivo referente \u00e0 minimiza\u00e7\u00f5o de custos de estoque e de interface. Para um horizonte de 3 dias, os autores n\u00f5ao obtiveram a solu\u00e7c\u00f5ao \u00e9tima nos testes realizados. Contudo, em [44], o modelo \u00e9 fortalecido pela introdu\u00e7\u00f5o de cortes e se consegue, em um tempo computacional razo\u00e9avel, solu\u00e7co\u00f5es o\u00e9timas para todas as inst\u00eaancias anteriores.\nPara a mesma especifica\u00e7c\u00f5ao proposta por [44], Cafaro e Cerda\u00e9 [7] apresentam uma formulac\u00e7a\u00f5o baseada em uma representac\u00e7a\u00f5o cont\u00e9nua do tempo e dos volumes. Conforme explicado pelos autores, esta representac\u00e7\u00f5ao permite uma diminuic\u00e7\u00f5ao significativa do tamanho da formula\u00e7ca\u00f5o e do nu\u00e9mero de vari\u00e9aveis bina\u00e9rias. Os resultados s\u00f5ao comparados ao trabalho de [44], e mostram uma reduc\u00e7\u00f5ao de cerca de tr\u00eaes ordens de magnitude dos requisitos computacionais necess\u00e9arios para resolver o problema. A representa\u00e7c\u00f5ao por tempos cont\u00e9nuos tamb\u00e9em foi implementada por Rejowski e Pinto [45], considerando adicionalmente vazo\u00f5es vari\u00e9aveis de bombeamento e decis\u00f5oes relativas ao controle de invent\u00e9ario. Para tanto, o problema foi modelado como uma Programac\u00e7a\u00f5o N\u00f5ao-linear Inteira, baseado na formula\u00e7c\u00f5ao em [32]. O algoritmo resultante gerou boas solu\u00e7c\u00f5oes para poucos dias.\nUm outro direcionamento consiste em decompor o PPAORO em subproblemas mais\nf\u00e1ceis de serem tratados, ao inv\u00e9s de resolve-lo completamente com um modelo unico. O trabalho de Magat\u00f5o [29] prop\u00f5e uma divis\u00f5o em que tr\u00eas submodelos s\u00f5o processados sequencialmente. O modelo lida com uma rede composta por um duto conectando uma refinaria a um terminal portuario. A execu\u00e7\u00f5o inicia-se com um procedimento denominado Tanque Bound, caracterizado como um modelo em PLI respons\u00e1vel pela determina\u00e7\u00f5o dos recursos (i.e., tanques) a serem utilizados em todo o agendamento. Em seguida, a Rotina Auxiliar, basicamente heur\u00edstica, define alguns par\u00e2metros de entrada para o pr\u00e1ximo submodelo, como limites temporais que devem ser respeitados pelas tarefas no oleoduto. Por fim, o Modelo Principal, formulado como PLI e baseado nos par\u00eaametros fornecidos pelo Tanque Bound e pela Rotina Auxiliar, determina o sequenciamento e a temporizac\u00f5o das atividades de bombeamento no duto. A t\u00e1ecnica foi testada com sucesso na topologia em questa\u00f5o, considerando restri\u00e7c\u00f5oes de tancagem e de interface, al\u00e1em de vaz\u00f5ao constantes. Os autores prop\u00f5e tambem em [30] uma abordagem integrada entre PLI e Programac\u00f5o por Restric\u00e7\u00f5oes para resolver as mesmas inst\u00eaancias, gerando boas soluc\u00e7\u00f5oes.\nMais recentemente, um conjunto de trabalhos de Relvas apresenta um estudo sobre uma rede de dutos em Portugal, formada por um duto e dois \u00e1rg\u00f5os. Em [46, 48], os autores apresentam uma formula\u00e7ca\u00f5o PLI que considera diversas restric\u00e7o\u00f5es de controle de invent\u00e1rio, baseada em [7]. J\u00e1 em [47], o modelo anterior \u00e9 melhorado de forma que sejam consideradas paradas em dutos e vaz\u00f5oes vari\u00e1aveis, al\u00e1em do conceito de re-agendamento, em que o modelo \u00e1e resolvido ap\u00e1os perturba\u00e7co\u00f5es na soluc\u00e7\u00f5ao corrente.\nUma classificac\u00f5o importante para as inst\u00eancias encontradas na literatura \u00e1 a topologia da rede de oleodutos. A tabela 3.1, apresenta algumas simples, com somente um duto ou com mais de um duto, por\u00e1em, com somente uma rota. Esse segundo caso, \u00e1e geralmente formado por unico duto segmentado onde ocorrem bases de entrega. H\u00e1 ainda alguns trabalhos [36, 28] que permitem o tratamento de redes em forma de arvore. Um an\u00e1lise profunda desses trabalhos mostra que a topologia da rede \u00e1e base das modelagens, o que limita uma poss\u00e1vel extens\u00f5ao a outras inst\u00eaancias.\nPode-se notar tambem da tabela 3.1 que essa dissertac\u00f5o tratar\u00e1 um numero muito maior de restri\u00e7co\u00f5es, al\u00e1em de uma rede completa, para fornecer uma solu\u00e7c\u00f5ao u\u00e1til aos operadores da rede de oleodutos. Por outro lado, n\u00f5ao existe uma t\u00e1ecnica padr\u00f5ao para o problema de agendamento em dutos. Assim, fez-se necessa\u00e1rio um estudo de diversas t\u00e1ecnicas de otimiza\u00e7c\u00f5ao para determinar, dada a realidade tratada, qual a mais promissora.\nNos cap\u00edtulos 4 e 5 ser\u00e2o discutidas as tecnicas de otimiza\u00e7ao escolhidas, os crit\u00e1rios de escolha e a aplica\u00e7c\u00f5ao delas ao problema. Essas discuss\u00f5oes s\u00f5ao compartilhadas com a disserta\u00e7\u00f5o de Andr\u00e9 Cir\u00e1 [10].\nA literatura estudada foca o problema de agendamento dia\u00e1rio. Em geral, as solu\u00e7co\u00f5es especificam exatamente os hora\u00e1rios de movimentac\u00e7a\u00f5o e tratam um conjunto grande de restri\u00e7c\u00f5oes. Como ser\u00e1a visto no cap\u00e1tulo 4, o planejamento mensal n\u00f5ao necessita desse\n19 detalhamento. Entretanto, o problema ainda precisa considerar toda a rede e um horizonte de planejamento de um m\u00eas pelo menos. Como pode ser visto na tabela 3.1, as abordagens balanceiam o uso de uma rede com grande numero de dutos contra um horizonte mais extenso. Essa disserta\u00e7\u00e3o mostrara duas tecnicas para resolu\u00e7\u00e3o desse problema, uma heur\u00edstica e outra utilizando modelagem por fluxo em redes, as quais tratarao o horizonte mensal com um numero satisfat\u00f3rio de restric\u00e3es.\nCap\u00edtulo 4\nArquitetura do Modelo de Resolu\u00e7\u00e3o\nO estudo dos artigos e teses apresentados no cap\u00edtulo 3 evidencia que, como decorr\u00eancia da grande dificuldade do PPAORO, as abordagens existentes se ap\u00e1iam fortemente em simplifica\u00e7c\u00e3oes dos requisitos do problema. Por exemplo, s\u00e3ao tratadas topologias de rede bastante simples na maioria dos casos, com apenas um duto de sentido u\u00e1nico e terminais dispostos de forma sequencial [7, 28, 45]. Ou, ainda, n\u00e3o s\u00e3o consideradas incompatibilidade entre produtos [3, 16], ou os tanques s\u00e3o representados com capacidade agregada [6, 9].\nTais hipoteses permitem modelagens mais intuitivas e diretas do PPAORO, fundamentando seu tratamento pelas t\u00e1ecnicas de otimiza\u00e7ca\u00e3o tradicionais, como mostradas no cap\u00e1tulo anterior. Em contrapartida, impossibilitam a representa\u00e7ca\u00e3o de grande parte das restri\u00e7c\u00e3oes mais importantes para a viabilidade pr\u00e1atica das soluc\u00e7\u00e3oes, o que torna as abordagens existentes muito pouco aplic\u00e1aveis para os cen\u00e1arios reais. Um exemplo \u00e1e quando se considera um tanque u\u00e1nico de capacidade agregada. Apesar de simplificar as decis\u00e3oes relativas ao controle de invent\u00e1ario, inviabiliza a aplica\u00e7c\u00e3ao de restri\u00e7c\u00e3oes como n\u00e3o-simultaneidade (C3), essencial para um c\u00e1lculo mais realista dos tempos de bombea-mento. Note tamb\u00e1m que a maioria dos trabalhos existentes considera cerca de 6 \u00e1rg\u00e3os, 4 produtos e poucos tanques. Por outro lado, a inst\u00eaancia a ser tratada aqui agrega 14 \u00e1rgaos com 242 tanques, alem de 29 dutos, 32 produtos, u.t. em minutos e diversas outras restri\u00e7c\u00e3oes.\nE\u00e1 clara, portanto, a necessidade de modelos mais abrangentes para a obtenc\u00e7\u00e3ao de solu\u00e7c\u00e3oes fact\u00e1veis para apresentar aos operadores da rede de dutos. Contudo, constatase que a resolu\u00e7\u00e3o do PPAORO como um grande problema unico e integrado e pouco promissora. Al\u00e1em do alto nu\u00e1mero de restric\u00e7\u00e3oes complicadoras que devem ser satisfeitas simultaneamente, muitos dos trabalhos baseados em resolu\u00e7c\u00e3oes integradas n\u00e3ao obtiveram resultados satisfat\u00e1orios para uma topologia complexa, mesmo ap\u00e1os diversas relaxa\u00e7co\u00e3es do modelo [9].\nDesta forma, prop\u00e3e-se uma arquitetura de resolu\u00e7ao do problema composta por duas fases, executadas sequencialmente: a fase de planejamento e a fase de agendamento. Tal arquitetura e baseada nas decomposi\u00e7\u00e3es recorrentes do PPAORO encontradas na literatura, as quais refletem os procedimentos manuais atualmente adotados. Cada fase e descrita em detalhes nas sec\u00e7\u00e3oes seguintes.\nEste cap\u00edtulo \u00e9 compartilhado com a dissertac\u00e3o de Andr\u00e9 Cir\u00e9 [10] e apresentado aqui com revis\u00e3oes e altera\u00e7c\u00e3oes pontuais.\n4.1\tFase de Planejamento\nO problema de planejamento trata da movimenta\u00e7ao geral na rede de dutos, onde s\u00e3o programados quais \u00edorga\u00e3os ir\u00e3ao receber e enviar produtos para o atendimento das demandas e escoamento das produ\u00e7\u00e3es. Uma vez fixados os \u00f3rg\u00e3os de destino e de origem, define-se ent\u00e3ao quais sera\u00e3o os dutos e as bases intermedi\u00edarias pelos quais os produtos ir\u00e3ao trafegar, determinando tamb\u00edem os volumes que ser\u00e3ao transmitidos nas rotas escolhidas.\nAs movimenta\u00e7c\u00e3oes de produto geradas pela fase de planejamento s\u00e3ao representadas por uma estrutura denominada plano de entrega, que representa uma transmissao de volume de um \u00edorg\u00e3ao origem a um \u00edorg\u00e3ao destino, passando por uma determinada rota. Cada plano cont\u00f3m um prazo, isto \u00f3, o instante m\u00f3ximo em que todo o volume j\u00f3 deve estar armazenado no \u00edorg\u00e3ao destino. Um plano de entrega \u00ede definido por uma tupla\npe = (ti,oi,td,od,p,v,r,pz),\nonde ti G T(oi) \u00f3 o tanque no \u00f3rg\u00e3o de origem oi G Org, td G T(od) \u00f3 o tanque no \u00f3rg\u00e3o de destino od G Org , v e o volume do produto p G P, r e a rota de transmiss\u00e3o do plano e pz e o prazo do plano dentro do horizonte de programa\u00e7ao. Considera-se que um plano de entrega e indivis\u00edvel, ou seja, seu volume nao pode ser fragmentado em dois ou mais planos. Contudo, um plano pode parar no duto, isto e, ser injetado de forma intermitente, o que acarreta tambem a parada de toda a rota envolvida no bombeamento. Opera\u00e7c\u00e3oes de parada s\u00e3ao essenciais, por exemplo, para satisfazer o numero maximo de envios simult\u00eaneos (restri\u00e7\u00e3o C7) e os alinhamentos proibidos (restri\u00e7\u00e3o C8). Alem disso, tambem sa\u00e3o necessarias quando se necessita aguardar esvaziamento de tanques para que possam receber quantidades proveniente de dutos.\nAssim, dadas as campanhas de produ\u00e7c\u00e3ao e demanda em cada org\u00e3ao, o objetivo da fase de planejamento e gerar um conjunto de planos de entrega de tal forma que, se todos forem satisfeitos, i.e., entregues no prazo, garante-se uma solu\u00e7\u00e3o que atenda todas as demandas da rede e escoe os volumes em excesso das produc\u00e7\u00e3oes.\nDiferentes m\u00e9todos heur\u00edsticos ou exatos podem ser aplicados para a cria\u00e7\u00e3o dos planos para uma certa inst\u00e2ncia, os quais considerariam crit\u00e9rios espec\u00edficos para a determina\u00e7\u00e3o das rotas, volumes e tanques. As tecnicas heur\u00edsticas aplicadas neste trabalho baseiam-se em escolher os \u00e9rg\u00e3os com as demandas mais criticas, isto \u00e9, com maior volume e mais pr\u00e9ximas do in\u00edcio do horizonte. Uma vez escolhidos, definem-se ent\u00e3o os \u00f3rg\u00e3os que v\u00e3o prover volume para satisfaze-los, utilizando como crit\u00e9rio aqueles mais pr\u00f3ximos, isto \u00e9, conectados por um menor numero de dutos. Por fim, s\u00e3o selecionadas as rotas de maior vaz\u00e3ao e os volumes para, ent\u00e3ao, fixar os demais par\u00e2ametros dos planos.\nAl\u00e9m disso, visto que planos s\u00e3o tamb\u00e9m uma representa\u00e7\u00e3o intuitiva do planejamento da rede, operadores dos dutos tamb\u00e9em sa\u00e3o capazes de inserir novos planos ou alterar os existentes, muitas vezes para a representa\u00e7c\u00e3ao de prefer\u00e2encias de movimentac\u00e7\u00e3ao n\u00e3ao previstos pelo algoritmo.\nA fase de planejamento encapsula as deciso\u00e3es de quais rotas e volumes utilizar para a resolu\u00e7\u00e3o de uma inst\u00e2ncia do PPAORO, mas n\u00e3o detalha as opera\u00e7\u00e3es de bombeamento e seus respectivos tempos. O desafio da fase de planejamento \u00e9, portanto, criar conjuntos de planos com uma grande probabilidade de serem vi\u00e9aveis, sem contudo aumentar a complexidade do problema a ponto de torna-lo n\u00e3o-resolv\u00edvel.\n4.2\tFase de Agendamento\nUma vez definidos os o\u00e9rga\u00e3os que ira\u00e3o enviar e receber produtos e as respectivas rotas por onde os volumes ir\u00e3o trafegar, deve-se resolver o problema de agendamento, ou seja, determinar o n\u00e9umero de opera\u00e7co\u00e3es de envios por plano de entrega e, principalmente, a ordem em que os bombeamentos ser\u00e3o realizados. Nesta fase, consideram-se as restric\u00e3es de incompatibilidade e de capacidade dos tanques, al\u00e9em do c\u00e9alculo de limitantes de tempo para envio e chegada dos volumes nos \u00e9orga\u00e3os. Por fim, \u00e9e necessa\u00e9rio atribuir os exatos momentos em que ocorrer\u00e3ao as opera\u00e7c\u00e3oes de bombeamento, compondo a soluc\u00e7\u00e3ao final do problema. Isso deve ser feito de modo a garantir que sejam satisfeitas as restri\u00e7\u00e3es referentes \u00e0s vaz\u00e3es de bombeamento, \u00e0 troca de turno, \u00e0 manutenc\u00e3o de dutos, e tambem outras restric\u00e7\u00e3oes similares.\nDado um conjunto de planos de entrega PE = {pe1,pe2, ...,penpl}, o objetivo da fase de agendamento e gerar movimentos m1, ...,mnm, conforme definidos na sec\u00e3o 2.3, de forma que todos os planos sejam cobertos no prazo. Isto equivale a sequenciar e agendar os planos nas suas respectivas rotas e tanques, garantindo todos requisitos do problema relacionadas no cap\u00e9tulo 2, como restri\u00e7ca\u00e3o de interface, capacidade de tanques e n\u00e3ao-simultaneidade de operacoes. Note que nm > npl, j\u00e1 que planos podem ser bombeados por uma ou mais opera\u00e7c\u00e3oes de envio.\nApesar do grande nu\u00e9mero de restric\u00e7\u00e3oes, a pr\u00e9e-atribui\u00e7c\u00e3ao de rotas da fase de planeja\nmento abre a possibilidade de modelagens mais intuitivas e compactas do problema de agendamento, j\u00e1 que as decis\u00f5es ficam concentradas em como ordenar e temporizar os planos nos seus respectivos dutos.\nComo consequ\u00eancia da dificuldade em garantir heuristicamente solu\u00e7\u00f5es operacionalmente viaveis, sera utilizado um modelo exato como modulo resolvedor desta fase. Esse modelo, por sua vez, ser\u00e1 implementado usando Programa\u00e7\u00e3o por Restri\u00e7\u00f5es (PR) [31], sendo essa escolha motivada principalmente por duas razoes. A primeira motiva\u00e7ao decorre de restricoes n\u00f5o-lineares inerentes ao sequenciamento e \u00e0s vaz\u00f5es vari\u00e1veis, impossibilitando a modelagem do problema usando Programa\u00e7\u00f5o Linear. J\u00e1 a segunda raz\u00f5o vem do fato de focarmos, prioritariamente, a obtenc\u00e7\u00f5ao de soluc\u00e7\u00f5oes vi\u00e1aveis ao inv\u00e1es de \u00e1timas. As t\u00e1cnicas de PR t\u00eam obtido grande sucesso neste quesito. Mais detalhes sobre Programac\u00f5o por Restri\u00e7ao sao apresentados no cap\u00edtulo 5.\nCap\u00edtulo 5\nConceitos B\u00e1sicos de Modelagem\nNa a\u00e1rea de pesquisa operacional, surgem, a cada dia, novas aplica\u00e7c\u00e3oes de otimizac\u00e7\u00e3ao. Muitas delas tratam de problemas NP-Dif\u00edceis, para os quais n\u00e3o se conhecem algoritmos polinomiais para sua resolu\u00e7c\u00e3ao. Nesse a\u00eambito, \u00e1e comum a modelagem atrav\u00e1es de Programac\u00e3o Linear Mista [52] e de Programa\u00e7\u00e3o por Restric\u00e3es [31]. Essas tecnicas possuem so\u00e1lido embasamento teo\u00e1rico e garantidamente encontram soluc\u00e7\u00e3oes o\u00e1timas, se essas existirem.\nCada uma das t\u00e1ecnicas abordadas nesta disserta\u00e7c\u00e3ao ser\u00e1a descrita nas respectivas se\u00e7c\u00e3oes, e no decorrer ser\u00e3ao discutidas algumas formas de hibridiza\u00e7ca\u00e3o entre elas.\n5.1\tPrograma\u00e7\u00e3o L\u00e1gica por Restri\u00e7\u00e3es\nA Programa\u00e7c\u00e3ao (L\u00e1ogica) por Restri\u00e7c\u00e3oes(PR) [31, 4] \u00e1e um ferramenta muito poderosa para a modelagem de problemas combinat\u00e1orios, principalmente na resoluc\u00e7\u00e3ao de problemas de planejamento e agendamento. Com ela \u00e1e poss\u00e1vel criar um modelo usando vari\u00e1aveis e relac\u00e7o\u00e3es restritivas entre as vari\u00e1aveis. Durante a execu\u00e7ca\u00e3o do modelo s\u00e3ao atribu\u00e1dos valores \u00e0s vari\u00e1veis de forma a satisfazer as restri\u00e7\u00f5es definidas. Tamb\u00e1m e poss\u00e1vel especificar que os valores atribu\u00e1dos sejam tais que minimizem uma func\u00e3o objetivo, possibilitando a modelagem de problemas espec\u00e1ficos de otimiza\u00e7c\u00e3ao.\nSendo a PR uma linguagem bem abrangente, podem ser usados diversos tipos de restri\u00e7co\u00e3es e, para cada tipo, existem formas diferentes de tratamento. Nesse ponto, a programa\u00e7ao por restri\u00e7\u00e3es se divide em dois ramos, a satisfa\u00e7ao de restri\u00e7\u00f5es e a resolu\u00e7\u00f5o de restri\u00e7\u00f5es. Enquanto na satisfa\u00e7ao de restri\u00e7\u00f5es as variaveis do modelo tem dom\u00e1mos finitos, a resoluc\u00e7\u00f5ao de restri\u00e7c\u00f5oes trabalha sobre dom\u00e1nios infinitos ou complexos.\nA satisfa\u00e7c\u00f5ao de restric\u00e7\u00f5oes \u00e1e a mais utilizada em aplica\u00e7c\u00e3oes industriais e de otimizac\u00e7\u00e3ao. Al\u00e1em disso, j\u00e1a foi utilizada anteriormente para resolu\u00e7c\u00e3ao de problemas semelhantes ao proposto [30], com sucesso. Por estes motivos, ela sera uma das t\u00e1cnicas principais usadas\nnesta disserta\u00e7\u00e3o.\n5.1.1\tDefinindo um modelo para satisfa\u00e7\u00e3o de restri\u00e7\u00f5es\nAo se modelar um problema nesse ramo da programa\u00e7ao por restri\u00e7\u00e3es, s\u00e3o necess\u00e1rios tr\u00eas passos:\n\u2022\tDefinir um conjunto de vari\u00e1veis X = {x1, x2,...,xk} e os respectivos dom\u00e1nios Di ,i = 1, 2,... ,k, de cada vari\u00e1vel. Esses dom\u00ednios n\u00e3o s\u00e3o necessariamente intervalos inteiros e, \u00e0s vezes, nem mesmo sao num\u00e1ricos.\n\u2022\tDefinir o problema como restri\u00e7\u00e3es na forma C1 A C2 A \u2022 \u2022 \u2022 A Cn, onde cada Ci refresenta uma restri\u00e7ao sobre as variaveis de X.\n\u2022\tRealizar a busca por solu\u00e7\u00f5es. Cada solu\u00e7\u00e3o, por sua vez, \u00e9 definida por uma val-ora\u00e7ao V = (x1 = v1,x2 = v2,... ,xk = vk). A valoracao V sera valida se respeitar todo os dom\u00ednios e as restri\u00e7\u00e3es impostas sobre as vari\u00e1veis.\nUm objetivo G = (x1 = g1,x2 = g2,... ,xk = gk) \u00e1 uma atribuicao inicial de valores \u00e0s vari\u00e1veis de X. A atribui\u00e7ao pode ser irrelevante (\u201cdon\u2019t care\u201d) para algumas das vari\u00e1veis, deixando-as livres sobre seu dom\u00e1nios Di. Ou a atribulo pode fixar o valor de xi em gi. Para exemplificar, dada a restricao x \u2014 y = z, e os dom\u00e1nios de x,y,z como [1... 3], pode-se ter como objetivo G = (x = 1, y, z), sendo x fixado e y, z livres. A possibilidade de se fixar v\u00e1arios objetivos \u00e1e uma das grandes vantagens da programa\u00e7c\u00e3ao por restric\u00e7\u00e3oes. Em outros paradigmas de programa\u00e7ca\u00e3o, seriam necessa\u00e1rias implementac\u00e7\u00e3oes espec\u00e1ficas para cada objetivo.\n5.1.2\tEncontrando uma solu\u00e7\u00e3o\nA maioria dos problemas NP-Dif\u00e1ceis \u00e9 tratada na forma de satisfa\u00e7\u00e3o de restri\u00e7\u00f5es, e a busca pela solu\u00e7ao \u00e9 feita de forma combinat\u00f3ria. Mais especificamente com uma estrategia de backtracking.\nSendo o backtracking sabidamente ineficiente, a PR fornece tecnicas para redu\u00e7\u00e3o do esforco de backtracking. Um exemplo disso e a diminui\u00e7\u00e3o dos dom\u00e1nios das variaveis. Um modo de diminuir os dom\u00e1nios, e consequentemente o espa\u00e7o de solu\u00e7oes, \u00e1 refletir as restri\u00e7\u00e3es sobre eles, o que \u00e1 chamado de propagacao de restri\u00e7\u00f5es. Para visualizar isso, retoma-se o exemplo de restri\u00e7c\u00e3ao anterior, e v\u00eae-se que os dom\u00e1nios vi\u00e1aveis podem ser reduzidos para: x G {2, 3}, y G {1, 2} e z G {1,2}. Ap\u00e1s a propagac\u00e3o, caso um dos dom\u00e1nios venha a se tornar vazio, o problema n\u00e3ao ter\u00e1a soluc\u00e7\u00e3ao. Nesse caso desfaz-se a ultima atribuic\u00e3o de valor e tenta-se outro valor (backtracking). Por outro lado, se todos\ndominios possu\u00f3rem um unico valor, essa ser\u00f3 a soluc\u00e3o. Se nenhum dos dois ocorrer, deve-se realizar a busca combinato\u00f3ria pela solu\u00e7c\u00e3ao.\nExistem diversas tecnicas de busca que podem ser usadas na PR. Cada t\u00f3cnica \u00e9 escolhida para uma aplica\u00e7c\u00e3ao levando em considera\u00e7c\u00e3ao particularidades do problema. Em uma forma basica, porem, generica, sao utilizadas duas pol\u00edticas de selec\u00e3o. Na primeira, a sele\u00e7ca\u00e3o \u00f3e sobre a ordem de valorac\u00e7\u00e3ao das vari\u00f3aveis. Pode-se, por exemplo, selecionar para a pr\u00f3oxima atribui\u00e7c\u00e3ao de valores uma vari\u00f3avel que seja referenciada por mais restri\u00e7c\u00e3oes ou que possua um dom\u00f3nio menor. A segunda pol\u00f3tica, vale a ordem de sele\u00e7c\u00e3ao dos valores nos dom\u00f3nios, podendo ir do menor para o maior, ou no sentido contr\u00f3ario, ou at\u00f3e mesmo dos valores do meio do dom\u00f3nio para as bordas. Outras t\u00f3ecnicas, como a split-domain, n\u00e3ao atribui valores diretamente, mas faz uma divis\u00e3ao e conquista por dom\u00f3nios menores e va\u00f3lidos.\n5.1.3\tMelhorias na modelagem\nAssim como uma boa escolha de estrat\u00f3egia de busca pode influenciar drasticamente no tempo de execu\u00e7ca\u00e3o, existem outras t\u00f3ecnicas para tornar o modelo mais eficiente. Uma delas \u00f3e a inclusa\u00e3o no modelo de restri\u00e7co\u00e3es redundantes, e o uso de restric\u00e7\u00e3oes complexas, como alLdistinct, element e cumulative [31]. Esta ultima \u00e9 especialmente importante para problemas de agendamento, como o problema em quest\u00e3o. Todas essas restric\u00e3es mais complexas possuem um tratamento especial no ambiente de PR, sendo implementadas de forma eficiente. Pode-se ainda utilizar-se de t\u00f3cnicas alternativas [18, 4] ao backtracking, como o backjumping, que ao inv\u00f3s de retornar \u00e0 variavel antecessora na \u00f3rvore de busca ap\u00f3s uma falha, retorna \u00e0 vari\u00f3vel que gerou a inviabilidade, mais acima.\nAinda sobre o modelo, pode-se adicionar restri\u00e7c\u00e3oes para evitar a ocorr\u00e2encia de simetrias, ou seja, a exist\u00e2encia de solu\u00e7co\u00e3es equivalentes. Um exemplo de simetria est\u00f3a em um conjunto de vari\u00f3aveis que podem ter seus valores permutados. A identifica\u00e7ca\u00e3o de simetrias pode ser dif\u00edcil, mas \u00f3 muito importante, e pode ser complementada por t\u00f3cnicas que consigam identificar um grande nu\u00f3mero de simetrias durante a busca [21].\nPara problemas de otimiza\u00e7c\u00e3ao, deve-se considerar todas as melhorias citadas, e ainda levar em conta que a PR utiliza-se de estrat\u00f3gias como Branch-and-Bound [12] para otimizar uma dada funcao objetivo. Nesse contexto, podem ser combinadas heur\u00edsticas como a busca local, e ate metaheur\u00f3sticas [41] com o branch-and-bound, na tentativa de se obter boas solu\u00e7co\u00e3es, e em menor tempo de execu\u00e7c\u00e3ao.\nAl\u00f3em da hibridiza\u00e7ca\u00e3o com outras heur\u00f3sticas, existem diversas possibilidades de integrar PR com Programa\u00e7ao Linear Mista (PLM). A PLM ser\u00f3 descrita na se\u00e7\u00e3o seguinte.\n5.2\tPrograma\u00e7\u00e3o Linear Mista\nProblemas modelados usando Programa\u00e7\u00f5o Linear (PL) s\u00f5o problemas de otimiza\u00e7\u00f5o, onde a func\u00e7\u00f5ao objetivo e as restri\u00e7c\u00f5oes s\u00f5ao todas lineares. A importa\u00eancia da PL est\u00eda na exist\u00eaencia de uma grande classe de problemas em pesquisa operacional que podem ser formulados dessa forma. E mais, historicamente, muitas das id\u00edeias de PL inspiraram conceitos de otimiza\u00e7\u00f5o como a dualidade, decomposi\u00e7\u00e3o e a convexidade.\nA diferenca entre PL e Programa\u00e7ao Linear Mista (PLM) est\u00ed na exist\u00eancia de variaveis no modelo que possuem o seu dom\u00ednio no conjunto dos inteiros. Assim, definimos um modelo de PLM na forma padra\u00f5o como,\nminimizar z = c1x + c2y sujeito a: A1x + A2y = b\nx, y > 0, x g Rn, y G Zm\nonde x e y s\u00e3o os vetores de vari\u00e1veis de decis\u00e3o, A1 e A2 formam as matrizes de coeficientes das restricoes, b e o vetor dos termos independentes e c1 e c2 s\u00e3o os vetores de custos da fun\u00e7\u00e3o objetivo, representada pela express\u00e3o z = c1x + c2y. Se nao existerem os vetores y, c2 e A2, tem-se um problema de PL.\nHa atualmente duas fam\u00f3lias de tecnicas para resolu\u00e7\u00e3o de modelos de PL. Ambas caracterizam o problema como um poliedro delimitado pelos hiperplanos das equac\u00e7\u00e3oes lineares das restri\u00e7c\u00e3oes. Demonstra-se, da\u00f3, que a solu\u00e7c\u00e3ao o\u00f3tima est\u00f3a em um ou mais pontos extremos de tal poliedro. A primeira fam\u00f3lia, que engloba os m\u00f3etodos denominados Simplex, foi introduzida por Dantzig em 1949 [14] e esses m\u00f3todos buscam a otimalidade \u201ccaminhando\u201d iterativamente pelas arestas do poliedro, verificando as solucoes b\u00e1sicas (ou pontos extremos) ate encontrar a \u00f3tima. E demonstrado que a complexidade de pior caso para o algoritmo Simplex \u00f3e exponencial, embora ele apresente um \u00f3otimo desempenho na pratica. Ja a segunda fam\u00f3lia engloba os m\u00f3todos de Pontos Interiores ou Barreiras, estes sim, de complexidade polinomial. Eles exploram o poliedro a partir de pontos do interior da regi\u00e3ao vi\u00f3avel, at\u00f3e encontrar um ponto extremo \u00f3otimo.\nApesar da pequena dist\u00e2ancia na formula\u00e7c\u00e3ao de problemas de PL para PLM, o problema geral na formulac\u00e7\u00e3ao PLM \u00f3e NP-Dif\u00f3cil. E\u00f3 preciso, portanto, recorrer a algoritmos como branch-and-bound [12], aliados a outras t\u00f3cnicas, para se encontrar limitantes superiores e inferiores para as solu\u00e7co\u00e3es, enquanto realizando uma busca mais eficiente no espa\u00e7co de soluc\u00e7\u00e3oes.\nComparada com a PR, a modelagem PLM \u00f3e geralmente mais complexa em con-seq\u00fc\u00e2ncia da dificuldade de se representar certas restri\u00e7\u00e3es como equa\u00e7\u00e3es lineares. Contudo, alguns modelos PLM para problemas dif\u00f3ceis s\u00e3ao resolvidos de forma eficiente e\nexata, principalmente, quando utilizam t\u00e1ecnicas como os planos de corte [52]. Ainda existem diversas maneiras de integrar PR e PLM [39], aproveitando-se, por exemplo, da capacidade de infer\u00eaencia fornecida pela PR e das relaxa\u00e7c\u00f5oes na PL.\n5.2.1\tFluxo em Redes\nOs modelos de fluxo em redes [1] s\u00f5o uma subclasse muito importante dos problemas de programa\u00e7c\u00f5ao linear. Existem inu\u00e1meras aplicac\u00e7\u00f5oes desses modelos para sistemas de distribui\u00e7\u00f5o e de comunica\u00e7\u00f5o. De uma forma abstrata, os modelos representam uma rede formada por localidades, cada qual com uma demanda e estoques de um recurso, e por ligac\u00e7\u00f5oes entre as localidades, cada qual com uma dire\u00e7c\u00f5ao, capacidade e custo de transporte desses recursos. Busca-se minimizar o custo total de transporte satisfazendo as condic\u00e7\u00f5oes de viabilidade, as demandas e utilizando os estoques presentes.\nH\u00e1a diversos problemas cl\u00e1assicos modelados como fluxo em redes como, por exemplo, o problema do caminho de custo m\u00ednimo, o problema do fluxo maximo, o problema da circula\u00e7ca\u00f5o e o problema de alocac\u00e7a\u00f5o. Nesse contexto, estamos focando no mais geral deles, que \u00e1e o problema do fluxo de custo m\u00e1nimo. Para formula\u00e1-lo matematicamente precisamos das seguintes definic\u00e7\u00f5oes:\n\u2022\tG = (N, A) e uma rede (grafo) direcionada, onde N = (1,..., n) e o conjunto dos\nnos (vertices) e A e o conjunto de arcos (arestas) direcionados representados por pares (i,j) G N x N e i = j, com sentido de i para j (ou seja i\tj).\n\u2022\tCij e o custo por unidade de fluxo que passa pelo arco (i, j) G A.\n\u2022\tlij e uij s\u00f5o respectivamente o limite m\u00ednimo e maximo de fluxo que pode passar pelo arco (i, j) G A.\n\u2022\tbi e um numero inteiro que representa demanda quando bi &lt;0, e fornecimento, quando bi > 0, nono i.\n\u2022\txij e o fluxo que passa pelo arco (i, j) G A.\nSendo assim, o problema do fluxo de custo m\u00e1nimo pode ser formulado como:\nminimizar z =\tcij xij (i,j)eA\nsujeito a:\txij -\txji = bi\tv\u00ed E N j:(i,j)eA\tj :(j,i)eA\nlij E xij E uij\nv(i,j) E A\nEssa formula\u00e7ao \u00e9 bastante abrangente. No entanto, para o PPAORO e necessario compreender uma outra variante, onde ha diferentes recursos (commodities) passando pela rede e e necessario manter os fluxos de cada uma separadamente. Alem disso, sera necessario representar a rede em diferentes per\u00edodos, ou seja, o tempo sera discretizado para demonstrar como o fluxo evolui durante o tempo.\nDiferentemente do problema de fluxo de custo m\u00ednimo que possui algoritmos especializados para sua resolucao, o problema de fluxo multicommodities, sendo mais geral, \u00e9 resolvido usando o modelo de programa\u00e7ao linear equivalente. Ja os multiper\u00e9odos podem ser modelados com um fluxo de custo m\u00e9nimo e, portanto, com um fluxo multicommodities.\nPara formular o problema de fluxo multicommodities definimos:\n\u2022\tG = (N, A) e uma rede (grafo) direcionada, como definido anteriormente.\n\u2022\tK = (1, 2,... ,k) \u00e9 o conjunto de commodities.\n\u2022\tckj e o custo de transferir uma unidade de fluxo da commodity k pelo arco (i,j).\n\u2022\txkj e o fluxo da commodity k passando pelo arco (i,j).\n\u2022\tck e xk sao respectivamente os vetores de custos e fluxos da commodity k para todos os arcos.\n\u2022\tlkj e ukj sao os limites m\u00e9nimos e maximos, respectivamente, para o fluxo da commodity k pelo arco (i, j).\n\u2022\tlij e Uj sao os limites m\u00ednimos e maximos, respectivamente, para o fluxo de todas as commodities pelo arco (i, j).\n\u2022M uma e matriz N x A de incid\u00eancia no-arco.\n\u2022\tbk e um vetor de inteiros que da a demanda ou fornecimento da commodity k para todos os nos.\nTendo essa nota\u00e7\u00e3o, podemos formular o problema do fluxo multicommodities como:\nEk k c x\nkeK\nsujeito a:\nlij&lt;\txij &lt;uij, 'V(i,j) G A\nkeK\nMxk = bk, Vk G K\nl\u00cdj &lt;xkj &lt;ukj, V(i, j) G A and Vk G K\nUm outro resultado sobre fluxo em redes, importante para nosso trabalho, \u00e9 a possibilidade de decompor um fluxo obtido em caminhos e ciclos. Para compreender isso, definimos P e W como os conjuntos de todos os caminhos e ciclos na rede G. Assim, podemos ter fluxos f (P) : VP GP e f (W) : VW G W de forma que:\nx,j = \u00a3 \u00f4ij(P)f (P)+ \u00a3 \u00f4ij(W)f (W)\nP eP\tW ew\nNa equa\u00e7\u00e3o acima, \u00f4ij (P) e \u00f4ij (W) dizem se o arco esta contido (\u00f4j = 1) ou n\u00e3o (\u00f4ij = 0) no caminho ou ciclo em quest\u00e3o. Compreende-se, por essa equac\u00e3o, que o fluxo em um arco \u00e9 composto da contribuic\u00e3o de fluxo de diversos caminhos e ciclos que contem aquele arco.\nA equacao acima conduz ao algoritmo de decomposi\u00e7\u00e3o mostrado no Algoritmo 1. Esse algoritmo de decomposic\u00e3o classico [1] sera a base para a cria\u00e7\u00e3o dos planos de entrega. Como os nos representar\u00e3ao demandas, produ\u00e7c\u00e3oes , tanques e trechos de uma rota, um caminho na rede contera todas as informac\u00e7\u00e3oes necessarias para cria\u00e7c\u00e3ao de tais planos, apos a decomposi\u00e7c\u00e3ao do fluxo obtido. Como sera visto, o algoritmo podera ser simplificado, pois n\u00e3ao havera ciclos em nossa rede.\nAlgoritmo 1 Algoritimo de Decomposi\u00e7\u00e3o de Fluxo\t\nEntrada: G = (N, A) com fluxo nos arcos x\t\nSa\u00edda: P com f (P), VP GP, W com f (W), VW G W Nota\u00e7Ao: y - c\u00edpia do fluxo nos arcos A(y) = {(i, j) G A\\yij > 0} (Arcos com fluxo positivo em y) N(y) = {i\\(i, j) G A(y) or (j,i) G A(y)} (N\u00eds incidentes nos arcos em A(y)) G(y) = (N (y),A(y)) S = {i G N(y)\\bi > 0} (nos fornecedores) D = {i G N(y)\\bi &lt;0} (nos de demanda) s e t s\u00e3ao os n\u00edos de in\u00edcio e fim do caminho P. A(P) = min{b(s), \u2014b(t), min{yij\\(i,j) G P}} (Capacidade do caminho P) A(W) = min{yij\\(i, j) G W} (Capacidade do ciclo W)\t\n1\tprocedimento DeC0MP0SICA0DeFluX0\n2\ty = x, P = 0, W = 0\n3\tenquanto A(y) = 0 faca\n4\tS = SELECIONAR(y)\n5\tBusCAR(s,y)\n6\tse Ciclo W encontrado entao\n7\tW = W U{W}\n8\tf (W ) = f (W ) + A(W)\n9\tyij = yij\u2014 A(W)> V(i,j) G W\n10\tfim se\n11\tse Caminho P encontrado entao\n12\tp = nj{P}\n13\tf (P ) = f (P ) + A(P)\n14\tyij = yij\u2014 A(P)> V(i,j) G P\n15\tb(s) = b(s) \u2014 A(P)\n16\tb(t) = b(t) \u2014 A(P)\n17\tfim se\n18\tAtualizar A(y), N(y), S, D\n19\tfim enquanto\n20\tfim procedimento\n21\tfuncao SELECIONAR(y)\n22\tse S = 0 entao\n23\tretornar s G S\n24\tsenao\n25\tretornar s G N(y)\n26\tfim se\n27\tfim funcao\n28\tfuncao BusCAR(s,y)\n29\tFazer uma busca em profundidade iniciando com o n\u00edo s at\u00ede achar um ciclo W em G(y) ou um caminho P em G(y) terminando no n\u00edo t G D\n30\tretornar W ou P, de acordo com o encontrado\n31\tfim funcao\nCap\u00edtulo 6\nUm modelo para o Problema de Agendamento\nPr\u00f3logo\nO artigo deste cap\u00edtulo foi publicado em um dos peri\u00f3dicos internacionais mais importantes na area de Programa\u00e7\u00e3o por Restri\u00e7\u00f5es, o Constraints em 2010 [27]. O artigo pode ser visto como uma evoluc\u00e3o do artigo apresentado nos anais do congresso The 14th Principles and Practice of Constraint Programming (CP\u201908), na s\u00f3rie Lecture Notes in Computer Science [38]. Este por sua vez \u00e9 uma evolu\u00e7ao de outro artigo publicado nos anais da conferencia, Proceedings of the 11th IEEE International Conference on Computational Science and Engineering - CSE'08 [37], e eletronicamente, pela editora do IEEE. Os dois artigos de 2008 comp\u00f5e a disserta\u00e7\u00e3o de Andr\u00f3 Cir\u00f3 [10].\nO artigo apresenta o Problema de Planejamento e Agendamento de Opera\u00e7\u00f5es em uma Rede de Oleodutos (Pipeline Planning and Scheduling Problem) com grande detalhamento cobrindo as restric\u00e3es j\u00e1 apresentadas no cap\u00edtulo 2. A se\u00e7ao de trabalhos relacionados (Related Work) do artigo foi atualizada no cap\u00edtulo 3 dessa dissertac\u00e3o e a arquitetura utilizada \u00f3 a mesma mostrada no cap\u00edtulo 4.\nA fase de planejamento \u00f3 tratada por uma heur\u00edstica gulosa incremental que foi brevemente introduzida nos trabalhos anteriores [38, 37]. Esse procedimento cria os planos de entrega um ap\u00f3os o outro, conforme fun\u00e7c\u00e3oes de avalia\u00e7ca\u00e3o que utilizam estimativas sobre a rede at\u00f3 aquele momento. Por exemplo, o produto, \u00f3rgao de destino e prazo s\u00e3o escolhidos analisando todas as combina\u00e7c\u00e3oes e escolhendo a base onde h\u00f3a uma demanda mais urgende para o produto.\nO foco do artigo, no entanto, \u00f3 a fase de agendamento (Scheduling Phase). Essa fase foi decomposta em dois problemas: o sub-problema de sequenciamento (Sequencing Sub-problem) e o sub-problema de escalonamento (Scheduling Sub-problem).\nPrimeiramente, o sequenciamento definira\u00e1 a ordem das opera\u00e7c\u00e3oes dos planos nos tanques de origem e destino e nos dutos trafegados que formam a rota. Ap\u00e1os isso, o escalonamento dara\u00e1 os tempos exatos de in\u00e1cio e t\u00e1ermino dessas operac\u00e7\u00e3oes. Cada um desses problemas \u00e1e tratado por meio de um modelo de programac\u00e7a\u00e3o por restric\u00e7o\u00e3es pr\u00e1oprio que faz uso extenso de restri\u00e7\u00f5es globais especificas para agendamento. Al\u00e1m disso, novos m\u00e1etodos de busca de soluc\u00e7a\u00e3o, especializados para a estrutura da rede de dutos, tamb\u00e1em s\u00e3ao propostos.\nOutra contribui\u00e7\u00e3o estendendo os trabalhos anteriores [38, 37] \u00e1 o grafo de empurra-mento (Pushing Graph), equivalente a uma restri\u00e7ao global, aumentando a infer\u00eancia de preced\u00eaencias entre opera\u00e7co\u00e3es ocorrendo em diferentes dutos. Essa estrutura \u00e1e espec\u00e1fica para problemas de agendamentos em dutos, pois supo\u00e3e que os dutos est\u00e3ao sempre preenchidos completamente e a entrada de um volume em uma extremidade so\u00e1 \u00e1e poss\u00e1vel com a sa\u00e1da de um mesmo volume na extremidade oposta. Ela pode ser vista como uma rep-resentac\u00e7\u00e3ao do problema, permitindo a aplica\u00e7c\u00e3ao de mais restri\u00e7c\u00e3oes globais tais como a restri\u00e7\u00e3o flow [24] .\nOs procedimentos foram testados sobre 4 inst\u00eaancias reais, as quais utilizavam uma mesma rede com 14 \u00e1org\u00e3aos, 29 dutos e 32 produtos diferentes armazenados em 242 tanques. Um exemplo de execuc\u00e7\u00e3ao sobre uma insta\u00eancia artifical ilustra o procedimento.\nA Hybrid Model for a Multiproduct Pipeline Planning and Scheduling Problem\nTony M. T. Lopes, Andre A. Cire, Arnaldo V. Moura, Cid C. de Souza Institute of Computing - University of Campinas 13081-970, Campinas, SP\n{arnaldo, cid}@ic.unicamp.br, {andre.cire, tony.lopes}@gmail.com\nAbstract\nBrazilian Petrobras is one of the world largest oil companies. Recurrently, it faces a very difficult planning and scheduling problem: how to operate a large pipeline network in order to adequately transport oil derivatives and biofuels from refineries to local markets. In spite of being more economical and environmentally safer, the use of a complex pipeline network poses serious operational difficulties related to resource allocation and temporal constraints. The current approaches known from the literature only consider a few types of constraints and restricted topologies, hence they are far from being applicable to real instances from Petrobras. We propose a hybrid framework based on a two-phase problem decomposition strategy. A novel Constraint Programming (CP) model plays a key role in modelling operational constraints that are usually overlooked in literature, but that are essential in order to guarantee viable solutions. The full strategy was implemented and produced very adequate results when tested over large real instances.\n1\tIntroduction\nScheduling problems have been receiving increasing attention in the last years, mainly due to the need to deal efficiently with very large real scenarios in order for companies to persevere in highly competitive markets. A number of notable examples stems from the oil industry, where oil prospection and refined product transportation are major sources of costs. As such, Petrobras, the 14th largest oil company in the world1, faces a very difficult transportation problem in which ethanol and several petroleum derivatives, like gasoline, diesel, and naphtha must be transported from refineries to depots where consumer markets are located. Such complex transportation problems usually must be solved in the presence of very complicated facility operational restrictions.\n1See www.energyintel.com.\nPipeline networks are the preferred way for transporting oil refined products. In contrast to tanks and waterborne alternatives, their costs do not escalate sharply with distance. In an example cited in [1], assuming each truck holds 200 barrels (8,400 gallons) and can travel 500 miles per day, it would take a fleet of 3000 trucks, with one truck arriving and unloading every 2 minutes, to replace a 150,000-barrel per day, 1,000-mile pipeline. In the United States of America, oil pipeline shipments account for more than 17% of the transported volume but less than 2% of the country freight cost [2]. As another example, the Brazilian pipeline network owned and operated by petrobras. It has an extension of 7,000 kilometers, comprising 30 individual interconnecting pipelines, all with very different physical characteristics, and through which more than 30 different types of products circulate. There are 14 distribution depots that can store up to 10 millions cubic meters of these products, stocked in more than 200 tanks located at such depots. A partial illustration of the Brazilian southeastern network is shown in figure 1.\nPipelines must always be completely filled with products, meaning that a volume must be pushed into a pipeline in order to pump out the same volume at the other extremity. Flow directions can also change dynamically. Moreover, certain products are chemically incompatible and can not make contact with each other in a pipeline, so as to ensure their required quality level. Also, flow rates depend on product, flow direction and on the particular pipeline being used. At the depots, not all departing and arriving operations can be simultaneous, due to restrictions imposed both by the internal valve and duct layouts, as well as by the number of local pumps. Tanks can store just one type of product. Extraction or injection of volumes from or into a tank can not be simultaneous, and must always obey the tank capacities. As can be inferred, the operation of such a network is subjected to a complex set of physical and operational constraints.\nDue to its size and complexity, as well as to its financial impact, the efficient operation of this large oil pipeline network is one of the most strategic problems faced by logistics at petrobras today. Yet, nowadays, the problem is basically solved manually, by executing a trial-and-error process with the aid of a proprietary simulator that checks whether some simple physical constraints are being satisfied. This process is very time consuming and, not rarely, the final results still violate some of the more complex restrictions. Clearly, this manual process is far from optimal and limits the efficiency of the network operation, as down-level operators must frequently apply corrections in delivery orders as a means to make the system work appropriately. In fact, it is common for the company to use trucks for transporting pending volumes, thus increasing the overall transportation costs, a situation that could be avoided by a more intelligent use of the pipeline network.\nStudies from the literature usually focus on more restrictive and smaller pipeline topologies, each with a reduced set of operational constraints that, despite making the problem more tractable, are far from representing real-world scenarios. This is a conse-\nRefinery\nJunction\nFigure 1: Petrobras pipeline network.\nquence of the high number of hard sequencing and timing constraints involved, complicated when large and more generic topologies are considered.\nWe propose new algorithms for generating feasible solutions for a very large pipeline planning and scheduling problem, where most of the hardest real-world constraints are taken into account. Our approach has two phases: the planning phase is implemented as a constructive heuristic that generates delivery orders, representing transfers between two depots; and in the scheduling phase, a Constraint Programming (CP) model, is used to establish an ordering among the delivery orders, at each pipeline and each tank. The resulting algorithm, specially tailored to deal with large instances, generates more reliable delivery orders and can also be used to validate production and demand trial scenarios. This strategy proved to be very flexible, permitting easy addition or removal of operational requirements, and also facilitating the test of new search heuristics. As will be discussed later, CP was at the core of the computational model devised, being capable of finding good operational solutions for real problem instances in an adequate amount of computer time. Several reasons motivated the use of CP. Primarily, the scheduling problem is highly over-constrained and has several non-linear constraints, which can be easily modelled in the CP paradigm. Besides, the main goal was to search for a feasible solution, and so the choice of variables for value assignment in the CP model benefits from special restart strategies.\nThis project was a joint work with PETROBRAS, the Brazilian state-owned oil company, which provided both problem specifications and instances, as well as analyzed the proposed solutions. The prototype developed is being considered for use as an auxiliary tool to aid planners at petrobras.\nThis article is an extension of our earlier works on this topic [3, 4]. It contains a much more detailed description of the problem and of the new algorithms. The text is organized as follows. Section 2 describes the problem. Section 3 presents some previous works related to pipeline scheduling. Section 4 discusses in detail the heuristic and CP\nmodels that comprise the planning and scheduling phases. Finally, section 4 discusses our computational results while section 6 presents our conclusions and points to further work.\n2\tProblem Definition\nA pipeline network system is composed of three sets: tanks, depots, and pipelines. Tanks are used for product storage. Depots are geographically dispersed. They represent refinery facilities and oil-derivative local markets. Each depot has its own subset of tanks. Pipelines interconnect the depots and are used for product transportation. A pipeline connects only two depots.\nAn illustration of a pipeline system is presented in figure 1, in which products (or fluids) F0, Fx, and F2 can circulate. The figure shows 4 depots, D0, Dy, D2, and D3, connected by pipelines P0, Py, P2, P3, and P4. A label Tj refers to the i\u2014th tank in depot Dj for stocking product Fk. Note that two pipelines connect depots D2 and D3, which is a common situation in practice.\nVolumes must be extracted from tanks before pumped into a pipeline. On being pumped out of a pipeline, volumes can either enter a tank or move directly into another pipeline. The sequence of pipelines traversed by a volume when moving from its origin to its destination comprises its route. More precisely, we define a route as an alternating sequence of depots and non-repeating connecting pipelines. For example, the sequence D0PyD2P3D3 represents a valid route in figure 1. A pipeline in a route is called a segment. All product volumes in circulation must have a pre-defined route assigned to it. Also, a volume cannot be stocked at intermediate depots in any route; it can only be deposited in a tank at its destination depot.\nThe problem consists of scheduling pumping operations in order to satisfy the depots\u2019 inventory constraints. Individually, a pumping operation is taken as a continuous and atomic product injection into a pipeline at its origin depot. Each operation specifies information about the pumped product, volume, route, origin, and destination tanks, as well as about its start and end pumping times. The operations must also obey a complex set of operational restrictions over a given planning time period, or horizon. Restrictions regarding tanks, pipelines, and depots are described in the following three sections, respectively. Inventory constraints are described in section 2.3.\nAll volumes are given in standardized metric units.\n2.1\tTank Restrictions\n(1)\tTanks have a fixed maximum capacity which must always be respected. Minimum capacities are all set to zero units.\nFigure 2: A pipeline network example.\n\u25a1 f0\n\u25a0 >\n\u25a0 b\n(2)\tA tank can only store one type of product during the whole planning horizon. This constraint, required by field operators, ensures adequate product quality by avoiding possible mixtures. A depot can contain more than one tank per product, but does not necessarily contain tanks for all products. It is possible that a depot contains no tanks at all, being used solely as an intermediate transmission facility between two pipelines. In figure 1, depot D2 depicts such a situation.\n(3)\tAll injection and extraction operations targeting a common tank must be time disjoint. This is due to the internal connections of subsidiary pipes and valves inside a depot. Therefore, a new operation at a tank can only begin when all previous scheduled operations at that tank are already completed.\n(4)\tThe initial product stock level at each tank must be respected.\nProblem specifications in which constraint 3 is satisfied are said to have the individual tank property. Some alternative models [5] relax this restriction by considering virtual tanks for each product at each depot. Such virtual tanks aggregate the capacities of all real tanks for a product in a given depot.\n2.2\tPipeline Restrictions\n(5)\tPipelines must be completely filled with products at all times, since they are pressurized. Hence, in order for a certain product to leave a pipeline, it is necessary to push it out by injecting the same volume at the other pipe extremity. For example, in figure 1 suppose that a certain volume of product F2, at the extremity of pipeline P4 connecting into D3, is to be pumped out. If we had enough volume of another product, say Fo, at the extremity of pipeline P2 facing depot D2, and if its route suffix were P2D2P4D3, we could schedule a pumping operation with origin at Dx making active the route DxP2D2P4D3. Executing now this operation would push F2 into a tank at D3, as desired. Note that it will be necessary to have enough volume of some product to insert into P2 at Dx. Further, the pumping operation\nwith origin at D1 is just another operation to be scheduled in the network, among many others. So it must have its product, volume, route, origin and destination tanks already defined, as well as its start and end times.\n(6) Pipelines must be able to operate in an intermittent fashion, i.e., some time may elapse between the end of a pumping operation and the beginning of the next one in a certain pipeline. Even though longer continuous transfers are more economical and thus preferred, a pipeline flow can be temporally suspended for several reasons. For instance, as pipelines in a depot may share the same pumps, they might not be able to function simultaneously (see also constraint 12). Another common scenario is when three pipes form a \u201cY\u201d connection. Suppose that the flow is now downward from the right segment into the lower common segment. If in a route containing the left segment there are products with a more pressing deadline, as soon as the volume of the present operation that is now flowing from the right is completely inserted into the common segment, the present operation on the right side may be stopped thus allowing the flow from the left segment to start. If this situation repeats itself, we will see the right branch operating in an intermittent fashion, giving way so that more urgent products can circulate first into the common segment. Note however that once a volume is inserted in a pipeline it can not be separated in two parts by the insertion of other volumes in between.\n(7)\tAll injection and extraction operations targeting a common pipeline must be time disjoint. In other words, it is not possible to simultaneously inject products into a pipeline from two different sources, for instance, to increase the resulting flow rate. Similarly, a product leaving a pipeline can not be injected into different tanks or pipelines.\n(8)\tSome pairs of products, so called incompatible pairs, can not make contact within a pipeline, otherwise a quality loss will ensue. For example, both products inside pipeline P2 in figure 1 must be compatible. Such operational restriction is also known as the interface constraint.\n(9)\tAs there is a limited number of pumps per depot, and given that products have different densities, a maximum flow rate must be observed per pipeline, per product and per flow direction. Thus, the pumping operation flow rate can take any real value between 0 and the minimum value of the maximum flow rates of all products in the current route. We do not consider minimum flow rates due to the lack of accurate data. However, operators accepted this as a valid simplification since pressing deadlines naturally require products to be pumped as fast as possible.\nTqoq Too1 T002\tTo1o To11\nt=0\t\t\t\t(KBI\t\t1)\t\t\n\t\t\t\t\t\t\t\n\t\t\u25a0\t\t\t\t\t\t\t\t\t\t\t\nt=l\t\t\t\t\t\u25a0IZZDZZI)\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t=:\t\t\t\t\nt=2\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\u25a0\t\t\t\t\t\t\t\t\t\t\t\t\t\nt=3\t\t\t\tK3 1)\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\u25a0\t'\t\u25a0\t\t\t\t\t\t\t\t\t\t\t\t\t\nt=4\t\u2014\t\t\t\t\t\t \t\nFigure 3: Example of a flow reversal.\n(10)\tFlows can change direction dynamically, an event called pipeline flow reversal. An example of a reversal is illustrated in figure 3 for a network with a single pipeline topology. During the time period from t = 0 to t =2, product F2 is extracted from tank T002 in depot D0, and is used to push another product into tank T010 at depot D1. As soon as the first product is completely injected into its destination tank at t = 2, product F2 must return to the first depot, since there is no tank for this kind of product at depot D1. This is done by using product F1 from tank T011, at D1, to push F2 back to its original tank, at D0, thus forcing a change of flow direction in the pipeline at t = 3 and t = 4.\n(11)\tAlthough there is no restriction barring the creation of new routes, the most common choices as dictated by previous human experience should be preferred. These routes are given as input and will be denoted by a set R throughout the text. Note that we are using a fixed set of routes, and we are not exploring all possible routes through the network. In some cases, we might use a route from this set which was not used before in manual solutions to transport specific products, thus deviating from the usual routing that appear in manual solutions for those products.\n2.3\tDepot Restrictions\n(12)\tEach depot has an upper limit on the number of outgoing pumping operations, which depends on the number of locally available pumps. Therefore, it may not be possible for all the pipelines at a depot to be in operation simultaneously.\n(13)\tAt each depot, tanks are connected to external pipes by a mesh of shared structures,\nlike valves and auxiliary pipes. Depending on the internal arrangement at a depot, certain sending and receiving operations can not be active simultaneously. Such sets of operations are called forbidden alignment configurations, or simply forbidden sequences. For instance, in a certain depot one may not be able to send gasoline through any pipeline while diesel is being received by any other pipeline.\n2.4\tInventory Constraints\nThe inventory constraints are related to tank capacities and the maintenance of desired stock levels at each depot. The stock of a product at a certain depot at time t is obtained by summing the volumes of that product at time t in all tanks that can stock the product at the given depot. In this work, we only consider inventory constraints related to the satisfaction of tank capacities. Nevertheless, the pipeline operators also provide the desired maximum and minimum level of product stock levels per depot, which are being used solely as a guide to the search procedures.\nThe stock levels in a depot change mainly due to production and demand operations. Productions represent volume creation at refineries, while demands represent volume consumption by local markets. Both are planned in advance, using market estimates and other data such as raw products availability and refinery capabilities. Usually, a refinery depot produces more than it can actually store within the given planning horizon, so as to satisfy market demands at other locations. This, of course, requires products to circulate throughout the pipeline network. In addition, an excess of inventory in each depot is also preferred to prevent against emergency situations, such as the repair of a damaged pipeline.\nThe consumption rate of each product may vary greatly according to monthly seasonal markets. Moreover, it is difficult to foretell exactly the local market needs for a long time horizon. As a result, pipeline operators are required to constantly update the network schedule to accommodate new demands, guaranteeing they will be satisfied on time. Given that, and in order to represent productions and demands in a reliable and computationally feasible way, the following model was devised, and accepted by the pipeline operators as an adequate simplification. Each production and demand, given as input, is composed of a volume, a product, its corresponding depot, and a time frame that defines when the production or demand must be serviced. The production (demand) volume can be injected (extracted) instantly at any time within its time frame. Also, this volume must be necessarily injected into (extracted from) one or more tanks, the selection of which being responsibility of the algorithms. In this way, productions and demands are regarded as common tank operations. Hence by constraint 3 they can not occur simultaneously with other tank operations. Usually, the time frame given for a demand or production\ncorresponds to one day, i.e., its volume can be injected or extracted at any time during the day.\nAlthough instantaneous volume injection and extraction is not physically realizable, the operators believe this is a reasonable model to capture variations about local markets, given the inherent uncertainties about the real data. Operators also have some flexibility to adjust the timing when products are delivered to clients and, to a smaller degree, they can also reschedule the production planning at refineries. Furthermore, this model gives the operators flexibility to drive the algorithms under various scenarios, allowing them to simulate different production and demand curves.\n2.5\tDefinition of a Solution\nThe problem input comprises a static and a dynamic component. The static component is described by the sets of tanks, pipelines, depots, and their operational parameters, such as the maximum number of simultaneous outgoing pumping operations at each depot. The dynamic component is given by a set of productions and demands (see section 2.3) that must be satisfied. The dynamic component also contains the initial network state. The initial state is defined by the sequence of product volumes inside each pipeline, the assigned route for each of these volumes, and the stock level in each tank at the beginning of the horizon. It also gives the set of ongoing pumping operations at the initial instant.\nGiven the problem input, a feasible solution is defined by a set of pumping operations which ensures that all demands and productions will be fulfilled in their given time frames. That is, all product volumes from productions (demands) are to be correctly stored (extracted) without violating tank capacities. In addition, the pumping operations must obey all operational constraints stated in sections 2.1, 2.2, and 2.3. Finally, it is also necessary to make explicit the exact times and tanks allocated for each production and demand. This is done by representing the associated injections and extractions, respectively, as pumping operations that have a null route.\nThe program output is a table containing a list of all pumping operations. This list is then submitted to a proprietary software that executes simple consistency checks. Passing the consistency checks, the list is then handed to logistic engineers for use as a guide during the actual operation of the pipeline network. An example of such list is shown in table 1. Column headings are as follows: T and Tf are the start and end times, respectively; Vol is the volume pumped; Pd is the product code; TkOr and TkDt are origin and destination tank codes, respectively; and Route is the route code. A full solution table would contain several hundred similar lines.\nIn this work, no objective function are considered, as more accurate data about energy and operational costs are still being gathered by PETROBRAS. However, as we will see in\nTable 1: Solution Example\nTi\tTf\tVol\tPd\tTkor\tTkDt\tRoute\n2075\t2362\t858\tFi\tToil\tTo31\tDi Po Do Pi D2 P3 D3\n3456\t4021\t722\tFi\tT032\tTool\tD3 P3 D2PiDo\n4857\t4869\t30\tFo\tT0i0\tT000\tDi P2D2P4 D3P3D2PiDo\nTable 2: Comparison of the main approaches.\nReferences\t[9]\t[i0, ii, i2]\t[5, i3]\t[i4, i5]\t[i6, i7]\t[i8, i9, 20]\tOur work,[3]\nDepots\t8\t5\ti2\t7\t2\t2\ti4\nPipelines\t8\t4\t28\t7\ti\ti\t29\nTanks\t40\t25\t84\t28\ti6\ti2\t242\nProducts\t5\t4\t7\t4\t8\t6\t32\nHorizon\ti4 days\t3 days\t5 days\t80 units\t5 days\t30 days\ti0 days\nContinuous time\t\tU\tu\t\t\t\tU\nVariable Flow rate\t\td\t\t\tU\tU\tU\nIndividual Tanks\t\t\t\t\tU\t\tU\nGeneral Topology\tU\t\tU\tU\t\t\tU\nForbidden Sequences\t\tU\tU\t\tU\tU\tU\nMain Technique\tGA\tMILP,VNS\tA-Teams,MILP\tGA,MILP\tMILP,CP\tMILP\tHeuristic+CP\nResults\tFeasible\tOptimum\tInfeasible\tFeasible\tOptimum\tOptimum\tFeasible\nsection 3, the apparently simpler task of finding a solution satisfying such a huge number of intricate constraints is a great challenge in itself.\n3\tRelated Work\nThe pipeline operation problem comprises a highly complex and diversified set of constraints. Examples of difficult operational restrictions include product sequencing inside a pipeline, interface constraints, mass balance in tanks and various inventory management conditions. Complexity analysis of some relaxed versions of the pipeline scheduling problem can be found in [6, 7, 8].\nDue to the problem\u2019s economical and practical importance, a number of methods have been proposed in the literature to automate the planning of pipeline network operation. The characteristics that distinguishes such approaches from each other are mainly related to the network topology and the granularity of the scheduling unit of time. As real-world scenarios require the satisfaction of a high number of constraints, the level of detail is an indication of the effectiveness of their solutions in practice. Table 2 summarizes some important previous approaches and their most important characteristics.\nThe most studied topology consists of one pipeline connecting a single origin to multiple destinations, which are distributed along the pipeline. Usually, the origin represents\nan oil refinery, the destinations are consumer markets, and the flow in the pipeline is unidirectional. The study of simpler networks are motivated by the fact that many real scenarios are composed of a single pipeline. In addition, it is easier to model some of the problem restrictions, specially those involving variable flow rates, product storage, and energy costs. An early work along this line appeared in [21], where an artificial intelligence technique called Beam Search was applied to an Indian network. Although the procedure strongly relies on human intervention, it is capable of handling tank capacities and interface constraints.\nAlso, several Mixed-Integer Linear Programming (MILP) optimization models were developed for this type of topology. The work in [22] deals with a network composed of 5 depots, where 4 products must be transported among them. The proposed model is based on an uniform and discrete time representation and on disjunctive programming. It handles a large number of hard constraints, such as mass balances and product demands, besides minimizing storage and interface costs. However, the authors were not able to obtain optimal solutions, even considering a simple 3-day planning horizon. For this reason, in [23] the model was improved with the addition of integer cuts and redundant constraints, which enhanced the MILP computational performance.\nIn [10], a new continuous time and volume MILP formulation was proposed for the same problem presented in [23]. The continuous representation was effectively smaller in terms of the number of binary variables and constraints. As a result, optimal solutions were obtained in about three orders of magnitude faster than in [23]. The continuous representation was also used in [11], where the authors additionally modelled variable pumping flow rates and stock management decisions, formulating the problem also as a Mixed-Integer Non-linear Programming (MINLP) model.\nAs described in [11], many studies focus on decomposition techniques for single topologies. The work in [16] presents a 3-stage decomposition strategy for a network composed of a refinery, a pipeline, and a depot with a set of tanks. The first stage defines the tanks for each pumping activity. The second stage heuristically creates temporal constraints taking into account the demand requirements. Finally, the last stage is an MILP model to decide upon the pumping times, while having fixed values for the previous parameters. All the MILP models were based on an uniform time discretization. Later, the work in [17] proposed an integrated approach, using both CLP and MILP models, in order to solve the same instances, generating good solutions.\nMore recent works [18, 19] study a Portuguese pipeline network, with a topology similar to that considered in [16]. The authors propose an MILP model with new inventory constraints, based on [10]. In [20], the model is improved to consider intermittent pipelines and variable flow rates. Moreover, a rescheduling strategy is implemented in order to deal with possible perturbations on the instance data.\nThere are also studies regarding multiple origins, multiple depots, and various pipelines interconnecting them. They represent more realistic networks, since the production of oil derivatives is usually distributed in several geographic locations. In these scenarios, the problem complexity is much higher than with simpler topologies. In addition to inventory management at each depot and product sequencing in the pipelines, it is also necessary to take into account operational constraints that limit the simultaneous usage of different pipelines. Also, the models must ensure the correct synchronization of direct flow transmission between pipelines, which is common in such scenarios. In general, the current approaches for more complex topologies neglect most of the operational constraints in order to make the problem tractable.\nAmong such approaches, [13] proposed an MILP based on a network flow model to solve a relaxed version of the problem. The specification included about 14 depots and 29 pipelines, but considered that all depots contained tanks for all products. Furthermore, the pumping flow rate was fixed per pipeline and only simple inventory constraints were considered. Despite these relaxation, it took more than 50 hours of computer time just to find the LP initial basis. In [5], the authors propose the use of an heuristic method known as A-Teams, adapting the pipeline scheduling to a job shop scheduling. However, they were still unable to find feasible solutions.\nThe work from [24] implements a Genetic Algorithm for a directed tree network topology with 8 depots and with only a few restrictions, focusing mostly on the basic pipeline operations. The authors further improved the model in [15], hybridizing the evolutionary algorithm with simple MILP models. A more recent application of meta-heuristics to more general topologies, but with relaxed operational constraints, can be found in [9, 12].\nAnother research direction is discussed in [25], which addressed the pipeline scheduling problem as a general-purpose planning problem. A new domain specification and a planner were created in order to deal with general topologies and some tank constraints. Although not effective for large instances, the work established a new benchmark at the International Planning Competition [26].\nThe use of Constraint Programming for general topologies was first proposed in [4]. The work proposed a two-phase algorithm composed of an heuristic and a CP model. It also considered individual tanks, intermittent pipelines, direct pipeline flow transmissions, as well as flow reversal operations at any pipeline. This work yielded feasible solutions for real instances and motivated a novel CP model for the same problem. In [3] the heuristic was enhanced using a CP approach composed of two sub-models. In addition, it considered further difficult constraints related to forbidden alignment sequences and simultaneous pumping operations. This article is an extension of these previous works, and also describes in full detail procedures considered therein.\n4\tMethodology\nThe procedure currently applied by PETROBRAS to operate its pipeline system is based on a trial-and-error process, in which manually constructed solutions are continuously tested and adjusted with the help of a proprietary simulator. This method is not only time and people demanding, but the lack of more detailed long-term foresight forces the solution to be rebuilt everyday by the pipeline operators.\nManual procedures are still used due to the great difficulty in solving the problem in its full setting, as mentioned in section 3. Consequently, decompositions methods are almost mandatory in order to cope with the problem size, a topic more fully discussed in\n[11]. We propose a novel decomposition method inspired on previous work [16] and on the manual procedures. This new framework is capable of dealing with larger and more complex topologies and can also accommodate additional constraints which are essential to guarantee the operational feasibility of solutions.\nThe problem is divided into two parts, the planning phase and the scheduling phase. The execution main cycle is schematically presented in figure 4. The planning phase decides the necessary volume transfers among depots. Each of such transfers must be scheduled in order to satisfy all demands, and distribute all volumes produced at refineries and so ensure an adequate stock level at each depot. Furthermore, the planning phase must also define the pipeline routes along which such transfers will occur, while minimizing traffic and possible product interfaces in each pipeline. Each transfer between depots is deemed a delivery order, a notion to be made precise shortly. The output of the planning phase is a set of delivery orders.\nThe scheduling phase represents the core decision process in our framework. Once the orders have been created, this phase must generate and sequence the necessary pumping operations so as to make it possible to carry out the complete set of orders. The scheduling phase must ensure that the orders are scheduled while observing all operational restrictions, such as tank capacities, forbidden sequences and interface constraints, as described in section 2.\nThe output of the scheduling phase is a complete solution to the problem, as detailed in section 2.4.\nThe planning phase takes a high level view of the pipeline network. The set of orders it generates in order to to satisfy productions and demands involves relatively few scheduling details. This phase is similar to the current initial procedures used by field operators at PETROBRAS when constructing a manual solution. In this vein, heuristic techniques proved quite suitable to this planning phase. First of all, only a small subset of pipeline constraints are analyzed in this sub-problem, and previous works showed that heuristic approaches have a good performance in these cases [9, 14]. Moreover, when putting\nsuch techniques to the test, one can take advantage of previous human expertise when designing their search criteria, thus enhancing the chances of finding a feasible solution. In this work we propose a randomized greedy heuristic to generate the set of delivery orders. This heuristic is described in section 4.1.\nThe scheduling phase demands a much higher level of detail. Investigation shows that modelling it as a simple MILP is not viable, since the number of variables and constraints would grow at an unacceptable rate when considering more complex network topologies. On the other hand, pure heuristic techniques were also greatly impaired when applied to the scheduling phase. Slight modifications in a solution can create serious collateral perturbations over the problem structure. For example, since products can flow directly from one pipeline to another, changing a single pumping start time may delay the arrival of a number of other products that pass through connected pipelines. Consequently, it is difficult to define a representation in which it is possible to execute a computationally affordable number of local modifications in order to find a viable solution.\nOn the other hand, the CP paradigm is well-suited to the scheduling phase. It provides a powerful modelling language that permits the implementation of operationally crucial constraints, besides providing enough flexibility to extend the model if new restrictions were deemed necessary by pipeline field operators. Most importantly, it allows the exploitation of special problem patterns explicitly. This is done, for instance, by modelling multiple sub-problem representations in order to use specialized and adequate constraint propagation mechanisms to solve each of the sub-problems. When modelling specific subproblems one can take advantage of good representations proposed in previous works, such as the continuous time representation in [10]. In fact, such multiplicity of perspectives played an important role in the final model, greatly improving crucial domain reductions. Furthermore, a preliminary study [4] already indicated that CP would be flexible and powerful enough to treat the real problem faced by petrobras. Finally, the use of CP was further fostered by its well-known good performance when treating scheduling problems [27]. In particular, at this stage of development, CP suited the application\u2019s needs due to its notable ability to find feasible solutions. The CP model for the scheduling phase is presented in detail in section 4.2.\n4.1\tPlanning and Routing\nThe planning and routing phase essentially represents a global view of the problem. The main objective is to define the necessary product transmissions between depots, in a way that all demands are fulfilled and production volumes are stored without violating any inventory constraints. On the other hand, it does not define how the transmissions will be performed in an operational level, i.e., their sequence or schedule.\n\nInstance\nSolution\nFigure 4: Solver Framework.\nThese transmissions between depots are formally modeled as structures called delivery orders, or orders for short. An order O represented by the tuple\nO = (OriginT ank, DestinationT ank, Product, Volume, Route, Deadline) enforces that some Volume of a Product must be extracted from the OriginTank. After that, it will travel through a Route that starts at the depot of the OriginTank and ends at the depot of the DestinationTank. At this last depot, the Volume will be inject into the DestinationTank. All of these operations must have ended before the Deadline. The planning and routing phase must generate a set of delivery orders as its main output. The input consists of both static and dynamic components of the problem, as described in section 2.4.\nIn this context, an order is considered to be indivisible, i.e., once a volume from an order starts to be pumped into its first route\u2019s segment, no volume from any other order can also be pumped into the segment while the first volume is not completely injected. Nevertheless, orders are not necessarily pumped in continuous streams, and, thus, several pumping operations might be used to pump an order into a pipeline, as long as it does not interleave with any other orders (see restriction 6, Subsection 2.2). This restriction was imposed in order to reduce product interface in the pipelines which, as said before, may result in some quality loss.\nTo generate orders, we created a randomized constructive heuristic that uses the accumulated human experience on the operation of the network at PETROBRAS. One of the purposes of the randomization is to produce diversified sets of orders in case the previous sets of orders were infeasible, increasing the chance of finding one or more solutions. Also, the heuristic takes into consideration other criteria that are difficult to handle manually, such as estimating the time for product volumes to arrive at depots.\nDelivery orders are created incrementally. A group of functions evaluates values for the order properties, based on the input and previously created orders. This way, for each\norder these functions will give different values as the network estimates changes. These estimates includes satisfied demand, pipelines, and tanks utilization. For each order its properties are determined as follows:\n1.\tChoosing Product, Destination Depot and Deadline: For every triple of product p, destination depot bd and day t, define\nVp,bd,t = H - (LM(t) - TNPibd),\nwhere H is the last minute in the planning horizon, TNP,bd is the minute when enough of product p is available in all depots that are able to deliver product p to depot bd in time to fully satisfy the demand at day t, and LM(t) returns the last minute of day t. The (LM(t) \u2014 TNp,bd) component gives an estimate of how much time there is left to satisfy the demand. All times are computed relative to the beginning of the planning horizon. We randomly select some triple (p, bd, t) within the best a1 percent triples with the highest, i.e. most critical, Vp,bd,t values. The idea behind this strategy is to satisfy any pressing demands first.\n2.\tChoosing Origin Depot and Route: Given a selected triple of product p, destination depot bd and due date t, proceed as follows. For every pair of origin depot bo and route r starting at bo and ending at depot bd, define\nV = (1 \u2014 CG(r)) x\nLM (t) \u2014 (TDp,bo + Tminrp)\n(1 + NRr )\nwhere TDp,bo is the minute when there is any positive quantity of the product p available at bo, and Tminr,p gives the minimum amount of minutes for product p to travel along route r. The component (TDp,bo + Tminr,p) gives the minimum time when one unit of product could have arrived at the destination depot. The term NRr captures the number of such occurrences if route r is used and CG(r) gives an estimated fraction of use for all the pipelines in route r, based on previously created orders. A higher number of possible necessary reversals or overloading of pipelines are unfavored. Considering all these factors, a pair among the best, i.e. largest, a2 percent Vbo,r values is randomly selected. Hence, the route with the greatest difference between earliest arrival and due times, for any volume occurring in it, will be selected. Note that this strategy also strives to minimize the number of flow reversals, a possible yet expensive maneuver.\n3.\tChoosing Origin, Destination Tank, and Volume:\nGiven a destination depot bd, an origin depot bo and a product p, proceed as follows. For every pair of tanks to and td, both holding the product p and located at depots\nbo and bd, respectively, let\nVto,td,vol \u2014\tmax {Fto,bo,pi Ftd,bd,p}^ x vo1,\nwhere Ft,b,p \u2014 URt/MURt,b,P. Here, URt \u2014 TAloct/Capt gives the fraction between the volume so far allocated to a tank t (TAloct) and the tank capacity (Capt) i.e., it measures how much a tank t has been used by force of previous orders, and the term MURt,b,P is defined as the maximum of URt among all tanks t at depot b that can store product p. We choose the maximum fraction between the origin and destination tanks in order to capture the one most relatively used between them.\nNow, by letting\nvol \u2014 min{TQdeto, Captd - TQdetd},\nwhere TQdet is the volume residing at a tank t after all previous orders have been executed, we get the maximum volume that can be transferred from the origin tank to the destination tank.\nWe then select randomly within the a3 percent tanks with largest Vtojd,vol values. This gives a pair of tanks that can accommodate one of the largest volumes that can be transferred between the origin and destination depots.\nAs soon as there is no more demand to choose from, the planning phase terminates. After the procedure ends all demands are guaranteed to be satisfied if the resulting orders can be scheduled to arrive by their respective deadlines.\nAt this point, network operators can interfere in the planning of deliver orders by adding, modifying, or removing orders according to their particular needs. This flexibility is interesting since sudden needs might unexpectedly arise. For example, there might be exceptional cases where the operators want to empty certain tanks for emergency maintenance purposes. This could be achieved by issuing new orders that remove products from those particular tanks. Or the pipeline operators might dislike the proposed set of orders, for some unexpected reason.\nNote that the whole planning phase can always be activated again. By doing so, the randomization built into the procedure will, most certainly, give rise to a different set of orders, for the same input data. In any case, the focus of the heuristic is to generate a set of orders that is feasible for the next scheduling phase, described in section 4.2.\nFree Delivery Orders\nIn certain scenarios, the orders created by the planning phase are not enough to guarantee a valid solution. For instance, suppose that only two orders need to be scheduled along the\nsame route, and they have incompatible products. Since we can not push both products successively into a same pipeline, a third product must be inserted between them.\nIn order to cope with such situations, free delivery orders are created before entering the scheduling phase. In contrast to regular orders, their volumes, products, and origin or destination tanks are treated as variables instead of constants. Moreover, such free orders do not have a deadline parameter and may have a null volume associated with them. Furthermore, their routes are previously determined by choosing among those typically used by pipeline operators. Operators can change such routes by editing a configuration file.\nFree orders are also used to represent products that remain in the pipeline at the end of the planning horizon in order to ensure that all pipes are always completely full. These orders do not have a destination tank, and constraints are used to indicate they are the last ones to be pumped into the pipelines. Further explanations about free delivery orders are given in section 4.5, which also considers a running example.\n4.2\tScheduling Phase\nThe scheduling phase treats the problem of generating a number of pumping operations so as to satisfy a given set of delivery orders. These pumping operations must observe the network operational constraints, as explained in section 2. Otherwise, the solver must prove that the present set of orders is infeasible, i.e., either the deadline of one or more orders cannot be met, or there is some operational constraint, such as tank capacities, would always be violated, for any possible schedule. In the latter case, a new set of orders can be requested from the planning phase.\nOur research indicated that it would not be practical to create a single CP model to tackle the scheduling phase in its entirety. In a typical horizon of 5 to 10 days, the planning phase is expected to generate hundreds of orders. Such orders involve dozens of products that leave from and arrive at several tanks, circulate through many common pipelines, and are subjected to thousands of interrelated constraints. The resulting problem size would be excessively large as shown in [4], thus preventing the use of more realistic operational restrictions.\nAs a result, the scheduling phase was further decomposed in two sub-problems: the sequencing and the scheduling sub-problems, solved in succession. The sequencing subproblem consists of defining the ordering according to which delivery orders will be satisfied at each pipeline and at each tank. This ordering must primarily observe interface and inventory constraints, as well as satisfy time bounds present in each delivery order. Once a valid ordering has been found, the scheduling sub-problem treats the problem of dividing each delivery order into smaller individual pumping operations, as well as as\nsigning their respective start and end times. Such pumping operations must enforce the remaining scheduling restrictions, respecting the fixed ordering already established by a solution to the sequencing sub-problem.\nThe sequencing and scheduling sub-problems are described in sections 4.3 and 4.4, respectively. We note that each sub-problem considers a restricted set of constraints, although some constraints will be represented in the models designed for both sub-problems.\nAll time variables represent minutes, the time granularity currently adopted by network operators. As a consequence, all variables have integer domains. Time value roundings, e.g. volumes calculated for some particular combination of flow rate and pipeline extension, can be safely neglected given the large volumes that are involved. Also, variable domains are easy to infer from input data instances and need not be further detailed here.\n4.3\tThe Sequencing Sub-problem\nThe input for the sequencing sub-problem is the set of delivery orders and the problem static and dynamic components, described in section 2.4. A solution is an ordered list that defines the sequence of delivery orders to be satisfied at each tank and pipeline. This sequence must take into account ordering-related conditions, such as interface constraints, tank capacities, and flow direction in each route segment. Additionally, other essential operational restrictions are also treated, such as valid time bounds for the pumping operations.\nThe single CP model devised to solve this problem will be referred to as the sequencing model. Due to its complexity, more than one representation, or viewpoint, was used so that different problem restrictions could be more easily modelled. A viewpoint contains specific variables and constraints to deal with the corresponding restriction they focus on, as well as defines additional redundancy used to enforce constraint propagation [28]. The interconnection between viewpoints is done by defining channelling variables and posting additional channelling constraints [29]. In our model, it suffices to label only the channelling variables, as the constraint propagation in each viewpoint ensures that their variables are bound and, as a result, the corresponding restriction is satisfied.\nOur model interrelates two different viewpoints. The order viewpoint provides a global view of the problem, dealing mainly with time and routing constraints for individual orders, and also with tank capacities. In contrast, the operations viewpoint captures a local view of the problem, representing only the operational behavior of each pipeline. Finally, the channelling variables indicate the proper sequencing of the orders in the corresponding route segments and also in the appropriate origin and destination tanks. Both viewpoints are inspired on the previous MILP formulations cited in section 3, and,\nspecially, in the pipeline structure presented in [10, 11, 20].\nA notation for the input data and other specific details is described in section 4.3. The order viewpoint is detailed in section 4.3, while the operations viewpoint is described in section 4.3. Finally, channeling variables and constraints are presented in section 4.3. For the sake of clarity, the models are presented without considering free delivery orders. Section 4.3 describes the necessary changes to accommodate them, and Section 4.3 explains the search strategy that was used.\nSome notation\nLet P be the pipeline set, T be the tank set, and O = {o1,..., on} be the set of delivery orders received from the planning phase. For each oi G O, we define origin^) G T and dest\u00edn^) G T as the origin and destination tanks for order oi, respectively. Also, let route(oi) = (pi,... ,pm) be the sequence of pipelines that oi must traverse, i.e. its route. The intermediate depots are not considered in this notation, as products are stocked only in its destination tank. The volume corresponding to order oi will follow a pre-defined flow direction in each pipeline p G route(oi), given by the constant direction^ which can be inferred from route(oi). We consider four possible flow directions in a pipeline: N, if the order follows the normative, or preferred, pipeline flow direction; R, if it follows the reverse direction; NR, if it starts in the normative direction, but later changes to the reverse direction, thus leaving the pipeline through the same extremity it was pumped into; and RN, similarly to NR, but with its flow starting in the reverse direction.\nAs explained in section 4.1, orders are indivisible. Furthermore, volumes must strictly follow the direction specified in the corresponding orders. For instance, if direction^ = N, then the volume corresponding to order oi will never follow direction R once inside pipeline p. Hence, the volume corresponding to order oi, once inside pipe p, must be pushed out of p before any volume that moves along the R direction in p can be injected into p. This also implies that volumes are never injected to or extracted from the same route segment more than once.\nLet Pr and Dem be, respectively, the sets of productions and demands received from the planning phase, i.e. with their tanks already assigned. In this model, productions and demands are represented as delivery orders with routes designated as empty. Formally, Pr, Dem C O and for all oi in PrUDem, we have route(oi) = 0. In addition, production orders have their destination tanks specified and their origin tanks left as empty. Demand orders have their origin tanks specified, and their destination tanks left as empty. In this way, the relations between production, demand and delivery orders can be handled in a transparent and uniform manner.\nThe Order Viewpoint\nThe order viewpoint handles the problem globally, focusing on constraints that define valid time bounds for each order. These bounds are related to maximum flow rates, disjunction of pipeline operations and tank capacities. If any of these time bounds violate an order\u2019s deadline or an inventory constraint, the delivery order set is clearly infeasible. Otherwise, they will help ruling out invalid order sequences.\nWe define the concept of an activity [30] before describing the model variables. An activity is a structure composed of two variables: a start time variable and a duration variable. For clarity, we will also consider that activities contain an end time variable, which is clearly the sum of its start time and its duration variables. A variable var of an activity act will be represented here as Var(act).\nDue to the indivisibility and strict flow direction properties, each order will be represented by two activities for each segment of its route, symbolizing the time intervals in which the order occupies the extreme points of the pipeline. Formally, for each oi G O and and p G route(oi), we define two activities, sndiiP and rcvi,p. The first activity represents the time interval during which the volume from order oi was pumped into p, while the second represents the time interval during which the volume from order oi was pumped out of p. In this way, we have explicit variables that describe the times when an order\u2019s volume is being injected in and extracted from a pipeline. This representation is depicted in figure 5.\nNote that such activities do not necessarily represent continuous operations. In other words, the start time represents the initial instant in which the first volume unit was pumped into, or out of, the pipeline and, similarly, the end time is the instant in which the last volume unit was pumped into, or out of, the pipeline. Therefore, it is possible to create more than one pumping operation for each activity, as long as their start and end times observe the time interval imposed by the activity. This concept accommo dates for the possibility of an intermittent behavior during the execution of an individual order. As mentioned earlier, breaking activities into pumping operations is not dealt with at this stage.\nSimple linear constraints can be used to ensure bounds on flow rates and to state delivery deadline constraints. There is no explicit variables for flow rates, since we are only interested in a lower bound for the duration of activities (restriction 7 in section 2). Let max_flow_rateP)d,pr be a constant representing the maximum flow rate in pipeline p, for direction d, and traversing product pr. For each oi G O and each p G route(oi), we\nDelivery Order\n2 activities\nsend activity\nFigure 5: Activities for each pipeline in a delivery order\u2019s route.\nlet:\nEndT ime (rcvip))\nDuratzon(sndi,p) X max\u2014f1oW_ratep,direction^,product(oi)\nDuratiOn(rCVi,p) X max_flOW_ra.t6p)directioni,p,product(oi)\n<\tdeadline (oi),\t(1)\n>\tvolume(oi),\t(2)\n>\tvolume(oi).\t(3)\nBefore an order exits a pipeline, it must first traverse the full pipeline extension. Therefore, for a given order, the time elapsed between its send and receive activities in a pipeline must be at least the time necessary for its volume to traverse the full pipeline extension at the maximum flow rate. Let product (oi) be the product associated with order oi. For each oi G O and p G route(oi), we require:\nStartTime(rcvip)) > StartT ime(sndip)) +\nvolume (p)\nmax-f 1 OU_r at ep,directioni,p,product (oi)\n(4)\nBy the route definition, when an order is being pumped out of one of its intermediate segments it must be immediately pumped into its next segment, and without volume loss. Equivalently, while a receive activity is being performed in an intermediate segment, a send activity must be performed in the subsequent segment at the same time. This relationship can be easily modelled with the activity variables, as illustrated in figure 6. It consists of unifying [29] consecutive send and receive activity variables in the following way. For each oi G O and for each pair (pl,pl+1) of consecutive pipelines in route(oi), simply let:\nStartTime(rcvipi) = StartTime(snditpi+1), EndTime(rcVi,pi) = EndTime(sndi,pi+1).\n(5)\n(6)\n0 pi\t)\u2014\u00bb0\t)\n\u25a1\nFigure 6: Connection between two consecutive pipelines in an order\u2019s route.\nOrder activities related to a same pipeline must all be disjunctive with respect to time (restriction 7 in section 2). That is, a send (or receive) activity from a certain order must not overlap with the send (or receive) activities of other orders that share common pipelines. In order to guarantee this, we use the global constraint disjunctive. For all p G P, let\ndisjunctive({snd\u00bb>p : Vo\u00bb G O,p G route(o\u00bb)}),\t(7)\ndisjunctive({rcv\u00bb;P : Vo\u00bb G O, p G route(o\u00bb)}).\t(8)\nNext, we define two new activities: ext\u00bb and inj\u00bb, representing volume extraction and injection, respectively, at the origin tank origin(o\u00bb) and destination tank destin(o\u00bb) associated with order o\u00bb. Volumes injected into and extracted from tanks must not overlap in time as well. For all t G T, let\ndisjunctive({ext\u00bb : Vo\u00bb G O, origin(o\u00bb) = t} U {inj\u00bb : Vo\u00bb G O, destin(o\u00bb) = t}).\t(9)\nProduction and demand orders must occur within their corresponding time frames, satisfying the inventory constraints described in section 2.3. For each o\u00bb G Pr, let\nStartTime(inj\u00bb)\t> ProductMinStartTime(o\u00bb),\nEndTime(inj\u00bb)\t&lt;ProductMaxEndTime(o\u00bb),\nand for each o\u00bb G Dem, post\nStartTime(ext\u00bb)\t> DemandMinStartTime(o\u00bb),\nEndTime(ext\u00bb)\t&lt;DemandMaxEndTime(o\u00bb).\n(10)\n(11)\n(12)\n(13)\nBut note that tank capacities must also be taken into account. This is achieved by using a global constraint called a reservoir [30]. Reservoirs are resources that contain a minimum, a maximum, and an initial level. Activities can both increase the level (volume injection) or decrease the level (volume extraction) from reservoirs over time. These levels can be used to implement a tank\u2019s initial volume as well as its capacity. A link\nbetween activities and reservoirs is defined using the keywords consumes (capacity) and produces (capacity). For a reservoir TkRest, where t G T, we must have for each Qi G O:\nexti consumes (volume (oi)) TkResorigin(Oi),\t(14)\ninji produces(volume(oi)) TkResdestin(Oi).\t(15)\nFinally, the relationship between send (receive) variables and tank activities is analogous to those for pipeline volume transmissions. While an order\u2019s volume is being extracted from a tank, it must be immediately pumped into its first route segment. Similarly, a volume is immediately injected into its destination tank while it is being pumped out of its last route segment. For each oi G O, letting p0 and pm be the first and last pipeline along route (oi), respectively, we state:\nStartTime(sndip0)\t=\tStartTime(exti),\t(16)\nEndTime(sndiiP0)\t=\tEndTime(exti),\t(17)\nStartTime(rcvip>m)\t=\tStartTime(inji),\t(18)\nEndTime(rcviPm)\t=\tEndTime(inji).\t(19)\nIn summary, the constraints posed in the order viewpoint ensure the time consistency of orders, force deadline satisfactions, and also guarantee that operations at each pipeline and at each tank are always disjunctive. The inventory constraints are enforced in this viewpoint as well.\nThe Operations Viewpoint\nThe main intuition for this viewpoint relates to the rules for volume injection and extraction at pipeline extremities. Although some time bounds and disjunctions were established in the order viewpoint, it is still necessary to model the fact that, for a certain volume to leave a pipeline, the same volume must be pumped into the other extremity. This restriction imposes precedence relations between orders, and also further restricts activity time bounds. To capture these conditions, we state additional restrictions among the send and receive activities of different orders. These restrictions, basically, impose that a send activity is performed if and only if a receive activity occurs at the exact same time. Restrictions such as variable flow rates, which depend on the sequence of products inside a pipeline must also be considered. The model that implements these relations is described next.\nWe introduce a new activity structure for this viewpoint by defining operation activities. Besides start time, end time and duration variables, an operation activity also has other variables associated with it, namely a volume, a product, a direction, and an\norder variable. Operation activities will be bound to orders: the order variable can be seen as a pointer to the corresponding order in the O set, while the other operation order variables will represent values for the remaining order constants (the order\u2019s product, volume, directions, and so on). Moreover, operation activities will be created in a way that accommodates a more intuitive and compact representation of a pipeline operational behavior.\nFor each pipeline p G P, we define two sequences of operation activities, SndPipeP and RcvPipeP. The i-th element of the sequence SndPipeP is denoted by sndOpiP) and, similarly, rcvOpiP denotes the i-th element of the sequence RcvPipeP. The size of each sequence is the number of orders that traverse the corresponding pipeline, that is, \\SndPipeP\\ = \\RcvPipeP\\ = \u00a1{o\u00bb : Oi G O,p G route(oi)}|. Moreover, we consider that both sequences are time ordered, as enforced by the following constraints.\nStartTime(sndO'pip) > EndTime(sndOpj>P),\nV\tsndOpip, sndOpjP G SndPipeP, i > j, (20) StartTime(rcvOpi,P) > EndTime(rcvOpjtP),\nV\trcvOpitP,rcvOpjiP G RcvPipeP, i > j.\t(21)\nThe intended meaning of the operation activities in SndPipeP and in RcvPipeP is similar to the send and receive activities in the order viewpoint. Their timing variables represent the period of time during which the corresponding volume is occupying the extreme points of a pipeline. That is, the time variables of an activity sndOp G SndPipeP represent the time interval during which the volume specified by its volume variable is being injected into p. In the same vein, the time variables of an activity rcvOp G RcvPipeP give the time interval during which the volume, specified by the corresponding volume variable, is being extracted from p. Note that constraints (20) and (21) already enforce the precedence relation between such orders, i.e. the volume corresponding to operation activity sndOpi,P will necessarily be pumped into p before the volume corresponding to activity sndOpj,P, if i &lt;j. Similarly for the operation activities in a RcvPipeP sequence. As a result, by binding orders to operation activities at each pipeline, we can enforce the pipeline order sequences.\nFor instance, consider the example showed in the figure 7. Suppose we have six orders, labeled A to F, all with volumes traversing the pipeline as depicted in the example. The SndPipeP and RcvPipeP sequences will have each 6 operation activities, labeled 1 to 6. As order A is bound to send operation activity 1 and B is bound to activity 2, order A will have its volume pumped first into the pipeline. In a similar way, order C, bound to the receive operation activity 5, will have its volume pumped out first than will order D, which is bound to receive activity 4.\nFigure 7: Case when the send and receive activity sequences are different.\nMost importantly, note that a SndPipeP sequence is not necessarily the same as a RcvPipeP sequence, due to the fact that the flow direction in a pipeline may change. In the previous example, if activities C, D and E indicate flow reversals, i.e. they flow along directions NR or RN, then they will be pumped out of the pipeline in reverse order. See also figure 3.\nUsing the previous representations for operation activities we can model pipeline flow direction, interface constraints, and the pipeline operational behavior. For that, we make use of a special structure, called a pushing graph, to be detailed next.\nFlow Direction. Flow directions in a pipeline must be consistent. For instance, if an activity has its direction attribute set to N, then the next activity along the same pipeline must necessarily have its direction attributes set to N or NR. Direction attributes such as R and RN are only consistent after a sequence of NR activities whose total volume is equal to the pipeline volume, as required by restriction 10 in section 2. Attribute RN is treated in a similar way.\nIn order to ensure flow direction consistency, we use the global constraint Table Constraint [30]. First, we define a set of pairs that represent valid directions for any two consecutive activities. In our case, the set is\nValidPairs = { (N, N), (R, R), (NR, NR), (RN, RN)(N, NR), (NR, R),\n(R, RN), (RN, N), (NR, RN), (RN, NR)}.\nNext, we invoke table constraints over the direction variables in order to enforce that only valid pairs of consecutive operation activities can occur. For each p G P and each i G {1,..., |SndPipeP| \u2014 1}, we post\ntable_constraint (Direction(sndOpi;P), Direction(sndOpi+1;P), ValidPairs), (22) table_constraint ( Direction(rcvOpi)P), Direction(rcvOpi+1)P), ValidPairs). (23)\nAs for pipeline reversals, a special global constraint reversal was created, encapsulating the rules for flow direction reversal. It ensures that maximum sequences of NR or RN operations have their total volume sum equal to the corresponding pipeline volume. It will also ensure the proper sequence of send and receive orders during flow reversals, as illustrated in figure 7.\nDue to space considerations, this global constraint will not be described in full detail. Instead, we give intuition on the general mechanism of such procedures. For each operation activity op G SndPipep U RcvPipep, a new integer variable, called a group, is created. We state that two or more variables have the same value for the group variable if and only if they are part of the same maximum sequences of NR or RN operations. This property is implemented for the sequences SndPipep and RcvPipep separately. For each p G P and each i G {1,..., \\SndPipep\\ \u2014 1},\nGroup(sndOpi,p) = Group(sndOpi+1,p)\t<> R\tDirection(sndOpip)) = Direction(sndOpi+1,p)\t\n\t\tDirection(sndOpi,p) G {RN, NR},\t(24)\nGroup(rcvOpi,p) = Group(rcvOpi+1,p)\t\tDirection(rcvOpip) = Direction(rcvOpi+i,p)\t\n\tR\tDirection(rcvOpip) G {RN,NR},\t(25)\nGroup(sndOpip>)\t<\tGroup(sndOpi+i,p),\t(26)\nGroup(sndOpi,p)\t<\tGroup(rcvOpi+1,p).\t(27)\nThe following conditions, implemented using set constraints [30], ensure that the maximum sequences must sum to the pipeline volume. Let Gk = {opip : Group(opip>) = k, Direction(opi,P) G {RN,NR}}. For each p G P and each possible value k for the group variable,\nE\nsndOpi\u2019p^GkflSndPipep\nVolume(sndOpip>)\nE\nrcvOpi\u2019p^Gfc C\\RcvPipep\nVolume(rcvOpip>)\nVolume (p),\nVolume (p).\n(28)\n(29)\nThe group variables are also used to ensure the correct inverse bind sequence in flow reversals. First, it is necessary to guarantee that a send and receive operation activity have the same group value if and only if they are bound to the same order. For each p G P and each distinct i,j G {1,..., \\ SndPipep\\},\nOrder (sndOpip>) = Order(rcvOpj,p)\tGroup(sndOpi>p) = Group(rcvOpj,p). (30)\nIf two send activities have the same group variable value, then the receive binding\nsequence is the inverse of the send bind sequence. Thus, we have to impose the following conditions, for each p G P and each i, j G {1,..., |SndPipep|}.\nGroup(sndOp ,p) = Group(sndOpj ,p) A Direction(sndOp ,p) G {RN, NR}\t(31)\n3 k &lt;l s.t. Order(rcvOpk ,p) = Order(sndOpj,p) A Order (rcvOp ,p) = Order(sndOpi;P).\nThe global constraint reversal implements condition 31 in a more compact and efficient way. Furthermore, additional conditions are posted so as to enforce propagation, thus linking the channelling variables discussed in section 4.3 with the above flow direction restrictions.\nInterface Constraints. The interface constraint (see restriction 8 of section 2) requires that we identify which volumes are in contact inside a pipeline. Contact between volumes corresponding to consecutive orders in a time ordered sequence can occur in two scenarios. First, if the orders specify the same pipeline flow direction. Secondly, if a reversal is about to begin (in a send operation activity sequence) or is about to end (in a receive operation activity sequence). Note that, in the latter case, the pipeline ordering will be inverted. Thus, if CompatiblePairs is a set of compatible product pairs, the interface constraints can be enforced as follows. For each pipeline p and each i G {1,..., |SndOpp| \u2014 1},\nDirecRon(sndOpi)p) = Direction(sndOpi+X)p) V (32) ^Direction(sndOpi)p), Direction(sndOpi+X)p)) G {(N, NR), (R, RN), (NR, RN), (RN, NR)} =^ table_constraint (Product(sndOpi;p), Product(sndOpi+X;p), CompatiblePairs),\nDirecRon(rcvOpi)p) = Direction(rcvOpi+X)p) V (33) ^Direction(rcvOpi)p), Direction(rcvOpi+X)p)) G {(NR, R), (RN, N), (NR, RN), (RN, NR)} =^ table_constraint (Produci(rcvOpi>p), Produci(rcvOpi+X>p), CompatiblePairs).\nThe Pushing Graph. The main idea of the operations viewpoint is to take advantage of time ordered sequences for the purpose of modelling the pushing of volumes inside pipelines. To clarify, let rcvOp-;p G RcvPipep. The volume associated with rcvOp-;p can only be received when an activity sndOpi>p G SndPipep is being simultaneously injected at the other extremity of pipe p. As such, we say that activity sndOpi;p pushes activity rcvOpj)p out of p. As a consequence, the intersection between the corresponding time intervals must not be empty. In order to correctly establish this relationship, a special structure, called a pushing graph, is introduced. It largely explores the pre-defined precedences between operation activities in both sending and receiving sequences.\nSend/Receive Sequences\nFigure 8: Example of edges in the pushing graph for a single pipeline.\nA pushing graph is a digraph G \u2014 (V, E) where each vertex v G V C O x P represents an order o G O and a pipeline p G P. For simplicity, we will use the notation v \u2014 (o,p) for vertices. Clearly, we can only have a vertex v \u2014 (o,p) if p G route(o). Now, let v \u2014 (oi,pl) and w \u2014 (oj,pm). In the pushing graph, there is an edge (v,w) G E if and only if an operation activity sndOpx>Pl, bound to order oi, pushes an operation activity rcvOpyPm, bound to order oj, out of pipeline pm. From now on, we will use the notation v w when (v,w) G E.\nFigure 8 shows an example of a pushing graph for a network composed of a single pipeline p having a volume of 75 units. In the figure, orders A, B, and C need to be sequenced, where volume(A) \u2014 30 units, volume(B) \u2014 45 units, and volume(C) \u2014 65 units. Three vertices are thus created: (A,p), (B,p), and (C,p). Suppose that both the sending and receiving operation sequences are exactly A, B, and C. After activities sndOp1,p and sndOp2,P are executed, we can infer that the pipeline is entirely filled with the volumes corresponding to orders A and B. As such, when sndOp3p> is executed, the volume associated to order C will push out of the pipeline a certain amount of the volumes corresponding to orders A and B. This shows that there is a time relationship between activity sndOp1,p and the activities rcvOp1tP and rcvOp2,P. Therefore, a direct edge from vertex (C,p) to vertices (A,p) and (B,p) is inserted in the pushing graph. Furthermore, it is also possible to calculate the actual volumes associated with each of these edges, a volume that will be pushed out of the pipeline when activity sndOp3p> is executed. As the volume from order A leaves the pipeline first, it will consume 30 units from order C. The remaining volume associated to order C namely, 35 units, will push out of the pipeline part of the volume associated with order B. In the figure, these numbers are represented above the corresponding edges.\nThe pushing graph is initialized with the complete set of vertices and by letting E \u2014 0. The edges are dynamically created by monitoring the corresponding volumes and variable domains when operation activity bindings occur during the labelling process. This relation is bidirectional: if new edges are added, a propagation mechanism is invoked to update the variable domains accordingly.\nThe dynamic update of the pushing graph structure occurs as follows. Let p G P\nbe a pipeline. A new variable accj is created for each operation activities sndOpi,p G SndPipep and rcvOpj,p G RcvPipep, where i > j. It represents the volume in p before inserting the total volume associated to activity sndOpi,p and after extracting the total volume corresponding to rcvOrpjP. This volume is known as the accumulated value between the activities. For instance, acc3,1,p = 35 units in the example depicted in figure 8.\nAs the send and receive sequences are time-ordered, it can be shown that sndOpi,p never pushes rcvOpj# out of p, if i &lt;j. Thus, for each i > j the acci,j,p variables can be represented by simple constraints. We let:\nacci,j,p\n=\tvolume(rcvOpkp,) \u2014 y^ volume(sndOpk,p).\n(34)\nk<j\nk<i\nIf acci,j,p > volume(p), then it is not possible for the volume associated with sndOpi,p to push the volume corresponding to rcvOpj,p inside p since a quantity greater than or equal to the pipeline volume was already injected in the pipeline between both such volumes. On the other hand, if acci,j,p + volume(sndOpi>p) + volume(rcvOpj,p) is at most volume(p), then the volume in sndOpi,p does not suffice to completely push the volume of rcvOpj,p out of the pipeline. We state the following edge-existence constraints:\n3\tedge (Order(sndOpitp),p)\t(Order(rcvOpj,p),p)\n(35)\n\n[accj &lt;volume(p)^ A [accj + volume(sndOpi>p) + volume(rcvOpj,p) > volume(p)^.\nWe also define a function pvol : E \u2014> ^+. For an edge (oi,pi)\t(oj,pj), pvol\nrepresents the volume of order oi in pipeline pi that was effectively used to push the volume corresponding to order oj out of pipeline pj. In figure 8, pvol(e) is the number above edge e. Note that such volume is not necessarily the total volume of one of the orders; oj can push several other orders out of a certain pipeline and, similarly, oj can be pushed out of a pipeline by several other orders as well. The function pvol can be calculated by the following relation, where e = ( (Order(sndOpip>),p) (Order(rcvOpj,p),p)}:\npvol(e)\nmin\nrcvOpj,p), volume(rcvOpj,p)\n(36)\n+ volume(sndOpi>p) + accj\n\u2014 volume(p)\n}\n\u2014 max\n|o, volume(rcvOpj,p) + accj\nvolume (p)\n.\nUsing constraints (34), (35), and (36), extended for all p G P and their operational activities, the pushing relations at individual pipelines can all be enforced. A simple\nprocedure is used to guarantee edge creation in the pushing graph, thus providing a global view of all pushing operations. It is described next.\nFirst, we define two new functions invol : E \u2014> and outvol : E \u2014> Take an edge e = (oi,pi)\t(oj,pj). The value invol(e) represents the volume of order oi that\nhas already been injected into pipeline pi immediately before it starts pushing the volume corresponding to order oj out of pipeline pj. Similarly, the value outvol (e) represents the volume of order oj that has already left the pipeline pj immediately before the volume associated with order oi starts to push it out of pj. For instance, in figure 8, let e = (C,p) (B,p). Then, we have invol(e) = 30 and outvol(e) = 0. The invol and outvol functions can be easily calculated by changing equation (36) appropriately.\nFor clarity, we define two similar functions: afterinvol and afteroutvol. The first represents the volume of order oi that has been injected into pipeline pi after it pushed volume pvol(e) of oj out of pipeline pj. The second represents the volume of order oj that has left pipeline pj after the volume pvol(e) was pushed out of pj by the volume associated with order oi. Clearly, afterinvol(e) = invol (e)+pvol(e) and afteroutvol(e) = outvol(e) + pvol(e). In figure 8, if e = (C,p) (B,p), then we have afterinvol(e) = 65 and afteroutvol (e) = 35.\nLet pm,pm+1 be two consecutive pipelines along the route of an order o. Also, let v,w G V, and with edges v\t(o,pm) and (o,pm+1)\tw in E. In direct volume\ntransmissions between pipelines, a situation enforced by constraints (5) and (6), we can post\noutvol(v\t(o,pm)), afteroutvol(v\t(o,pm))\n(37)\nn\ninvol ((o,pm+1)\tw), afterinvol((o,pm+1)\tw)\nv w.\n= 0\nThe pushing relations are transitive along a route, provided there is an intersection among the invol and outvol intervals. This transitivity is a mathematical view of the following fact. While a volume associated with v is pushing a certain volume of o out of pipeline pm, this same amount of volume is being directly transmitted to pipeline pm+1. As such, it will also push some volume out of pipeline pm+1, corresponding to order w in our example. Therefore, a volume corresponding to v in pipeline pm is pushing a volume associated with w in pipeline pm+1. So, an edge must be created between vertices v and w. Hence, every time a new edge is dynamically inserted in G, the propagation mechanism will try to add new edges using condition (38), thus defining a global precedence relation between pipelines and their activities. The pvol of the new edge will be the minimum of the pvol of both previous edges. We post the following constraint when a new edge e is added to the graph of a pipeline p G P, to state the time dependency between activities\nsndOpPi and rcvOpPyi, both related to edge e:\nStartTime(sndOpi,P), EndTime(sndOpi>P)j Q\nStartTime(rcvOpj,P), EndTime(rcvOpj,P) = 0.\t(38)\nAlso, let MaxFli be a variable representing the maximum flow rate for activity sndOpP,i, related to variable Product(sndOpP,i), and let MaxFlj stand similarly for activity rcvOpP,j. We state:\nvolume(sndOpi,P)\nEndTime(sndOpiP) \u2014 StartTime(sndOpitP) volume(rcvOpj,P)\nEndTime(rcvOpj P) \u2014 StartTime(rcvOpj P)\n&lt;MaxFlj\t(39)\n&lt;MaxFli.\t(40)\nThe pushing graph is capable of ensuring complex precedence relations, as it provides a global view of the pumping conditions of all activities. Moreover, it is clear that it can be seen as a network flow graph as well: the pvol sum for the edges that push the volume of an order o in a pipeline p must be equal to the pvol sum for the edges representing the orders pushed by the volume of o. The value of this sum is precisely volume(o). Clearly, then, in order to enhance domain reductions, we can use a flow global constraint [27] involving sequences of send and receive variables.\nChanneling Variables and Constraints\nFinally, it is necessary to bind orders to operation activities, thereby connecting the order viewpoint to the operations viewpoint. This can done by defining positional variables sndPosiP and rcvPosiP, accounting for the positions of, respectively, the send and receive activities of order oi at pipeline p G route(oi).\nFirst, two different orders can not be associated to the same pipeline position. We use alldifferent global constraints [29] to enforce this restriction. For each p G P, we let\nalLdiff({sndPosiP : oi G O,\tp G route(oi)}),\t(41)\nalLdiff({rcvPositP : oi G O,\tp G route(oi)}).\t(42)\nThe\torder\tand operation viewpoints can be\teasily connected using the element constraint\t[29] together with positional variables,\tas follows. For an\telement constraint\nz = xy,\twhere\tx, y are variables and z is either a\tconstant or variable,\twe use the notation\nelement (z,x,y). We state\nelement(StartTime(sndip>), StartTime(sndOpk,P), k = sndPosip)), element(EndTime(snditP), EndTime(sndOpk,P), k = sndPosip)),\nand, for all oi G O and all p G route(oi), we state further:\nelement (oi, Order(sndOpk,P), k = sndPosi,P),\nelement(volume(oi), Volume(sndOpk,P), k = sndPosi,P), element (direction^), Direction(sndOpk,P), k = sndPosiiP), element(product(oi), Product(sndOpk,P), k = sndPQSi>P).\n(43)\n(44)\n(45)\n(46)\n(47)\n(48)\nA similar set of constraints is applied to the receive sequences.\nIt is also necessary to enforce sndPosiiP = rcvPosiiP if and only if direction (oi) G {N, R}, that is, the order is not related to any pipeline flow reversal. The other cases are handled by the global constraint reversal, described in section 4.3. At last, we note there are positional variables for sequencing orders in tanks as well, which are modelled in a similarly way. But note that, as tanks do not involve operation activities, the corresponding restrictions only involve variables from the order viewpoint model. Since they are simpler and declared analogously, they will be omitted due to space considerations.\nFree Delivery Orders\nOnly minor changes to the previous modelling are necessary in order to handle free orders. Among them, in the order viewpoint, volumes and products should be changed from constants to variables in all constraints. Also, Alternative Resource Set [30] constraints can be used to guarantee that origin and destination tanks are assigned to all free orders. The operations viewpoint model remains unchanged.\nSearch Strategy\nThe search strategy refers to the algorithms responsible for finding a feasible solution to the CP problem. In the sequencing model, a solution is found by labelling only the positional variables. The constraint propagations in the order and operations viewpoint models ensure the satisfaction of the problem restrictions. Also, time variables do not need to be labelled since we are only interested in valid time bounds for order satisfaction, given by the minimum and maximum values of the resulting domains.\nDifferent types of search strategies were tested in order to solve the sequencing model. The currently implemented version is shown in Algorithm 2. It combines a backtracking\nmechanism [29] with a special variable ordering strategy. The algorithm has two consecutive parts: disjunctive components determination and adaptive backtracking. More details about each part now follow.\nAlgoritmo 2 Procedure for search strategy\n1: procedimento\n2:\tIdentify network disjunctive components C\n3:\tPara each c G C fa\u00e7a\n4:\tBuild resource graph G(c) and sort it topologically, obtaining order N\n5:\tN' := N; k := initial _k\n6:\tenquanto N' = 0 fa\u00e7a\n7:\tp := first element from sequence N'; N' := N'/{p}\n8:\tLabel positional variables, and volumes/tanks in case of free orders\n9:\tse fails in labeling > k and not cyclic condition ent\u00e3o\n10:\tk := k+incremental factor; N' := N\n11:\tMove p to the beginning of sequence N'\n12:\tfim se\n13:\tfim enquanto\n14:\tfim Para\n15: fim procedimento\nDisjunctive Components Determination. A disjunctive component is defined as a subset of the network which can be sequenced separately, without affecting other regions. Two pipelines belong to the same component if they are both contained in a route associated to some order. The same reasoning applies to tanks. Therefore, it is possible to deal with smaller search spaces, as each component has its own backtrack tree.\nThe disjunctive component determination also gives some room for parallelism during execution, although it was not implemented in the current experiments.\nAdaptive Backtracking. We implemented backtracking using the positional variables for each pipeline and each tank. The term adaptive stems from the fact that we used a restart strategy [31].\nThe labelling process is done for each pipeline and each tank separately, both treated as resources. Given an initial resource ordering N, all the positional variables of a resource are labelled before the labelling of the next resource. In case the number of fails (i.e., failed value assignment to positional variables) reaches a parameter k during the labelling of a resource, the ordering N is changed dynamically, as described shortly. The process is then restarted.\nThe values of positional variables are randomly chosen, giving higher probabilities to orders with the earliest deadlines. For free orders, volumes, products and tanks are set after their respective positional variables are labelled.\nThe initial sequencing is constructed as follows. Firstly a resource graph is created, in which nodes represent resources and there is a direct arc from node p to q if there is a consecutive pair (p, q) in a route associated with some order. In case there are two arcs (p,q) and (q,p), only the one associated with the order having the earliest deadline is maintained. Secondly, the graph is topologically sorted, the result being the desired initial sequencing. Clearly, this strategy considers first those pipelines or tanks with the least number of volumes that are injected directly from other pipelines.\nAfter the occurrence of k fails involving a resource, the backtrack tree is reinitialized with that resource as the first element in the topological ordering, and k is incremented by a constant. This implementation was motivated by the fact that, during test runs, it was observed that a fair number of fails were caused by earlier decisions taken when instantiating variables associated to pipelines in the given sequencing. We empirically determined that k = 150 was a good increment. Also, some precautions were taken to avoid the repetition of pipeline sequences that have already been tried, as indicated in step 9 of Algorithm 2.\n4.4\tThe Scheduling Sub-problem\nThe second sub-problem of the complete CP model is solved by a simpler constraint model which is responsible for assigning the exact times to pumping operations, respecting forbidden alignment configurations and avoiding simultaneous pipe usage. Once a solution to the sequencing model is found, we already have the sequencing of all orders at each pipeline and at each tank.\nThe pumping operations are created by simply checking the edges of the pushing graph, as explained in section 4.3. They already represent the minimum number of pumping operations required, given the way the graph is generated. For each edge, a new type of send and receive operation is created, with the corresponding volume set to pvol. Additionally, a procedure for unifying such activities was built in order to reduce the number of variables in the model. Basically, it analyzes paths in the pushing graph, checking if activity attributes such as volumes and times are the same. A simple example can be seen in figure 9. If activity A, pushes activities Aj and Aj+1, four operations will be created. However, only two operations are truly required, since Op\\ is the same as Opj, and similarly for Op2 and Op{+1. This procedure can be efficiently implemented by simply decomposing paths in the pushing graph.\nLet Dep be the set of depots, and let PumpOpsd give the pumping operations that\nA\ta.\nOpn Op,\nOp^1\n\u25a1\nFigure 9: Example of activity unification.\n\u25a1\nwill start at depot d, for each d G Dep. The simultaneous sending constraints can be enforced using a discrete resource, DiscSendingd. Such a resource limits the number of simultaneous operations to a certain maximum number [30]. Thus, we associate each operation in PumpOpsd with its respective resource DiscSendingd, and with an input value limit set to DepotMaxSimultaneousOperationsd. The constraints are, for all d G Dep:\npumpOp requires DiscSendingd : V d G Dep, pumpOp G PumpOpsd\t(49)\nMaxCapac(DiscSendingd) = DepotMaxSimultaneousOperations d.\t(50)\nSimilarly, the forbidden alignment configurations are enforced using discrete resources AlignDisca)d, one for each alignment restriction a and depot d. The operations associated with each resource are easily identifiable by checking their product type and flow direction. Assume that the forbidden alignment configuration set at depot d is given by Alignd. For each a G Alignd, let OpAlignd;a be the set of pumping operation tuples of size |a|, starting in d, that might violate the alignment conditions. This latter case is easily identifiable by just checking product types and flow directions. We then state, for all d G Dep and all a G Alignd:\npumpOp requires AlignDisCd,o : pumpOp G OpAlignd;a\t(51)\nMaxCapac(AlignDiscd)a) = |a| \u2014 1.\t(52)\nThe time variables are labeled with the least possible value in their domains. This forces pumping to start as soon as possible. In case a failure ensues, a new sequencing solution is requested, most certainly a different one, due to the randomizations present in the previous model.\n4.5\tA Running Example\nIn this section we use a small running example to illustrate important aspects of the planning and scheduling phases. To this end, consider the net topology depicted in figure 10.\nWe have six depots: Do,... ,D5. Products Fo and F1 need to be pumped from D4 and D5 to D1 and Do, respectively. Right next to each depot we have two tanks. For example, at depot Do we have tanks Tooo and T001 for products Fo and F1. At the initial instant, tank Tooo contains 5 units of volume, indicated by writing 5u inside the rectangle representing that tank. At time 2, tank T010 at depot D1 contains 15u of volume, and so on. Note that depots D2 and D3 are just junctions, there is no storage tanks next to them.\nThere are 5 pipelines depicted in the figure: Po, . . . , P4. We assume, for simplicity, that all pipelines have capacity of 5u and have all the same length. Flow rates are assumed to be constant all over the network.\nIn order to move products from D4 and D5 to D1 and Do, respectively, we will use four routes. They are:\n1 Ro = D4P2D2P4D3 P1D1\n2.\tR1 = D5P3D3P4D2P0D0\n3.\tR2 = D4 P2 D2P4D2 Po Do\n4.\tR3 = D5P3D3P4D3P1D1\nInside the rectangle representing each pipeline, we indicate the product it contains, as well as the route assigned to that product. For example, at time 1 pipeline P2 contains 5u of product Fo on route R2. Note that Ro is a direct route from D4 to D1; it will be used to move 5u of product Fo from D4 to D1. Also, R1 goes directly from D5 to Do and will be used to move 5u of F1 from D5 to Do. Suppose that the planning phase generates, for some reason, orders to send 5u of fuel Fo on route Ro and another 5u of fuel F1 on route R1. Note that both these routes include pipe P4, and so the flow will have to reverse direction at that pipe, so as to accommodate for the passage of Fo and F1 through it, but in opposite directions. We can use the routes R2 and R3 to accomplish this reversal but, as a result, the planning phase will have to generate free delivery orders to make this happen.\nAt the beginning of the planning horizon all pipes are completely filled with products already routed to their destinations. For one such product, the route starts at the pipe where the product is at the beginning of the planning horizon and describes the sequence of depots and pipes to be traversed by the product until it reaches its destination depot. In other words, for products that start in some of the pipes, their routes are suffixes of\none of the four routes Ri. We can see this by examining figure 10 at time 0. At that time, pipe P4 contains 5u of fuel Fo on the shortened route S4 \u2014 P4D3P1D1. Note that S4 is a suffix of the full route Ro. The shortened routes that concern us in the example are:\n1.\tSuffixes of Ro:\t(i)\tSi \u2014\tP1D1,\t(ii) S2 \u2014 P2D2P4D3P1D1, and\t(iii) S4\t\u2014 P4D3P1D1.\n2.\tSuffixes of Ri:\t(i)\tSo \u2014\tP0D0,\tand (ii) S3 \u2014 P3D3P4D2PqDq.\nNow, lets follow some actions that could happen at the planning phase. Suppose that, at the beginning, we have a demand of 15u of fuel F1 at depot Do at time 10. The planning algorithm notices that we already have 10u of F1 in the pipelines, namely, at P3 and at Po. Since it favors shortened routes because, potentially, they have smaller travelling times, it generates two delivery orders: Oo \u2014 (0,ToO1,F1, 5u,S0,10) and O1 \u2014 (0, T001, F1, 5u, S3,10). Notice the shortened associated routes. Since these volumes have no origin depots, that data is written as 0 in these orders. We need some more 5u of F1 to be pushed to Do. The shorter route from D4 or D5 to Do is R1 (R2 also fits, but it is longer and involves a flow reversal at P4). So, the algorithm generates one more delivery order: O2 \u2014 (T131, T001, F1,5u, R1,10). By this order, we request that 5u of F1 from tank T131 at D4 to be sent to tank T001 at Do, via route R1. In order to satisfy the demand for 15u of F1 at Do, the algorithm then generates another delivery order: O3 \u2014 (T001,0,15u, 0,10). Note that this order just discharges 15u of F1 from tank T001 at time 10.\nFurther, suppose that at we have a production of 15u of F1 at D5 at time 5. Although this volume need not be used to satisfy the demand, it may be necessary at D5 in order to push other products that are already waiting in pipes along routes R1 and R3, and that have more pressing deadlines to arrive at their destinations. In response, the planning algorithm might generate a delivery order like O4 \u2014 (0,T131,15u, 0, 5), saying that tank T131, at D5, receives 15u of fuel by time 5.\nThe scheduling phase will distribute and allocate the orders in a way that all tanks and pipelines capacities are respected. A typical sequence of movements, commented as appropriate, could be as follows (see figure 10.):\nFrom time 0 to time 1: Pumping from D4, with active route Ro.\n1.\tA free order injects 5u of fuel Fo from tank T120 (at D4) into P2, on route R2. We denote this injection move by m0. Note that this volume is scheduled for flow reversal at P4, later on. This free order would have been generated by the planning algorithm.\n2.\tMove m0 pushes Fo from P2 into P4, on route S2. It is easy to check that this new move, denoted by m1, is compatible with route S2.\n3.\tMove mX, in turn, pushes Fo from P4 into PX, on route S4 and is compatible with route S2.\n4.\tA free order generated by the planning algorithm extracts 5u of fuel Fo from PX into tank ToXo (at DX).\nFrom time 1 to time 2: Pumping from D4, with active route Ro.\n1.\tA free order injects 5u of fuel Fo from tank T020 (at D4) into P2, on route Ro. This injection move is denoted by m2 and would have been generated by the planning algorithm.\n2.\tMove m2 pushes Fo from P2 into P4, on route R2. The latter move is denoted by m3 and can be easily checked to be compatible with route R2. This volume on P4 will reverse its flow on the next move.\n3.\tMove m3 pushes Fo from P4 into PX, on route S2. The corresponding move, denoted by m4, is compatible with route S2.\n4.\tA free order generated by the planning algorithm extracts 5u of fuel Fo from PX into tank ToXo (at DX).\nFrom time 2 to time 3: Pumping from D5, with active route RX.\n1.\tA free order injects 5u of fuel FX from tank TX3X (at D5) into P3, on route RX. This free order would have been generated by the planning algorithm and is denoted by m5.\n2.\tMove m5 pushes FX from P3 into P4, on route S3. The resulting move, denoted by m6, is clearly compatible with route S3.\n3.\tMove m6 pushes Fo from P4 into Po, on route R2. This move is compatible with route R2, and its volume reverses the flow direction in P4.\n4.\tOrder O4 extracts 5u of fuel FX from Po into tank TooX (at Do). This is a free order generated by the planning algorithm.\nNote that we had five free orders generated by the planning algorithm. Also note that order Oo has been serviced already. Further, the volume of FX, of order OX is now in pipe P4 and the the volume of FX, of order O2 is now in pipe P3. Hence, we have now 5u of fuel FX in tank TooX, and we have 10 more units of FX in the pipeline. If they arrive by time 10, we will guarantee enough of FX at Do to satisfy the demand specified by order O3. Finally, production order O4 can now inject 15u of FX in tank TX3X, at D5. We see that tank TX3X is already empty by time 3 and, if it remains empty by time 5, it will be able to accommodate the injection specified by order O4.\nFigure 10: A small example.\n5\tResults\nSolutions were obtained on a Intel Pentium D 3.40 Ghz CPU platform, with 4GB of memory. The planning and scheduling phases were coded in C++ and compiled using GCC-4.0. The CP model was solved using ILOG Solver 6.2 and ILOG Scheduler 6.2, with medium to high propagation enforcement.\nWe used four real field instances to test the models. The first two rows in Table 3 indicate the planning horizon and the number of deliver orders generated by the planning phase, respectively, for each of the test instances. The remaining lines give details of typical runs. All instances share the same network topology of 14 depots, 30 pipelines, 32 different product types and 242 tanks distributed among the depots. Pipelines volumes range from very small 30 m3 capacity pipes up to 8,000 m3 volume pipes. Most of the tank capacities are between 4,000 and 30,000 m3.\nFigure 11 shows the total tankage in all depots for product groups LPG, Diesel, Gasoline, and Naphtha in two different instances. Here, a group is formed by gathering products with the same composition but different quality. For instance, in the Gasoline group we have normal and premium quality gasoline. This grouping is used often by pipeline operators. The figure displays volume variations over time in a typical solution, covering the entire planning horizon. Note that, in certain cases, there was a reduction of more than 15,000 m3 in a single group, attesting to an intense use of the pipeline network. Mainly, this volume variation indicates refilling activities necessary to maintain inventory levels, specially for those lines connected to depots with low-capacity tanks. For this same reason, some pipelines did not show the typical intermittent usage, but were continuously used throughout the planning horizon (not shown in the figure). Also, notice from figure 11 that the algorithm maintained the final and initial stocks at similar levels.\nIn all cases, the solver found a solution with only one iteration between phases and in a reasonable amount of computer time, e.g., within 10 minutes. The planning phase was\nTime (io3min)\tTime (io3min)\nFigure 11: Tankage Evolution for two instances.\nslower because it has to iterate through many combinations of products, bases, routes, and tanks for each order. Also, most variables of the scheduling phase were instantiated as a result of constraint propagation making it run faster. The search heuristic, which proved crucial in the planning phase, was also instrumental to improve other important aspects of the solution quality, a fact attested by logistic engineers. For instance, usually, the solution computed by the algorithm showed only a very small number of pipeline flow reversions, the kind of operation that engineers prefer to keep to a minimum. Also, new and interesting delivery routes were identified for some products. Some of them came as a surprise to logistic engineers, who are biased towards using of the same traditional routes they already know about from manually planning the network operation.\n6\tConclusions\nWe proposed a novel procedure for generating feasible solutions for real instances stemming from planning and scheduling the operation of a very-large pipeline network, used to transport petroleum derivatives and ethanol. The operation of such a network is subjected to a complex set of physical and operational constraints. It makes possible the delivery of oil and biofuel to local markets, as well as the storing of the excess production from refineries. Using the CP paradigm, these constraints were adequately modelled. Problems of this size and complexity, as known by the authors, would not be solved by other\nTable 3: Solver and model statistics\nInstance\t1\t2\t3\t4\nHorizon\t10 days\t7 days\t7 days\t7 days\nOrders\t924\t645\t724\t693\nPlanning Phase Time\t4 min\t5 min\t4 min\t6 min\nPlanning Phase Peak Memory\t78MB\t61MB\t67MB\t63MB\nSequencing Model Variables\t37,326\t21,381\t25,938\t24,315\nSequencing Model Constraints\t382,565\t148,075\t160,302\t155,409\nSequencing Choice Points\t3,355\t2,462\t3,417\t2,518\nSequencing Fails\t2,301\t1,291\t987\t1,902\nSequencing Time\t2 min\t1 min\t1 min\t1 min\nSequencing Peak Memory\t450 MB\t240 MB\t310 MB\t270 MB\nScheduling Model Variables\t12,350\t7,530\t8,931\t8,032\nScheduling Model Constraints\t27,088\t16,768\t19,231\t18,292\nScheduling Choice Points\t1,516\t1,164\t801\t1,810\nScheduling Fails\t301\t429\t210\t120\nScheduling Time\t2 min\t1 min\t1 min\t1 min\nScheduling Peak Memory\t450 MB\t250 MB\t290 MB\t280 MB\nTotal Time\t8 min\t7 min\t6 min\t8 min\napproaches reported in the literature to date, in which much of the difficult constraints and topologies are overlooked.\nThe algorithm has two phases. The planning phase generates the so called delivery orders, which describe how product volumes should be transmitted between depots. A delivery order contains information regarding product, volumes, origin and destination tanks, as well as timing deadlines. In this phase, a number of randomized heuristics work together in order to select appropriate depots, tanks and volumes so as to satisfy demand and production schedules. The scheduling phase, on the other hand, creates an ordering among the delivery orders and, further, assigns start and end times for each delivery order, while observing all deadlines and operational constraints. Additionally, it also assigns volumes and tanks for the so called free delivery orders. Several reasons motivated the use of CP techniques to model the activities that comprise this phase. Primarily, the scheduling problem is highly over-constrained and has several non-linear constraints, easily modelled in the CP paradigm. Besides, the main goal was to search for a feasible solution. Notably, the choice of variables for value assignment in the CP model uses a special type of restart strategy. In case no solution is found in this phase, a new set of orders can be requested from the planning phase.\nThe present modelling and implementation stage was reached after 2 years of problem specification, data gathering, model development, and testing. The procedure is already integrated with a proprietary flow simulation tool and the company is currently consider\ning it for routine use on a daily basis. The tool has already proved its value, showing that it can save many valuable work hours of skilled engineers. Also, the tool allows for many different planning and scheduling scenarios to be easily set-up and quickly tested, by varying local demand needs and production schedules at refineries. In this way, a significant difference in the end-user daily routine is the ability to save many hours interacting with the simulator when searching for a feasible and adequate solution.\nThere are several opportunities for further research related to this problem. First, new real-world constraints are being considered to improve the adequacy of the overall model. Such could include inventory management restrictions, limitations on energy use at critical daily periods and at specific depots, and shut-down periods or partial operation intervals for tanks and pipelines. Also, one can implement more sophisticated search heuristics for both the planning and scheduling phases, making the overall approach capable of dealing with more specific real instance classes. When modelling such new constraints, we feel that the flexibility of the CP paradigm will again prove to be crucial. Finally, one can consider objective functions that would help guide the heuristics. This would provide a yardstick that could be used to gauge solution quality.\nAcknowledgments. We thank the anonymous reviewers for their insightful feedback. This research was supported by grants 05/57343-0 and 05/57344-7 from FAPESP and grants 301732/07-8, 478470/06-1, 472504/07-0, and 473726/07-6, 305781/2005-7 from CNPq. The authors are also grateful to Fernando Marcellino and the team of engineers from PETROBRAS-Tl/SP.\nReferences\n[1]\tGroup, A.E.: How pipelines make the oil market work - their networks, operation and regulation (2001)\n[2]\tWilson, R.: Transportation in america, eighteenth edition. Washington, D.C.: Eno Transportation Foundation, Inc. (2001)\n[3]\tMoura, A., de Souza, C., Cire, A., Lopes, T.: Planning and scheduling the operation of a very large oil pipeline network. In: Lecture Notes in Computer Science - Proceedings of the 14th International Conference on Principles and Practice of Constraint Programming. Volume 5202. (Setembro 2008) 36-51\n[4]\tMoura, A., de Souza, C., Cire, A., Lopes, T.: Heuristics and constraint programming hybridizations for a real pipeline planning and scheduling problem. In: Proceedings of the 11th IEEE International Conference on Computational Science and Engineering - CSE\u201908. (Julho 2008) 455-462\n[5]\tCamponogara, E., Souza, P.S.: A-Teams for oil transportation problem through pipelines. In: Information Systems Analysis and Synthesis, Orlando, United States (1996)\n[6]\tMilidiu, R., dos Santos Liporace, F.: Planning of pipeline oil transportation with interface restrictions is a difficult problem. Technical Report 56, Departamento de Informatica, PUC-Rio, Rio de Janeiro, RJ, Brasil (2003)\n[7]\tMilidiu, R.L., Pessoa, A.A., Laber, E.S.: Pipeline transportation of petroleum products with no due dates. In: LATIN \u201902: Proc. of the 5th Latin American Symposium on Theoretical Informatics, London, UK, Springer-Verlag (2002) 248-262\n[8]\tMilidiu, R.L., Pessoa, A.A., Laber, E.S.: The complexity of makespan minimization for pipeline transportation. Theoretical Computer Science 306(1-3) (2003) 339-351\n[9]\tAlves, V., Filho, V.J.: Pipeline scheduling of petroleum derivatives using genetic algorithm. In: IV Congresso Brasileiro de Pesquisa e Desenvolvimento em Petruoleo e Guas, Campinas, Brazil (2007)\n[10]\tCafaro, D.C., Cerda, J.: Optimal scheduling of multiproduct pipeline systems using a non-discrete MILP formulation. Computers &amp; Chemical Engineering 28(10) (2004) 2053-2058\n[11]\tRejowski, R., Pinto, J.M.: A novel continuous time representation for the scheduling of pipeline systems with pumping yield rate constraints. Computers &amp; Chemical Engineering 32 (2008) 1042-1066\n[12]\tFilho, E.M.S., Filho, V.J., de Lima, L.S.: Variable neighborhood search (VNS) applied to pipeline distribution problem with capacity constraints. In: IV Congresso Brasileiro de Pesquisa e Desenvolvimento em Petr\u00f3leo e G\u00e1s, Campinas, Brazil (2007)\n[13]\tCamponogara, E.: A-Teams para um problema de transporte de derivados de petroleo. Master\u2019s thesis, Instituto de Matematica, Estat\u00f3stica e Ci\u00eancia da Com-puta\u00e7ao, Universidade Estadual de Campinas, Campinas, Brazil (1995)\n[14]\tde la Cruz, J., Andr\u00f3s-Toro, B., Herr\u00f3n-Gonz\u00f3lez, A., Porta, E.B., Blanco, P.F.: Multiobjective optimization of the transport in oil pipelines networks. In: Proceedings of the IEEE Conference on Emerging Technologies and Factory Automation. Volume 1. (2003) 566-573\n[15]\tde la Cruz, J., Herr\u00f3an-Gonza\u00f3lez, A., Risco-Mart\u00f3n, J., Andr\u00f3es-Toro, B.: Hybrid heuristic and mathematical programming in oil pipelines networks: Use of immigrants. Journal of Zhejiang University SCIENCE 6A(1) (2005) 9-19\n[16]\tMagat\u00e3o, L., Arruda, L., Neves, F.: A mixed integer programming approach for scheduling commodities in a pipeline. Computers &amp; Chemical Engineering 28(1) (2004) 171-185\n[17]\tMagat\u00e3ao, L., Arruda, L., Neves, F.: Using CLP and MILP for scheduling commodities in a pipeline. Computer-Aided Chemical Engineering 20B (2005) 1027-1032\n[18]\tRelvas, S., Barbosa-P\u00f3voa, A.P.F.D., Matos, H.A., Fialho, J., Pinheiro, A.S.: Pipeline scheduling and distribution centre management - a real-world scenario at CLC. In: Proceedings of the 16th European Symposium on Computer Aided Process Engineering and 9th International Symposium on Process Systems Engineering, Garmisch-Partenkirchen, Germany (2006) 2135-2140\n[19]\tRelvas, S., Matos, H.A., Barbosa-Po\u00f3voa, A.P.F.D., Fialho, J., Pinheiro, A.S.: Pipeline scheduling and inventory management of a multiproduct distribution oil system. Industrial &amp; Engineering Chemistry Research 45(23) (2006) 7841-7855\n[20]\tRelvas, S., Matos, H.A., Barbosa-P\u00f3voa, A.P.F.D., Fialho, J.: Reactive scheduling framework for a multiproduct pipeline with inventory management. Industrial &amp; Engineering Chemistry Research 46(17) (2007) 5659-5672\n[21]\tM. Sasikumar, M., Prakash, P.R., Patil, S.M., Ramani, S.: Pipes: A heuristic search model for pipeline schedule generation. Knowledge-Based Systems 10(3) (1997) 169175\n[22]\tRejowski, R., Pinto, J.M.: Scheduling of a multiproduct pipeline system. Computers &amp; Chemical Engineering 27(8) (2003) 1229-1246\n[23]\tRejowski, R., Pinto, J.M.: Efficient MILP formulations and valid cuts for multiproduct pipeline scheduling. Computers &amp; Chemical Engineering 28(8) (2004) 1511-1528\n[24]\tCrane, D.S., Wainwright, R.L., Schoenefeld, D.A.: Scheduling of multi-product fungible liquid pipelines using genetic algorithms. In: Proceedings of the 1999 ACM Symposium on Applied Computing, San Antonio, USA (1999) 280-285\n[25]\tMilidiu, R., dos Santos Liporace, F., de Lucena, C.J.P.: Pipesworld: Planning pipeline transportation of petroleum derivatives. In: Proceedings of ICAPS\u201903 -Workshop on the Competition: Impact, Organization, Evaluation, Benchmarks, Trento, Italy (2003)\n[26]\tCompetition, t.I.P.: http://zeus.ing.unibs.it/ipc-5/\n[27]\tHooker, J.N.: Integrated Methods for Optimization (International Series in Operations Research &amp; Management Science). Springer-Verlag, Secaucus, USA (2006)\n[28]\tCheng, B.M.W., Choi, K.M.F., Lee, J.H.M., Wu, J.C.K.: Increasing constraint propagation by redundant modeling: an experience report. Constraints 4(2) (1999) 167-192\n[29]\tMarriot, K., Stuckey, P.: Programming with Constraints: An Introduction. 1\u201c edn. MIT Press, Cambridge, Massachusetts (1998)\n[30]\tILOG: ILOG Scheduler 6.2: User\u2019s Manual. ILOG. (2006)\n[31]\tKautz, H., Horvitz, E., Ruan, Y., Gomes, C., Selman, B.: Dynamic restarts policies. In: Proceedings of the AAAI-2002, Edmonton, Alberta (2002)\nEp\u00edlogo\nA fase de planejamento aqui desenvolvida utilizou-se do conhecimento e experi\u00eaencia dos operadores da rede para a constru\u00e7\u00f5o do conjunto de planos de entrega. Como visto, essa constru\u00e7ao \u00e9 incremental, com um grupo de fun\u00e7\u00f5es avaliando as poss\u00edveis propriedades de um plano. Ap\u00e9os a avalia\u00e7c\u00f5ao, a escolha da propriedade \u00e9e aleat\u00e9oria sobre um subconjunto das melhores candidatos. Assim, planos s\u00f5ao criados para atender as demandas mais urgentes atrav\u00e9es da rota que permita uma entrega mais r\u00e9apida que cause o menor n\u00e9umero de reverso\u00f5es. O tanque origem \u00e9e aquele com maior volume dispon\u00e9\u00edvel do produto e o de destino \u00e9e aquele com maior espa\u00e7co livre. Al\u00e9em disso, o volume do plano de entrega \u00e9e maximizado de acordo com os tanques escolhidos.\nA cria\u00e7ao de cada plano tem como objetivo a satisfa\u00e7\u00f5o de uma demanda e o procedimento termina quando todas demandas tenham sido atendidas. Neste ponto, o conjunto de planos pode ser alterado pelos operadores para satisfazer outras necessidades como, por exemplo, a transfer\u00eaencia de quantidades entre \u00e9orga\u00f5os para satisfazer demandas futuras, dentre outras.\nNo modelo de agendamento apresentado, os planos de entrega s\u00f5o vistos como atividades, ou seja, estruturas que permitem a aplica\u00e7\u00f5o de restri\u00e7\u00f5es globais mais espec\u00edficas para problemas de agendamento [25]. Os planos geram duas atividades para cada duto por onde passam, uma atividade para a entrada no duto e a outra para a sa\u00e9da do duto. Cada atividade \u00e9e, de forma geral, composta por um tempo de \u00e9nicio e tempo final, os quais modelam os intervalos de ocorr\u00eaencia do plano em cada duto, ao inv\u00e9es de modelar os bombeamentos explicitamente.\nEsta representa\u00e7ca\u00f5o com intervalos de tempo permite uma formula\u00e7c\u00f5ao mais compacta do modelo para a rede de dutos, e adicionalmente, facilita a aplica\u00e7c\u00f5ao de restri\u00e7co\u00f5es globais relativas as disjun\u00e7\u00f5es temporais, como as restric\u00f5es cumulative e disjunctive, apresentadas no texto. Como h\u00e9a tamb\u00e9em um menor nu\u00e9mero de varia\u00e9veis, tamb\u00e9em \u00e9e poss\u00e9vel aumentar o n\u00e9vel de propagac\u00e7a\u00f5o das restri\u00e7co\u00f5es, o que reduz o tamanho da \u00e9arvore de backtracking.\nO sequenciamento dos planos de entrega foi dividido segundo dois pontos de vistas de modelagem: a vis\u00f5o do plano (order viewpoint) e a vis\u00f5o das opera\u00e7oes (operations viewpoint). A primeira vis\u00f5ao engloba as restri\u00e7c\u00f5oes que definem a movimentac\u00e7\u00f5ao do plano pela sua rota, definindo limitantes temporais \u00e0 sua realiza\u00e7\u00f5o. Isso inclui o tratamento das vaz\u00f5oes, a conex\u00f5ao entre o recebimento em um duto e o envio no pro\u00e9ximo duto, o atendimento do prazo na base destino e a utilizac\u00e7a\u00f5o de recursos nos tanques de origem e destino. Al\u00e9em disso, nessa vis\u00f5ao \u00e9e aplicada \u00e0a restric\u00e7\u00f5ao de disjunc\u00e7\u00f5ao temporal entre as realiza\u00e7co\u00f5es das ordens entre si num mesmo duto ou tanque. A visa\u00f5o das opera\u00e7co\u00f5es implementa o funcionamento dutos, for\u00e7cando a necessidade de se extrair uma quantidade\nigual de volume da extremidade oposta quando uma quantidade \u00e9 injetada no duto. Da mesma forma, essa vis\u00e3o determina como a dire\u00e7ao de movimenta\u00e7\u00e3o em um duto pode ser alterada considerando a necessidade de planos espec\u00edficos para a reliza\u00e7ao de revers\u00e3es. Outro aspecto tratado s\u00e3o os pares incompat\u00edveis, proibidos de seguirem juntos num mesmo duto.\nO grafo de empurramento (Pushing graph) e uma representa\u00e7\u00e3o redundante do problema, mas que ajuda na propaga\u00e7\u00e3o das restric\u00e3es, principalmente, aquelas referentes \u00e0 preced\u00eancia de atividades. O grafo \u00e9 constru\u00eddo sobre as atividades, analisando um se-quenciamento destas em toda a rede. Os v\u00edertices desss grafos sa\u00e3o os pares de planos e dutos, j\u00e9 que as atividades s\u00e3o criadas segundo esses mesmos pares. Assim, se uma atividade de envio ocorre ao mesmo tempo que outra de recebimento no mesmo duto, enta\u00e3o um plano de entrega ao entrar por uma extremidade empurra outro plano de entrega para fora do duto. Isso cria uma aresta no grafo de empurramento entre dois pares de planos naquele duto. Sobre essa representac\u00e3o pode-se criar diversas restri\u00e7\u00f5es relacionando as quantidades dos planos de entrega, o volume dos dutos e as preced\u00eaencias entre as atividades.\nA representa\u00e7ca\u00e3o pelo grafo de empurramento da\u00ed uma vis\u00e3ao global sobre as rela\u00e7co\u00e3es de preced\u00eaencia, sendo essencial para a efici\u00eaencia do modelo de programa\u00e7c\u00e3ao por restri\u00e7co\u00e3es do subproblema de sequenciamento.\nAs atividades com suas movimenta\u00e7c\u00e3oes por intervalos de tempo, contudo, n\u00e3ao caracterizam uma soluc\u00e3o do PPAORO, conforme descrito no cap\u00edtulo 2. Assim, um segundo modelo PR para atribui\u00e7\u00e3o de tempos \u00ed utilizado para determinar exatamente os tempos dos bombeamentos. Tais tempos sao calculadas a partir do sequenciamento dos planos, obtido pela soluc\u00e7\u00e3ao do modelo anterior. As vari\u00edaveis do modelo de atribuic\u00e7\u00e3ao de tempos representam exatamente as opera\u00e7c\u00e3oes de envio e recebimento que ocorrera\u00e3o nos dutos, determinadas a partir de uma soluc\u00e7\u00e3ao parcial do problema de agendamento. As restri\u00e7c\u00e3oes faltantes, tal como envios simultaneos e alinhamentos, sao facilmente implementadas neste segundo submodelo. O artigo n\u00e3o apresenta a modelagem dos requisitos C5, C10 e C15 em decorr\u00eaencia da falta de dados na inst\u00eaancia, mas estas podem ser implementadas utilizando-se simples restri\u00e7c\u00e3oes de disjunc\u00e7a\u00e3o temporal.\nO artigo tamb\u00edem apresenta um m\u00edetodo de busca diferenciado de solu\u00e7co\u00e3es, denominado backtracking adaptativo. Ao inv\u00e9s de fixar uma ordem de variaveis para atribui\u00e7\u00e3o de valores, o algoritmo procura identificar os dutos mais cr\u00edticos a partir do numero de fails gerados pelo resolvedor de PR durante o sequenciamento dos planos. Espera-se que a ocorr\u00eancia de muitos fails seja devida \u00e0 decis\u00e3es equivocadas no passado e, portanto, os dutos problematicos ganham prioridade na ordem de sequenciamento, quando uma nova \u00e9rvore de backtracking \u00ed constru\u00edda.\nO modelo apresentado foi obtido ap\u00edos 2 anos de especifica\u00e7c\u00e3ao, extra\u00e7ca\u00e3o de dados,\nmodelagem e testes. O procedimento foi integrado a um simulador propriet\u00e1rio da empresa e as solu\u00e7ao foram validades por engenheiros da Petrobras. E importante notar que as novas rotas encontradas est\u00e3o dentro das existentes, por\u00e1m nao sao usuais para os produtos utilizados. Como foi demonstrado, o tempo de execu\u00e7\u00e3o para horizontes de ate 10 dias manteve-se aceit\u00e1vel.\nExistem muitas oportunidades de melhoria dos modelos de progamac\u00e7a\u00e3o por restric\u00e7\u00e3ao. No entanto, \u00e1 not\u00e1rio que a fase de planejamento mensal recebeu aten\u00e7\u00e3o reduzida nesse artigo e a utiliza\u00e7ao de uma heur\u00edstica, mesmo que suficiente para os prop\u00e1sitos de agen-damento, ainda \u00e1e um passo inicial. O pr\u00e1oximo artigo apresentar\u00e1a uma nova modelagem que tratar\u00e1 a fase de planejamento usando fluxo em redes.\nCap\u00edtulo 7\nUm modelo para o Problema de Planejamento\nPr\u00f3logo\nO artigo deste cap\u00edtulo foi submetido ao peri\u00fadico Computers &amp; Chemmical Engineering, em 2010, e apresenta uma formaliza\u00e7\u00e3o do problema de planejamento junto com uma modelagem baseada em fluxo em redes.\nNo artigo apresentado anteriormente, a fase de planejamento recebe um tratamento heur\u00fastico. Na\u00e3o h\u00faa, no entanto, uma formalizac\u00e7\u00e3ao do problema determinando quais as restri\u00e7co\u00e3es tratadas ou mesmo uma func\u00e7a\u00e3o objetivo. O conjunto de caracter\u00fasticas tratadas do PPAORO restringe-se as estimativas de atendimendo da demanda, ocupa\u00e7\u00e3o dos dutos e utiliza\u00e7c\u00e3ao dos tanques. N\u00e3ao \u00fae p oss\u00favel , por exemplo, determinar o estado de toda a rede em um instante de tempo qualquer, o que seria necessa\u00fario para verifica\u00e7ca\u00e3o de restri\u00e7co\u00e3es ba\u00fasicas do PPAORO.\nEmbora o tratamento apresentado seja suficiente para obten\u00e7ao de inst\u00e2ncias de entrada para o problema de agendamento, h\u00faa pouca informa\u00e7ca\u00e3o sobre a qualidade dessas inst\u00e2ancias. Na\u00e3o \u00fae surpresa que um conjunto de ordens criado considerando-se menos re-stri\u00e7c\u00e3oes trara\u00fa dificuldade para o algoritmo de agendamento. Portanto, uma modelagem que considerasse mais restri\u00e7c\u00e3oes possivelmente forneceria entradas de maior qualidade.\nOs tratamentos estudados na literatura resolveram o PPAORO focando na obten\u00e7c\u00e3ao de uma soluc\u00e7\u00e3ao para o problema de agendamento. No entanto, nenhum desses procedimentos conseguiu tratar eficientemente uma rede com topologia complexa e um horizonte de um m\u00e2es. Isso deve-se ao fato, primordialmente, que o problema de agendamento detalha diariamente, em horas ou minutos, as opera\u00e7c\u00e3os nos dutos. O problema de planejamento mensal n\u00e3ao necessita disso, podendo sua soluc\u00e7\u00e3ao indicar somente o tr\u00faafego di\u00faario. Sendo assim, muitas restri\u00e7\u00f5es deixam de ser aplic\u00faveis, como por exemplo, aquelas referentes \u00e0\nsequ\u00eancia dos bombeamentos.\nO artigo a seguir apresenta uma formaliza\u00e7\u00e3o do problema de planejamento utilizando um subconjunto de restri\u00e7\u00e3es do PPAORO e uma fun\u00e7ao objetivo que minimiza o custo de transporte. A sele\u00e7ao das restri\u00e7\u00e3es foi feita conforme as principais preocupa\u00e7\u00e3es dos engenheiros de log\u00edstica quando constroem soluc\u00e3es manuais\nA modelagem de fluxo em redes, aqui proposta, n\u00e3o utiliza a vis\u00e3o tradicional utilizada em outros modelos [9], e pode ser resolvida usando um resolvedor de modelos de programa\u00e7ao linear. Isso torna o procedimento eficiente para teste de diversos cen\u00e1rios, variando a previs\u00e3ao de demanda e o planejamento de produ\u00e7ca\u00e3o.\nNesse artigo, a fase de planejamento \u00e1 entendida tamb\u00e1m como um problema isolado de planejamento t\u00e1tico. Neste problema \u00e9 necessario dizer quais ser\u00e2o os bombeamentos diarios partindo de cada rota para satisfazer as demandas previstas e escoar as produ\u00e7c\u00e3oes planejadas. Os resultados obtidos com o uso do procedimento foram comparados com as resoluc\u00e7o\u00e3es manuais desse mesmo problema e apresentaram melhorias significativas.\nPlanning The Operation of a Large Real-World Oil Pipeline\nTony M. T. Lopes, Andre A. Cire, Arnaldo V. Moura, Cid C. de Souza Institute of Computing - University of Campinas 13081-970, Campinas, SP\n{arnaldo, cid}@ic.unicamp.br, {andre.cire, tony.lopes}@gmail.com\nAbstract\nA set of oil derivative distribution depots, including refineries and terminals, have local demands and productions of different products in a given time horizon. However, there may be not enough local stock of some product to satisfy the corresponding demand, or there may not be enough tank capacity to stock the local production. This brings the need for transportation of oil derivatives through a network of pipelines. To accomplish that, a tactical pumping plan is composed monthly, and a more detailed operational schedule, spanning a few days, must be updated daily. Both the planning and the scheduling must satisfy a large set of operation constraints. This work defines the tactical planning problem and proposes a novel network flow model to solve it. Also, a procedure is given to decompose the solution into a specific input format, as needed by another solver that computes the final, detailed, daily scheduling solution. Our model treats the oil pipeline network that is operated by the Brazilian oil company Petrobras. This is one of the most complex and large topologies when compared to other networks treated in the open literature. The model was tested with real-world instances and showed significant improvements over human planning.\n1\tIntroduction\nThe Oil Industry faces many difficult logistic problems that must deal with unstable markets and large amount of resources. In this context, planning problems are amongst the most important and have received intense attention [1, 2, 3, 4, 5].\nThis paper focus the inland oil derivatives distribution problem stemming from a network of pipelines operated by the Brazilian oil company PETROBRAS. Being the 15th largest oil company in the world1, it faces a very difficult transportation problem in which\n1See www.energyintel.com.\nFigure 1: A Sample Pipeline Network.\n\u25a1 f0\n\u25a0\tf.\n\u25a0\tf2\nethanol and several petroleum derivatives, like gasoline, diesel, and naphtha, must be transported from refineries to depots, where consumer markets are located. Pipeline networks offer the most economical way available to transport oil derivative products inland. The scenario studied here has an extension of 7,000 kilometers, comprising 29 individual interconnecting pipelines. There are 14 distribution depots that can store up to 10 millions cubic meters of products, stocked in more than 200 tanks located at various depots. Figure 2 depicts the network topology.\nThe use of such a complex network must be approached at the strategic, tactical, and operational levels [6]. While the first level deals mostly with planning adjustments and extensions to the current network, the latter two manage the network operation. The difference among them resides in the amount of details each one treats, the time horizon considered, and in their operational objectives. At the tactical level, one usually aims at checking if the production plans in the refineries are enough to satisfy the forecasted demand. It must take into account as many operational decisions as possible, while still keeping the problem solvable in a feasible amount of time. It usually spans large horizons comprising from months to years. At the operational level, one treats the problem of constructing detailed daily schedules for the pumping operations at each depot, in such a was as to guarantee that all listed demands are satisfied and all refinery productions are properly stocked.\nMost of the previous approaches to this problem, however, focus the operational level where detailed daily pumping schedules must be planned [7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 3]. A few other works could be considered tactical approaches [17, 18, 19]. In any case, they could not be directly applied to our problem, since they handle much simpler networks, usually with only one pipeline.\nSolving the tactical problem manually can be ineffective. It is necessary to obey many refinery production schedules and the pipeline network is too complex for in depth man\nual analysis of all possible operational constraint violations. In fact, the only constraints usually verified in manually constructed solutions are mass conservations at pipelines and tanks. On the other hand, the resulting tactical plan has a huge impact when scheduling daily plans. A bad tactical plan can result in overloading certain pipelines while underusing others. This, in turn, can lead to overdue demands. As another consequence, refinery productions of some derivatives might have to be reduced because local stocks are too high and products are not properly scheduled to be timely extracted from the corresponding tanks at refineries. To avoid these situations, engineers have to produce very conservative plans with many decisions depending solely on their past experiences. Furthermore, such manual procedures do not admit precise cost optimization considerations.\nIn this paper, we present a formal description of the planning problem, as we are going to call the tactical planning problem henceforth. This formalization takes into account the operational constraints that will have the greatest influence at the subsequent daily scheduling problem. A network flow model [20] is proposed to solve the planning problem. The main difficulty was to model specific pipeline characteristics, e.g. that they must be always completely full, while moving products through predefined pipeline routes. Transportation costs will be the objective to minimize. A decomposition algorithm is also given to extract individual pumping operations from the network flow solution. These operations could, then, be used as input to detailed daily scheduling algorithms, such as the one proposed in [3]. Computational results showed that the proposed model has an adequate execution time and produces solutions with up to 25% cost reductions when compared to manual solutions.\nSection 2 describes the tactical planning problem. Section 3 applies network flow to model the tactical planning problem. The computational results can be seen in section 4. Section 5 summarizes our contributions and suggests further advances.\n2\tProblem Definition\nThe topology of a pipeline network system is given by three sets: tanks, depots, and pipelines. Tanks are used for product storage. During the whole planning period, a tank can store only a single type of product. Depots are geographically dispersed units where local demands for oil-derivatives occur. Each depot has its own subset of tanks and some depots may also hold refinery facilities. Pipelines interconnect the depots and are used for product transportation. Each individual pipeline connects only two depots.\nAn illustration of a pipeline system is presented in Figure 1, in which products (or fluids) Fo, F1, and F2 can circulate. The four depots Do ,D1, D2 and D3 are connected by the pipelines Po, P1, P2, P3, and P4. A label Tijk refers to the i-th tank in depot Dj being designated to stock product Fk. Note that two pipelines connect depots D2 and\nDepot\nFigure 2: The inland pipeline network.\nRefinery\n____'j Junction\nD3, which is a common situation in practice.\nVolumes must be extracted from tanks before pumped into a pipeline. After pumped out of a pipeline, volumes can either enter a tank or move directly into another pipeline. The sequence of pipelines traversed by a volume when moving from its origin to its destination comprises its route. More precisely, we define a route as an alternating sequence of depots and connecting pipelines. For example, the sequence D0PiD2P3D3 represents a valid route in Figure 1.\nA single pipeline in a route is called a segment. All volumes in circulation must have a predefined route assigned to them. Also, a volume cannot be stocked at intermediate depots while moving along its route; it can only be deposited in an available tank at its destination depot.\nThe problem consists of planning oil derivative transfers between depots through valid routes in order to satisfy all depots inventory constraints, meet local demands, and accommodate all the refineries production schedules. The planning must also obey a complex set of operational restrictions over a given planning time period, or horizon, usually a month.\nThe constraints described in the next subsections were selected among many real operational constraints [3]. They represents the minimum set of constraints that are necessary to observe in order to produce a feasible tactical planning. All of these constraints must be verified by the end of each day, except for the stock levels, which are verified weekly. When producing a detailed operational pumping schedule, there are additional aspects that must be taken into consideration, and which are not considered by the tactical planner. These restrictions will not be treated here (see [3] for further discussions.) Restrictions regarding tanks, pipelines and stock levels are described in the following three\nsections, respectively.\n2.1\tTank Restrictions\nAll tanks must satisfy the following restrictions:\n(1)\tTanks have a fixed and limited maximum capacity which must always be respected. Minimum capacities are all set to zero.\n(2)\tA tank can only store one type of product during the whole planning horizon. This constraint, required by field operators, ensures adequate product quality by avoiding possible mixtures. A depot can contain more than one tank for a given product, but it does not necessarily contain tanks for all products. It is possible that a depot contains no tanks at all, being used solely as an intermediate transmission node between two pipelines. In Figure 1, depot D2 depicts such a situation.\n(3)\tThere is a limit to the amount of product that can be extracted and/or injected within a time period. This is due to many operational constraints that arise when managing tanks.\n(4)\tThe initial product stock level at each tank is given and must be respected.\nProblem specifications in which constraint 3 is satisfied are said to have the individual tank property. An alternative view used in some scheduling models [11] relax this restriction by considering virtual tanks for each product at each depot. Such virtual tanks aggregate the capacities of all real tanks of each product in a given depot.\n2.2\tPipeline Restrictions\nPipeline restrictions are as follows:\n(5)\tSince they are pressurized, pipelines must be completely filled with products at all times. Hence, in order to pump a certain product out of a pipeline, it is necessary to inject an equal volume at the other pipeline extremity.\n(6)\tAt the beginning, every pipeline is filled with products, separated in batches. All such batches have already being assigned a route that must be preserved.\n(7)\tAs there is a limited number of pumps per depot, and given that products have different densities, a maximum flow rate must be observed per pipeline, per product and per flow direction.\n(8)\tIn order to simplify the modeling, a set of assignments of products to corresponding acceptable routes is given as input.\n2.3\tInventory Constraints\nAt each depot, stock levels must obey the following restrictions:\n(9)\tThe stock of a product at a certain depot at time t is obtained by summing the volumes of that product at time t from all tanks that can stock the product at the given depot. The desired maximum and minimum level of each product stock per depot must be satisfied at the end of specific time periods, usually a week. Some depots might have undefined stock levels for some products. In these cases, it is assumed that the minimum level is zero and the maximum level is the sum of capacities of all tanks that can stock the product in the depot.\n(10)\tThe stock levels at a depot vary mainly due to production and demand operations. Productions represent volumes created at a local refinery, while demands represent volume consumptions by the local market. Both are given in advance, using market estimates and other data such as raw products availabilities and refinery capabilities. Usually, a refinery depot produces more than the local tanks can actually store within the given planning horizon. Excess must be pumped out so as to accommodate the local productions and satisfy market demands at other locations.\nThe consumption rate of each product may vary greatly according to monthly seasonal markets. Moreover, it is difficult to foretell exactly the local market needs for a long period. As a result, pipeline operators are required to constantly update the network schedule to accommodate new demands, guaranteeing they will be satisfied on time. This can be done by solving the problem, taking an updated input instance, every time there is a need for it.\n2.4\tInput Instances and Solutions\nThe problem data is composed by: (1) the network, described by the sets of tanks, pipelines, depots and their initial states; (2) operational parameters, such as tank capacities, pipeline flow rates and stock levels; (3) a time horizon and a set of production and demand schedules (see Section 2.3) that must be accommodated and satisfied, respectively, at each depot.\nGiven the problem data, a feasible solution is obtained by defining the amount of products that must be pumped into pipelines each day, while satisfying all restrictions.\nTable 1: Initial values and constants for an input instance\nConstant\tWhat it represents\nvol(l)\ttotal volume of pipeline l.\nPilelineStarti\tA set of triples (p, qty, r) each representing a quantity qty of product p that must follows route r that is initially inside pipeline l. The sum of the qty values over all triples is equal to vol(l).\nstockd,tk\tthe initial volume inside tank tk at depot d.\nproductionp,d,t\tthe volume of product p produced at depot d in period t.\ndemandp,d,t\tthe volume of product p demanded at depot d in period t.\nstockLevel M ind,p, stockLevel M axd,p\tthe minimal and maximum volumes of product p allowed at each depot.\nmaxQtyInjecte>p>i, maxQtyInjectp>i, maxQtyInjectej, maxQtyInjectl\tthe maximum quantity that can be injected in one time period in pipeline l. Here, e represents a flow direction for product p in pipeline l: P for the normal direction and R for the reverse direction. When any of the three indices is missing, the intended meaning is to take the sum over the missing indices.\nmaxTransferr,p,n,u\tthe maximum volume of product p that can be injected into the n-th pipeline of route r after u time periods. If there are n \u2014 1 segments in route r, then index n refers to the volume that can be delivered at the last depot in route r.\nmaxDepotQtyInjectd\tthe maximum quantity that can be injected into pipelines leaving depot d in one time period. It is calculated considering the number of pumps available at depot d.\nSometimes, for a given set of production and demands, there may not be a feasible solution. In these cases, it is interesting to identify which productions or demands cannot be satisfied so that the input data can be adjusted.\nThe objective function considers the minimization of the total transfer cost in the whole network. In reality, different pipelines might have distinct operational costs. Here, we are considering homogeneous costs as these data were not fully available. So, minimizing costs is the same as minimizing the total volume transfered over the same time horizon.\n3\tA Network Flow Model for the Planning Phase\nIn a previous work of [11], a classical network flow model for our problem has been studied. This integer programming model, however, proved inefficient in practice. [21] used a linear relaxation from this model in order to get a solution for the tactical planning problem. This relaxed solution proposed flows along each pipeline, at every time instant. With this information, a heuristic was designed to construct operational schedules with feasible pumping movements. But the detailed operational schedules so produced spanned only a few days or a few products . The model we propose overcomes these difficulties and its output can be directly used by the daily scheduler proposed in [3].\nBut, first, note that the classical network flow model for the problem is not yet suitable because one cannot constrain the flow to follow predefined routes. This could be troublesome, as we could obtain inadequate paths for some movements. An alternative approach is to build the network flow using the predefined routes for each product . This approach is described in the next subsections.\n3.1\tNetwork Model Definition\nThe network model will be built by considering pairs (r, p), where r is a route and p is a product . Each of these pairs represents a commodity. There will be T time periods and the last one will be a special one. It will signal the end of the horizon. Each period spans one day, as demands and productions are given in a daily basis. This will also help to keep the model small, with less variables and with less constraints applying to each time period. Along with the given sets of depots, pipelines, and products an input also must define the values and constants described in Table 1.\nNodes will be created in accordance with the following rules (see also Table 1 for a summary of term definitions):\n\u2022 Tank Nodes: For each tank tk, each depot d and each time period t, with 0 &lt;t &lt;T, there will be two nodes: (1) node i (or NodeStartTkd,tk,t) with bi = stockd,tk\nTable 2: Node description for the Pipeline Network flow Model\nNode\tWhat it aggregates\nN odeStartT kd,tk,t\tproduction and previous stocks at the start of period t in depot d and tank tk.\nN odeEndT kd,tk,t\ttotal of volumes received from the network and volumes that were not distributed at period t in depot d and at tank tk.\nNodePInP,d,t\tvolumes received from the network at the start of period t of a particular product p in depot d.\nNodePOutP,d,t\tvolumes that will be distributed to the network at period t of a particular product p in depot d.\nNodeProP,d,t\tthe production volume productionP,d,t of a product p in depot d at period t.\nNodeDemP,d,t\tthe demanded volume demmandP,d,t of a product p in depot d at period t.\nN odePipeStartP,r\tthe volume of product p inside a pipeline l at the beginning of the horizon and that has to follow route r.\nNodePipeEndi\tvolumes that will be stocked inside pipeline l at the end of the horizon.\nNodePiper,i,P,ti,t\tvolumes of product p that traveled along route r and are currently at pipeline l at period t having departed from route\u2019s r origin at period ti.\nif t = 0, or else b = 0 if t > 0, and (2) node j (or NodeEndT kd,tk,t) with bj = 0. The first node represents the tank state at the beginning of period t and the other represents it at the end of that period. All incoming and outgoing flows at tank tk will go through these nodes.\n\u2022\tIn and out nodes: For each product p with tanks at depot d and each time period t, with 0 &lt;t &lt;T, there will be a node i (or NodePInP,d,t) and a node j (or NodePOutP,d,t) with bi = bj = 0. Every incoming and outgoing flow at a depot will pass through these nodes. These are intermediate nodes between tanks and the pipeline network.\n\u2022\tDemand and Production Nodes: For each product p, each depot d and each period t, with 0 &lt;t &lt;T, there will be: (1) a node i (or NodeDemP,d,t) with bi = \u2014demandP,d,t, and (2) a node j (or NodeProP,d,t) with bj = productionP,d,t.\n\u2022\tPipeline Initial Stock Nodes: For each pipeline l and each triple (p,qty,r) in PilelineStarti, there will be a node i (or NodePipeStartP,r) with bi = qty.\n\u2022\tPipeline Terminal Stock Nodes: All pipelines must remain completely filled at the end of the planning horizon. So, for each pipeline l there will be a node i (or NodePipeEndi) with bi = vol(l). In this way, the flow at the end of the horizon will sum up to the pipeline volume.\n\u2022\tPipeline Route Nodes: Some nodes will be used to model movements of products along the pipelines. An index ti names the period where the movement starts, and an index t will represent the current period. For each pair (r,p) of a route r and a product p, and each pipeline l that is part of route r, there will be a node i (or NodePiper,i,P,ti,t) with bi = 0, for each time period 0 &lt;ti &lt;t &lt;T. In order to handle situations when the volume was already inside the pipeline at the first period, we have nodes with ti = 0.\nTable 2 summarizes each node function. The next step is to connect these nodes with arcs. In the following description, the traffic costs are zero and flows must be greater than zero unless stated otherwise.\n\u2022\tTank Stock Arcs: For each node NodeEndT kd,tk,t there will be two arcs. The\nfirst arc, NodeStartTkd,tk,t\tNodeEndT kd,tk,t, aggregates production and previous\nstocks. The second one, NodeEndT kd,tk,t\tNodeStartTkd,tk,t+i, represents a stock\ntransition between time periods. Figure 3 show these arcs as the down arrows that come out of tank nodes.\nFigure 3: Nodes and arcs representing pairs of depots d and products p. Items within parenthesis index the nodes enclosed inside the rectangle. The occluded rectangles represent the multiplicity of that network with regard to the inner index.\n\u2022\tTank In and Out Arcs: For each pair of nodes NodeStartTkd,tk,t and NodeEndTkd,tk,t\nthere will be two arcs: NodePInp,d,t\tNodeEndTkd,tk,t and NodeStartT kd,tk,t\nNodePOutp>d,t. Here, tank tk stores product p. Volumes pass through these arcs before coming from or going to some pipeline. Figure 3 shows them as crossing arcs.\n\u2022\tProduction and Demand Arcs: For each pair of nodes NodeDemp,d,t and NodeProp,d,t,\nthere will be arcs NodeEndTko,tk,t\tNodeDemp,d,t and NodeProp,d,t\tNodeStartTko,tk,t,\nfor all tanks tk that can store product p at depot d. The maximum capacity of these\narcs will be the same as the demand or production volumes of the respective products. Figure 3 shows these arcs as the two left horizontal arrows at the left.\n\u2022\tInitial Stock Arcs: For each node NodePipeStartr and its associated content\n(p,qty,r), there will be an arc NodePipeStartr\tNodePiper,i,p,o,o with minimum\nand maximum capacities given by qty. Figure 4 illustrates the subnetwork generated to represent a pipeline stock.\n\u2022\tOutgoing Terminal Arcs: For each node NodePiper,i,p,t,t where l is the first pipeline and d is the starting terminal of route r, there will be an arc NodePOutp,d,t\nNodePiper,l,p,t,t. The maximum capacity of this arc is maxTransferrp0,i which measures the maximum quantity of product p that can be injected into pipeline l over a whole day. These arcs are the leftmost ones shown in Figure 5.\n\u2022\tIntermediary Stock Arcs: For each node NodePipergp,ti,t there will be an arc\nNodePiper,l,p,ti,t\tNodePiper,l,p,ti,t+1 with capacity given by the pipeline volume\nvol(l). These arcs are the vertical ones in Figures 4 and 5.\n\t(1)\t(11)\t(11)\t\n\t(P.r) NodePipeStart\t\t\t\n(t=0)\t(p,ti=O) V\ti\t\t\n\tNodePipeTp\tPl\tj\t\t\n(t=l)\tA\t\t1\t\n\tA\tPl\tj\t\t\n(t=2)\tA\t\t\tNodePIn\n\t\tPl\tj\tPl\tJ\t\u2014\n\tV\t\u25bc\t\u25bc\t\nFigure 4: Nodes and arcs for the stock of a pipeline with contents (p,qty,r). Items within parenthesis index the nodes enclosed inside the rectangle. The occluded rectangles represent the multiplicity of that network with regard to the inner index.\n\u2022\tRoute Arcs: For each pair of nodes NodePiper,i1tP,ti,t and NodePiper,i2,p,ti,t where l1 and l2 are sequential segments in route r, there will be an arc NodePiper,i1tptti,t\nNodePiper,i2pti,t between them. If x is the index of pipeline l2 in route r, the maximum capacity of this arc is calculated as maxTransferr>p>x>t-ti+1. This is the same as the maximum quantity of product p that can be transfered out of pipeline l1 starting at period ti and ending at period t from the beginning of route r. Figures 4 and 5 show these arcs connecting adjacent nodes that are inside rectangles representing pipelines.\n\u2022\tIncoming Terminal Arcs: For each node NodePiper,ipt,t where l is the last segment and d is the last terminal of route r, there will be an arc NodePiper>i>p>ti>t\nNodePInp,d,t- If n \u2014 1 is the index of segment l in route r, the maximum capacity of this arc is calculated as maxTransferr,p,n,t-ti+1- This is the same as the maximum quantity that can be transfered to terminal depot d starting at period ti and ending at period t along route r. These arcs are the rightmost ones in Figure 5.\n\u2022\tPipeline Terminal Stock Arcs: For each node NodePipeEndi, with T the last\nperiod, there will be an arc NodePipergp,ti,T-1\tNodePipeEndi with maximum\ncapacity equal to vol(l).\nFigure 5: Nodes and arcs representing volumes traveling along routes. For a fixed route r and product p, at every period ti a new subnetwork is created so that the quantity will only be delivered after enough periods have passed. The subnetwork for period t = 3 was omitted to show more of the subnetwork for period t = 2. Items within parenthesis index the nodes enclosed inside the rectangle. The occluded rectangles represent the multiplicity of that network with regard to the inner index.\n3.2\tA Linear Programming Model\nIn order to define the constraints and the objective function of the model we need the set of nodes at period t, Nodest, the set of nodes along pipeline l at period t, Nodesij, and the set of all nodes for product p at pipeline l and at period t, Nodesp>i>t. Also, DP, P, and PL will indicate the set of all depots, products, and pipelines respectively.\nThe following model is not strictly a network flow model. Nevertheless, the problem structure itself retains many features of a Multi-commodity Multi-period Network Flow Model and a path decomposition algorithm will be described [20] later on.\nNodes Mass Balance\nE\nxij\nXji = bi + Slacki\n(1)\nj-(i,j)&amp;A\tj \u25a0\u25a0(j,i)&amp;A\n'di E Nodest,\t0 &lt;t &lt;T\nWe consider that the pipeline initial and terminal stock nodes are all in the Nodes0 set. Also, this constraint is not applied to tank nodes in the last period. This is necessary in order to model what will be in stock inside tanks after the end of the horizon. The Slacki,\nvariable will only be present when one wants to know which stocks cannot be satisfied. In this case, if node i is a production node we define Slacki = -InsatisfiedProductioni,\nand for a demand node i we let Slacki = InsatisfiedDemandi.\t\t\nArc Bounds\tlij &lt;xij &lt;uij ,\tV(ir j) G A\t(2)\nPipelines must always remain full\t\t\n\txij = vol(l) j :(i,j )\u20acA Vi G Nodesi,t, l G PL, 0 &lt;t &lt;T\t(3)\nAn amount injected at one end equals the\namount delivered at the other end\nxij\txji\nj: (i,j)\u20acA\tj: (j,i)\u20acA\nDeliver(R,i,j)\tInject(P,j,i)\nVi G Nodesi,t,\tl G PL, 0 &lt;t &lt;T\n(4)\nxij =\txji\nj: (i,j)eA\tj: (j,i)&amp;A\nDeliver (P,i,j)\tInject(R,j,i)\nVi G Nodesi,t,\tl G PL, 0 &lt;t &lt;T\n(5)\nThe functions Inject(e, j, i) and Deliver(e, i,j) tell if arcs (j, i) and (i,j) inject or deliver volumes, respectively, through extremity e in the pipeline represented by node i.\nPipelines Flow Rates\nE\nXij &lt;maxQtylnject^pj\nj:(i,j)GA\nInject(R,i,j)\n(6)\nVi G Nodespgt, P G P, l G PL, 0 &lt;t &lt;T\nE\nxij\n&lt;maxQtyInjectP,p,i\nj : (i,j)\u20acA\nInject(P,i,j)\n(7)\nVi E Nodesp,l,t, p E P, l E PL, 0 &lt;t&lt;T\n52 Xij +\nXj &lt;maxQtyInjectp,l\nj: (i,j)\u20acA\nInject(R,i,j)\nj:(i,j)&amp;A\nInject(P,i,j)\n(8)\nVi E Nodesp,l,t, p E P, l E PL, 0 &lt;t &lt;T\nXj &lt;maxQtyInjectR,l\nj:(i,j)^A\nInject(R,i,j)\n(9)\nVi E Nodesl,t, l E PL, 0 &lt;t &lt;T\nXj &lt;maxQtylnjectpl\nj : (i,j)\u20acA\nInject(P,i,j)\n(10)\nVi E Nodeslj, l E PL, 0 &lt;t &lt;T\nj:(i,j)&amp;A\nInject(R,i,j)\nxij +52 Xj &lt;maxQtyInjectl\nj : (i,j)\u20acA\nInject(P,i,j)\n(11)\nDepot Injection Limit\nVi E Nodesl,t, l E PL, 0 &lt;t &lt;T\nx-ij &lt;maxDepotQtyInjectd\n(i,j)^ArcsOutDd t\n(12)\nVd E DP, 0 &lt;t &lt;T\nThe set ArcsOutDd,t contains all the arcs that start in NodePOutp,d,t, for all products in depot d and at period t.\nE\nE\nE\nE\nE\nStock Levels\nXij > stockLevelMindp>\n(i,j)^ArcsOutTankEndd,p,t\n(13)\nVd e DP, Vp e P, Vt e WE\nxij &lt;stockLevelMaxd,p\n(i,j)^ArcsOutTankEndd,p,t\n(14)\nVd e DP, Vp e P, Vt e WE\nThe set ArcsOutTankEndd,p,t contains all arcs connecting node NodeEndTkd,tk,t to node NodeStartTkd>tk,t+i, for every tank tk at depot d with product p and at period t. These are the arcs that transmit stocks between periods. The set WE contains the periods where stock levels should be verified. It should be of the form {6,13, 20, 27...}, representing a weekly check.\nObjective Function When engineers want to check if a proposed production plan is feasible against the forecasted demands they use the following objective function:\nminimize f\tInsatisfiedProductioni +\ni^NodesPro\nE\ni^NodesDem\nInsatisfiedDemmandi\n\u2022>\n(15)\nwhere the sets NodesPro and NodesDem contain the all production and demand nodes, respectively. The solution obtained with this objective function can also be used to correct production or demand values. This correction deals with many economical and operational issues that are not discussed here.\nAfter finding a feasible set, the next objective function to be used is the classic one:\nminimize\ny^ xij\n(16)\nE\nE\n(i,j)eA\nTogether with the constraints, we have a complete model for the planning phase. The next step is to extract the orders using a modified decomposition algorithm.\n3.3\tNetwork Flow Decomposition\nFigures 3, 4 and 5 show no bidirectional arcs and no paths going back to a previously visited node. So, no cycle can be generated within the network. This observation allows us to use a specialized version of the flow decomposition algorithm [20]. We also introduced some modifications that are specific to our problem, as described in Algorithm 3.\nThe main purpose of the preferences mentioned in Select and Search is to make it easier to supply a demand by considering the longest time between the moment it is needed and the moment it is available. These heuristics do not affect the result stating that the flow can be fully decomposed into paths.\nLet P' the set of paths and let f (P) be the flow associated to a path P GP'. We create the necessary orders that can be input to the operational scheduling solver described in [3] by analyzing the nodes traversed by P. An order O will be represented by the tuple\nO = (OriginTank, DestinationTank, Product,\nVolume, Route, Deadline).\nA path P is built following the inverse order with respect to the network timeline. This way it will always start at a demand node, a tank node or a pipeline stock node at the last period. The deadline is either the demand node period or the last period when the node corresponds to tank or pipeline stocks. A path P should always end at a production node, tank initial node or pipeline initial stock node. Sometimes the path will not contain any pipeline nodes. Such is the case when a demand is satisfied by a production inside the same depot. In these cases, the route will be null. Conversely, the path P can contain nodes present in more than one route. In this case, one must create as many orders as there are pipeline nodes in P, because each order has exactly one route associated to it.\nThe origin and destination tanks should be the ones connecting to pipeline nodes. If there is no route, the two tank variables will have be the same value. Finally, the volume is given by the flow f (P) associated with the path.\nA decomposition of the network can generate a huge number of orders with small volumes. It is interesting, then, to aggregate similar orders. If two orders have the same origin tank, destination tank, product, route, and close deadlines, they can be merged into one order with their volumes summed up. Two deadlines are close if they happen within a range of days. The horizon can be divided in as many ranges as necessary. In our case, it was divided in ten ranges of three days each, generating a set of orders with adequate size.\nAlgoritmo 3 Pipeline Network Flow Decomposition Algorithm\nEntrada: G = (N, A) with arc flow x Sa\u00edda: P with f (P), VP E P\nNotation:\ny - flow working copy A(y) = {(i,j) E A\\yij > 0} (Arcs with positive flow in y) N(y) = {i\\(i, j) E A(y) or (j,i) E A(y)} (Nodes incident to arcs in A(y) G(y) = (N (y),A(y))\nS = {i E N(y)\\bi > 0} (supply nodes) D = {i E N(y)\\bi &lt;0} (demand nodes) s and t are the start and end nodes of path P. A(P) = min{b(s), \u2014b(t), min{yij\\(i, j) E P}} (Capacity of path P)\n1: procedimento PIPELINEFLOWDECOMPOSITION\n2:\ty = x, P = 0\n3:\tenquanto A(y) = 0 fa\u00e7a\n4:\ts = SELECT(y)\n5:\tSEARCH(s,y)\n6:\tse Path P found\tentao\n7:\tP = P\\J{P}\n8:\tf (P ) = f (P ) + A(P)\n9:\tyij = yij \u2014 A(P)V(i,j) E P\n10:\tb(s) = b(s) \u2014 A(P)\n11:\tb(t) = b(t) \u2014 A(P)\n12:\tfim se\n13:\tUpdate\tA(y),N(y),S,D\n14:\tfim enquanto\n15: fim procedimento\n16: fun\u00e7ao SELECT(y)\n17:\tOrder nodes in S first by the most pressing demands;\nsecondly, by those tank nodes at the last period, and lastly, by pipeline terminal stock nodes.\n18:\tretornar the first node in S by the given ordering.\n19: fim fun\u00e7ao\n20: funcao SEARCH(s,y)\n21:\tDo a DFS starting with node s until a path P is found in G(y) ending at node\nt E D.\n22:\tInside the DFS, before choosing the next node, order the candidate nodes\nfirstly by being of the same tank, if applicable, then by those nodes being in the same time period.\n23:\tretornar The path P found.\n24: fim fun\u00e7cao\nInstance\tRows\tColumns\tNon-zeros\tModel Time (s)\tDecomp. Time (s)\tOrders\n1\t23801\t51948\t266778\t22.1\t3.3\t700\n2\t22935\t49788\t256470\t19.5\t3.2\t685\n3\t22346\t48607\t248310\t18.4\t3.5\t700\n4\t22976\t50494\t257631\t17.9\t4.1\t731\n5\t23237\t50711\t260774\t20.3\t4.5\t759\n6\t24532\t54414\t281496\t23.0\t4.0\t841\n7\t23079\t50448\t258469\t20.3\t3.4\t826\n8\t24355\t53797\t278574\t28.0\t4.2\t897\n9\t24462\t53152\t273019\t22.9\t3.7\t776\n10\t25948\t57326\t295073\t26.8\t3.9\t796\n11\t25536\t56357\t290854\t26.5\t4.0\t818\n12\t21554\t46487\t236411\t17.6\t3.9\t727\nMean\t23730\t51960\t266988\t21.9\t3.8\t771\nTable 3: Execution Results\nInstance\t1\t2\t3\t4\t5\t6\t7\t8\t9\t10\t11\t12\tMean\nProportion\t0.72\t0.69\t0.80\t0.71\t0.81\t0.82\t0.83\t0.76\t0.72\t0.67\t0.69\t0.73\t0.75 \u00b1 0.05\nTable 4: Manual planning vs Real planning - Total Network Flow Proportion\n4\tComputational Results\nSolutions were obtained on a Intel Pentium Core 2 Duo 2.1 GHz CPU platform, with 3MB L2 Cache and 4GB RAM. The program was coded in C++ and compiled using GCC-4.2 without optimization. The network flow model used the CPLEX 10 solver with presolving columns and row elimination. Among the linear programming solving techniques available, the barrier method was selected as it gave the best execution times.\nAll instances refer to the same network topology, with 19 pipelines, as depicted in Figure 2. The number of tanks vary from 0 to 20 at each depot, with a total of 192 tanks. Also, there are 11 products that circulate through the network.\nThe model was tested against 12 real instances, spanning a whole year of planning, one instance per month. Some characteristics of these instances cannot be disclosed, as they could expose classified data.\nFrom Table 3 it can be seen that the whole execution takes around 20 seconds. This makes the procedure suitable for testing \u201cwhat-if\u201d scenarios. The number of orders per\nProduct\tP1\tP2\tP3\tP4\tP5\tP6\tP7\tP8\tP9\tP10\tP11\tMean\nProportion\t0.91\t0.65\t1.05\t0.73\t1.05\t0.79\t0.92\t0.83\t0.58\t0.15\t0.56\t0.75 \u00b1 0.26\nTable 5: Manual planning vs Real planning - Total Network Flow Proportion by Product\n5.\tConclusions and Future Work\n104\nPipeline\tDx\tD2\tD3\tD4\tD5\tD6\tD7\tDg\tDg\tDXo\t\nProportion\t0.27\t0.85\t0.65\t0.95\t0.91\t0.85\t1.05\t1.00\t0.34\t0.82\t\nPipeline\tDxx\tDX2\tDX3\tDX4\tDX5\tDX6\tDX7\tDX8\tDX9\t\tMean\nProportion\t0.58\t0.64\t0.70\t0.66\t1.04\t1.14\t0.78\t0.18\t0.91\t\t0.75 \u00b1 0.27\nTable 6: Manual planning vs Real planning - Total Network Flow Proportion by Pipeline month never exceed 900, and so, roughly, it is necessary to schedule 30 orders per day in order to reach the planning goal.\nPetrobras also provided data on manually generated plans for each of the instances. In Table 4, the total volume scheduled to be transfered by a real planning is compared against the one proposed by the model. The mean proportion is 0.75, meaning that the model transfers 25% less units of volume each month on the average. This represents a quite significant economy when multiplied by the very large volumes that are moved each month. It must be noted that the model does transfer what is necessary in order to satisfy every demand and keep the stock levels in safe conditions. Thus, these savings in product shipments were not obtained at the expense relaxing some problem constraints.\nOne reason for the 25% reduction could be related to the choice of products used to push others along pipelines, when really necessary. Sometimes, the products used to push others out of a pipeline are not directly useful for the planning goals. This incurs in wasted pumping moves. Examining Table 5 one can see that the differences in product choices are high. As an example, product PXo has a proportion of only 0.15.\nAnother important aspect of this issue is the choice of routes. A refinery has many outgoing routes and, so, poor choices of routes along which products will be set to flow along may also lead to wastes. Table 6 shows that pipelines DX, Dg and DX8 are rarely used. Hence, there will be less need to push products out of them.\nThe objective was to minimize the total volume transported across the network. This means that a product will be moved only to satisfy a constraint. Engineers have the same objective but, having solely on their past experiences to rely upon, and having very limited time to workout a solution, they will accept any solution that keeps wastes below an \u201cacceptable\u201d level. The threshold where the solution is acceptable might be related to the 25% reduction in transported volumes.\n5\tConclusions and Future Work\nThis paper described the oil pipeline planning problem faced by Petrobras, a Brazilian oil company. The operation of its pipeline network involves many constraints related to tanks, volumes, pipeline utilization, stock levels as well as demand and production sched-\nules. There is also a large set of complex operational constraints that must be satisfied by feasible schedules [3]. The objective was to obtain a minimum cost transportation plan for all oil derivatives and ethanol, given that the specified demands and productions are adequate to meet the constraints. Although the real network operation requires a daily pumping schedule, here the problem is solved at the tactical level, where the horizon spans one or more months. See [3] for a scheduler that takes as input the tactical plan constructed by our algorithm and outputs a detailed daily schedule.\nIn its fullest, the problem can only be solved for a span of a few days. In order to make it more tractable, only the most important characteristics were included in our formal definition of the problem. Engineers validated these characteristics as the ones having the greatest impact over the network daily operation. An important characteristic requires that all pipelines must always remain completely full, and tanks should keep the local stock within their capacities. Transfers had to observe permitted pipeline flow rates, which can vary by pipeline, by product and by flow direction. Productions and demands were satisfied on a daily basis. Stock levels were verified weekly. Another important constraint was that volumes should follow along predefined routes that depend on product type.\nA model to solve this problem was proposed using network flow ideas. Nodes were defined so as to model the state of each depot. Pipelines were modeled by classifying the nodes that represent each route that a product can travel. The model could also be used to test if the proposed demand and production schedules were feasible or, else, to give a minimum cost transportation plan for feasible movements.\nTest results showed that the model can adequately deal with the Petrobras network topology and with monthly scenarios, within small computational times. Also, the solutions generated were compared to the ones proposed by the company expert engineers. It was found that the model almost always gave a 25% cost reduction. Tentative interpretations for this gain were listed.\nAlthough the model already included most of constraints the engineers consider when managing the tactical planning problem, more constraints could be considered. One of them could be to model what happens when two products that cannot make contact are to be injected in a pipeline. In this case, a third product must be used to separate them. Also, since sometimes pipeline and tank maintenance periods are known beforehand, such constraints could be incorporated into the model. The algorithms presented here were developed together with the work described in [3]. Finally, the tactical plan it outputs could be used as input to the daily scheduler discussed in that same work.\nAcknowledgments This research was supported by grants 05/57343-0 and 05/573447 from FAPESP and grants 301732/07-8, 478470/06-1, 472504/07-0, and 473726/07-6,\n305781/2005-7 from CNPq. The authors are also grateful to Fernando Marcellino and the team of engineers from PETROBRAS-Tl/SP.\nReferences\n[1]\tDempster,\tPedron, N.H., Medova, E.A., Scott, J.E., Sembos, A.: Planning\nlogistics operations in the oil industry. The Journal of the Operational Research Society 51(11) (2000) 1271 - 1288\n[2]\tMilid\u00edu, R., dos Santos Liporace, F., de Lucena, C.J.P.: Pipesworld: Planning pipeline transportation of petroleum derivatives. In: Proceedings of ICAPS\u201903 -Workshop on the Competition: Impact, Organization, Evaluation, Benchmarks, Trento, Italy (2003)\n[3]\tLopes, T.M., Cir\u00ed, A.A., Souza, C.C., Moura, A.V.: Special issue on the 14thinterna-tional conference on principles and practice of constraint programming. Constraints 15(2) (2010)\n[4]\tHerran, A., de la Cruz, J., de Andres, B.: A mathematical model for planning transportation of multiple petroleum products in a multi-pipeline system. Computers &amp; Chemical Engineering 34(3) (2010) 401 - 413\n[5]\tMoura, A.V., Pereira, R.A., de Souza, C.C.: Scheduling activities at oil wells with resource displacement. International Transactions in Operational Research 15(6) (2008) 659-683\n[6]\tMaravelias, C.T., Sung, C.: Integration of production planning and scheduling: Overview, challenges and opportunities. Computers &amp; Chemical Engineering 33(12) (2009) 1919 - 1930 FOCAPO 2008 - Selected Papers from the Fifth International Conference on Foundations of Computer-Aided Process Operations.\n[7]\tAlves, V., Filho, V.J.: Pipeline scheduling of petroleum derivatives using genetic algorithm. In: IV Congresso Brasileiro de Pesquisa e Desenvolvimento em Petr\u00f3leo e G\u00f3s, Campinas, Brazil (2007)\n[8]\tCafaro, D.C., Cerd\u00f3, J.: Optimal scheduling of multiproduct pipeline systems using a non-discrete MILP formulation. Computers &amp; Chemical Engineering 28(10) (2004) 2053-2058\n[9]\tRejowski, R., Pinto, J.M.: A novel continuous time representation for the scheduling of pipeline systems with pumping yield rate constraints. Computers &amp; Chemical Engineering 32 (2008) 1042-1066\n[10]\tFilho, E.M.S., Filho, V.J., de Lima, L.S.: Variable neighborhood search (VNS) applied to pipeline distribution problem with capacity constraints. In: IV Congresso Brasileiro de Pesquisa e Desenvolvimento em Petr\u00f3oleo e G\u00f3as, Campinas, Brazil (2007)\n[11]\tCamponogara, E., Souza, P.S.: A-Teams for oil transportation problem through pipelines. In: Information Systems Analysis and Synthesis, Orlando, United States (1996)\n[12]\tCamponogara, E.: A-Teams para um problema de transporte de derivados de petroleo. Master\u2019s thesis, Instituto de Matematica, Estat\u00edstica e Ci\u00eancia da Com-puta\u00e7ao, Universidade Estadual de Campinas, Campinas, Brazil (1995)\n[13]\tde la Cruz, J., Andr\u00e9s-Toro, B., Herr\u00e1n-Gonz\u00e1lez, A., Porta, E.B., Blanco, P.F.: Multiobjective optimization of the transport in oil pipelines networks. In: Proceedings of the IEEE Conference on Emerging Technologies and Factory Automation. Volume 1. (2003) 566-573\n[14]\tde la Cruz, J., Herran-Gonzalez, A., Risco-Mart\u00edn, J., Andr\u00e9s-Toro, B.: Hybrid heuristic and mathematical programming in oil pipelines networks: Use of immigrants. Journal of Zhejiang University SCIENCE 6A(1) (2005) 9-19\n[15]\tMagat\u00e3o, L., Arruda, L., Neves, F.: A mixed integer programming approach for scheduling commodities in a pipeline. Computers &amp; Chemical Engineering 28(1) (2004) 171-185\n[16]\tMagat\u00e3ao, L., Arruda, L., Neves, F.: Using CLP and MILP for scheduling commodities in a pipeline. Computer-Aided Chemical Engineering 20B (2005) 1027-1032\n[17]\tRelvas, S., Barbosa-P\u00e1voa, A.P.F.D., Matos, H.A., Fialho, J., Pinheiro, A.S.: Pipeline scheduling and distribution centre management - a real-world scenario at CLC. In: Proceedings of the 16th European Symposium on Computer Aided Process Engineering and 9th International Symposium on Process Systems Engineering, Garmisch-Partenkirchen, Germany (2006) 2135-2140\n[18]\tRelvas, S., Matos, H.A., Barbosa-P\u00e1ovoa, A.P.F.D., Fialho, J., Pinheiro, A.S.: Pipeline scheduling and inventory management of a multiproduct distribution oil system. Industrial &amp; Engineering Chemistry Research 45(23) (2006) 7841-7855\n[19]\tRelvas, S., Matos, H.A., Barbosa-P\u00e1voa, A.P.F.D., Fialho, J.: Reactive scheduling framework for a multiproduct pipeline with inventory management. Industrial &amp; Engineering Chemistry Research 46(17) (2007) 5659-5672\n[20]\tAhuja, R.K., Magnanti, T.L., Orlin, J.B.: Network flows : theory, algorithms, and applications / Ravindra K. Ahuja, Thomas L. Magnanti, James B. Orlin. Prentice Hall, Englewood Cliffs, N.J. : (1993)\n[21]\tBraconi, V.M.: Heur\u00edsticas multifluxo para roteamento de produtos em redes du-tovi\u00e1rias. Master\u2019s thesis, Departamento de Inform\u00e1tica, PUC-Rio, Rio de Janeiro, RJ, Brasil (2002)\nEp\u00edlogo\nA defini\u00e7\u00e3o formal do problema de planejamento \u00e9 a mesma do PPAORO, removendo-se um subconjunto de restri\u00e7\u00e3es. Nos tanques, C3, C4 e C5 foram desconsideradas pois a simultaneidade de opera\u00e7\u00e3es ou a sequencia delas n\u00e3o \u00e9 importante quando n\u00e3o se detalha um dia. As restri\u00e7\u00f5es C7, C8, C9 e C10 foram consideradas pelos operadores no calculo das quantidades m\u00e9ximas que um orgao pode enviar de cada produto e durante um per\u00e9odo. No dutos, C13, mesmo n\u00e3ao sendo considerada, n\u00e3ao foi violada em nenhuma soluc\u00e7\u00e3ao devido a agrega\u00e7ca\u00e3o de planos de entrega. A restric\u00e7\u00e3ao C15 foi desconsiderada pela falta de dados, mas tamb\u00e9em poderia entrar nos calculos de quantidade de envio m\u00e9axima por per\u00edodo. Ja as restric\u00e3es de incompatibilidade para o sequenciamento nos dutos C14 na\u00e3o foram consideradas, pois na\u00e3o s\u00e3ao importantes e grande parte das incompatibilidades s\u00e3ao pr\u00e9e-resolvidas na cria\u00e7c\u00e3ao do conjunto de produtos e seleca\u00e3o das rotas permitidas.\nO modelo de fluxo em redes para o problema de planejamento \u00e9 constru\u00eddo sobre os tanques e, principalmente, sobre os pares de produtos e rotas pr\u00e9-definidos. Essa escolha permite uma modelagem compacta, onde n\u00e3ao sera\u00e3o criados movimentos desnecess\u00e9arios ou improv\u00e9aveis. A rede criada separa os no\u00e9s em camadas, representando a evolu\u00e7c\u00e3ao do tempo. Em cada per\u00e9odo, s\u00e3ao criados os no\u00e9s que representam a movimenta\u00e7c\u00e3ao nos tanques, o atendimento de demandas, o escoamento das produ\u00e7c\u00e3oes e as entradas e sa\u00e9das de uma base. O tra\u00e9fego de volumes pela rede possui uma representac\u00e7a\u00e3o especial, pois para implementar uma simulac\u00e7a\u00e3o do transporte de um volume por uma rota \u00e9e necessa\u00e9rio saber em qual per\u00edodo ele foi enviado. Isso faz com que a cada novo per\u00edodo, seja necess\u00e1ria uma rede a mais, do que no per\u00e9odo anterior, para representar o tr\u00e9afego por rotas.\nA estrutura de rede criada \u00e9e livre de ciclos, o que permite a simplifica\u00e7ca\u00e3o do algoritmo de decomposi\u00e7ca\u00e3o de fluxo em redes. Esse algoritmo extrai a partir do fluxo obtido, os planos de entrega que servir\u00e3o de entrada para a fase de agendamento. Um p\u00e9s-processamento sobre esse conjunto de planos foi realizado para reduzir o seu tamanho. A agrega\u00e7ca\u00e3o de planos \u00e9e u\u00e9til para facilitar o agendamento e atender requisitos de tamanho m\u00e9nimo de bateladas.\nUma outra motiva\u00e7ca\u00e3o do artigo \u00e9e a utiliza\u00e7c\u00e3ao do modelo para o planejamento ta\u00e9tico da movimenta\u00e7c\u00e3ao nos oleodutos . A escolha de um modelo de fluxo em redes, e que fosse poss\u00e9vel implementar atrav\u00e9es de uma programa\u00e7c\u00e3ao linear, foi feita principalmente para manter o tempo de execu\u00e7ca\u00e3o controla\u00e9vel. Os testes demonstraram que para a rede apresentada pela Petrobras \u00e9 poss\u00e9vel obter solu\u00e7\u00e3es em poucos minutos para horizontes de um mes. Isso permite a execu\u00e7ao de cen\u00e9rios condicionais para, por exemplo, verificar se \u00e9 poss\u00e9vel atender as demandas com uma nova proposta de produ\u00e7\u00e3o das refinarias.\nOs resultados, quando comparados a soluc\u00e7\u00e3oes manuais do planejamento t\u00e9atico, mostraram custos 25% menores para o atendimento dos mesmos n\u00e9veis de estoque. Isso demonstra que\na ferramenta desenvolvida pode ser \u00fatil, mesmo sem a execu\u00e7\u00e3o da fase de agendamento. Trabalhos futuros incluem a integra\u00e7\u00e3o dessa nova modelagem para o planejamento com o modelo de programa\u00e7\u00e3o por restric\u00e3es do agendamento. Como foi visto no cap\u00edtulo 6, o conjunto de planos gerado pela abordagem heur\u00edstica tem em torno de 900 planos de entrega para 10 dias de horizonte, enquanto na abordagem de fluxo em redes o mesmo n\u00famero de planos \u00e9 suficiente para 30 dias. Al\u00e9m disso, ao verificar a validade do estado da rede diariamente, entende-se que o conjunto de novos planos, gerados em novas ativa\u00e7co\u00e3es do algoritmo, ser\u00e9a mais facilmente sequenciado e escalonado.\nCap\u00edtulo 8\nConclus\u00f5es\nEsta disserta\u00e7ao trata o problema de distribui\u00e7ao de derivados de petr\u00f3leo e \u00e1lcoois em redes de duto. Tambem denominado PPAORO, o problema \u00e1 atualmente enfrentado pela Petrobras.\nO objetivo e definir movimentos de transporte de produtos entre \u00e1rgaos, de tal forma que as campanhas de produ\u00e7\u00e3o e os mercados locais, representados por valores estimados de demandas, sejam totalmente satisfeitos. Para tanto, um amplo conjunto de restri\u00e7\u00f5es operacionais sobre as movimentac\u00e7\u00e3oes em dutos e tanques deve ser respeitado , envolvendo sequenciamentos validos de produtos, capacidade de tanques e limites de envio simultaneo.\nAte ent\u00e3o, modelos para o PPAORO pressupunham fortes relaxacoes de seus principais requisitos, ou lidavam apenas com topologias de rede restritas, sendo assim, trat\u00e1aveis eficientemente com t\u00e1ecnicas de otimizac\u00e7\u00e3ao cl\u00e1assicas. Por outro lado, tais relaxa\u00e7c\u00e3oes deram origem a solu\u00e7co\u00e3es pouco aplica\u00e1veis para os cen\u00e1arios reais, pois descartavam restric\u00e7\u00e3oes fortes para os operadores de duto, tais como interface de produtos e n\u00e3ao-simultaneidade de opera\u00e7c\u00e3oes em tanques.\nO trabalho aqui desenvolvido prop\u00e3oe formula\u00e7c\u00e3oes capazes de representar a maior parte das restri\u00e7c\u00e3oes fundamentais do PPAORO, com potencial para serem utilizadas em instancias de tamanho real. Para tal, a modelagem \u00e9 dividida em duas fases, planejamento e agendamento.\nUma formula\u00e7\u00e3o em Programa\u00e7\u00e3o por Restri\u00e7\u00f5es para a fase de agendamento do PPAORO foi desenvolvida. Tal tecnica foi utilizada devido \u00e0 sua flexibilidade em modelar problemas de agendamento e por conta dos fortes mecanismos de propaga\u00e7c\u00e3ao existentes, os quais permitem encontrar solu\u00e7\u00e3es fact\u00edveis rapidamente.\nOs primeiros resultados utilizaram uma vers\u00e3ao heur\u00e1stica da fase de planejamento, resultando na publica\u00e7ao de um artigo cient\u00edfico no peri\u00e1dico internacional Constraints [27], um dos mais importantes da \u00e1rea de programa\u00e7\u00e3o por restri\u00e7\u00e3es.\nEm seguida, como uma evolu\u00e7ca\u00e3o do tratamento da fase de planejamento, um artigo foi\nsubmetido ao peri\u00f3dico internacional Computers &amp; Chemical Engineering apresentando uma modelagem usando fluxo em redes. O artigo formaliza o problema de planejamento e prop\u00f5e um modelo linear. Tal modelo foi capaz de gerar as entradas para a fase de agendamento, bem como solu\u00e7\u00f5es para o problema t\u00f3tico de planejamento como descrito no artigo.\nComo trabalhos futuros, um primeiro passo poderia ser a integrac\u00f5o dessa nova abordagem do planejamento com a fase de agendamento. Ap\u00f3s isso, poder-se-ia acrescentar novas restric\u00e7o\u00f5es a ambos os modelos, bem como realizar testes em diferentes topologias da propria Petrobras.\nRefer\u00eancias Bibliogr\u00e1ficas\n[1]\tRavindra K. Ahuja, Thomas L. Magnanti, e James B. Orlin. Network flows : theory, algorithms, and applications / Ravindra K. Ahuja, Thomas L. Magnanti, James B. Orlin. Prentice Hall, Englewood Cliffs, N.J. :, 1993.\n[2]\tVanessa Alves e Virg\u00edlio J.M.F. Filho. Pipeline scheduling of petroleum derivatives using genetic algorithm. IV Congresso Brasileiro de Pesquisa e Desenvolvimento em Petr\u00f3leo e Gas, Campinas, Brazil, 2007.\n[3]\tVanessa Renn\u00e1 Frota Moraes Alves. Programa\u00e7\u00e3o de transfer\u00eancia de derivados de petr\u00e1leo em rede dutoviaria usando algoritmo gen\u00e1tico. Disserta\u00e7\u00e3o de Mestrado, COPPE - Universidade Federal do Rio de Janeiro, Rio de Janeiro, RJ, Brasil, 2007.\n[4]\tR. Bart\u00e1k. Constraint programming: In pursuit of the holy grail. Week of Doctoral Students (WDS99), Part IV, MatFyzPress, Prague, p\u00e1ginas 555-564, June de 1999.\n[5]\tM.S. Bazaraa, J.J. Jarvis, e H.D. Sherali. Linear Programming and Network Flows. John Wiley and Sons, 1990.\n[6]\tViviane Monteiro Braconi. Heur\u00e1sticas multifluxo para roteamento de produtos em redes dutovi\u00e1arias. Disserta\u00e7ca\u00e3o de Mestrado, Departamento de Informa\u00e1tica, PUC-Rio, Rio de Janeiro, RJ, Brasil, 2002.\n[7]\tDiego C. Cafaro e Jaime Cerda\u00e1. Optimal scheduling of multiproduct pipeline systems using a non-discrete MILP formulation. Computers &amp; Chemical Engineering, 28(10):2053-2058, 2004.\n[8]\tE. Camponogara e P. S. Souza. A-Teams for oil transportation problem through pipelines. Information Systems Analysis and Synthesis, Orlando, United States, 1996.\n[9]\tEduardo Camponogara. A-Teams para um problema de transporte de derivados de petr\u00e1oleo. Dissertac\u00e7\u00e3ao de Mestrado, Instituto de Matem\u00e1atica, Estat\u00e1stica e Ci\u00eaencia da Computac\u00e3o, Universidade Estadual de Campinas, Campinas, Brazil, 1995.\n[10]\tAndr\u00e9 Augusto Cir\u00e9. Modelos computacionais para o escalonamento de tarefas em redes de dutos. Disserta\u00e7\u00e3o de Mestrado, Instituto de Computa\u00e7\u00e3o, Universidade Estadual de Campinas, Campinas, SP, Brasil, 2008.\n[11]\t5th International Planning Competition. http://zeus.ing.unibs.it/ipc-5/.\n[12]\tThomas H. Cormen, Charles E. Leiserson, e Ronald L. Rivest. Introduction to Algorithms. MIT Press, 2 edi\u00e7ao, 2001.\n[13]\tD. Scott Crane, Roger L. Wainwright, e Dale A. Schoenefeld. Scheduling of multiproduct fungible liquid pipelines using genetic algorithms. Proceedings of the 1999 ACM Symposium on Applied Computing, paginas 280-285, San Antonio, USA, 1999.\n[14]\tG. B. Dantzig. Linear Programming and Extensions. Princeton University Press, 1963.\n[15]\tJ.M. de la Cruz, B. Andr\u00e9s-Toro, A. Herr\u00e9n-Gonz\u00e9lez, E. Besada Porta, e P. Fernandez Blanco. Multiobjective optimization of the transport in oil pipelines networks. Proceedings of the IEEE Conference on Emerging Technologies and Factory Automation, volume 1, p\u00e1ginas 566-573, 2003.\n[16]\tJ.M. de la Cruz, A. Herran-Gonz\u00e1lez, J.L. Risco-Martin, e B. Andr\u00e9s-Toro. Hybrid heuristic and mathematical programming in oil pipelines networks: Use of immigrants. Journal of Zhejiang University SCIENCE, 6A(1):9-19, 2005.\n[17]\tErito Marques de Souza Filho, Vanessa Renno Frota Moraes, e Virgilio Jos\u00e9 Martins Ferreira Filho. Utiliza\u00e7c\u00e3ao de t\u00e9ecnicas de pesquisa operacional em problemas de distribui\u00e7ao dutovi\u00e9ria: Uma revis\u00e3o. XXXVIII Simp\u00f3sio Brasileiro de Pesquisa Operacional, p\u00e9ginas 1873-1880, Goiania, Brazil, 2006.\n[18]\tR. Dechter e D. Frost. Backtracking algorithms for constraint satisfaction problems; a survey. Relat\u00e9rio t\u00e9cnico, University of California at Irvine, 1999.\n[19]\tFrederico dos Santos Liporace. Planejadores para transporte em polidutos. Tese de Doutorado, Departamento de Inform\u00e9atica, PUC-Rio, Rio de Janeiro, RJ, Brasil, 2005.\n[20]\tErito M. Souza Filho, Virg\u00edlio J.M.F. Filho, e Leonardo S. de Lima. Variable neighborhood search (VNS) applied to pipeline distribution problem with capacity constraints. IV Congresso Brasileiro de Pesquisa e Desenvolvimento em Petr\u00f3leo e Gas, Campinas, Brazil, 2007.\n[21]\tI. Gent e B. Smith. Symmetry breaking during search in constraint programming. Proceedings of ECAI'2000, p\u00e1ginas 599-603, 2000.\n[22]\tD. E. Goldberg. Genetic Algorithms in Search, Optimization and Machine Learning. Addison-Wesley, 1989.\n[23]\tA. Herran, J.M. de la Cruz, e B. de Andres. A mathematical model for planning transportation of multiple petroleum products in a multi-pipeline system. Computers &amp; Chemical Engineering, 34(3):401 - 413, 2010.\n[24]\tJohn N. Hooker. Integrated Methods for Optimization (International Series in Operations Research &amp; Management Science). Springer-Verlag, Secaucus, USA, 2006.\n[25]\tILOG. ILOG Scheduler 6.2: User's Manual. ILOG, 2006.\n[26]\tR. Rejowski Jr. e Jos\u00e1 M. Pinto. An MILP formulation for the scheduling of multiproduct pipeline systems. Brazilian Journal of Chemical Engineering, 19(4):467-474,\n2002.\n[27]\tTony M. Lopes, Andre A. Cir\u00e1, Cid C. Souza, e Arnaldo V. Moura. Special issue on the 14th international conference on principles and practice of constraint programming. Constraints, 15(2), 2010.\n[28]\tM. M. Sasikumar, P. R. Prakash, S. M. Patil, e S. Ramani. Pipes: A heuristic search model for pipeline schedule generation. Knowledge-Based Systems, 10(3):169-175, 1997.\n[29]\tL. Magatao, L.V.R. Arruda, e F. Neves. A mixed integer programming approach for scheduling commodities in a pipeline. Computers &amp; Chemical Engineering, 28(1):171-185, 2004.\n[30]\tL. Magataao, L.V.R. Arruda, e F. Neves. Using CLP and MILP for scheduling commodities in a pipeline. Computer-Aided Chemical Engineering, 20B:1027-1032, 2005.\n[31]\tK. Marriot e P.J. Stuckey. Programming with Constraints: An Introduction. MIT Press, Cambridge, Massachusetts, 1\u201c edicao, 1998.\n[32]\tRodrigo M\u00e1as e Jos\u00e1e M. Pinto. A mixed-integer optimization strategy for oil supply in distribution complexes. Optimization and Engineering, 4(1):23-64, 2003.\n[33]\tR.L. Milid\u00edu e Frederico dos Santos Liporace. Planning of pipeline oil transportation with interface restrictions is a difficult problem. Relatorio T\u00e1cnico 56, Departamento de Informa\u00e1tica, PUC-Rio, Rio de Janeiro, RJ, Brasil, 2003.\n[34]\tR.L. Milid\u00edu, Frederico dos Santos Liporace, e Carlos Jos\u00e9 P. de Lucena. Pipesworld: Planning pipeline transportation of petroleum derivatives. Proceedings of ICAPS'03\n-\tWorkshop on the Competition: Impact, Organization, Evaluation, Benchmarks, Trento, Italy, 2003.\n[35]\tR.L. Milid\u00e9u, A.A. Pessoa, V. Braconi, E.S. Laber, e Rey P.A. Um algoritmo GRASP para o problema de transporte de derivados de petr\u00e9leo em oleodutos. Proceedings of the XXXIII Brazilan Symposium on Operations Research, p\u00e9ginas 237-246, 2001.\n[36]\tS.A. MirHassani e M. Ghorbanalizadeh. The multi-product pipeline scheduling system. Computers &amp; Mathematics with Applications, 56(4):891 - 897, 2008.\n[37]\tA.V. Moura, C.C. de Souza, A.A. Cire, e T.M.T. Lopes. Heuristics and constraint programming hybridizations for a real pipeline planning and scheduling problem. Proceedings of the 11th IEEE International Conference on Computational Science and Engineering - CSE'08, p\u00e9ginas 455-462, Julho de 2008.\n[38]\tA.V. Moura, C.C. de Souza, A.A. Cire, e T.M.T. Lopes. Planning and scheduling the operation of a very large oil pipeline network. Lecture Notes in Computer Science\n-\tProceedings of the 1fth International Conference on Principles and Practice of Constraint Programming, volume 5202, p\u00e9ginas 36-51, Setembro de 2008.\n[39]\tG. Ottonsson. Integration of Constraint Programming and Integer Programming for Combinatorial Optimization. Tese de Doutorado, Uppsala University, Information Technology, Computing Sceince Department, 200. Uppsala, 2000.\n[40]\tC.H. Papadimitriou e K. Steiglitz. Combinatorial Optimization: Algorithms and Complexity. Dover Publications, 1998.\n[41]\tGilles Pesant e Michel Gendreau. A view of local search in constraint programming. Principles and Practice of Constraint Programming, p\u00e9ginas 353-366, 1996. Dispon\u00e9vel em citeseer.ist.psu.edu/pesant96view.html.\n[42]\tPETROBRAS. Relat\u00e9orio anual de atividades, 2004.\n[43]\tPETROBRAS. RIMA - Relat\u00e9orio de Impacto Ambiental, Plano Diretor de Dutos de S\u00e3o Paulo PDD/SP, Setembro, 2007.\n[44]\tR. Rejowski e Jose M. Pinto. Efficient MILP formulations and valid cuts for multiproduct pipeline scheduling. Computers &amp; Chemical Engineering, 28(8):1511-1528,\n2004.\n[45]\tR. Rejowski e Jos\u00e9 M. Pinto. A novel continuous time representation for the scheduling of pipeline systems with pumping yield rate constraints. Computers &amp; Chemical Engineering, 32:1042-1066, 2008.\n[46]\tSusana Relvas, Ana Paula F. D. Barbosa-P\u00e9voa, Henrique A. Matos, Jo\u00e3o Fialho, e Antonio S. Pinheiro. Pipeline scheduling and distribution centre management - a real-world scenario at CLC. Proceedings of the 16th European Symposium on Computer Aided Process Engineering and 9th International Symposium on Process Systems Engineering, p\u00e9ginas 2135-2140, Garmisch-Partenkirchen, Germany, 2006.\n[47]\tSusana Relvas, Henrique A. Matos, Ana Paula F. D. Barbosa-Povoa, e Jo\u00e3o Fialho. Reactive scheduling framework for a multiproduct pipeline with inventory management. Industrial &amp; Engineering Chemistry Research, 46(17):5659-5672, 2007.\n[48]\tSusana Relvas, Henrique A. Matos, Ana Paula F. D. Barbosa-P\u00e9ovoa, Joa\u00e3o Fialho, e Ant\u00e9onio S. Pinheiro. Pipeline scheduling and inventory management of a multiproduct distribution oil system. Industrial &amp; Engineering Chemistry Research, 45(23):7841-7855, 2006.\n[49]\tM.G.C. Resende e C.C. Ribeiro. Greedy randomized adaptive search procedures. F. Glover e G. Kochenberger, editors, Handbook of Metaheuristics, p\u00e9ginas 219-249. Kluwer Academic Publishers, 2002.\n[50]\tAlvaro Garc\u00eda Sanchez e Miguel Ortega Mier. Programaci\u00e9n de oleoductos: pre-sentaci\u00e9n del problema y revisi\u00e9n de enfoques. Anales del IX Congreso de Ingenier\u00eda de Organizaci\u00f3n (CIO 2005), 2005.\n[51]\tR.A. Wilson. Transportation in america, eighteenth edition. Washington, D.C.: Eno Transportation Foundation, Inc., 2001.\n[52]\tL. A. Wolsey. Integer Programming. Wiley-Interscience, 1998."}]}}}