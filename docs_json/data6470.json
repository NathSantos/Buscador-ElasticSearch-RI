{"add": {"doc": {"field": [{"@name": "docid", "#text": "BR-TU.10522"}, {"@name": "filename", "#text": "15649_275.pdf"}, {"@name": "filetype", "#text": "PDF"}, {"@name": "text", "#text": "Prototipagem r\u00e1pida de ambientes ub\u00edquos\nJos\u00e9 Lu\u00eds Silva\t(Oscar R. Ribeiro\tJo\u00e3o M. Fernandes\nJos\u00e9 Creissac Campos\nDep. Informatica / CCTC, Universidade do Minho, Braga, Portugal\n{jlsilva, orribeiro, jmf, jose.campos}@di.uminho.pt\nMichael D. Harrison\nNewcastle University, United Kingdom\nmichael.harrison@ncl.ac.uk\nResumo\nA experi\u00eancia de utiliza\u00e7\u00e3o de ambiente ub\u00edquos \u00e9 um factor determinante no seu sucesso. As caracter\u00edsticas de tais sistemas devem ser exploradas o mais cedo poss\u00edvel para antecipar potenciais problemas de utilizacao por parte do utilizador e para reduzir custos de re-design. No entanto, o desenvolvimento antecipado de prototipos a serem avaliados no ambiente final pode ser disruptivo e tornar-se inaceitavel. O desenvolvimento de prot\u00f3tipos de ambientes ub\u00edquos pode ajudar, fornecendo indicacoes de como o utilizador ira reagir perante os ambientes. Este artigo descreve o APEX, uma plataforma de prototipagem rapida de ambientes ub\u00edquos que junta a CPN Tools com um servidor de aplicacoes 3D existente. Os prototipos desenvolvidos com o APEX permitem que os utilizadores naveguem num mundo virtual, podendo experimentar muitas das caracter\u00edsticas do design proposto. A arquitectura do APEX e a modelacao baseada em CPN sao descritas. Um exemplo ilustra a abordagem.\nPalavras-Chave\nComputacao ub\u00edqua, modelacao, ambientes virtuais\n1.\tIntrodu\u00e7\u00e3o\nA computa\u00e7\u00e3o ub\u00edqua impoe novos desafios de usabilidade para os designers e developers de sistemas interactivos. Dado que nestes sistemas os utilizadores estao imersos, o efeito que os sistemas tem sobre a experiencia de utiliza\u00e7ao de um dado espa\u00e7o torna-se um elemento importante que contribui para o sucesso do design. Um sistema bem sucedido deve, por exemplo, conseguir transformar um ambiente esteril num lugar no qual as pessoas estejam em harmonia com o ambiente e seus prop\u00f3sitos. Um exemplo de criacao de tal experiencia num ambiente ub\u00edquo pode ser o de efectuar um check-in num aeroporto e mover-se com o m\u00ednimo de atraso atraves das v\u00e1rias etapas da partida. Outro exemplo pode ser um ambiente que fornece informacao adaptada aos utilizadores de uma biblioteca, facilitando-lhes localizar a prateleira onde o livro desejado se encontra. A nocao de experiencia e dif\u00edcil de capturar como um requisito que pode ser demonstrado num sistema. Actualmente, nao existem tecnicas que possam ser utilizadas permitindo analisar especificares contra diferentes nocoes de experiencia (ver [Harrison 08] para uma discussao deste tema).\nEste artigo aborda a prototipagem de ambientes ub\u00edquos projectados para melhorar ambientes f\u00edsicos reais atraves da utilizacao de sensores, ecras publicos e dispositivos pes\nsoais. Um aspecto particularmente relevante destes sistemas e\u00ed a forma como os utilizadores interagem com o ambiente, quer atraves de interaccoes expl\u00edcitas com o sistema, quer de interaccoes impl\u00edcitas que surgem atraves de mudancas do contexto. Aqui o contexto pode incluir a posicao ou as diferentes etapas que tem de ser cumpridas pelo utilizador por forma a atingir um determinado objectivo (por exemplo: check-in, controlo do passaporte, digitalizacao do bilhete de embarque).\nO objectivo do trabalho e possibilitar a avaliacao de ambientes ub\u00edquos precocemente, antes mesmo da sua efectiva instalacao in situ. O artigo \u00e9 baseado no pressuposto que prototipos serao utilizados para explorar o impacto que o design de um dado ambiente ub\u00edquo tera nos utilizadores consoante eles se mexem, interagem e acedem a servicos dentro desse ambiente. Para evitar custos de desenvolvimento desnecessa\u00edrios, o design e\u00ed a explorado desde cedo atraves de prototipos baseados em modelos, recorrendo a ambientes virtuais. O artigo descreve um plataforma de prototipagem (APEX) que utiliza modelos de redes de Petri coloridas [Jensen 07] (CPN - Coloured Petri Nets). O APEX interliga um modelo CPN com um servidor de aplicacoes 3D (OpenSimulator1). A plataforma permite a prototipagem de ambientes ub\u00edquos, possibilitando que os\n1http://opensimulator.org (acedido em: 14 de Junho de 2010)\n121\nutilizadores naveguem na simula\u00e7\u00e3o do ambiente virtual atrav\u00e9s do controlo (actualmente atraves do rato e do teclado) de um avatar que o representa, tornando poss\u00edvel avaliar problemas de usabilidade, incluindo no\u00e7\u00f5es de experiencia de utilizacao.\nA estrutura do artigo e a seguinte. A seccao 2 apresenta trabalhos relacionados presentes na literatura. A seccao 3 descreve a arquitectura do APEX. A plataforma e ilustrada atrave\u00eds de uma biblioteca inteligente que detecta a presenca dos seus utilizadores e os guia ate as prateleiras onde se encontram os livros que estes pretendem requisitar. A seccao 4 descreve como o exemplo e modelado. A seccao 5 descreve a utilizacao da plataforma e a seccao 6 apresenta conclus\u00f5es e trabalho futuro.\n2.\tLiteratura relacionada\nApesar de avancos consider\u00e1veis no desenvolvimento de sistemas ub\u00edquos, continua a existir uma tendencia para que o seu desenvolvimento e avaliacao sejam feitos principalmente atraves de experimentacao, desenvolvendo prototipos de dispositivos a avaliar em sistemas parcialmente desenvolvidos (ver [Davies 05] para uma discussao deste tema). A questao de como avaliar os sistemas num contexto real permanece um topico em aberto [Abowd 05]. Outro importante aspecto de avaliacao e saber como explorar a experiencia criada por um dado sistema. Nesse campo, existe uma literatura substancial proveniente do campo do design (ver, por exemplo, [Buchenau 00]). Um exemplo de uma abordagem t\u00edpica no campo do design e desenvolver prototipos nao-funcionais que potenciais utilizadores podem transportar no contexto onde o sistema real ira ser utilizado. O objectivo e obter informacoes acerca do modo como o design proposto ira\u00ed ser experimentado.\nO APEX e projectado para satisfazer 3 requisitos. O primeiro e permitir o desenvolvimento r\u00e1pido de prototipos. Embora existam v\u00e1rias plataformas de computacao ub\u00edqua (e.g., [Braubach 02, Garlan 02, Harter 01]), o desenvolvimento de prototipos que permitam avaliar a reaccao dos utilizadores a ambientes ub\u00edquos e uma area ainda relativamente pouco explorada.\nO segundo requisito e a utilizacao de ambientes 3D para construir simulacoes que podem ser exploradas de forma real\u00edstica por utilizadores. Servidores de aplicacoes 3D, tais como o SecondLife\u21222 ou o OpenSimulator fornecem uma via de desenvolvimento ra\u00edpido de mundos virtuais. O OpenSimulator em particular tem a vantagem de disponibilizar o c\u00f3digo fonte, o que significa que pode ser programado permitindo uma maior configurabilidade e extensibilidade.\nO terceiro requisito e possuir uma abordagem para a modelacao de sistemas ub\u00edquos. As redes de Petri constituem uma linguagem de modelacao grafica expressiva e tem sido utilizada para descrever ambientes virtuais. Abordagens anteriores baseadas em redes de Petri incluem: Hybrid high level Nets (HyNets) [Massink99], Flow-nets [Smith 99], Interactive Cooperative Objects (ICO)\n[Navarre 05] e CPNs [Jensen 07].\nUm objectivo desta plataforma e\u00ed integrar a abordagem de modelacao com abordagens anal\u00edticas que permitam validar propriedades nos ambientes ub\u00edquos que sejam relevantes aquando da sua utilizacao. Neste contexto, a utilizacao de CPNs surgiu como escolha logica dado o bom suporte ao n\u00edvel de ferramentas de animacao e analise de modelos.\nEmbora possam ser encontradas na literatura varias abordagens a prototipagem de computacao ub\u00edqua, somente um numero limitado refere aspectos de interaccao do utilizador com o ambiente e da experiencia obtida pelo utilizador. Alguns sistemas (e.g. [Li 04]) recorrem as tecnicas de Wizard of Oz para evitar a instalacao de sensores no ambiente. Outros, tais como 3DSim [Shirehjini 05], UbiWorld [Disz 97] ou o trabalho de O\u2019Neill et al. [O\u2019Neill 09] tem visites similares a nossa.\nA abordagem de O\u2019Neill et al. e a que mais se aproxima, utilizando modelos e um motor de jogos 3D para a prototipagem de ambientes ub\u00edquos (3DSim e UbiWorld assemelham-se mais a frameworks de programacao). Acreditamos que o uso de servidores de aplicacoes 3D (OpenSimulator) tem algumas vantagens comparativamente com a utilizacao de um motor de jogos. Os servidores de aplicacoes 3D suportam a criacao de ambientes virtuais em tempo real utilizando ferramentas de construcao de objectos e sao facilmente extens\u00edveis atraves do carregamento de modulos. No caso dos motores de jogos, o ambiente deve ser previamente criado utilizando um editor de mapas. Utilizar um servidor de aplicacoes 3D significa que a abordagem e flex\u00edvel. Uma variedade de clientes, personalizaveis em apar\u00eancia, podem aceder o mundo virtual em simultaneo utilizando diferentes protocolos e o desenvolvimento dos ambientes pode ser efectuado atraves de linguagens de programacao variadas.\n3.\tArquitectura\nO APEX utiliza a CPN Tools3 para modelar o comportamento de ambientes virtuais. Esse comportamento e entao ligado ao servidor de aplicacoes 3D (OpenSimulator). Modelos CPN dos diferentes tipos de dispositivos presentes no ambiente (e.g. sensores, ecras, dispositivos pessoais) devem ser criados. O objectivo e\u00ed desenvolver um estilo generico de CPN relevante para a modelacao de ambiente virtuais, incluindo modelos que podem ser instanciados no espaco real no qual o sistema foi definido para operar.\nO OpenSimulator permite a criacao interactiva de ambientes virtuais suficientemente ricos permitindo aos utilizadores visualizar as caracter\u00edsticas dos sistemas reais que estes representam. Ambientes e dispositivos pre\u00ed-definidos podem ser utilizados nesse processo de criacao.\nUma vez o modelo CPN e o ambiente criados, um componente do APEX e responsavel por liga-los. Varios utilizadores podem estabelecer ligacoes a simulacao com diferentes pontos de vista no servidor OpenSimulator. Os\n122\nA visao global da arquitectura da plataforma e apresentada na figura 1. Esta \u00e9 composta por 3 partes:\n1.\tum componente comportamental responsavel por gerir o comportamento do prototipo, incluindo a descricao, analise e validacao do comportamento do ambiente virtual;\n2.\tum componente arquitectural responsavel por gerir a apar\u00eancia f\u00edsica do prot\u00f3tipo, incluindo a gestao da simulacao 3D e da construcao do ambiente virtual;\n3.\tum componente de comunicac\u00e3o/execuc\u00e3o responsavel pela troca de dados entre todos os componentes da plataforma.\n3.1.\tComponente comportamental\nEste componente utiliza a linguagem de modelacao CPN para descrever o comportamento do ambiente virtual em resposta a accoes do utilizador e a mudancas do contexto. Um modelo CPN generico base foi desenvolvido contendo:\n1.\tum modulo para inicializar a simulacao e para estabelecer a conexao entre o modelo CPN representado na CPN Tools e o OpenSimulator;\n2.\tum modulo que recebe dados do utilizador (por exemplo, identidade e posicao) a partir do OpenSimulator quando este se move, utilizando-os para actualizar tokens apropriados do modelo CPN;\n3.\tum modulo descrevendo o comportamento de cada um dos tipos de dispositivos do sistema.\nUm exemplo de um modelo CPN para o componente com-portamental e apresentado na seccao 4.\n3.2.\tComponente arquitectural\nEste componente utiliza o OpenSimulator para definir caracter\u00edsticas 3D da simulacao apresentada aos utilizadores e permite a navegacao destes na simulacao. As caracter\u00edsticas 3D da simulacao incluem a localizacao, o aspecto visual e a f\u00edsica de cada objecto no ambiente. Estas definicoes sao efectuadas utilizando uma ferramenta de visualizacao, e.g. o Hippo Viewer4 ou o Linden Lab\u2019s Second Life viewer5. Existem outros visualizadores compat\u00edveis dispon\u00edveis (ver http://opensimulator.org/wiki/Connecting). Actualmente alguns desses visualizadores permitem somente a exploracao do ambiente sem fornecer qualquer ferramenta de edicao.\nEste componente e\u00ed tambe\u00edm responsa\u00edvel por permitir a navegacao livre e a interaccao no ambiente. A interaccao\n4http://mjm-labs.com/viewer/ (acedido em: 14 Junho de 2010)\n5http://secondlife.com/support/downloads (acedido em: 14 Junho de 2010)\npode ser efectuada explicitamente pelos utilizadores utilizando dispositivos (virtuais) e implicitamente atraves de mudancas do contexto. A plataforma permite a conexao de varios utilizadores de, possivelmente, diferentes localizacoes ao mesmo ambiente virtual atraves da Web. Ambientes e objectos pr\u00e9-definidos podem ser guar-dados/carregados utilizando ficheiros OAR (Opensim ARchive files). Todas as entidades (objectos, terrenos, texturas, etc.) sao codificadas nesses ficheiros no formato utilizado pelo OpenSimulator para guardar dados em ficheiros.\n3.3.\tComponente de comunica\u00e7\u00e3o/execu\u00e7\u00e3o\nEste componente e uma DLL (dynamic-link library) responsavel pelo carregamento do ambiente ub\u00edquo e por utilizar os modelos CPN para o dirigir. A comunicacao \u00e9 baseada no Comms/CPN [Gallasch 01], uma biblioteca desenvolvida para conectar a CPN Tools com processos Java e C. Como os modulos para o OpenSimulator sao desenvolvidos em C#, um novo pacote de comunicacao C#/CPN teve de ser desenvolvido. Este pacote envia informacoes para a CPN Tools quando mudancas no ambiente ocorrem e e tambem responsavel por modificar o ambiente em resposta a dados enviados pela CPN Tools. Adicionalmente, este componente controla o carregamento/gravacao de ob-jectos e ambientes no OpenSimulator.\n4.\tExemplo: modela\u00e7\u00e3o com CPNs\nO exemplo utilizado para ilustrar o sistema e uma biblioteca inteligente. Todos os livros sao identificados com etiquetas RFID e sao dispostos em prateleiras que tem LEDs associadas. Sao utilizados ecras para fornecer informacao aos utilizadores da biblioteca. Um utilizador registado pode entrar/sair da biblioteca atrave\u00eds das portas.\nQuando um utilizador registado chega a porta de entrada, esta abre e o ecra associado apresenta os livros que foram previamente requisitados por ele (e.g. atraves da pagina Web da biblioteca). De seguida o sistema guia, com informacao em ecras presentes na biblioteca, o utilizador ate\u00ed aos livros requisitados atrave\u00eds do uso de sensores que reconhecem a posicao do utilizador em tempo real. Assim que os utilizadores se aproximam da localizacao dos referidos livros (distancia configuravel no modelo CPN), uma das luzes com uma cor espec\u00edfica liga-se. Uma vez que v\u00e1rios utilizadores podem estar a procura de livros em localizacoes proximas, este metodo facilita a distincao dos diferentes pedidos, dado que cada utilizador utilizara\u00ed uma cor diferente, previamente indicada quando este chega a biblioteca. Quando o utilizador se dirigir para a porta de sa\u00edda, uma lista personalizada dos livros requisitados sera apresentada no ecra perto da porta e esta sera aberta caso o utilizador possa requisitar os livros. A sa\u00edda do utilizador, os RFIDs dos livros sao detectados e consequentemente requisitados automaticamente.\n4.1.\tInicializando a simulacao\n123\nFigura 1. Arquitectura da plataforma APEX\na configuracao inicial da simulacao. Neste caso a configuracao inclu\u00ed 3 lugares: \u201cusers\u201d, \u201cgates\u201d e \u201cbookshelves\u201d. As Etiquetas de fus\u00e3o (e.g., etiqueta books no lugar bookshelves) permitem que instancias desses lugares aparecam em outras partes do modelo CPN. Esses lugares sao chamados fusion places. A transicao \u201cinitialise simulation\u201d cria uma nova conexao e utiliza dois lugares para controlar a execucao do modelo CPN: \u201cinit\u201d para limitar a execucao da transicao a uma ocorrencia e \u201crun\u201d para informar os outros modulos CPN que a simulacao esta em execucao.\n4.2.\tLeitura das posicoes do utilizador\nA figura 3 apresenta o modulo CPN responsavel por colectar os dados dos utilizadores. A transicao \u201cread user id\u201d le o identificador de um utilizador. Um token com o identificador do utilizador associado e introduzido no lugar \u201cread user ids\u201d. Este e utilizado para ler a nova posicao do utilizador atraves da transicao \u201cread and update user position\u201d que tambem actualiza o token do respectivo utilizador. A expressao \u201cisThisUser(u,uId) \u201d na guarda desta transicao garante que o token do utilizador que e actualizado corresponde ao identificador que foi previamente lido. Neste modelo, o numero de utilizadores permanece constante durante cada sessao de uma simulacao, i.e. os utilizadores que se podem conectar a simulacao em tempo de execucao devem estar previamente inseridos no modelo (variavel \u201cinitial-USERS\u201d).\nOs modulos CPN leitores de posicoes dos utilizadores provenientes da simulacao e os que descrevem o comportamento dos dispositivos executam concorrentemente. A precedencia das transicoes dos dispositivos sobre a aquisicao de dados e garantida atraves da guarda \u201cnot (hadASignificantMovement(u)) \u201d sobre a transicao \u201cread and update user position\u201d. Um movimento de um utilizador e considerado significativo (para um dispositivo) quando a nova posicao esta \u201cpr\u00f3xima\u201d do dispositivo. Fica desta forma garantido que nao ocorrem comportamentos indevidos devido a leituras antecipadas.\n4.3.\tModelacao dos dispositivos do sistema\nCada tipo de objecto din\u00fcmico (dispositivo) presente no ambiente ub\u00edquo simulado precisa de um correspondente\nmodulo CPN que descreva o seu comportamento. Os fusion places sao a base do processo de criacao desses modulos. Para criar os modelos desses modulos os fusion places necessarios provenientes do modelo da figura 2 devem ser clonados nesses modelos. Neste exemplo os lugares \u201cusers\u201d, \u201cgates\u201d e \u201cbookshelves\u201d contem os tokens relativos aos objectos din\u00e2micos presentes. Estes tokens sao utilizados para modelar o comportamento do sistema. Isto e efectuado atraves da combinacao de fusion places, lugares normais, transicoes, funcoes (descritas na linguagem CPN ML associada a CPN Tools) e condicoes. As transicoes tem um papel importante nesse processo ja que sao elas que estabelecem a conexao entre os modelos CPN e o simulador, atraves da utilizacao de funcoes CPN ML. As funcoes tambem sao utilizadas para descrever algum comportamento que nao seja expressado estruturalmente pela rede de Petri. Um exemplo do modelo de um desses dispositivos \u00e9 o modelo da porta de entrada apresentado na figura 4.\nA porta de entrada e equipada com um sensor que reconhece quando um utilizador se aproxima para entrar na biblioteca. A transicao \u201cshow info and open gate\u201d representa a accao da porta de entrada. Esta mostra os livros requisitados no ecra e abre a porta de entrada. Estas accoes ocorrem quando o sensor da porta detecta a chegada de um utilizador (modelado com a condicao \u201cisArrivingToGateArea(u,g) \u201d). Quando a porta esta aberta e outro utilizador registado entra na zona da porta, a transicao \u201cadd a user\u201d e executada inclu\u00eddo o utilizador no conjunto de utilizadores perto da referida porta.\nQuando a transicao \u201cshow default and close gate\u201d e executada, informacao por omissao e mostrada no ecra e a porta e fechada. Para que isto aconteca um utilizador tem de se afastar da porta e mais nenhum utilizador pode estar perto dela. No caso de outros utilizadores estarem perto da porta, a transicao \u201cremove a user and update info\u201d remove o referido utilizador do conjunto de utilizadores que estao perto da porta. Caso existisse informacao para esse utilizador no ecra, essa \u00e9 trocada por informacao relevante para outro utilizador que ainda esteja perto da porta.\n124\nFigura 2. M\u00f3dulo CPN para inicializar a simula\u00e7\u00e3o da biblioteca.\nUNIT\n1'()\n<-\n\n[idRead = \"\"]\u00b0/o()\n\u25c4\n()\n>\nread user id\nUNIT\noutput(idRead);\naction\n( if (ConnCanReceive()) then receiveString() else \"\" );\n[idRead<>\"\"]%idRead\n\u25bc\nuId\n\u25bc\nread\nuser ids\n()\nUSERID\n[isThisUser(u,uId) andalso not (hadASignificantMovement(u))]\nsers\nA\nu\n>\nread and update user position\nUSER\nupdateUserPosition(u,p)\n\noutput(p);\naction\n( {x=receiveInteger(),\ny= receiveInteger()});\nFigura 3. M\u00f3dulo CPN para aquisi\u00e7\u00e7\u00e3o de dados dos utilizadores.\nPor exemplo, a propriedade de acessibilidade, i.e. se todos os lugares sao acess\u00edveis ou se um dado lugar e acess\u00edvel a partir de outro lugar numa dada situacao, sao exemplos de propriedades que podem ser facilmente validadas atraves da utilizacao de funcoes fornecidas pela State Space tool (c.f. AllReachable(), Reachable(node,node)).\n5.\tUtilizac\u00e7t\u00e3o\nComo foi referido na seccao 1, o objectivo do APEX e suportar o design e analise de sistemas ub\u00edquos. A pessoa responsavel pelo desenvolvimento do prot\u00f3tipo cria modelos CPN, tal como ilustrado na seccao 4. Dependendo da necessidade de novos tipos de dispositivos, podera\u00ed ter que desenvolver novos modelos ou apenas reutilizar modelos existentes.\nCada dispositivo e cada utilizador e\u00ed representado no modelo CPN por um token inserido no respectivo lugar etiquetado como lugar de fus\u00e3o (e.g. veja o lugar users na figura 4). Cada um desses tokens tem um identificador que e comum aos identificadores dos objectos presentes na simulacao. Estes dados sao usados pelas funcoes CPN ML conjuntamente com instrucoes (e.g. open, close) para indicar mudancas que devem ser reflectidas no OpenSimulator. Estas indicacoes sao responsaveis por reflectir mudancas nos objectos do ambiente de acordo com o estado do modelo CPN. Como exemplo, a figura 5 mostra um pedaco de codigo que procura objectos que devem ser modificados, de acordo com instrucoes recebidas do modelo CPN, e efectua as respectivas alteracoes. Nesse pedaco de codigo, a posicao da porta e alterada de acordo com as accoes open\n125\ninput (g); action\n( sendCloseGate(g) );\nFigura 4. Modulo CPN para o dispositivo porta de entrada.\ne close que s\u00e3o recebidas.\nUma vez o servidor OpenSimulator e a CPN Tools instalados e configurados, o componente de comunicac\u00e3o/execuc\u00e3o e o modelo CPN carregados, passa a ser poss\u00edvel a exploracao do mundo virtual.\nExistem dois modos poss\u00edveis de utilizacao do APEX. O modo de desenvolvimento e o modo de utilizador. No primeiro modo, o developer tem de alterar/estender o modelo CPN base de modo a reflectir o comportamento de novos dispositivos presentes no ambiente. No caso da definicao de novos dispositivos, pequenas modificacoes tem tambem de ser efectuadas no modulo de comunicacao/execucao (modulo C#) de modo a que este saiba como reflectir no novo objecto do ambiente as instrucoes do modelo CPN. No modo de utilizador, este somente tem de descarregar um visualizador e configura\u00ed-lo de modo a poder aceder atraves da Web ao ambiente simulado. O acesso ao servidor e efectuado atraves da utilizacao de uma conta de utilizador criada para o efeito. Nesse modo sao utilizados modelos CPN e ambientes virtuais ja\u00ed desenvolvidos sendo que o utilizador experimenta o sistema atraves de uma simples conexao ao servidor.\nPara alem disso, a criacao, remocao e modificacao de objectos pode ser efectuada atraves da ferramenta de\nvisualiza\u00e7\u00e3o (ver figura 6) gritando (forma de interac\u00e7\u00e3o do avatar com o mundo disponibilizada pelo visualizador) os seguintes comandos:\n\u2022\tload-oar ficheiro - responsavel por carregar um ambi-ente/objecto a partir de um ficheiro;\n\u2022\tsave-oar ficheiro - responsavel por guardar um ambi-ente/objecto num ficheiro;\n\u2022\tclear - remove todos os objectos presentes no ambiente, ficando somente os utilizadores e o terreno.\n6.\tConclus\u00f5es e trabalho futuro\nA experiencia dos utilizadores em ambientes ub\u00edquos e um factor determinante no seu sucesso. Possibilitar a exploracao precoce das caracter\u00edsticas de tais sistemas ira ajudar a antecipar potenciais problemas de utilizacao e reduzir o custo de re-design. No entanto, o desenvolvimento de prototipos no ambiente f\u00edsico de destino e na maior parte dos casos inviavel. Isto acontece devido aos custos de desenvolvimento de tais prot\u00f3tipos e por poder levar a uma ruptura do ambiente a que o sistema em desenvolvimento se destina. Alternativas devem ser exploradas, fornecendo um adequado grau de experiencia no uso de sistemas ub\u00edquos, mas evitando os custos da implementacao real.\n126\nFigura 5. C\u00f3digo relativo ao comportamento dos objectos do OpenSimulator\nFigura 6. Interface do visualisador\nEste artigo apresenta uma proposta para tais alternativas. Uma plataforma de prototipagem baseada em simula\u00e7ao para sistemas de computa\u00e7ao ub\u00edquos. Esta plataforma fornece, juntamente, a expressividade das redes de Petri, com a possibilidade de explora\u00e7ao de uma simula\u00e7ao virtual 3D do sistema modelado. O desenvolvimento de modelos e ambientes 3D e acelerado atraves da utiliza\u00e7ao do modelo CPN base e de ambientes pr\u00e9-definidos. Isto permite que potenciais utilizadores possam explorar a simula\u00e7ao do sistema antes da sua implementa\u00e7ao, sendo poss\u00edvel ter uma abordagem de prototipagem com um baixo custo.\nDesenvolvimentos futuros da plataforma envolvem a sua avalia\u00e7ao com os utilizadores e developers. A avalia\u00e7ao dos utilizadores refere-se a fidelidade dos resultados, i.e. se os ambientes prototipados podem ser usados efi\u00e7az-mente permitindo aos utilizadores uma experiencia suficientemente rica do design. A avalia\u00e7ao dos developers\nfo\u00e7a-se na agilidade da abordagem, na fa\u00e7ilidade \u00e7om que os prot\u00f3tipos podem ser desenvolvidos de uma forma precisa para ambientes ub\u00edquos.\nTrabalhos futuros no desenvolvimento da plataforma referem-se a questoes tecnicas que visam melhorar o suporte a utilizadores e developers. Estes incluem:\n\u2022\tA possibilidade de adicionar novos utilizadores a simula\u00e7ao em tempo de execu\u00e7ao, sem que estes tenham que estar previamente inseridos no modelo;\n\u2022\tReduzir a quantidade de informa\u00e7ao trocada entre a CPN Tools e APEX para a m\u00ednima poss\u00edvel - isto e relevante para prever que a CPN Tools execute alem dos recursos;\n\u2022\tConectar a simula\u00e7ao a dispositivos moveis, tais como PDAs, via bluetooth - isto ira\u00ed permitir uma ex-\n127\nperiencia de utilizacao mais realista e imersiva.\nAgradecimentos\nEste trabalho e suportado pela Funda\u00e7\u00e3o para a Ci\u00eancia e Tecnologia (FCT, Portugal) atrav\u00e9s da bolsa de doutoramento SFRH/BD/41179/2007.\nE. Law, E. Hvannberg, e G. Cockton, editores, Maturing Usability: Quality in Software, Interaction and Value, Human Computer Interaction Series, paginas 56-74. Springer-Verlag, 2008.\nRefer\u00eancias\n[Abowd 05] G.D. Abowd, G.R. Hayes, G. Iachello,\nJ.\tA. Kientz, S.N. Patel, M.M. Stevens, e\nK.\tN. Truong. Prototypes and paratypes: designing mobile and ubiquitous computing applications. IEEE Pervasive Computing, 4(4):67-73, 2005.\n[Braubach 02] L. Braubach, A. Pokahr, D. Moldt, A. Bar-telt, e W. Lamersdorf. Tool-supported interpreter-based user interface architecture for ubiquitous computing. Em Interactive Systems, volume 2545 de Lecture Notes in Computer Science, paginas 89103. Springer-Verlag, 2002.\n[Buchenau 00] M. Buchenau e J.F. Suri. Experience prototyping. Em Proceedings Designing Interactive Systems (DIS\u201900), paginas 424433. ACM Press, 2000.\n[Davies 05] N. Davies, J. Landay, S. Hudson, e A. Schmidt. Rapid prototyping for ubiquitous computing \u2014 guest editors\u2019 introduction. IEEE Pervasive Computing, 4(4):15-17, 2005.\n[Disz 97] T.E. Disz, M.E. Papka, e R. Stevens. UbiWorld: an environment integrating virtual reality, supercomputing, and design. Em Proceedings of the Heterogeneous Computing Workshop, paginas 46-59, April 1997.\n[Gallasch 01]\nG. Gallasch e L.M. Kristensen. Comms/CPN: A communication infrastructure for external communication with design/CPN. Em K. Jensen, editor, 3rd Workshop and Tutorial on Practical Use of Coloured Petri Nets and the CPN Tools (CPN'01), paginas 75-90. DAIMI PB-554, Aarhus University, 2001.\n[Harter 01]\n[Jensen 07]\n[Li 04]\n[Massink 99]\n[Navarre 05]\n[O\u2019Neill 09]\n[Garlan 02]\nD. Garlan, D.P. Siewiorek, A Smaila-gic, e P Steenkiste. Project Aura: toward distraction-free pervasive computing. IEEE Pervasive Computing, paginas 22-31, April-June 2002.\n[Harrison 08] M.D. Harrison, J.C. Campos, G. Doherty, e K. Loer. Connecting rigorous system analysis to experience centred design. Em\n128\nA. Harter, A. Hopper, P. Steggles, A. Ward, e P. Webster. The anatomy of a context-aware application. Wireless Networks, 1:1-16, 2001.\nK. Jensen, L.M. Kristensen, e L. Wells. Coloured petri nets and CPN tools for modelling and validation of concurrent systems. International Journal on Software Tools for Technology Transfer (STTT), 9(3-4):213-254, 2007.\nY. Li, J.I. Hong, e J.A. Landay. Topiary: a tool for prototyping location-enhanced applications. Em UIST '04: Proceedings of the 17th annual ACM symposium on User interface software and technology, paginas 217-226. ACM, 2004.\nM. Massink, D.J. Duke, e S.P. Smith. Towards hybrid interface specification for virtual environments. Em D.J. Duke e\nA. Puerta, editores, Design, Specification and Verification of Interactive Systems '99, paginas 30-51. Springer-Verlag, 1999.\nD. Navarre, P. Palanque, R. Bastide, A. Schyn, M. Winckler, L. Nedel, e C. Freitas. A formal description of multimodal interaction techniques for immersive virtual reality applications. Em INTERACT 2005, volume 3585 de Lecture Notes in Computer Science, paginas 170183. Springer-Verlag, 2005.\nE. O\u2019Neill, D. Lewis, e O. Conlan. A simulation-based approach to highly iterative prototyping of ubiquitous computing systems. Em 2nd International Conference on Simulation Tools and Techniques, paginas 1-10. ICST, 2009.\n[Shirehjini 05] Ali A. Nazari Shirehjini e Felix Klar.\n3DSim: rapid prototyping ambient intelligence. Em Proceedings of the 2005 joint conference on Smart objects and ambient intelligence: innovative context-aware services: usages and technologies, 2005."}]}}}